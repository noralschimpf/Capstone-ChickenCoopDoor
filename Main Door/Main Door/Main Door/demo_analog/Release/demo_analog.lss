
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00002dd8  00002e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  008001d8  008001d8  00002f44  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d3d8  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000236d  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ca4  00000000  00000000  00012f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018b8  00000000  00000000  00016bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f94  00000000  00000000  0001847c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009208  00000000  00000000  0001b410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00024618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_1>
       8:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_2>
       c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_3>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_5>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__vector_24>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	1e 06       	cpc	r1, r30
      c4:	c8 0f       	add	r28, r24

000000c6 <__ctors_end>:
      c6:	2e 06       	cpc	r2, r30

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 ed       	ldi	r30, 0xD8	; 216
      dc:	fd e2       	ldi	r31, 0x2D	; 45
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a8 3d       	cpi	r26, 0xD8	; 216
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	a8 ed       	ldi	r26, 0xD8	; 216
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	aa 3d       	cpi	r26, 0xDA	; 218
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 37 06 	call	0xc6e	; 0xc6e <main>
     114:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN7Display8print2lnE6StringS0_>:
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
     12a:	7b 01       	movw	r14, r22
     12c:	8a 01       	movw	r16, r20
     12e:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN21Adafruit_RGBLCDShield5clearEv>
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	ce 01       	movw	r24, r28
     138:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     13c:	b7 01       	movw	r22, r14
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN5Print5printERK6String>
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	ce 01       	movw	r24, r28
     14a:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     14e:	b8 01       	movw	r22, r16
     150:	ce 01       	movw	r24, r28
     152:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN5Print5printERK6String>
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000016c <_ZN7Display11refreshLineEv>:
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	2c 97       	sbiw	r28, 0x0c	; 12
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	8c 01       	movw	r16, r24
     186:	64 e4       	ldi	r22, 0x44	; 68
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	ce 01       	movw	r24, r28
     18c:	07 96       	adiw	r24, 0x07	; 7
     18e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     192:	f8 01       	movw	r30, r16
     194:	82 a5       	ldd	r24, Z+42	; 0x2a
     196:	93 a5       	ldd	r25, Z+43	; 0x2b
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	19 f0       	breq	.+6      	; 0x1a2 <_ZN7Display11refreshLineEv+0x36>
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	41 f0       	breq	.+16     	; 0x1b0 <_ZN7Display11refreshLineEv+0x44>
     1a0:	0e c0       	rjmp	.+28     	; 0x1be <_ZN7Display11refreshLineEv+0x52>
     1a2:	b8 01       	movw	r22, r16
     1a4:	60 5d       	subi	r22, 0xD0	; 208
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	ce 01       	movw	r24, r28
     1aa:	07 96       	adiw	r24, 0x07	; 7
     1ac:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN6StringaSERKS_>
     1b0:	b8 01       	movw	r22, r16
     1b2:	6a 5c       	subi	r22, 0xCA	; 202
     1b4:	7f 4f       	sbci	r23, 0xFF	; 255
     1b6:	ce 01       	movw	r24, r28
     1b8:	07 96       	adiw	r24, 0x07	; 7
     1ba:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN6StringaSERKS_>
     1be:	f8 01       	movw	r30, r16
     1c0:	46 a5       	ldd	r20, Z+46	; 0x2e
     1c2:	57 a5       	ldd	r21, Z+47	; 0x2f
     1c4:	84 a5       	ldd	r24, Z+44	; 0x2c
     1c6:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c8:	48 17       	cp	r20, r24
     1ca:	59 07       	cpc	r21, r25
     1cc:	14 f4       	brge	.+4      	; 0x1d2 <_ZN7Display11refreshLineEv+0x66>
     1ce:	15 a6       	std	Z+45, r1	; 0x2d
     1d0:	14 a6       	std	Z+44, r1	; 0x2c
     1d2:	f8 01       	movw	r30, r16
     1d4:	24 a5       	ldd	r18, Z+44	; 0x2c
     1d6:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d8:	42 17       	cp	r20, r18
     1da:	53 07       	cpc	r21, r19
     1dc:	41 f4       	brne	.+16     	; 0x1ee <_ZN7Display11refreshLineEv+0x82>
     1de:	2b 85       	ldd	r18, Y+11	; 0x0b
     1e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	44 0f       	add	r20, r20
     1e6:	55 1f       	adc	r21, r21
     1e8:	9a 95       	dec	r25
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_ZN7Display11refreshLineEv+0x78>
     1ec:	0a c0       	rjmp	.+20     	; 0x202 <_ZN7Display11refreshLineEv+0x96>
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZN7Display11refreshLineEv+0x88>
     1fc:	a9 01       	movw	r20, r18
     1fe:	40 51       	subi	r20, 0x10	; 16
     200:	51 09       	sbc	r21, r1
     202:	be 01       	movw	r22, r28
     204:	69 5f       	subi	r22, 0xF9	; 249
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	0e 94 45 09 	call	0x128a	; 0x128a <_ZNK6String9substringEjj>
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	ce 01       	movw	r24, r28
     218:	07 96       	adiw	r24, 0x07	; 7
     21a:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN6StringaSEOS_>
     21e:	ce 01       	movw	r24, r28
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     226:	f8 01       	movw	r30, r16
     228:	42 a5       	ldd	r20, Z+42	; 0x2a
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	c8 01       	movw	r24, r16
     22e:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     232:	be 01       	movw	r22, r28
     234:	69 5f       	subi	r22, 0xF9	; 249
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN5Print5printERK6String>
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	c8 01       	movw	r24, r16
     244:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     248:	f8 01       	movw	r30, r16
     24a:	04 a5       	ldd	r16, Z+44	; 0x2c
     24c:	15 a5       	ldd	r17, Z+45	; 0x2d
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	ce 01       	movw	r24, r28
     254:	07 96       	adiw	r24, 0x07	; 7
     256:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     25a:	c8 01       	movw	r24, r16
     25c:	2c 96       	adiw	r28, 0x0c	; 12
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     272:	4f 92       	push	r4
     274:	5f 92       	push	r5
     276:	6f 92       	push	r6
     278:	7f 92       	push	r7
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	2c 97       	sbiw	r28, 0x0c	; 12
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	4c 01       	movw	r8, r24
     2a4:	3b 01       	movw	r6, r22
     2a6:	2a 01       	movw	r4, r20
     2a8:	b2 2e       	mov	r11, r18
     2aa:	c0 96       	adiw	r24, 0x30	; 48
     2ac:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN6StringaSERKS_>
     2b0:	b2 01       	movw	r22, r4
     2b2:	c4 01       	movw	r24, r8
     2b4:	c6 96       	adiw	r24, 0x36	; 54
     2b6:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN6StringaSERKS_>
     2ba:	f4 01       	movw	r30, r8
     2bc:	f7 a6       	std	Z+47, r15	; 0x2f
     2be:	e6 a6       	std	Z+46, r14	; 0x2e
     2c0:	d3 a6       	std	Z+43, r13	; 0x2b
     2c2:	c2 a6       	std	Z+42, r12	; 0x2a
     2c4:	f8 01       	movw	r30, r16
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	f4 01       	movw	r30, r8
     2cc:	97 8f       	std	Z+31, r25	; 0x1f
     2ce:	86 8f       	std	Z+30, r24	; 0x1e
     2d0:	f8 01       	movw	r30, r16
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	93 81       	ldd	r25, Z+3	; 0x03
     2d6:	f4 01       	movw	r30, r8
     2d8:	91 a3       	std	Z+33, r25	; 0x21
     2da:	80 a3       	std	Z+32, r24	; 0x20
     2dc:	f8 01       	movw	r30, r16
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	95 81       	ldd	r25, Z+5	; 0x05
     2e2:	f4 01       	movw	r30, r8
     2e4:	93 a3       	std	Z+35, r25	; 0x23
     2e6:	82 a3       	std	Z+34, r24	; 0x22
     2e8:	f8 01       	movw	r30, r16
     2ea:	86 81       	ldd	r24, Z+6	; 0x06
     2ec:	97 81       	ldd	r25, Z+7	; 0x07
     2ee:	f4 01       	movw	r30, r8
     2f0:	95 a3       	std	Z+37, r25	; 0x25
     2f2:	84 a3       	std	Z+36, r24	; 0x24
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 85       	ldd	r24, Z+8	; 0x08
     2f8:	91 85       	ldd	r25, Z+9	; 0x09
     2fa:	f4 01       	movw	r30, r8
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	86 a3       	std	Z+38, r24	; 0x26
     300:	6b 2d       	mov	r22, r11
     302:	c4 01       	movw	r24, r8
     304:	0e 94 b8 09 	call	0x1370	; 0x1370 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     308:	f4 01       	movw	r30, r8
     30a:	a4 ae       	std	Z+60, r10	; 0x3c
     30c:	a1 10       	cpse	r10, r1
     30e:	1e c0       	rjmp	.+60     	; 0x34c <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     310:	15 a6       	std	Z+45, r1	; 0x2d
     312:	14 a6       	std	Z+44, r1	; 0x2c
     314:	b2 01       	movw	r22, r4
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN6StringC1ERKS_>
     31e:	b3 01       	movw	r22, r6
     320:	ce 01       	movw	r24, r28
     322:	07 96       	adiw	r24, 0x07	; 7
     324:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN6StringC1ERKS_>
     328:	ae 01       	movw	r20, r28
     32a:	4f 5f       	subi	r20, 0xFF	; 255
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	be 01       	movw	r22, r28
     330:	69 5f       	subi	r22, 0xF9	; 249
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	c4 01       	movw	r24, r8
     336:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7Display8print2lnE6StringS0_>
     33a:	ce 01       	movw	r24, r28
     33c:	07 96       	adiw	r24, 0x07	; 7
     33e:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     34a:	06 c0       	rjmp	.+12     	; 0x358 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     34c:	c4 01       	movw	r24, r8
     34e:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     352:	f4 01       	movw	r30, r8
     354:	95 a7       	std	Z+45, r25	; 0x2d
     356:	84 a7       	std	Z+44, r24	; 0x2c
     358:	2c 96       	adiw	r28, 0x0c	; 12
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	7f 90       	pop	r7
     37e:	6f 90       	pop	r6
     380:	5f 90       	pop	r5
     382:	4f 90       	pop	r4
     384:	08 95       	ret

00000386 <_ZN7Display13selectDisplayEibPcS0_>:
     386:	6f 92       	push	r6
     388:	7f 92       	push	r7
     38a:	8f 92       	push	r8
     38c:	9f 92       	push	r9
     38e:	af 92       	push	r10
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	e6 97       	sbiw	r28, 0x36	; 54
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	3c 01       	movw	r6, r24
     3b2:	44 23       	and	r20, r20
     3b4:	19 f0       	breq	.+6      	; 0x3bc <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3b6:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     3ba:	fa c0       	rjmp	.+500    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	4c 01       	movw	r8, r24
     3c2:	62 30       	cpi	r22, 0x02	; 2
     3c4:	71 05       	cpc	r23, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <_ZN7Display13selectDisplayEibPcS0_+0x44>
     3c8:	52 c0       	rjmp	.+164    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3ca:	dc f4       	brge	.+54     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3cc:	61 15       	cp	r22, r1
     3ce:	71 05       	cpc	r23, r1
     3d0:	39 f1       	breq	.+78     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3d2:	61 30       	cpi	r22, 0x01	; 1
     3d4:	71 05       	cpc	r23, r1
     3d6:	09 f0       	breq	.+2      	; 0x3da <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d8:	b2 c0       	rjmp	.+356    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     3da:	1a a2       	std	Y+34, r1	; 0x22
     3dc:	19 a2       	std	Y+33, r1	; 0x21
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	9c a3       	std	Y+36, r25	; 0x24
     3e4:	8b a3       	std	Y+35, r24	; 0x23
     3e6:	9e a3       	std	Y+38, r25	; 0x26
     3e8:	8d a3       	std	Y+37, r24	; 0x25
     3ea:	98 a7       	std	Y+40, r25	; 0x28
     3ec:	8f a3       	std	Y+39, r24	; 0x27
     3ee:	9a a7       	std	Y+42, r25	; 0x2a
     3f0:	89 a7       	std	Y+41, r24	; 0x29
     3f2:	6a e3       	ldi	r22, 0x3A	; 58
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	c4 01       	movw	r24, r8
     3f8:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     3fc:	65 e4       	ldi	r22, 0x45	; 69
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	49 c0       	rjmp	.+146    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     402:	63 30       	cpi	r22, 0x03	; 3
     404:	71 05       	cpc	r23, r1
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	55 c0       	rjmp	.+170    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     40a:	64 30       	cpi	r22, 0x04	; 4
     40c:	71 05       	cpc	r23, r1
     40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	96 c0       	rjmp	.+300    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     412:	1f 93       	push	r17
     414:	0f 93       	push	r16
     416:	3f 93       	push	r19
     418:	2f 93       	push	r18
     41a:	8c e7       	ldi	r24, 0x7C	; 124
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	50 c0       	rjmp	.+160    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	9a a3       	std	Y+34, r25	; 0x22
     426:	89 a3       	std	Y+33, r24	; 0x21
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9c a3       	std	Y+36, r25	; 0x24
     42e:	8b a3       	std	Y+35, r24	; 0x23
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9e a3       	std	Y+38, r25	; 0x26
     436:	8d a3       	std	Y+37, r24	; 0x25
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	98 a7       	std	Y+40, r25	; 0x28
     43e:	8f a3       	std	Y+39, r24	; 0x27
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9a a7       	std	Y+42, r25	; 0x2a
     446:	89 a7       	std	Y+41, r24	; 0x29
     448:	6f e0       	ldi	r22, 0x0F	; 15
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	c4 01       	movw	r24, r8
     44e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     452:	60 e3       	ldi	r22, 0x30	; 48
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	ce 01       	movw	r24, r28
     458:	8b 96       	adiw	r24, 0x2b	; 43
     45a:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     45e:	a1 2c       	mov	r10, r1
     460:	cc 24       	eor	r12, r12
     462:	c3 94       	inc	r12
     464:	d1 2c       	mov	r13, r1
     466:	52 e0       	ldi	r21, 0x02	; 2
     468:	e5 2e       	mov	r14, r21
     46a:	f1 2c       	mov	r15, r1
     46c:	8e c0       	rjmp	.+284    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     46e:	1a a2       	std	Y+34, r1	; 0x22
     470:	19 a2       	std	Y+33, r1	; 0x21
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	9c a3       	std	Y+36, r25	; 0x24
     478:	8b a3       	std	Y+35, r24	; 0x23
     47a:	9e a3       	std	Y+38, r25	; 0x26
     47c:	8d a3       	std	Y+37, r24	; 0x25
     47e:	98 a7       	std	Y+40, r25	; 0x28
     480:	8f a3       	std	Y+39, r24	; 0x27
     482:	9a a7       	std	Y+42, r25	; 0x2a
     484:	89 a7       	std	Y+41, r24	; 0x29
     486:	6a e3       	ldi	r22, 0x3A	; 58
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	c4 01       	movw	r24, r8
     48c:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     490:	62 e5       	ldi	r22, 0x52	; 82
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	ce 01       	movw	r24, r28
     496:	8b 96       	adiw	r24, 0x2b	; 43
     498:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     49c:	a1 2c       	mov	r10, r1
     49e:	cc 24       	eor	r12, r12
     4a0:	ca 94       	dec	r12
     4a2:	dc 2c       	mov	r13, r12
     4a4:	e1 2c       	mov	r14, r1
     4a6:	f1 2c       	mov	r15, r1
     4a8:	8e 01       	movw	r16, r28
     4aa:	0f 5d       	subi	r16, 0xDF	; 223
     4ac:	1f 4f       	sbci	r17, 0xFF	; 255
     4ae:	23 e0       	ldi	r18, 0x03	; 3
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	70 c0       	rjmp	.+224    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     4b4:	1f 93       	push	r17
     4b6:	0f 93       	push	r16
     4b8:	3f 93       	push	r19
     4ba:	2f 93       	push	r18
     4bc:	8f e5       	ldi	r24, 0x5F	; 95
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	9f 92       	push	r9
     4c6:	8f 92       	push	r8
     4c8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <sprintf>
     4cc:	1a a2       	std	Y+34, r1	; 0x22
     4ce:	19 a2       	std	Y+33, r1	; 0x21
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	9f ef       	ldi	r25, 0xFF	; 255
     4d4:	9c a3       	std	Y+36, r25	; 0x24
     4d6:	8b a3       	std	Y+35, r24	; 0x23
     4d8:	9e a3       	std	Y+38, r25	; 0x26
     4da:	8d a3       	std	Y+37, r24	; 0x25
     4dc:	98 a7       	std	Y+40, r25	; 0x28
     4de:	8f a3       	std	Y+39, r24	; 0x27
     4e0:	9a a7       	std	Y+42, r25	; 0x2a
     4e2:	89 a7       	std	Y+41, r24	; 0x29
     4e4:	6a e3       	ldi	r22, 0x3A	; 58
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	ce 01       	movw	r24, r28
     4ea:	8b 96       	adiw	r24, 0x2b	; 43
     4ec:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     4f0:	b4 01       	movw	r22, r8
     4f2:	ce 01       	movw	r24, r28
     4f4:	c1 96       	adiw	r24, 0x31	; 49
     4f6:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     4fa:	a1 2c       	mov	r10, r1
     4fc:	c1 2c       	mov	r12, r1
     4fe:	d1 2c       	mov	r13, r1
     500:	ee 24       	eor	r14, r14
     502:	e3 94       	inc	r14
     504:	f1 2c       	mov	r15, r1
     506:	8e 01       	movw	r16, r28
     508:	0f 5d       	subi	r16, 0xDF	; 223
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	22 e0       	ldi	r18, 0x02	; 2
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	ae 01       	movw	r20, r28
     512:	45 5d       	subi	r20, 0xD5	; 213
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	be 01       	movw	r22, r28
     518:	6f 5c       	subi	r22, 0xCF	; 207
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	c3 01       	movw	r24, r6
     51e:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     522:	ce 01       	movw	r24, r28
     524:	c1 96       	adiw	r24, 0x31	; 49
     526:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     52a:	ce 01       	movw	r24, r28
     52c:	8b 96       	adiw	r24, 0x2b	; 43
     52e:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	39 c0       	rjmp	.+114    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	9a a3       	std	Y+34, r25	; 0x22
     544:	89 a3       	std	Y+33, r24	; 0x21
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9c a3       	std	Y+36, r25	; 0x24
     54c:	8b a3       	std	Y+35, r24	; 0x23
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9e a3       	std	Y+38, r25	; 0x26
     554:	8d a3       	std	Y+37, r24	; 0x25
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	98 a7       	std	Y+40, r25	; 0x28
     55c:	8f a3       	std	Y+39, r24	; 0x27
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a a7       	std	Y+42, r25	; 0x2a
     564:	89 a7       	std	Y+41, r24	; 0x29
     566:	69 e9       	ldi	r22, 0x99	; 153
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	c4 01       	movw	r24, r8
     56c:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     570:	60 e3       	ldi	r22, 0x30	; 48
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	ce 01       	movw	r24, r28
     576:	8b 96       	adiw	r24, 0x2b	; 43
     578:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     57c:	a1 2c       	mov	r10, r1
     57e:	cc 24       	eor	r12, r12
     580:	c3 94       	inc	r12
     582:	d1 2c       	mov	r13, r1
     584:	ee 24       	eor	r14, r14
     586:	e3 94       	inc	r14
     588:	f1 2c       	mov	r15, r1
     58a:	8e 01       	movw	r16, r28
     58c:	0f 5d       	subi	r16, 0xDF	; 223
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	22 e0       	ldi	r18, 0x02	; 2
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a4 01       	movw	r20, r8
     596:	be 01       	movw	r22, r28
     598:	65 5d       	subi	r22, 0xD5	; 213
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	c3 01       	movw	r24, r6
     59e:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     5a2:	ce 01       	movw	r24, r28
     5a4:	8b 96       	adiw	r24, 0x2b	; 43
     5a6:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     5aa:	c4 01       	movw	r24, r8
     5ac:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     5b0:	e6 96       	adiw	r28, 0x36	; 54
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	7f 90       	pop	r7
     5d4:	6f 90       	pop	r6
     5d6:	08 95       	ret

000005d8 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
     5e2:	fb 01       	movw	r30, r22
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	9b 83       	std	Y+3, r25	; 0x03
     5ea:	8a 83       	std	Y+2, r24	; 0x02
     5ec:	8d eb       	ldi	r24, 0xBD	; 189
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	99 83       	std	Y+1, r25	; 0x01
     5f2:	88 83       	st	Y, r24
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	8c 83       	std	Y+4, r24	; 0x04
     5f8:	85 81       	ldd	r24, Z+5	; 0x05
     5fa:	8d 83       	std	Y+5, r24	; 0x05
     5fc:	86 81       	ldd	r24, Z+6	; 0x06
     5fe:	8e 83       	std	Y+6, r24	; 0x06
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	37 96       	adiw	r30, 0x07	; 7
     604:	de 01       	movw	r26, r28
     606:	17 96       	adiw	r26, 0x07	; 7
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	8a 95       	dec	r24
     60e:	e1 f7       	brne	.-8      	; 0x608 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	fb 01       	movw	r30, r22
     614:	3f 96       	adiw	r30, 0x0f	; 15
     616:	de 01       	movw	r26, r28
     618:	1f 96       	adiw	r26, 0x0f	; 15
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	8a 95       	dec	r24
     620:	e1 f7       	brne	.-8      	; 0x61a <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     622:	fb 01       	movw	r30, r22
     624:	84 89       	ldd	r24, Z+20	; 0x14
     626:	8c 8b       	std	Y+20, r24	; 0x14
     628:	85 89       	ldd	r24, Z+21	; 0x15
     62a:	8d 8b       	std	Y+21, r24	; 0x15
     62c:	86 89       	ldd	r24, Z+22	; 0x16
     62e:	8e 8b       	std	Y+22, r24	; 0x16
     630:	87 89       	ldd	r24, Z+23	; 0x17
     632:	8f 8b       	std	Y+23, r24	; 0x17
     634:	80 8d       	ldd	r24, Z+24	; 0x18
     636:	88 8f       	std	Y+24, r24	; 0x18
     638:	81 8d       	ldd	r24, Z+25	; 0x19
     63a:	89 8f       	std	Y+25, r24	; 0x19
     63c:	82 8d       	ldd	r24, Z+26	; 0x1a
     63e:	8a 8f       	std	Y+26, r24	; 0x1a
     640:	83 8d       	ldd	r24, Z+27	; 0x1b
     642:	8b 8f       	std	Y+27, r24	; 0x1b
     644:	64 e4       	ldi	r22, 0x44	; 68
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	ce 01       	movw	r24, r28
     64a:	c0 96       	adiw	r24, 0x30	; 48
     64c:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     650:	64 e4       	ldi	r22, 0x44	; 68
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	ce 01       	movw	r24, r28
     656:	c6 96       	adiw	r24, 0x36	; 54
     658:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	42 e0       	ldi	r20, 0x02	; 2
     660:	60 e1       	ldi	r22, 0x10	; 16
     662:	ce 01       	movw	r24, r28
     664:	0e 94 5f 0b 	call	0x16be	; 0x16be <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN21Adafruit_RGBLCDShield5clearEv>
     66e:	04 e4       	ldi	r16, 0x44	; 68
     670:	11 e0       	ldi	r17, 0x01	; 1
     672:	98 01       	movw	r18, r16
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	08 95       	ret

0000068a <_ZN7Display21UpdateMenuFromButtonsEm>:
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	6a 01       	movw	r12, r20
     69e:	7b 01       	movw	r14, r22
     6a0:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     6a4:	80 ff       	sbrs	r24, 0
     6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <_ZN7Display21UpdateMenuFromButtonsEm+0x2a>
     6a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     6aa:	7f 8d       	ldd	r23, Y+31	; 0x1f
     6ac:	6f 3f       	cpi	r22, 0xFF	; 255
     6ae:	2f ef       	ldi	r18, 0xFF	; 255
     6b0:	72 07       	cpc	r23, r18
     6b2:	01 f5       	brne	.+64     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6b4:	83 ff       	sbrs	r24, 3
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <_ZN7Display21UpdateMenuFromButtonsEm+0x3a>
     6b8:	68 a1       	ldd	r22, Y+32	; 0x20
     6ba:	79 a1       	ldd	r23, Y+33	; 0x21
     6bc:	6f 3f       	cpi	r22, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	79 07       	cpc	r23, r25
     6c2:	c1 f4       	brne	.+48     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6c4:	82 ff       	sbrs	r24, 2
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <_ZN7Display21UpdateMenuFromButtonsEm+0x4a>
     6c8:	6a a1       	ldd	r22, Y+34	; 0x22
     6ca:	7b a1       	ldd	r23, Y+35	; 0x23
     6cc:	6f 3f       	cpi	r22, 0xFF	; 255
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	72 07       	cpc	r23, r18
     6d2:	81 f4       	brne	.+32     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6d4:	84 ff       	sbrs	r24, 4
     6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <_ZN7Display21UpdateMenuFromButtonsEm+0x5a>
     6d8:	6c a1       	ldd	r22, Y+36	; 0x24
     6da:	7d a1       	ldd	r23, Y+37	; 0x25
     6dc:	6f 3f       	cpi	r22, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	79 07       	cpc	r23, r25
     6e2:	41 f4       	brne	.+16     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6e4:	81 ff       	sbrs	r24, 1
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     6e8:	6e a1       	ldd	r22, Y+38	; 0x26
     6ea:	7f a1       	ldd	r23, Y+39	; 0x27
     6ec:	6f 3f       	cpi	r22, 0xFF	; 255
     6ee:	2f ef       	ldi	r18, 0xFF	; 255
     6f0:	72 07       	cpc	r23, r18
     6f2:	41 f0       	breq	.+16     	; 0x704 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     6f4:	04 e4       	ldi	r16, 0x44	; 68
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	98 01       	movw	r18, r16
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     702:	10 c0       	rjmp	.+32     	; 0x724 <_ZN7Display21UpdateMenuFromButtonsEm+0x9a>
     704:	0e 94 ce 06 	call	0xd9c	; 0xd9c <millis>
     708:	28 ee       	ldi	r18, 0xE8	; 232
     70a:	c2 0e       	add	r12, r18
     70c:	23 e0       	ldi	r18, 0x03	; 3
     70e:	d2 1e       	adc	r13, r18
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
     714:	c6 16       	cp	r12, r22
     716:	d7 06       	cpc	r13, r23
     718:	e8 06       	cpc	r14, r24
     71a:	f9 06       	cpc	r15, r25
     71c:	28 f0       	brcs	.+10     	; 0x728 <_ZN7Display21UpdateMenuFromButtonsEm+0x9e>
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <_ZN7Display21UpdateMenuFromButtonsEm+0xa0>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <_ZN6Safety12disableMotorEbi.part.0>:
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	89 e0       	ldi	r24, 0x09	; 9
     746:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	8a e0       	ldi	r24, 0x0A	; 10
     74e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	89 e0       	ldi	r24, 0x09	; 9
     756:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	8a e0       	ldi	r24, 0x0A	; 10
     75e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     762:	be 01       	movw	r22, r28
     764:	dd 0f       	add	r29, r29
     766:	88 0b       	sbc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <delay>

00000772 <_ZN6SafetyC1Ev>:
     772:	08 95       	ret

00000774 <_ZN6Safety12deviceStatusEi>:
     774:	62 30       	cpi	r22, 0x02	; 2
     776:	71 05       	cpc	r23, r1
     778:	b1 f0       	breq	.+44     	; 0x7a6 <_ZN6Safety12deviceStatusEi+0x32>
     77a:	44 f4       	brge	.+16     	; 0x78c <_ZN6Safety12deviceStatusEi+0x18>
     77c:	61 15       	cp	r22, r1
     77e:	71 05       	cpc	r23, r1
     780:	81 f0       	breq	.+32     	; 0x7a2 <_ZN6Safety12deviceStatusEi+0x2e>
     782:	61 30       	cpi	r22, 0x01	; 1
     784:	71 05       	cpc	r23, r1
     786:	b1 f4       	brne	.+44     	; 0x7b4 <_ZN6Safety12deviceStatusEi+0x40>
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	12 c0       	rjmp	.+36     	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     78c:	64 30       	cpi	r22, 0x04	; 4
     78e:	71 05       	cpc	r23, r1
     790:	71 f0       	breq	.+28     	; 0x7ae <_ZN6Safety12deviceStatusEi+0x3a>
     792:	5c f0       	brlt	.+22     	; 0x7aa <_ZN6Safety12deviceStatusEi+0x36>
     794:	65 30       	cpi	r22, 0x05	; 5
     796:	71 05       	cpc	r23, r1
     798:	69 f4       	brne	.+26     	; 0x7b4 <_ZN6Safety12deviceStatusEi+0x40>
     79a:	fc 01       	movw	r30, r24
     79c:	82 85       	ldd	r24, Z+10	; 0x0a
     79e:	93 85       	ldd	r25, Z+11	; 0x0b
     7a0:	08 95       	ret
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7ae:	8d e0       	ldi	r24, 0x0D	; 13
     7b0:	0c 94 18 08 	jmp	0x1030	; 0x1030 <digitalRead>
     7b4:	08 95       	ret

000007b6 <_ZN6Safety12cntEventIncrEi>:
     7b6:	fc 01       	movw	r30, r24
     7b8:	61 15       	cp	r22, r1
     7ba:	71 05       	cpc	r23, r1
     7bc:	21 f0       	breq	.+8      	; 0x7c6 <_ZN6Safety12cntEventIncrEi+0x10>
     7be:	61 30       	cpi	r22, 0x01	; 1
     7c0:	71 05       	cpc	r23, r1
     7c2:	21 f0       	breq	.+8      	; 0x7cc <_ZN6Safety12cntEventIncrEi+0x16>
     7c4:	08 95       	ret
     7c6:	15 86       	std	Z+13, r1	; 0x0d
     7c8:	14 86       	std	Z+12, r1	; 0x0c
     7ca:	08 95       	ret
     7cc:	84 85       	ldd	r24, Z+12	; 0x0c
     7ce:	95 85       	ldd	r25, Z+13	; 0x0d
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	95 87       	std	Z+13, r25	; 0x0d
     7d4:	84 87       	std	Z+12, r24	; 0x0c
     7d6:	08 95       	ret

000007d8 <_ZN6Safety12inEventCountEv>:
     7d8:	fc 01       	movw	r30, r24
     7da:	84 85       	ldd	r24, Z+12	; 0x0c
     7dc:	95 85       	ldd	r25, Z+13	; 0x0d
     7de:	08 95       	ret

000007e0 <_ZN6Safety14emergencyStallEv>:
     7e0:	88 ee       	ldi	r24, 0xE8	; 232
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>

000007f0 <_ZN6Safety12disableMotorEbi>:
     7f0:	ca 01       	movw	r24, r20
     7f2:	61 11       	cpse	r22, r1
     7f4:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	8a e0       	ldi	r24, 0x0A	; 10
     7fc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	89 e0       	ldi	r24, 0x09	; 9
     804:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <pinMode>

00000808 <_ZN6Safety8setRelayEi>:
     808:	61 15       	cp	r22, r1
     80a:	71 05       	cpc	r23, r1
     80c:	71 f0       	breq	.+28     	; 0x82a <_ZN6Safety8setRelayEi+0x22>
     80e:	61 30       	cpi	r22, 0x01	; 1
     810:	71 05       	cpc	r23, r1
     812:	99 f0       	breq	.+38     	; 0x83a <_ZN6Safety8setRelayEi+0x32>
     814:	6f 3f       	cpi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	c1 f4       	brne	.+48     	; 0x84a <_ZN6Safety8setRelayEi+0x42>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	89 e0       	ldi	r24, 0x09	; 9
     81e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	89 e0       	ldi	r24, 0x09	; 9
     82e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	8a e0       	ldi	r24, 0x0A	; 10
     836:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	8a e0       	ldi	r24, 0x0A	; 10
     846:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <digitalWrite>
     84a:	08 95       	ret

0000084c <_ZN6Safety9setDeviceEii.part.1>:
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	8b 01       	movw	r16, r22
     858:	7b 87       	std	Y+11, r23	; 0x0b
     85a:	6a 87       	std	Y+10, r22	; 0x0a
     85c:	67 2b       	or	r22, r23
     85e:	29 f4       	brne	.+10     	; 0x86a <_ZN6Safety9setDeviceEii.part.1+0x1e>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>
     868:	05 c0       	rjmp	.+10     	; 0x874 <_ZN6Safety9setDeviceEii.part.1+0x28>
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN6Safety12disableMotorEbi>
     874:	b8 01       	movw	r22, r16
     876:	ce 01       	movw	r24, r28
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN6Safety8setRelayEi>

00000884 <_ZN6Safety9setDeviceEii>:
     884:	fc 01       	movw	r30, r24
     886:	62 30       	cpi	r22, 0x02	; 2
     888:	71 05       	cpc	r23, r1
     88a:	b1 f0       	breq	.+44     	; 0x8b8 <_ZN6Safety9setDeviceEii+0x34>
     88c:	3c f4       	brge	.+14     	; 0x89c <_ZN6Safety9setDeviceEii+0x18>
     88e:	61 15       	cp	r22, r1
     890:	71 05       	cpc	r23, r1
     892:	61 f0       	breq	.+24     	; 0x8ac <_ZN6Safety9setDeviceEii+0x28>
     894:	61 30       	cpi	r22, 0x01	; 1
     896:	71 05       	cpc	r23, r1
     898:	61 f0       	breq	.+24     	; 0x8b2 <_ZN6Safety9setDeviceEii+0x2e>
     89a:	08 95       	ret
     89c:	64 30       	cpi	r22, 0x04	; 4
     89e:	71 05       	cpc	r23, r1
     8a0:	89 f0       	breq	.+34     	; 0x8c4 <_ZN6Safety9setDeviceEii+0x40>
     8a2:	6c f0       	brlt	.+26     	; 0x8be <_ZN6Safety9setDeviceEii+0x3a>
     8a4:	65 30       	cpi	r22, 0x05	; 5
     8a6:	71 05       	cpc	r23, r1
     8a8:	81 f0       	breq	.+32     	; 0x8ca <_ZN6Safety9setDeviceEii+0x46>
     8aa:	08 95       	ret
     8ac:	53 83       	std	Z+3, r21	; 0x03
     8ae:	42 83       	std	Z+2, r20	; 0x02
     8b0:	08 95       	ret
     8b2:	55 83       	std	Z+5, r21	; 0x05
     8b4:	44 83       	std	Z+4, r20	; 0x04
     8b6:	08 95       	ret
     8b8:	51 83       	std	Z+1, r21	; 0x01
     8ba:	40 83       	st	Z, r20
     8bc:	08 95       	ret
     8be:	57 83       	std	Z+7, r21	; 0x07
     8c0:	46 83       	std	Z+6, r20	; 0x06
     8c2:	08 95       	ret
     8c4:	51 87       	std	Z+9, r21	; 0x09
     8c6:	40 87       	std	Z+8, r20	; 0x08
     8c8:	08 95       	ret
     8ca:	ba 01       	movw	r22, r20
     8cc:	0c 94 26 04 	jmp	0x84c	; 0x84c <_ZN6Safety9setDeviceEii.part.1>

000008d0 <_ZN6Safety13emergencyOpenEv>:
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN6Safety9setDeviceEii.part.1>
     8e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <millis>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
     8e8:	8c e0       	ldi	r24, 0x0C	; 12
     8ea:	0e 94 18 08 	call	0x1030	; 0x1030 <digitalRead>
     8ee:	89 2b       	or	r24, r25
     8f0:	39 f4       	brne	.+14     	; 0x900 <__stack+0x1>
     8f2:	62 e3       	ldi	r22, 0x32	; 50
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <delay>
     8fe:	f4 cf       	rjmp	.-24     	; 0x8e8 <_ZN6Safety13emergencyOpenEv+0x18>
     900:	0e 94 ce 06 	call	0xd9c	; 0xd9c <millis>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	8c 19       	sub	r24, r12
     90a:	9d 09       	sbc	r25, r13
     90c:	ae 09       	sbc	r26, r14
     90e:	bf 09       	sbc	r27, r15
     910:	88 38       	cpi	r24, 0x88	; 136
     912:	93 41       	sbci	r25, 0x13	; 19
     914:	a1 05       	cpc	r26, r1
     916:	b1 05       	cpc	r27, r1
     918:	60 f3       	brcs	.-40     	; 0x8f2 <_ZN6Safety13emergencyOpenEv+0x22>
     91a:	88 eb       	ldi	r24, 0xB8	; 184
     91c:	9b e0       	ldi	r25, 0x0B	; 11
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>

0000092a <setup>:
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	6c 97       	sbiw	r28, 0x1c	; 28
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	80 ee       	ldi	r24, 0xE0	; 224
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	fc 01       	movw	r30, r24
     948:	22 81       	ldd	r18, Z+2	; 0x02
     94a:	33 81       	ldd	r19, Z+3	; 0x03
     94c:	3c 83       	std	Y+4, r19	; 0x04
     94e:	2b 83       	std	Y+3, r18	; 0x03
     950:	2d eb       	ldi	r18, 0xBD	; 189
     952:	31 e0       	ldi	r19, 0x01	; 1
     954:	3a 83       	std	Y+2, r19	; 0x02
     956:	29 83       	std	Y+1, r18	; 0x01
     958:	24 81       	ldd	r18, Z+4	; 0x04
     95a:	2d 83       	std	Y+5, r18	; 0x05
     95c:	25 81       	ldd	r18, Z+5	; 0x05
     95e:	2e 83       	std	Y+6, r18	; 0x06
     960:	26 81       	ldd	r18, Z+6	; 0x06
     962:	2f 83       	std	Y+7, r18	; 0x07
     964:	28 e0       	ldi	r18, 0x08	; 8
     966:	e7 ee       	ldi	r30, 0xE7	; 231
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	de 01       	movw	r26, r28
     96c:	18 96       	adiw	r26, 0x08	; 8
     96e:	01 90       	ld	r0, Z+
     970:	0d 92       	st	X+, r0
     972:	2a 95       	dec	r18
     974:	e1 f7       	brne	.-8      	; 0x96e <setup+0x44>
     976:	25 e0       	ldi	r18, 0x05	; 5
     978:	ef ee       	ldi	r30, 0xEF	; 239
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	de 01       	movw	r26, r28
     97e:	50 96       	adiw	r26, 0x10	; 16
     980:	01 90       	ld	r0, Z+
     982:	0d 92       	st	X+, r0
     984:	2a 95       	dec	r18
     986:	e1 f7       	brne	.-8      	; 0x980 <setup+0x56>
     988:	fc 01       	movw	r30, r24
     98a:	24 89       	ldd	r18, Z+20	; 0x14
     98c:	2d 8b       	std	Y+21, r18	; 0x15
     98e:	25 89       	ldd	r18, Z+21	; 0x15
     990:	2e 8b       	std	Y+22, r18	; 0x16
     992:	26 89       	ldd	r18, Z+22	; 0x16
     994:	2f 8b       	std	Y+23, r18	; 0x17
     996:	27 89       	ldd	r18, Z+23	; 0x17
     998:	28 8f       	std	Y+24, r18	; 0x18
     99a:	20 8d       	ldd	r18, Z+24	; 0x18
     99c:	29 8f       	std	Y+25, r18	; 0x19
     99e:	21 8d       	ldd	r18, Z+25	; 0x19
     9a0:	2a 8f       	std	Y+26, r18	; 0x1a
     9a2:	22 8d       	ldd	r18, Z+26	; 0x1a
     9a4:	2b 8f       	std	Y+27, r18	; 0x1b
     9a6:	83 8d       	ldd	r24, Z+27	; 0x1b
     9a8:	8c 8f       	std	Y+28, r24	; 0x1c
     9aa:	8d e3       	ldi	r24, 0x3D	; 61
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <_Znwj>
     9b2:	8c 01       	movw	r16, r24
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5f       	subi	r22, 0xFF	; 255
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     9be:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <ptrdspMainDoor+0x1>
     9c2:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <ptrdspMainDoor>
     9c6:	8f e0       	ldi	r24, 0x0F	; 15
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 46 06 	call	0xc8c	; 0xc8c <_Znwj>
     9ce:	8c 01       	movw	r16, r24
     9d0:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN6SafetyC1Ev>
     9d4:	10 93 dd 01 	sts	0x01DD, r17	; 0x8001dd <ptrsftMainDoor+0x1>
     9d8:	00 93 dc 01 	sts	0x01DC, r16	; 0x8001dc <ptrsftMainDoor>
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	89 e0       	ldi	r24, 0x09	; 9
     9e8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pinMode>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 81 07 	call	0xf02	; 0xf02 <analogReference>
     9fa:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <isClosing>
     9fe:	e9 e6       	ldi	r30, 0x69	; 105
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8a 60       	ori	r24, 0x0A	; 10
     a06:	80 83       	st	Z, r24
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8d bb       	out	0x1d, r24	; 29
     a0c:	e8 e6       	ldi	r30, 0x68	; 104
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	85 60       	ori	r24, 0x05	; 5
     a14:	80 83       	st	Z, r24
     a16:	78 94       	sei
     a18:	0e 94 ce 06 	call	0xd9c	; 0xd9c <millis>
     a1c:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <__data_end>
     a20:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <__data_end+0x1>
     a24:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end+0x2>
     a28:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x3>
     a2c:	6c 96       	adiw	r28, 0x1c	; 28
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <loop>:
     a42:	40 91 d8 01 	lds	r20, 0x01D8	; 0x8001d8 <__data_end>
     a46:	50 91 d9 01 	lds	r21, 0x01D9	; 0x8001d9 <__data_end+0x1>
     a4a:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <__data_end+0x2>
     a4e:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <__data_end+0x3>
     a52:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <ptrdspMainDoor>
     a56:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <ptrdspMainDoor+0x1>
     a5a:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN7Display21UpdateMenuFromButtonsEm>
     a5e:	88 23       	and	r24, r24
     a60:	51 f0       	breq	.+20     	; 0xa76 <loop+0x34>
     a62:	0e 94 ce 06 	call	0xd9c	; 0xd9c <millis>
     a66:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <__data_end>
     a6a:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <__data_end+0x1>
     a6e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end+0x2>
     a72:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x3>
     a76:	08 95       	ret

00000a78 <__vector_1>:
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     aa2:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     aa6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6Safety12cntEventIncrEi>
     aaa:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     aae:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     ab2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN6Safety13emergencyOpenEv>
     ab6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     aba:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     abe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN6Safety12inEventCountEv>
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_2>:
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b0e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b12:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6Safety12cntEventIncrEi>
     b16:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b1a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b1e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN6Safety14emergencyStallEv>
     b22:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b26:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b2a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN6Safety12inEventCountEv>
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <__vector_5>:
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b7a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b7e:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN6Safety12deviceStatusEi>
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	a1 f4       	brne	.+40     	; 0xbae <__vector_5+0x5e>
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b8e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b92:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6Safety12cntEventIncrEi>
     b96:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b9a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b9e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN6Safety13emergencyOpenEv>
     ba2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     ba6:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     baa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN6Safety12inEventCountEv>
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_3>:
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	63 e0       	ldi	r22, 0x03	; 3
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     bfe:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     c02:	0e 94 42 04 	call	0x884	; 0x884 <_ZN6Safety9setDeviceEii>
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	65 e0       	ldi	r22, 0x05	; 5
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     c12:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     c16:	0e 94 42 04 	call	0x884	; 0x884 <_ZN6Safety9setDeviceEii>
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <_GLOBAL__sub_I_Temperature>:
     c3c:	64 e4       	ldi	r22, 0x44	; 68
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     c48:	64 e4       	ldi	r22, 0x44	; 68
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	8d ef       	ldi	r24, 0xFD	; 253
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
     c54:	80 ee       	ldi	r24, 0xE0	; 224
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000c5c <_GLOBAL__sub_D_Temperature>:
     c5c:	8d ef       	ldi	r24, 0xFD	; 253
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringD1Ev>
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	0c 94 42 08 	jmp	0x1084	; 0x1084 <_ZN6StringD1Ev>

00000c6c <initVariant>:
     c6c:	08 95       	ret

00000c6e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c6e:	0e 94 46 07 	call	0xe8c	; 0xe8c <init>

	initVariant();
     c72:	0e 94 36 06 	call	0xc6c	; 0xc6c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c76:	0e 94 95 04 	call	0x92a	; 0x92a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c7a:	c0 e0       	ldi	r28, 0x00	; 0
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     c7e:	0e 94 21 05 	call	0xa42	; 0xa42 <loop>
		if (serialEventRun) serialEventRun();
     c82:	20 97       	sbiw	r28, 0x00	; 0
     c84:	e1 f3       	breq	.-8      	; 0xc7e <main+0x10>
     c86:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c8a:	f9 cf       	rjmp	.-14     	; 0xc7e <main+0x10>

00000c8c <_Znwj>:
     c8c:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <malloc>

00000c90 <_ZN5Print17availableForWriteEv>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	08 95       	ret

00000c96 <_ZN5Print5flushEv>:
     c96:	08 95       	ret

00000c98 <_ZN5Print5writeEPKhj>:
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	6c 01       	movw	r12, r24
     caa:	7a 01       	movw	r14, r20
     cac:	8b 01       	movw	r16, r22
     cae:	c0 e0       	ldi	r28, 0x00	; 0
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	ce 15       	cp	r28, r14
     cb4:	df 05       	cpc	r29, r15
     cb6:	81 f0       	breq	.+32     	; 0xcd8 <_ZN5Print5writeEPKhj+0x40>
     cb8:	d8 01       	movw	r26, r16
     cba:	6d 91       	ld	r22, X+
     cbc:	8d 01       	movw	r16, r26
     cbe:	d6 01       	movw	r26, r12
     cc0:	ed 91       	ld	r30, X+
     cc2:	fc 91       	ld	r31, X
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	c6 01       	movw	r24, r12
     ccc:	09 95       	icall
     cce:	89 2b       	or	r24, r25
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <_ZN5Print5writeEPKhj+0x3e>
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	ee cf       	rjmp	.-36     	; 0xcb2 <_ZN5Print5writeEPKhj+0x1a>
     cd6:	7e 01       	movw	r14, r28
     cd8:	c7 01       	movw	r24, r14
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     cec:	db 01       	movw	r26, r22
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	4d 91       	ld	r20, X+
     cf2:	5c 91       	ld	r21, X
     cf4:	15 97       	sbiw	r26, 0x05	; 5
     cf6:	6d 91       	ld	r22, X+
     cf8:	7c 91       	ld	r23, X
     cfa:	dc 01       	movw	r26, r24
     cfc:	ed 91       	ld	r30, X+
     cfe:	fc 91       	ld	r31, X
     d00:	02 80       	ldd	r0, Z+2	; 0x02
     d02:	f3 81       	ldd	r31, Z+3	; 0x03
     d04:	e0 2d       	mov	r30, r0
     d06:	09 94       	ijmp

00000d08 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     d1e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_millis>
     d22:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_millis+0x1>
     d26:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_millis+0x2>
     d2a:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     d2e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     d32:	23 e0       	ldi	r18, 0x03	; 3
     d34:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     d36:	2d 37       	cpi	r18, 0x7D	; 125
     d38:	20 f4       	brcc	.+8      	; 0xd42 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	a1 1d       	adc	r26, r1
     d3e:	b1 1d       	adc	r27, r1
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     d42:	26 e8       	ldi	r18, 0x86	; 134
     d44:	23 0f       	add	r18, r19
		m += 1;
     d46:	02 96       	adiw	r24, 0x02	; 2
     d48:	a1 1d       	adc	r26, r1
     d4a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     d4c:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <timer0_fract>
	timer0_millis = m;
     d50:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer0_millis>
     d54:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer0_millis+0x1>
     d58:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer0_millis+0x2>
     d5c:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer0_millis+0x3>
	timer0_overflow_count++;
     d60:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
     d64:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
     d68:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
     d6c:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timer0_overflow_count>
     d7a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timer0_overflow_count+0x1>
     d7e:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timer0_overflow_count+0x2>
     d82:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timer0_overflow_count+0x3>
}
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     d9c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     d9e:	f8 94       	cli
	m = timer0_millis;
     da0:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <timer0_millis>
     da4:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <timer0_millis+0x1>
     da8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <timer0_millis+0x2>
     dac:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <timer0_millis+0x3>
	SREG = oldSREG;
     db0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     db2:	08 95       	ret

00000db4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     db4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     db6:	f8 94       	cli
	m = timer0_overflow_count;
     db8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
     dbc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
     dc0:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
     dc4:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     dc8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     dca:	a8 9b       	sbis	0x15, 0	; 21
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <micros+0x24>
     dce:	2f 3f       	cpi	r18, 0xFF	; 255
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <micros+0x24>
		m++;
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	a1 1d       	adc	r26, r1
     dd6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     dd8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     dda:	ba 2f       	mov	r27, r26
     ddc:	a9 2f       	mov	r26, r25
     dde:	98 2f       	mov	r25, r24
     de0:	88 27       	eor	r24, r24
     de2:	82 0f       	add	r24, r18
     de4:	91 1d       	adc	r25, r1
     de6:	a1 1d       	adc	r26, r1
     de8:	b1 1d       	adc	r27, r1
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	42 e0       	ldi	r20, 0x02	; 2
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	4a 95       	dec	r20
     dfa:	d1 f7       	brne	.-12     	; 0xdf0 <micros+0x3c>
}
     dfc:	08 95       	ret

00000dfe <delay>:

void delay(unsigned long ms)
{
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	6b 01       	movw	r12, r22
     e10:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e12:	0e 94 da 06 	call	0xdb4	; 0xdb4 <micros>
     e16:	4b 01       	movw	r8, r22
     e18:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e1a:	c1 14       	cp	r12, r1
     e1c:	d1 04       	cpc	r13, r1
     e1e:	e1 04       	cpc	r14, r1
     e20:	f1 04       	cpc	r15, r1
     e22:	01 f1       	breq	.+64     	; 0xe64 <delay+0x66>
		yield();
     e24:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e28:	0e 94 da 06 	call	0xdb4	; 0xdb4 <micros>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	88 19       	sub	r24, r8
     e32:	99 09       	sbc	r25, r9
     e34:	aa 09       	sbc	r26, r10
     e36:	bb 09       	sbc	r27, r11
     e38:	88 3e       	cpi	r24, 0xE8	; 232
     e3a:	93 40       	sbci	r25, 0x03	; 3
     e3c:	a1 05       	cpc	r26, r1
     e3e:	b1 05       	cpc	r27, r1
     e40:	60 f3       	brcs	.-40     	; 0xe1a <delay+0x1c>
			ms--;
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	c2 1a       	sub	r12, r18
     e46:	d1 08       	sbc	r13, r1
     e48:	e1 08       	sbc	r14, r1
     e4a:	f1 08       	sbc	r15, r1
			start += 1000;
     e4c:	88 ee       	ldi	r24, 0xE8	; 232
     e4e:	88 0e       	add	r8, r24
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	98 1e       	adc	r9, r24
     e54:	a1 1c       	adc	r10, r1
     e56:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e58:	c1 14       	cp	r12, r1
     e5a:	d1 04       	cpc	r13, r1
     e5c:	e1 04       	cpc	r14, r1
     e5e:	f1 04       	cpc	r15, r1
     e60:	19 f7       	brne	.-58     	; 0xe28 <delay+0x2a>
     e62:	db cf       	rjmp	.-74     	; 0xe1a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	08 95       	ret

00000e76 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	91 05       	cpc	r25, r1
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e84:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <delayMicroseconds+0x10>
     e8a:	08 95       	ret

00000e8c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e8c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e8e:	84 b5       	in	r24, 0x24	; 36
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e94:	84 b5       	in	r24, 0x24	; 36
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e9a:	85 b5       	in	r24, 0x25	; 37
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ea0:	85 b5       	in	r24, 0x25	; 37
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ea6:	ee e6       	ldi	r30, 0x6E	; 110
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	81 60       	ori	r24, 0x01	; 1
     eae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     eb0:	e1 e8       	ldi	r30, 0x81	; 129
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     eb6:	80 81       	ld	r24, Z
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ec2:	e0 e8       	ldi	r30, 0x80	; 128
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ecc:	e1 eb       	ldi	r30, 0xB1	; 177
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	84 60       	ori	r24, 0x04	; 4
     ed4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ed6:	e0 eb       	ldi	r30, 0xB0	; 176
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ee0:	ea e7       	ldi	r30, 0x7A	; 122
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     ef0:	80 81       	ld	r24, Z
     ef2:	81 60       	ori	r24, 0x01	; 1
     ef4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     efc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     f00:	08 95       	ret

00000f02 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     f02:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
     f06:	08 95       	ret

00000f08 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	81 f0       	breq	.+32     	; 0xf2c <turnOffPWM+0x24>
     f0c:	28 f4       	brcc	.+10     	; 0xf18 <turnOffPWM+0x10>
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	99 f0       	breq	.+38     	; 0xf38 <turnOffPWM+0x30>
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	a1 f0       	breq	.+40     	; 0xf3e <turnOffPWM+0x36>
     f16:	08 95       	ret
     f18:	87 30       	cpi	r24, 0x07	; 7
     f1a:	a9 f0       	breq	.+42     	; 0xf46 <turnOffPWM+0x3e>
     f1c:	88 30       	cpi	r24, 0x08	; 8
     f1e:	b9 f0       	breq	.+46     	; 0xf4e <turnOffPWM+0x46>
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	d1 f4       	brne	.+52     	; 0xf58 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f28:	8f 7d       	andi	r24, 0xDF	; 223
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f2c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f30:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f32:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f36:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f38:	84 b5       	in	r24, 0x24	; 36
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f3e:	84 b5       	in	r24, 0x24	; 36
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	84 bd       	out	0x24, r24	; 36
     f44:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f46:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f4a:	8f 77       	andi	r24, 0x7F	; 127
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f4e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f52:	8f 7d       	andi	r24, 0xDF	; 223
     f54:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f58:	08 95       	ret

00000f5a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	e4 58       	subi	r30, 0x84	; 132
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f68:	fc 01       	movw	r30, r24
     f6a:	e0 57       	subi	r30, 0x70	; 112
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f70:	88 23       	and	r24, r24
     f72:	61 f1       	breq	.+88     	; 0xfcc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	fc 01       	movw	r30, r24
     f7c:	e8 54       	subi	r30, 0x48	; 72
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	c5 91       	lpm	r28, Z+
     f82:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f84:	fc 01       	movw	r30, r24
     f86:	e2 55       	subi	r30, 0x52	; 82
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	a5 91       	lpm	r26, Z+
     f8c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f8e:	61 11       	cpse	r22, r1
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f92:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f94:	f8 94       	cli
		*reg &= ~bit;
     f96:	88 81       	ld	r24, Y
     f98:	20 95       	com	r18
     f9a:	82 23       	and	r24, r18
     f9c:	88 83       	st	Y, r24
		*out &= ~bit;
     f9e:	ec 91       	ld	r30, X
     fa0:	2e 23       	and	r18, r30
     fa2:	0b c0       	rjmp	.+22     	; 0xfba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fa4:	62 30       	cpi	r22, 0x02	; 2
     fa6:	61 f4       	brne	.+24     	; 0xfc0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fa8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     faa:	f8 94       	cli
		*reg &= ~bit;
     fac:	88 81       	ld	r24, Y
     fae:	32 2f       	mov	r19, r18
     fb0:	30 95       	com	r19
     fb2:	83 23       	and	r24, r19
     fb4:	88 83       	st	Y, r24
		*out |= bit;
     fb6:	ec 91       	ld	r30, X
     fb8:	2e 2b       	or	r18, r30
     fba:	2c 93       	st	X, r18
		SREG = oldSREG;
     fbc:	9f bf       	out	0x3f, r25	; 63
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fc0:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fc2:	f8 94       	cli
		*reg |= bit;
     fc4:	e8 81       	ld	r30, Y
     fc6:	2e 2b       	or	r18, r30
     fc8:	28 83       	st	Y, r18
		SREG = oldSREG;
     fca:	8f bf       	out	0x3f, r24	; 63
	}
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	f9 01       	movw	r30, r18
     fde:	e8 59       	subi	r30, 0x98	; 152
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fe4:	f9 01       	movw	r30, r18
     fe6:	e4 58       	subi	r30, 0x84	; 132
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fec:	f9 01       	movw	r30, r18
     fee:	e0 57       	subi	r30, 0x70	; 112
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ff4:	cc 23       	and	r28, r28
     ff6:	c1 f0       	breq	.+48     	; 0x1028 <digitalWrite+0x56>
     ff8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ffa:	81 11       	cpse	r24, r1
     ffc:	0e 94 84 07 	call	0xf08	; 0xf08 <turnOffPWM>

	out = portOutputRegister(port);
    1000:	ec 2f       	mov	r30, r28
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	e2 55       	subi	r30, 0x52	; 82
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	a5 91       	lpm	r26, Z+
    100e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1010:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1012:	f8 94       	cli

	if (val == LOW) {
    1014:	11 11       	cpse	r17, r1
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <digitalWrite+0x4e>
		*out &= ~bit;
    1018:	8c 91       	ld	r24, X
    101a:	d0 95       	com	r29
    101c:	d8 23       	and	r29, r24
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1020:	ec 91       	ld	r30, X
    1022:	de 2b       	or	r29, r30
    1024:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1026:	9f bf       	out	0x3f, r25	; 63
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	08 95       	ret

00001030 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	f9 01       	movw	r30, r18
    103a:	e8 59       	subi	r30, 0x98	; 152
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1040:	f9 01       	movw	r30, r18
    1042:	e4 58       	subi	r30, 0x84	; 132
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1048:	f9 01       	movw	r30, r18
    104a:	e0 57       	subi	r30, 0x70	; 112
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1050:	cc 23       	and	r28, r28
    1052:	91 f0       	breq	.+36     	; 0x1078 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1054:	81 11       	cpse	r24, r1
    1056:	0e 94 84 07 	call	0xf08	; 0xf08 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    105a:	ec 2f       	mov	r30, r28
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ec 55       	subi	r30, 0x5C	; 92
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	a5 91       	lpm	r26, Z+
    1068:	b4 91       	lpm	r27, Z
    106a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    106c:	ed 23       	and	r30, r29
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	21 f4       	brne	.+8      	; 0x107c <digitalRead+0x4c>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <digitalRead+0x4c>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    1082:	08 95       	ret

00001084 <_ZN6StringD1Ev>:
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	0c 94 96 12 	jmp	0x252c	; 0x252c <free>

0000108e <_ZN6String10invalidateEv>:
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
    1094:	88 81       	ld	r24, Y
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	11 f0       	breq	.+4      	; 0x10a0 <_ZN6String10invalidateEv+0x12>
    109c:	0e 94 96 12 	call	0x252c	; 0x252c <free>
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	18 82       	st	Y, r1
    10a4:	1d 82       	std	Y+5, r1	; 0x05
    10a6:	1c 82       	std	Y+4, r1	; 0x04
    10a8:	1b 82       	std	Y+3, r1	; 0x03
    10aa:	1a 82       	std	Y+2, r1	; 0x02
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <_ZN6String12changeBufferEj>:
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	8b 01       	movw	r16, r22
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	0e 94 1f 13 	call	0x263e	; 0x263e <realloc>
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	31 f0       	breq	.+12     	; 0x10da <_ZN6String12changeBufferEj+0x28>
    10ce:	99 83       	std	Y+1, r25	; 0x01
    10d0:	88 83       	st	Y, r24
    10d2:	1b 83       	std	Y+3, r17	; 0x03
    10d4:	0a 83       	std	Y+2, r16	; 0x02
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <_ZN6String12changeBufferEj+0x2a>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <_ZN6String7reserveEj>:
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	88 81       	ld	r24, Y
    10ee:	99 81       	ldd	r25, Y+1	; 0x01
    10f0:	89 2b       	or	r24, r25
    10f2:	29 f0       	breq	.+10     	; 0x10fe <_ZN6String7reserveEj+0x18>
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	86 17       	cp	r24, r22
    10fa:	97 07       	cpc	r25, r23
    10fc:	60 f4       	brcc	.+24     	; 0x1116 <_ZN6String7reserveEj+0x30>
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN6String12changeBufferEj>
    1104:	88 23       	and	r24, r24
    1106:	41 f0       	breq	.+16     	; 0x1118 <_ZN6String7reserveEj+0x32>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	89 2b       	or	r24, r25
    110e:	19 f4       	brne	.+6      	; 0x1116 <_ZN6String7reserveEj+0x30>
    1110:	e8 81       	ld	r30, Y
    1112:	f9 81       	ldd	r31, Y+1	; 0x01
    1114:	10 82       	st	Z, r1
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <_ZN6String4copyEPKcj>:
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
    112c:	7b 01       	movw	r14, r22
    112e:	8a 01       	movw	r16, r20
    1130:	ba 01       	movw	r22, r20
    1132:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN6String7reserveEj>
    1136:	81 11       	cpse	r24, r1
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <_ZN6String4copyEPKcj+0x24>
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN6String10invalidateEv>
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <_ZN6String4copyEPKcj+0x32>
    1142:	1d 83       	std	Y+5, r17	; 0x05
    1144:	0c 83       	std	Y+4, r16	; 0x04
    1146:	b7 01       	movw	r22, r14
    1148:	88 81       	ld	r24, Y
    114a:	99 81       	ldd	r25, Y+1	; 0x01
    114c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <strcpy>
    1150:	ce 01       	movw	r24, r28
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret

00001160 <_ZN6StringC1EPKc>:
    1160:	fc 01       	movw	r30, r24
    1162:	11 82       	std	Z+1, r1	; 0x01
    1164:	10 82       	st	Z, r1
    1166:	13 82       	std	Z+3, r1	; 0x03
    1168:	12 82       	std	Z+2, r1	; 0x02
    116a:	15 82       	std	Z+5, r1	; 0x05
    116c:	14 82       	std	Z+4, r1	; 0x04
    116e:	61 15       	cp	r22, r1
    1170:	71 05       	cpc	r23, r1
    1172:	51 f0       	breq	.+20     	; 0x1188 <_ZN6StringC1EPKc+0x28>
    1174:	fb 01       	movw	r30, r22
    1176:	01 90       	ld	r0, Z+
    1178:	00 20       	and	r0, r0
    117a:	e9 f7       	brne	.-6      	; 0x1176 <_ZN6StringC1EPKc+0x16>
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	af 01       	movw	r20, r30
    1180:	46 1b       	sub	r20, r22
    1182:	57 0b       	sbc	r21, r23
    1184:	0c 94 8f 08 	jmp	0x111e	; 0x111e <_ZN6String4copyEPKcj>
    1188:	08 95       	ret

0000118a <_ZN6String4moveERS_>:
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	8c 01       	movw	r16, r24
    1194:	eb 01       	movw	r28, r22
    1196:	fc 01       	movw	r30, r24
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	d1 f0       	breq	.+52     	; 0x11d4 <_ZN6String4moveERS_+0x4a>
    11a0:	68 81       	ld	r22, Y
    11a2:	79 81       	ldd	r23, Y+1	; 0x01
    11a4:	61 15       	cp	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	99 f0       	breq	.+38     	; 0x11d0 <_ZN6String4moveERS_+0x46>
    11aa:	21 e4       	ldi	r18, 0x41	; 65
    11ac:	38 e0       	ldi	r19, 0x08	; 8
    11ae:	23 2b       	or	r18, r19
    11b0:	79 f0       	breq	.+30     	; 0x11d0 <_ZN6String4moveERS_+0x46>
    11b2:	42 81       	ldd	r20, Z+2	; 0x02
    11b4:	53 81       	ldd	r21, Z+3	; 0x03
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	42 17       	cp	r20, r18
    11bc:	53 07       	cpc	r21, r19
    11be:	40 f0       	brcs	.+16     	; 0x11d0 <_ZN6String4moveERS_+0x46>
    11c0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <strcpy>
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	f8 01       	movw	r30, r16
    11ca:	95 83       	std	Z+5, r25	; 0x05
    11cc:	84 83       	std	Z+4, r24	; 0x04
    11ce:	13 c0       	rjmp	.+38     	; 0x11f6 <_ZN6String4moveERS_+0x6c>
    11d0:	0e 94 96 12 	call	0x252c	; 0x252c <free>
    11d4:	88 81       	ld	r24, Y
    11d6:	99 81       	ldd	r25, Y+1	; 0x01
    11d8:	f8 01       	movw	r30, r16
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	93 83       	std	Z+3, r25	; 0x03
    11e4:	82 83       	std	Z+2, r24	; 0x02
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	95 83       	std	Z+5, r25	; 0x05
    11ec:	84 83       	std	Z+4, r24	; 0x04
    11ee:	19 82       	std	Y+1, r1	; 0x01
    11f0:	18 82       	st	Y, r1
    11f2:	1b 82       	std	Y+3, r1	; 0x03
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	1d 82       	std	Y+5, r1	; 0x05
    11f8:	1c 82       	std	Y+4, r1	; 0x04
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <_ZN6StringaSERKS_>:
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
    120a:	fb 01       	movw	r30, r22
    120c:	86 17       	cp	r24, r22
    120e:	97 07       	cpc	r25, r23
    1210:	61 f0       	breq	.+24     	; 0x122a <_ZN6StringaSERKS_+0x26>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	61 15       	cp	r22, r1
    1218:	71 05       	cpc	r23, r1
    121a:	29 f0       	breq	.+10     	; 0x1226 <_ZN6StringaSERKS_+0x22>
    121c:	44 81       	ldd	r20, Z+4	; 0x04
    121e:	55 81       	ldd	r21, Z+5	; 0x05
    1220:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN6String4copyEPKcj>
    1224:	02 c0       	rjmp	.+4      	; 0x122a <_ZN6StringaSERKS_+0x26>
    1226:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN6String10invalidateEv>
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <_ZN6StringC1ERKS_>:
    1232:	fc 01       	movw	r30, r24
    1234:	11 82       	std	Z+1, r1	; 0x01
    1236:	10 82       	st	Z, r1
    1238:	13 82       	std	Z+3, r1	; 0x03
    123a:	12 82       	std	Z+2, r1	; 0x02
    123c:	15 82       	std	Z+5, r1	; 0x05
    123e:	14 82       	std	Z+4, r1	; 0x04
    1240:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_ZN6StringaSERKS_>

00001244 <_ZN6StringaSEOS_>:
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	ec 01       	movw	r28, r24
    124a:	86 17       	cp	r24, r22
    124c:	97 07       	cpc	r25, r23
    124e:	11 f0       	breq	.+4      	; 0x1254 <_ZN6StringaSEOS_+0x10>
    1250:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN6String4moveERS_>
    1254:	ce 01       	movw	r24, r28
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <_ZN6StringaSEPKc>:
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
    1262:	61 15       	cp	r22, r1
    1264:	71 05       	cpc	r23, r1
    1266:	59 f0       	breq	.+22     	; 0x127e <_ZN6StringaSEPKc+0x22>
    1268:	fb 01       	movw	r30, r22
    126a:	01 90       	ld	r0, Z+
    126c:	00 20       	and	r0, r0
    126e:	e9 f7       	brne	.-6      	; 0x126a <_ZN6StringaSEPKc+0xe>
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	af 01       	movw	r20, r30
    1274:	46 1b       	sub	r20, r22
    1276:	57 0b       	sbc	r21, r23
    1278:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN6String4copyEPKcj>
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <_ZN6StringaSEPKc+0x26>
    127e:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN6String10invalidateEv>
    1282:	ce 01       	movw	r24, r28
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	7c 01       	movw	r14, r24
    129e:	6b 01       	movw	r12, r22
    12a0:	8a 01       	movw	r16, r20
    12a2:	e9 01       	movw	r28, r18
	if (left > right) {
    12a4:	24 17       	cp	r18, r20
    12a6:	35 07       	cpc	r19, r21
    12a8:	20 f4       	brcc	.+8      	; 0x12b2 <_ZNK6String9substringEjj+0x28>
    12aa:	81 2f       	mov	r24, r17
    12ac:	89 01       	movw	r16, r18
    12ae:	c4 2f       	mov	r28, r20
    12b0:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    12b2:	64 e4       	ldi	r22, 0x44	; 68
    12b4:	71 e0       	ldi	r23, 0x01	; 1
    12b6:	c7 01       	movw	r24, r14
    12b8:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    12bc:	d6 01       	movw	r26, r12
    12be:	14 96       	adiw	r26, 0x04	; 4
    12c0:	8d 91       	ld	r24, X+
    12c2:	9c 91       	ld	r25, X
    12c4:	15 97       	sbiw	r26, 0x05	; 5
    12c6:	08 17       	cp	r16, r24
    12c8:	19 07       	cpc	r17, r25
    12ca:	c8 f4       	brcc	.+50     	; 0x12fe <_ZNK6String9substringEjj+0x74>
    12cc:	8c 17       	cp	r24, r28
    12ce:	9d 07       	cpc	r25, r29
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <_ZNK6String9substringEjj+0x4a>
    12d2:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    12d4:	d6 01       	movw	r26, r12
    12d6:	ed 91       	ld	r30, X+
    12d8:	fc 91       	ld	r31, X
    12da:	11 97       	sbiw	r26, 0x01	; 1
    12dc:	ec 0f       	add	r30, r28
    12de:	fd 1f       	adc	r31, r29
    12e0:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    12e2:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    12e4:	6d 91       	ld	r22, X+
    12e6:	7c 91       	ld	r23, X
    12e8:	60 0f       	add	r22, r16
    12ea:	71 1f       	adc	r23, r17
    12ec:	c7 01       	movw	r24, r14
    12ee:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    12f2:	d6 01       	movw	r26, r12
    12f4:	ed 91       	ld	r30, X+
    12f6:	fc 91       	ld	r31, X
    12f8:	ec 0f       	add	r30, r28
    12fa:	fd 1f       	adc	r31, r29
    12fc:	b0 82       	st	Z, r11
	return out;
}
    12fe:	c7 01       	movw	r24, r14
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	08 95       	ret

00001314 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1314:	fc 01       	movw	r30, r24
    1316:	13 82       	std	Z+3, r1	; 0x03
    1318:	12 82       	std	Z+2, r1	; 0x02
    131a:	8d eb       	ldi	r24, 0xBD	; 189
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
    1322:	12 8e       	std	Z+26, r1	; 0x1a
    1324:	14 8a       	std	Z+20, r1	; 0x14
    1326:	8f e0       	ldi	r24, 0x0F	; 15
    1328:	84 83       	std	Z+4, r24	; 0x04
    132a:	8e e0       	ldi	r24, 0x0E	; 14
    132c:	85 83       	std	Z+5, r24	; 0x05
    132e:	8d e0       	ldi	r24, 0x0D	; 13
    1330:	86 83       	std	Z+6, r24	; 0x06
    1332:	8c e0       	ldi	r24, 0x0C	; 12
    1334:	87 83       	std	Z+7, r24	; 0x07
    1336:	8b e0       	ldi	r24, 0x0B	; 11
    1338:	80 87       	std	Z+8, r24	; 0x08
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	81 87       	std	Z+9, r24	; 0x09
    133e:	89 e0       	ldi	r24, 0x09	; 9
    1340:	82 87       	std	Z+10, r24	; 0x0a
    1342:	17 86       	std	Z+15, r1	; 0x0f
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 8b       	std	Z+16, r24	; 0x10
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	81 8b       	std	Z+17, r24	; 0x11
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	82 8b       	std	Z+18, r24	; 0x12
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	83 8b       	std	Z+19, r24	; 0x13
    1354:	08 95       	ret

00001356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    1356:	fc 01       	movw	r30, r24
    1358:	96 2f       	mov	r25, r22
    135a:	82 8d       	ldd	r24, Z+26	; 0x1a
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	21 f0       	breq	.+8      	; 0x1368 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    1360:	cf 01       	movw	r24, r30
    1362:	4b 96       	adiw	r24, 0x1b	; 27
    1364:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1368:	64 2f       	mov	r22, r20
    136a:	89 2f       	mov	r24, r25
    136c:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <digitalWrite>

00001370 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	d6 2f       	mov	r29, r22
    137a:	8c 01       	movw	r16, r24
    137c:	05 5e       	subi	r16, 0xE5	; 229
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	c1 e0       	ldi	r28, 0x01	; 1
    1382:	62 fb       	bst	r22, 2
    1384:	44 27       	eor	r20, r20
    1386:	40 f9       	bld	r20, 0
    1388:	4c 27       	eor	r20, r28
    138a:	68 e0       	ldi	r22, 0x08	; 8
    138c:	c8 01       	movw	r24, r16
    138e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1392:	d1 fb       	bst	r29, 1
    1394:	44 27       	eor	r20, r20
    1396:	40 f9       	bld	r20, 0
    1398:	4c 27       	eor	r20, r28
    139a:	67 e0       	ldi	r22, 0x07	; 7
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    13a2:	4d 2f       	mov	r20, r29
    13a4:	41 70       	andi	r20, 0x01	; 1
    13a6:	4c 27       	eor	r20, r28
    13a8:	66 e0       	ldi	r22, 0x06	; 6
    13aa:	c8 01       	movw	r24, r16
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <_ZN17Adafruit_MCP2301712digitalWriteEhh>

000013b8 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    13b8:	fc 01       	movw	r30, r24
    13ba:	96 2f       	mov	r25, r22
    13bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	21 f0       	breq	.+8      	; 0x13ca <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    13c2:	cf 01       	movw	r24, r30
    13c4:	4b 96       	adiw	r24, 0x1b	; 27
    13c6:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    13ca:	64 2f       	mov	r22, r20
    13cc:	89 2f       	mov	r24, r25
    13ce:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <pinMode>

000013d2 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	6e 81       	ldd	r22, Y+6	; 0x06
    13dc:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	6e 81       	ldd	r22, Y+6	; 0x06
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	6e 81       	ldd	r22, Y+6	; 0x06
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1404:	84 e6       	ldi	r24, 0x64	; 100
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <delayMicroseconds>

00001410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	8c 01       	movw	r16, r24
    1426:	fc 01       	movw	r30, r24
    1428:	82 8d       	ldd	r24, Z+26	; 0x1a
    142a:	98 01       	movw	r18, r16
    142c:	29 5f       	subi	r18, 0xF9	; 249
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	79 01       	movw	r14, r18
    1432:	c6 2f       	mov	r28, r22
    1434:	d0 e0       	ldi	r29, 0x00	; 0
    1436:	8f 3f       	cpi	r24, 0xFF	; 255
    1438:	09 f4       	brne	.+2      	; 0x143c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    143a:	73 c0       	rjmp	.+230    	; 0x1522 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    143c:	68 01       	movw	r12, r16
    143e:	3b e1       	ldi	r19, 0x1B	; 27
    1440:	c3 0e       	add	r12, r19
    1442:	d1 1c       	adc	r13, r1
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    144a:	f7 01       	movw	r30, r14
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	a1 e0       	ldi	r26, 0x01	; 1
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	b1 90       	ld	r11, Z+
    1456:	ee 24       	eor	r14, r14
    1458:	e3 94       	inc	r14
    145a:	f1 2c       	mov	r15, r1
    145c:	bd 01       	movw	r22, r26
    145e:	0b 2c       	mov	r0, r11
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    146a:	60 95       	com	r22
    146c:	70 95       	com	r23
    146e:	86 23       	and	r24, r22
    1470:	97 23       	and	r25, r23
    1472:	9e 01       	movw	r18, r28
    1474:	04 2e       	mov	r0, r20
    1476:	02 c0       	rjmp	.+4      	; 0x147c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1478:	35 95       	asr	r19
    147a:	27 95       	ror	r18
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    1480:	21 70       	andi	r18, 0x01	; 1
    1482:	33 27       	eor	r19, r19
    1484:	02 c0       	rjmp	.+4      	; 0x148a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	ba 94       	dec	r11
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    148e:	82 2b       	or	r24, r18
    1490:	93 2b       	or	r25, r19
    1492:	4f 5f       	subi	r20, 0xFF	; 255
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	44 30       	cpi	r20, 0x04	; 4
    1498:	51 05       	cpc	r21, r1
    149a:	e1 f6       	brne	.-72     	; 0x1454 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    149c:	e7 01       	movw	r28, r14
    149e:	f8 01       	movw	r30, r16
    14a0:	06 80       	ldd	r0, Z+6	; 0x06
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    14a4:	cc 0f       	add	r28, r28
    14a6:	dd 1f       	adc	r29, r29
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    14ac:	c0 95       	com	r28
    14ae:	d0 95       	com	r29
    14b0:	c8 23       	and	r28, r24
    14b2:	d9 23       	and	r29, r25
    14b4:	be 01       	movw	r22, r28
    14b6:	c6 01       	movw	r24, r12
    14b8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    14c4:	c7 01       	movw	r24, r14
    14c6:	f8 01       	movw	r30, r16
    14c8:	06 80       	ldd	r0, Z+6	; 0x06
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    14d4:	c8 2b       	or	r28, r24
    14d6:	d9 2b       	or	r29, r25
    14d8:	be 01       	movw	r22, r28
    14da:	c6 01       	movw	r24, r12
    14dc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    14e8:	b7 01       	movw	r22, r14
    14ea:	f8 01       	movw	r30, r16
    14ec:	06 80       	ldd	r0, Z+6	; 0x06
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    14f8:	60 95       	com	r22
    14fa:	70 95       	com	r23
    14fc:	6c 23       	and	r22, r28
    14fe:	7d 23       	and	r23, r29
    1500:	c6 01       	movw	r24, r12
    1502:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1506:	84 e6       	ldi	r24, 0x64	; 100
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	bf 90       	pop	r11
    151c:	af 90       	pop	r10
    151e:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <delayMicroseconds>
    1522:	c1 2c       	mov	r12, r1
    1524:	d1 2c       	mov	r13, r1
    1526:	57 01       	movw	r10, r14
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	f7 01       	movw	r30, r14
    152c:	61 91       	ld	r22, Z+
    152e:	7f 01       	movw	r14, r30
    1530:	c8 01       	movw	r24, r16
    1532:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1536:	ae 01       	movw	r20, r28
    1538:	0c 2c       	mov	r0, r12
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    1544:	41 70       	andi	r20, 0x01	; 1
    1546:	f5 01       	movw	r30, r10
    1548:	60 81       	ld	r22, Z
    154a:	c8 01       	movw	r24, r16
    154c:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1550:	ff ef       	ldi	r31, 0xFF	; 255
    1552:	cf 1a       	sub	r12, r31
    1554:	df 0a       	sbc	r13, r31
    1556:	24 e0       	ldi	r18, 0x04	; 4
    1558:	c2 16       	cp	r12, r18
    155a:	d1 04       	cpc	r13, r1
    155c:	21 f7       	brne	.-56     	; 0x1526 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    155e:	c8 01       	movw	r24, r16
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001578 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    158e:	5c 01       	movw	r10, r24
    1590:	87 e0       	ldi	r24, 0x07	; 7
    1592:	a8 0e       	add	r10, r24
    1594:	b1 1c       	adc	r11, r1
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	e6 2e       	mov	r14, r22
    159c:	f1 2c       	mov	r15, r1
    159e:	65 01       	movw	r12, r10
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	f5 01       	movw	r30, r10
    15a4:	61 91       	ld	r22, Z+
    15a6:	5f 01       	movw	r10, r30
    15a8:	ce 01       	movw	r24, r28
    15aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    15ae:	a7 01       	movw	r20, r14
    15b0:	00 2e       	mov	r0, r16
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    15bc:	41 70       	andi	r20, 0x01	; 1
    15be:	f6 01       	movw	r30, r12
    15c0:	60 81       	ld	r22, Z
    15c2:	ce 01       	movw	r24, r28
    15c4:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    15c8:	0f 5f       	subi	r16, 0xFF	; 255
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	08 30       	cpi	r16, 0x08	; 8
    15ce:	11 05       	cpc	r17, r1
    15d0:	31 f7       	brne	.-52     	; 0x159e <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    15d2:	ce 01       	movw	r24, r28
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	ef 90       	pop	r14
    15e0:	df 90       	pop	r13
    15e2:	cf 90       	pop	r12
    15e4:	bf 90       	pop	r11
    15e6:	af 90       	pop	r10
    15e8:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000015ec <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	16 2f       	mov	r17, r22
    15f6:	6c 81       	ldd	r22, Y+4	; 0x04
    15f8:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    15fc:	6d 81       	ldd	r22, Y+5	; 0x05
    15fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1600:	21 f0       	breq	.+8      	; 0x160a <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    160a:	8c 89       	ldd	r24, Y+20	; 0x14
    160c:	61 2f       	mov	r22, r17
    160e:	84 ff       	sbrs	r24, 4
    1610:	06 c0       	rjmp	.+12     	; 0x161e <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1612:	ce 01       	movw	r24, r28
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	75 95       	asr	r23
    1624:	67 95       	ror	r22
    1626:	8a 95       	dec	r24
    1628:	e1 f7       	brne	.-8      	; 0x1622 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1630:	61 2f       	mov	r22, r17
    1632:	ce 01       	movw	r24, r28
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

0000163e <_ZN21Adafruit_RGBLCDShield7commandEh>:
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <_ZN21Adafruit_RGBLCDShield4sendEhh>

00001644 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>
    164a:	80 ed       	ldi	r24, 0xD0	; 208
    164c:	97 e0       	ldi	r25, 0x07	; 7
    164e:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <delayMicroseconds>

00001652 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	28 97       	sbiw	r28, 0x08	; 8
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	9c 01       	movw	r18, r24
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	e7 e0       	ldi	r30, 0x07	; 7
    166c:	f1 e0       	ldi	r31, 0x01	; 1
    166e:	de 01       	movw	r26, r28
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	01 90       	ld	r0, Z+
    1674:	0d 92       	st	X+, r0
    1676:	8a 95       	dec	r24
    1678:	e1 f7       	brne	.-8      	; 0x1672 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    167a:	f9 01       	movw	r30, r18
    167c:	80 8d       	ldd	r24, Z+24	; 0x18
    167e:	84 17       	cp	r24, r20
    1680:	10 f4       	brcc	.+4      	; 0x1686 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    1682:	4f ef       	ldi	r20, 0xFF	; 255
    1684:	48 0f       	add	r20, r24
    1686:	fe 01       	movw	r30, r28
    1688:	31 96       	adiw	r30, 0x01	; 1
    168a:	e4 0f       	add	r30, r20
    168c:	f1 1d       	adc	r31, r1
    168e:	e4 0f       	add	r30, r20
    1690:	f1 1d       	adc	r31, r1
    1692:	90 81       	ld	r25, Z
    1694:	69 0f       	add	r22, r25
    1696:	60 68       	ori	r22, 0x80	; 128
    1698:	c9 01       	movw	r24, r18
    169a:	28 96       	adiw	r28, 0x08	; 8
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>

000016ae <_ZN21Adafruit_RGBLCDShield7displayEv>:
    16ae:	fc 01       	movw	r30, r24
    16b0:	65 89       	ldd	r22, Z+21	; 0x15
    16b2:	26 2f       	mov	r18, r22
    16b4:	24 60       	ori	r18, 0x04	; 4
    16b6:	25 8b       	std	Z+21, r18	; 0x15
    16b8:	6c 60       	ori	r22, 0x0C	; 12
    16ba:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>

000016be <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
    16d8:	d4 2e       	mov	r13, r20
    16da:	c2 2e       	mov	r12, r18
    16dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16de:	8f 3f       	cpi	r24, 0xFF	; 255
    16e0:	41 f4       	brne	.+16     	; 0x16f2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	8d 15       	cp	r24, r13
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    16e8:	5e c0       	rjmp	.+188    	; 0x17a6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    16ea:	8c 89       	ldd	r24, Y+20	; 0x14
    16ec:	88 60       	ori	r24, 0x08	; 8
    16ee:	8c 8b       	std	Y+20, r24	; 0x14
    16f0:	5a c0       	rjmp	.+180    	; 0x17a6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    16f2:	82 e1       	ldi	r24, 0x12	; 18
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN7TwoWire5beginEv>
    16fa:	8e 01       	movw	r16, r28
    16fc:	05 5e       	subi	r16, 0xE5	; 229
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN17Adafruit_MCP230175beginEv>
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	68 e0       	ldi	r22, 0x08	; 8
    170a:	c8 01       	movw	r24, r16
    170c:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	66 e0       	ldi	r22, 0x06	; 6
    1714:	c8 01       	movw	r24, r16
    1716:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	67 e0       	ldi	r22, 0x07	; 7
    171e:	c8 01       	movw	r24, r16
    1720:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    1724:	67 e0       	ldi	r22, 0x07	; 7
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 b8 09 	call	0x1370	; 0x1370 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    172c:	6d 81       	ldd	r22, Y+5	; 0x05
    172e:	66 23       	and	r22, r22
    1730:	21 f0       	breq	.+8      	; 0x173a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	c8 01       	movw	r24, r16
    1736:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	6c 81       	ldd	r22, Y+4	; 0x04
    173e:	c8 01       	movw	r24, r16
    1740:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	6e 81       	ldd	r22, Y+6	; 0x06
    1748:	c8 01       	movw	r24, r16
    174a:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    174e:	7e 01       	movw	r14, r28
    1750:	e7 e0       	ldi	r30, 0x07	; 7
    1752:	ee 0e       	add	r14, r30
    1754:	f1 1c       	adc	r15, r1
    1756:	5e 01       	movw	r10, r28
    1758:	fb e0       	ldi	r31, 0x0B	; 11
    175a:	af 0e       	add	r10, r31
    175c:	b1 1c       	adc	r11, r1
    175e:	f7 01       	movw	r30, r14
    1760:	61 91       	ld	r22, Z+
    1762:	7f 01       	movw	r14, r30
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	c8 01       	movw	r24, r16
    1768:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    176c:	ea 14       	cp	r14, r10
    176e:	fb 04       	cpc	r15, r11
    1770:	b1 f7       	brne	.-20     	; 0x175e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    1772:	7e 01       	movw	r14, r28
    1774:	ff e0       	ldi	r31, 0x0F	; 15
    1776:	ef 0e       	add	r14, r31
    1778:	f1 1c       	adc	r15, r1
    177a:	5e 01       	movw	r10, r28
    177c:	84 e1       	ldi	r24, 0x14	; 20
    177e:	a8 0e       	add	r10, r24
    1780:	b1 1c       	adc	r11, r1
    1782:	47 01       	movw	r8, r14
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	f7 01       	movw	r30, r14
    1788:	61 91       	ld	r22, Z+
    178a:	7f 01       	movw	r14, r30
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN17Adafruit_MCP230177pinModeEhh>
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	f4 01       	movw	r30, r8
    1796:	60 81       	ld	r22, Z
    1798:	c8 01       	movw	r24, r16
    179a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN17Adafruit_MCP230176pullUpEhh>
    179e:	ea 14       	cp	r14, r10
    17a0:	fb 04       	cpc	r15, r11
    17a2:	79 f7       	brne	.-34     	; 0x1782 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    17a4:	9e cf       	rjmp	.-196    	; 0x16e2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    17a6:	d8 8e       	std	Y+24, r13	; 0x18
    17a8:	19 8e       	std	Y+25, r1	; 0x19
    17aa:	cc 20       	and	r12, r12
    17ac:	31 f0       	breq	.+12     	; 0x17ba <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	df 12       	cpse	r13, r31
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    17b4:	8c 89       	ldd	r24, Y+20	; 0x14
    17b6:	84 60       	ori	r24, 0x04	; 4
    17b8:	8c 8b       	std	Y+20, r24	; 0x14
    17ba:	80 e5       	ldi	r24, 0x50	; 80
    17bc:	93 ec       	ldi	r25, 0xC3	; 195
    17be:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	6c 81       	ldd	r22, Y+4	; 0x04
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	6e 81       	ldd	r22, Y+6	; 0x06
    17d0:	ce 01       	movw	r24, r28
    17d2:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17d6:	6d 81       	ldd	r22, Y+5	; 0x05
    17d8:	6f 3f       	cpi	r22, 0xFF	; 255
    17da:	21 f0       	breq	.+8      	; 0x17e4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17e4:	6c 89       	ldd	r22, Y+20	; 0x14
    17e6:	64 fd       	sbrc	r22, 4
    17e8:	1d c0       	rjmp	.+58     	; 0x1824 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    17f2:	84 e9       	ldi	r24, 0x94	; 148
    17f4:	91 e1       	ldi	r25, 0x11	; 17
    17f6:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    17fa:	63 e0       	ldi	r22, 0x03	; 3
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1802:	84 e9       	ldi	r24, 0x94	; 148
    1804:	91 e1       	ldi	r25, 0x11	; 17
    1806:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	ce 01       	movw	r24, r28
    180e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1812:	86 e9       	ldi	r24, 0x96	; 150
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1822:	16 c0       	rjmp	.+44     	; 0x1850 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1824:	60 62       	ori	r22, 0x20	; 32
    1826:	ce 01       	movw	r24, r28
    1828:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>
    182c:	84 e9       	ldi	r24, 0x94	; 148
    182e:	91 e1       	ldi	r25, 0x11	; 17
    1830:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    1834:	6c 89       	ldd	r22, Y+20	; 0x14
    1836:	60 62       	ori	r22, 0x20	; 32
    1838:	ce 01       	movw	r24, r28
    183a:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>
    183e:	86 e9       	ldi	r24, 0x96	; 150
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 3b 07 	call	0xe76	; 0xe76 <delayMicroseconds>
    1846:	6c 89       	ldd	r22, Y+20	; 0x14
    1848:	60 62       	ori	r22, 0x20	; 32
    184a:	ce 01       	movw	r24, r28
    184c:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>
    1850:	6c 89       	ldd	r22, Y+20	; 0x14
    1852:	60 62       	ori	r22, 0x20	; 32
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	8d 8b       	std	Y+21, r24	; 0x15
    185e:	ce 01       	movw	r24, r28
    1860:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN21Adafruit_RGBLCDShield7displayEv>
    1864:	ce 01       	movw	r24, r28
    1866:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN21Adafruit_RGBLCDShield5clearEv>
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	8e 8b       	std	Y+22, r24	; 0x16
    186e:	66 e0       	ldi	r22, 0x06	; 6
    1870:	ce 01       	movw	r24, r28
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	9f 90       	pop	r9
    1888:	8f 90       	pop	r8
    188a:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <_ZN21Adafruit_RGBLCDShield7commandEh>

0000188e <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	08 95       	ret

0000189a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	7c 01       	movw	r14, r24
    18aa:	2f e0       	ldi	r18, 0x0F	; 15
    18ac:	e2 0e       	add	r14, r18
    18ae:	f1 1c       	adc	r15, r1
    18b0:	c0 e0       	ldi	r28, 0x00	; 0
    18b2:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    18b4:	2f e1       	ldi	r18, 0x1F	; 31
    18b6:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    18b8:	8c 01       	movw	r16, r24
    18ba:	05 5e       	subi	r16, 0xE5	; 229
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	f7 01       	movw	r30, r14
    18c0:	61 91       	ld	r22, Z+
    18c2:	7f 01       	movw	r14, r30
    18c4:	c8 01       	movw	r24, r16
    18c6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN17Adafruit_MCP2301711digitalReadEh>
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	0c 2e       	mov	r0, r28
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    18da:	20 95       	com	r18
    18dc:	30 95       	com	r19
    18de:	d2 22       	and	r13, r18
    18e0:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    18e2:	c5 30       	cpi	r28, 0x05	; 5
    18e4:	d1 05       	cpc	r29, r1
    18e6:	59 f7       	brne	.-42     	; 0x18be <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    18e8:	8d 2d       	mov	r24, r13
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	08 95       	ret

000018fa <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    18fa:	68 2f       	mov	r22, r24
    18fc:	82 e1       	ldi	r24, 0x12	; 18
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <_ZN7TwoWire5writeEh>

00001904 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    190a:	68 30       	cpi	r22, 0x08	; 8
    190c:	08 f0       	brcs	.+2      	; 0x1910 <_ZN17Adafruit_MCP230175beginEh+0xc>
    190e:	67 e0       	ldi	r22, 0x07	; 7
    1910:	68 83       	st	Y, r22

  WIRE.begin();
    1912:	82 e1       	ldi	r24, 0x12	; 18
    1914:	92 e0       	ldi	r25, 0x02	; 2
    1916:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    191a:	68 81       	ld	r22, Y
    191c:	60 62       	ori	r22, 0x20	; 32
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	82 e1       	ldi	r24, 0x12	; 18
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1934:	82 e1       	ldi	r24, 0x12	; 18
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    193c:	68 81       	ld	r22, Y
    193e:	60 62       	ori	r22, 0x20	; 32
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	82 e1       	ldi	r24, 0x12	; 18
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1956:	82 e1       	ldi	r24, 0x12	; 18
    1958:	92 e0       	ldi	r25, 0x02	; 2
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    195e:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>

00001962 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <_ZN17Adafruit_MCP230175beginEh>

00001968 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	d6 2f       	mov	r29, r22
    196e:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1970:	fc 01       	movw	r30, r24
    1972:	60 81       	ld	r22, Z
    1974:	60 62       	ori	r22, 0x20	; 32
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	82 e1       	ldi	r24, 0x12	; 18
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1980:	82 e1       	ldi	r24, 0x12	; 18
    1982:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1986:	8d 2f       	mov	r24, r29
    1988:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(ba >> 8);
    198c:	8c 2f       	mov	r24, r28
    198e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1992:	82 e1       	ldi	r24, 0x12	; 18
    1994:	92 e0       	ldi	r25, 0x02	; 2
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    199a:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>

0000199e <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	8c 01       	movw	r16, r24
    19aa:	c6 2f       	mov	r28, r22
    19ac:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    19ae:	60 31       	cpi	r22, 0x10	; 16
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    19b2:	51 c0       	rjmp	.+162    	; 0x1a56 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    19b4:	68 30       	cpi	r22, 0x08	; 8
    19b6:	20 f0       	brcs	.+8      	; 0x19c0 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    19b8:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    19ba:	ff 24       	eor	r15, r15
    19bc:	f3 94       	inc	r15
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    19c0:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19c2:	f8 01       	movw	r30, r16
    19c4:	60 81       	ld	r22, Z
    19c6:	60 62       	ori	r22, 0x20	; 32
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	82 e1       	ldi	r24, 0x12	; 18
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    19d2:	8f 2d       	mov	r24, r15
    19d4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    19d8:	82 e1       	ldi	r24, 0x12	; 18
    19da:	92 e0       	ldi	r25, 0x02	; 2
    19dc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    19e0:	f8 01       	movw	r30, r16
    19e2:	60 81       	ld	r22, Z
    19e4:	60 62       	ori	r22, 0x20	; 32
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	82 e1       	ldi	r24, 0x12	; 18
    19ee:	92 e0       	ldi	r25, 0x02	; 2
    19f0:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    19f4:	82 e1       	ldi	r24, 0x12	; 18
    19f6:	92 e0       	ldi	r25, 0x02	; 2
    19f8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    19fc:	21 e0       	ldi	r18, 0x01	; 1
    19fe:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1a00:	d1 11       	cpse	r29, r1
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1a04:	a9 01       	movw	r20, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1a08:	44 0f       	add	r20, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	ca 95       	dec	r28
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1a10:	ea 01       	movw	r28, r20
    1a12:	c8 2b       	or	r28, r24
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1a16:	f9 01       	movw	r30, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ca 95       	dec	r28
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1a22:	ef 01       	movw	r28, r30
    1a24:	c0 95       	com	r28
    1a26:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a28:	f8 01       	movw	r30, r16
    1a2a:	60 81       	ld	r22, Z
    1a2c:	60 62       	ori	r22, 0x20	; 32
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	82 e1       	ldi	r24, 0x12	; 18
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1a38:	8f 2d       	mov	r24, r15
    1a3a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(iodir);	
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1a44:	82 e1       	ldi	r24, 0x12	; 18
    1a46:	92 e0       	ldi	r25, 0x02	; 2
}
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1a52:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	08 95       	ret

00001a62 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a68:	68 81       	ld	r22, Y
    1a6a:	60 62       	ori	r22, 0x20	; 32
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	82 e1       	ldi	r24, 0x12	; 18
    1a70:	92 e0       	ldi	r25, 0x02	; 2
    1a72:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1a76:	82 e1       	ldi	r24, 0x12	; 18
    1a78:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1a7c:	82 e1       	ldi	r24, 0x12	; 18
    1a7e:	92 e0       	ldi	r25, 0x02	; 2
    1a80:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1a84:	68 81       	ld	r22, Y
    1a86:	60 62       	ori	r22, 0x20	; 32
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	42 e0       	ldi	r20, 0x02	; 2
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	82 e1       	ldi	r24, 0x12	; 18
    1a90:	92 e0       	ldi	r25, 0x02	; 2
    1a92:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a96:	82 e1       	ldi	r24, 0x12	; 18
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
    1a9e:	c8 2f       	mov	r28, r24
    1aa0:	82 e1       	ldi	r24, 0x12	; 18
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1aac:	8c 2b       	or	r24, r28
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	08 95       	ret

00001ab4 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	8c 01       	movw	r16, r24
    1abe:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1ac0:	60 31       	cpi	r22, 0x10	; 16
    1ac2:	58 f5       	brcc	.+86     	; 0x1b1a <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1ac4:	68 30       	cpi	r22, 0x08	; 8
    1ac6:	18 f0       	brcs	.+6      	; 0x1ace <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1ac8:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1aca:	d3 e1       	ldi	r29, 0x13	; 19
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1ace:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	60 81       	ld	r22, Z
    1ad4:	60 62       	ori	r22, 0x20	; 32
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	82 e1       	ldi	r24, 0x12	; 18
    1ada:	92 e0       	ldi	r25, 0x02	; 2
    1adc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1ae0:	8d 2f       	mov	r24, r29
    1ae2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1ae6:	82 e1       	ldi	r24, 0x12	; 18
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1aee:	f8 01       	movw	r30, r16
    1af0:	60 81       	ld	r22, Z
    1af2:	60 62       	ori	r22, 0x20	; 32
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	82 e1       	ldi	r24, 0x12	; 18
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b02:	82 e1       	ldi	r24, 0x12	; 18
    1b04:	92 e0       	ldi	r25, 0x02	; 2
    1b06:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1b0a:	99 27       	eor	r25, r25
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1b0e:	95 95       	asr	r25
    1b10:	87 95       	ror	r24
    1b12:	ca 95       	dec	r28
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1b16:	81 70       	andi	r24, 0x01	; 1
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	8c 01       	movw	r16, r24
    1b32:	c6 2f       	mov	r28, r22
    1b34:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1b36:	60 31       	cpi	r22, 0x10	; 16
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1b3a:	52 c0       	rjmp	.+164    	; 0x1be0 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1b3c:	68 30       	cpi	r22, 0x08	; 8
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1b40:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1b42:	9d e0       	ldi	r25, 0x0D	; 13
    1b44:	f9 2e       	mov	r15, r25
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1b48:	8c e0       	ldi	r24, 0x0C	; 12
    1b4a:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	60 81       	ld	r22, Z
    1b50:	60 62       	ori	r22, 0x20	; 32
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	82 e1       	ldi	r24, 0x12	; 18
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1b5c:	8f 2d       	mov	r24, r15
    1b5e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1b62:	82 e1       	ldi	r24, 0x12	; 18
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	60 81       	ld	r22, Z
    1b6e:	60 62       	ori	r22, 0x20	; 32
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	82 e1       	ldi	r24, 0x12	; 18
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b7e:	82 e1       	ldi	r24, 0x12	; 18
    1b80:	92 e0       	ldi	r25, 0x02	; 2
    1b82:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1b8a:	d1 30       	cpi	r29, 0x01	; 1
    1b8c:	49 f4       	brne	.+18     	; 0x1ba0 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1b8e:	a9 01       	movw	r20, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1b92:	44 0f       	add	r20, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	ca 95       	dec	r28
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1b9a:	ea 01       	movw	r28, r20
    1b9c:	c8 2b       	or	r28, r24
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	ca 95       	dec	r28
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1bac:	ef 01       	movw	r28, r30
    1bae:	c0 95       	com	r28
    1bb0:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	60 81       	ld	r22, Z
    1bb6:	60 62       	ori	r22, 0x20	; 32
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	82 e1       	ldi	r24, 0x12	; 18
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1bc2:	8f 2d       	mov	r24, r15
    1bc4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(gppu);	
    1bc8:	8c 2f       	mov	r24, r28
    1bca:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1bce:	82 e1       	ldi	r24, 0x12	; 18
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1bdc:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	08 95       	ret

00001bec <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	c6 2f       	mov	r28, r22
    1bfc:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1bfe:	60 31       	cpi	r22, 0x10	; 16
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1c02:	56 c0       	rjmp	.+172    	; 0x1cb0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1c04:	68 30       	cpi	r22, 0x08	; 8
    1c06:	28 f0       	brcs	.+10     	; 0x1c12 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1c08:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1c0a:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1c0c:	93 e1       	ldi	r25, 0x13	; 19
    1c0e:	f9 2e       	mov	r15, r25
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1c12:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1c14:	82 e1       	ldi	r24, 0x12	; 18
    1c16:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c18:	f8 01       	movw	r30, r16
    1c1a:	60 81       	ld	r22, Z
    1c1c:	60 62       	ori	r22, 0x20	; 32
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	82 e1       	ldi	r24, 0x12	; 18
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1c28:	8d 2f       	mov	r24, r29
    1c2a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1c2e:	82 e1       	ldi	r24, 0x12	; 18
    1c30:	92 e0       	ldi	r25, 0x02	; 2
    1c32:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1c36:	f8 01       	movw	r30, r16
    1c38:	60 81       	ld	r22, Z
    1c3a:	60 62       	ori	r22, 0x20	; 32
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	82 e1       	ldi	r24, 0x12	; 18
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c4a:	82 e1       	ldi	r24, 0x12	; 18
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1c52:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1c58:	ef 12       	cpse	r14, r31
    1c5a:	09 c0       	rjmp	.+18     	; 0x1c6e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1c5c:	a9 01       	movw	r20, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1c60:	44 0f       	add	r20, r20
    1c62:	55 1f       	adc	r21, r21
    1c64:	ca 95       	dec	r28
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1c68:	ea 01       	movw	r28, r20
    1c6a:	c8 2b       	or	r28, r24
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1c6e:	f9 01       	movw	r30, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1c72:	ee 0f       	add	r30, r30
    1c74:	ff 1f       	adc	r31, r31
    1c76:	ca 95       	dec	r28
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1c7a:	ef 01       	movw	r28, r30
    1c7c:	c0 95       	com	r28
    1c7e:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c80:	f8 01       	movw	r30, r16
    1c82:	60 81       	ld	r22, Z
    1c84:	60 62       	ori	r22, 0x20	; 32
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	82 e1       	ldi	r24, 0x12	; 18
    1c8a:	92 e0       	ldi	r25, 0x02	; 2
    1c8c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1c90:	8f 2d       	mov	r24, r15
    1c92:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  wiresend(gpio);	
    1c96:	8c 2f       	mov	r24, r28
    1c98:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZL8wiresendh>
  WIRE.endTransmission();
    1c9c:	82 e1       	ldi	r24, 0x12	; 18
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
}
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1cac:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN7TwoWire15endTransmissionEv>
}
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	08 95       	ret

00001cbe <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1cbe:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1cc8:	82 1b       	sub	r24, r18
    1cca:	91 09       	sbc	r25, r1
    1ccc:	08 95       	ret

00001cce <_ZN7TwoWire4readEv>:
    1cce:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1cd2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1cd6:	98 17       	cp	r25, r24
    1cd8:	50 f4       	brcc	.+20     	; 0x1cee <_ZN7TwoWire4readEv+0x20>
    1cda:	e9 2f       	mov	r30, r25
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	e8 5b       	subi	r30, 0xB8	; 184
    1ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce2:	20 81       	ld	r18, Z
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	9f 5f       	subi	r25, 0xFF	; 255
    1ce8:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <_ZN7TwoWire4readEv+0x24>
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	c9 01       	movw	r24, r18
    1cf4:	08 95       	ret

00001cf6 <_ZN7TwoWire4peekEv>:
    1cf6:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1cfa:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1cfe:	e8 17       	cp	r30, r24
    1d00:	30 f4       	brcc	.+12     	; 0x1d0e <_ZN7TwoWire4peekEv+0x18>
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	e8 5b       	subi	r30, 0xB8	; 184
    1d06:	fd 4f       	sbci	r31, 0xFD	; 253
    1d08:	80 81       	ld	r24, Z
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	08 95       	ret
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	9f ef       	ldi	r25, 0xFF	; 255
    1d12:	08 95       	ret

00001d14 <_ZN7TwoWire5flushEv>:
    1d14:	08 95       	ret

00001d16 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	ec 01       	movw	r28, r24
    1d1c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <_ZN7TwoWire14user_onReceiveE>
    1d20:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <_ZN7TwoWire14user_onReceiveE+0x1>
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	f1 f0       	breq	.+60     	; 0x1d64 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d28:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1d2c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1d30:	98 17       	cp	r25, r24
    1d32:	c0 f0       	brcs	.+48     	; 0x1d64 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	29 2f       	mov	r18, r25
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	26 17       	cp	r18, r22
    1d3c:	37 07       	cpc	r19, r23
    1d3e:	54 f4       	brge	.+20     	; 0x1d54 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1d40:	de 01       	movw	r26, r28
    1d42:	a2 0f       	add	r26, r18
    1d44:	b3 1f       	adc	r27, r19
    1d46:	4c 91       	ld	r20, X
    1d48:	d9 01       	movw	r26, r18
    1d4a:	a8 5b       	subi	r26, 0xB8	; 184
    1d4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d4e:	4c 93       	st	X, r20
    1d50:	9f 5f       	subi	r25, 0xFF	; 255
    1d52:	f1 cf       	rjmp	.-30     	; 0x1d36 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1d54:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1d58:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	09 94       	ijmp
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <_ZN7TwoWire16onRequestServiceEv>:
    1d6a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <_ZN7TwoWire14user_onRequestE>
    1d6e:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <_ZN7TwoWire14user_onRequestE+0x1>
    1d72:	30 97       	sbiw	r30, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1d76:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1d7a:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1d7e:	09 94       	ijmp
    1d80:	08 95       	ret

00001d82 <_ZN7TwoWire5writeEPKhj>:
    1d82:	cf 92       	push	r12
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	7c 01       	movw	r14, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8a 01       	movw	r16, r20
    1d98:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    1d9c:	22 23       	and	r18, r18
    1d9e:	89 f0       	breq	.+34     	; 0x1dc2 <_ZN7TwoWire5writeEPKhj+0x40>
    1da0:	eb 01       	movw	r28, r22
    1da2:	6b 01       	movw	r12, r22
    1da4:	c4 0e       	add	r12, r20
    1da6:	d5 1e       	adc	r13, r21
    1da8:	cc 15       	cp	r28, r12
    1daa:	dd 05       	cpc	r29, r13
    1dac:	69 f0       	breq	.+26     	; 0x1dc8 <_ZN7TwoWire5writeEPKhj+0x46>
    1dae:	69 91       	ld	r22, Y+
    1db0:	d7 01       	movw	r26, r14
    1db2:	ed 91       	ld	r30, X+
    1db4:	fc 91       	ld	r31, X
    1db6:	01 90       	ld	r0, Z+
    1db8:	f0 81       	ld	r31, Z
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	09 95       	icall
    1dc0:	f3 cf       	rjmp	.-26     	; 0x1da8 <_ZN7TwoWire5writeEPKhj+0x26>
    1dc2:	64 2f       	mov	r22, r20
    1dc4:	0e 94 89 10 	call	0x2112	; 0x2112 <twi_transmit>
    1dc8:	c8 01       	movw	r24, r16
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	08 95       	ret

00001ddc <_ZN7TwoWire5writeEh>:
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	1f 92       	push	r1
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	69 83       	std	Y+1, r22	; 0x01
    1de8:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    1dec:	22 23       	and	r18, r18
    1dee:	d1 f0       	breq	.+52     	; 0x1e24 <_ZN7TwoWire5writeEh+0x48>
    1df0:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1df4:	20 32       	cpi	r18, 0x20	; 32
    1df6:	40 f0       	brcs	.+16     	; 0x1e08 <_ZN7TwoWire5writeEh+0x2c>
    1df8:	21 e0       	ldi	r18, 0x01	; 1
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	33 83       	std	Z+3, r19	; 0x03
    1e00:	22 83       	std	Z+2, r18	; 0x02
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	15 c0       	rjmp	.+42     	; 0x1e32 <_ZN7TwoWire5writeEh+0x56>
    1e08:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1e0c:	e8 2f       	mov	r30, r24
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	eb 5d       	subi	r30, 0xDB	; 219
    1e12:	fd 4f       	sbci	r31, 0xFD	; 253
    1e14:	99 81       	ldd	r25, Y+1	; 0x01
    1e16:	90 83       	st	Z, r25
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1e1e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e22:	05 c0       	rjmp	.+10     	; 0x1e2e <_ZN7TwoWire5writeEh+0x52>
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	ce 01       	movw	r24, r28
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	0e 94 89 10 	call	0x2112	; 0x2112 <twi_transmit>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <_ZN7TwoWireC1Ev>:
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	13 82       	std	Z+3, r1	; 0x03
    1e3e:	12 82       	std	Z+2, r1	; 0x02
    1e40:	88 ee       	ldi	r24, 0xE8	; 232
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	84 83       	std	Z+4, r24	; 0x04
    1e4a:	95 83       	std	Z+5, r25	; 0x05
    1e4c:	a6 83       	std	Z+6, r26	; 0x06
    1e4e:	b7 83       	std	Z+7, r27	; 0x07
    1e50:	89 ec       	ldi	r24, 0xC9	; 201
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	08 95       	ret

00001e5a <_ZN7TwoWire5beginEv>:
    1e5a:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1e5e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1e62:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1e66:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e6a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <twi_init>
    1e6e:	85 eb       	ldi	r24, 0xB5	; 181
    1e70:	9e e0       	ldi	r25, 0x0E	; 14
    1e72:	0e 94 b6 10 	call	0x216c	; 0x216c <twi_attachSlaveTxEvent>
    1e76:	8b e8       	ldi	r24, 0x8B	; 139
    1e78:	9e e0       	ldi	r25, 0x0E	; 14
    1e7a:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <twi_attachSlaveRxEvent>

00001e7e <_ZN7TwoWire17beginTransmissionEh>:
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZN7TwoWire12transmittingE>
    1e84:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <_ZN7TwoWire9txAddressE>
    1e88:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1e8c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e90:	08 95       	ret

00001e92 <_ZN7TwoWire17beginTransmissionEi>:
    1e92:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <_ZN7TwoWire17beginTransmissionEh>

00001e96 <_ZN7TwoWire15endTransmissionEh>:
    1e96:	0f 93       	push	r16
    1e98:	06 2f       	mov	r16, r22
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1ea0:	65 e2       	ldi	r22, 0x25	; 37
    1ea2:	72 e0       	ldi	r23, 0x02	; 2
    1ea4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <_ZN7TwoWire9txAddressE>
    1ea8:	0e 94 33 10 	call	0x2066	; 0x2066 <twi_writeTo>
    1eac:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1eb0:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1eb4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <_ZN7TwoWire12transmittingE>
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <_ZN7TwoWire11requestFromEhhmhh>:
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	af 92       	push	r10
    1ec6:	bf 92       	push	r11
    1ec8:	cf 92       	push	r12
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	5c 01       	movw	r10, r24
    1ed8:	f6 2e       	mov	r15, r22
    1eda:	d4 2f       	mov	r29, r20
    1edc:	28 01       	movw	r4, r16
    1ede:	39 01       	movw	r6, r18
    1ee0:	ee 20       	and	r14, r14
    1ee2:	21 f1       	breq	.+72     	; 0x1f2c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1ee4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN7TwoWire17beginTransmissionEh>
    1ee8:	ce 2d       	mov	r28, r14
    1eea:	c4 30       	cpi	r28, 0x04	; 4
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1eee:	c3 e0       	ldi	r28, 0x03	; 3
    1ef0:	c1 50       	subi	r28, 0x01	; 1
    1ef2:	c0 f0       	brcs	.+48     	; 0x1f24 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1ef4:	28 e0       	ldi	r18, 0x08	; 8
    1ef6:	c2 9f       	mul	r28, r18
    1ef8:	c0 01       	movw	r24, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	a3 01       	movw	r20, r6
    1efe:	92 01       	movw	r18, r4
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1f02:	56 95       	lsr	r21
    1f04:	47 95       	ror	r20
    1f06:	37 95       	ror	r19
    1f08:	27 95       	ror	r18
    1f0a:	8a 95       	dec	r24
    1f0c:	d2 f7       	brpl	.-12     	; 0x1f02 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1f0e:	ca 01       	movw	r24, r20
    1f10:	b9 01       	movw	r22, r18
    1f12:	d5 01       	movw	r26, r10
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	01 90       	ld	r0, Z+
    1f1a:	f0 81       	ld	r31, Z
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	c5 01       	movw	r24, r10
    1f20:	09 95       	icall
    1f22:	e6 cf       	rjmp	.-52     	; 0x1ef0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	c5 01       	movw	r24, r10
    1f28:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN7TwoWire15endTransmissionEh>
    1f2c:	4d 2f       	mov	r20, r29
    1f2e:	d1 32       	cpi	r29, 0x21	; 33
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	2c 2d       	mov	r18, r12
    1f36:	68 e4       	ldi	r22, 0x48	; 72
    1f38:	72 e0       	ldi	r23, 0x02	; 2
    1f3a:	8f 2d       	mov	r24, r15
    1f3c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <twi_readFrom>
    1f40:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1f44:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	cf 90       	pop	r12
    1f56:	bf 90       	pop	r11
    1f58:	af 90       	pop	r10
    1f5a:	7f 90       	pop	r7
    1f5c:	6f 90       	pop	r6
    1f5e:	5f 90       	pop	r5
    1f60:	4f 90       	pop	r4
    1f62:	08 95       	ret

00001f64 <_ZN7TwoWire11requestFromEhhh>:
    1f64:	cf 92       	push	r12
    1f66:	ef 92       	push	r14
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	c2 2e       	mov	r12, r18
    1f6e:	e1 2c       	mov	r14, r1
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	98 01       	movw	r18, r16
    1f76:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN7TwoWire11requestFromEhhmhh>
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ef 90       	pop	r14
    1f80:	cf 90       	pop	r12
    1f82:	08 95       	ret

00001f84 <_ZN7TwoWire11requestFromEii>:
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <_ZN7TwoWire11requestFromEhhh>

00001f8a <_ZN7TwoWire15endTransmissionEv>:
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <_ZN7TwoWire15endTransmissionEh>

00001f90 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f90:	82 e1       	ldi	r24, 0x12	; 18
    1f92:	92 e0       	ldi	r25, 0x02	; 2
    1f94:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN7TwoWireC1Ev>

00001f98 <yield>:
    1f98:	08 95       	ret

00001f9a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f9a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <twi_sendStop>
    1fa4:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	82 e1       	ldi	r24, 0x12	; 18
    1fac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	83 e1       	ldi	r24, 0x13	; 19
    1fb4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalWrite>
    1fb8:	e9 eb       	ldi	r30, 0xB9	; 185
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8e 7f       	andi	r24, 0xFE	; 254
    1fc0:	80 83       	st	Z, r24
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8d 7f       	andi	r24, 0xFD	; 253
    1fc6:	80 83       	st	Z, r24
    1fc8:	88 e4       	ldi	r24, 0x48	; 72
    1fca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1fce:	85 e4       	ldi	r24, 0x45	; 69
    1fd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1fd4:	08 95       	ret

00001fd6 <twi_readFrom>:
    1fd6:	41 32       	cpi	r20, 0x21	; 33
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <twi_readFrom+0x6>
    1fda:	43 c0       	rjmp	.+134    	; 0x2062 <twi_readFrom+0x8c>
    1fdc:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_state>
    1fe0:	91 11       	cpse	r25, r1
    1fe2:	fc cf       	rjmp	.-8      	; 0x1fdc <twi_readFrom+0x6>
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <twi_state>
    1fea:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <twi_sendStop>
    1fee:	2f ef       	ldi	r18, 0xFF	; 255
    1ff0:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <twi_error>
    1ff4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <twi_masterBufferIndex>
    1ff8:	24 0f       	add	r18, r20
    1ffa:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <twi_masterBufferLength>
    1ffe:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <twi_slarw>
    2002:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <twi_slarw>
    2006:	88 0f       	add	r24, r24
    2008:	89 2b       	or	r24, r25
    200a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_slarw>
    200e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_inRepStart>
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	61 f4       	brne	.+24     	; 0x202e <twi_readFrom+0x58>
    2016:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    201a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    201e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2022:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2026:	83 fd       	sbrc	r24, 3
    2028:	f8 cf       	rjmp	.-16     	; 0x201a <twi_readFrom+0x44>
    202a:	85 ec       	ldi	r24, 0xC5	; 197
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <twi_readFrom+0x5a>
    202e:	85 ee       	ldi	r24, 0xE5	; 229
    2030:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2034:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_state>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	e1 f3       	breq	.-8      	; 0x2034 <twi_readFrom+0x5e>
    203c:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    2040:	84 17       	cp	r24, r20
    2042:	10 f4       	brcc	.+4      	; 0x2048 <twi_readFrom+0x72>
    2044:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    2048:	ae ea       	ldi	r26, 0xAE	; 174
    204a:	b2 e0       	ldi	r27, 0x02	; 2
    204c:	96 2f       	mov	r25, r22
    204e:	fb 01       	movw	r30, r22
    2050:	8e 2f       	mov	r24, r30
    2052:	89 1b       	sub	r24, r25
    2054:	84 17       	cp	r24, r20
    2056:	18 f4       	brcc	.+6      	; 0x205e <twi_readFrom+0x88>
    2058:	8d 91       	ld	r24, X+
    205a:	81 93       	st	Z+, r24
    205c:	f9 cf       	rjmp	.-14     	; 0x2050 <twi_readFrom+0x7a>
    205e:	84 2f       	mov	r24, r20
    2060:	08 95       	ret
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret

00002066 <twi_writeTo>:
    2066:	0f 93       	push	r16
    2068:	41 32       	cpi	r20, 0x21	; 33
    206a:	08 f0       	brcs	.+2      	; 0x206e <twi_writeTo+0x8>
    206c:	4a c0       	rjmp	.+148    	; 0x2102 <twi_writeTo+0x9c>
    206e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_state>
    2072:	91 11       	cpse	r25, r1
    2074:	fc cf       	rjmp	.-8      	; 0x206e <twi_writeTo+0x8>
    2076:	32 e0       	ldi	r19, 0x02	; 2
    2078:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <twi_state>
    207c:	00 93 d3 02 	sts	0x02D3, r16	; 0x8002d3 <twi_sendStop>
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <twi_error>
    2086:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <twi_masterBufferIndex>
    208a:	40 93 ac 02 	sts	0x02AC, r20	; 0x8002ac <twi_masterBufferLength>
    208e:	56 2f       	mov	r21, r22
    2090:	ae ea       	ldi	r26, 0xAE	; 174
    2092:	b2 e0       	ldi	r27, 0x02	; 2
    2094:	fb 01       	movw	r30, r22
    2096:	3e 2f       	mov	r19, r30
    2098:	35 1b       	sub	r19, r21
    209a:	34 17       	cp	r19, r20
    209c:	18 f4       	brcc	.+6      	; 0x20a4 <twi_writeTo+0x3e>
    209e:	31 91       	ld	r19, Z+
    20a0:	3d 93       	st	X+, r19
    20a2:	f9 cf       	rjmp	.-14     	; 0x2096 <twi_writeTo+0x30>
    20a4:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_slarw>
    20a8:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <twi_slarw>
    20ac:	88 0f       	add	r24, r24
    20ae:	83 2b       	or	r24, r19
    20b0:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_slarw>
    20b4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_inRepStart>
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <twi_writeTo+0x6e>
    20bc:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    20c0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    20c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20cc:	83 fd       	sbrc	r24, 3
    20ce:	f8 cf       	rjmp	.-16     	; 0x20c0 <twi_writeTo+0x5a>
    20d0:	85 ec       	ldi	r24, 0xC5	; 197
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <twi_writeTo+0x70>
    20d4:	85 ee       	ldi	r24, 0xE5	; 229
    20d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20da:	22 23       	and	r18, r18
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <twi_writeTo+0x80>
    20de:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_state>
    20e2:	82 30       	cpi	r24, 0x02	; 2
    20e4:	d1 f3       	breq	.-12     	; 0x20da <twi_writeTo+0x74>
    20e6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    20ea:	8f 3f       	cpi	r24, 0xFF	; 255
    20ec:	79 f0       	breq	.+30     	; 0x210c <twi_writeTo+0xa6>
    20ee:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    20f2:	80 32       	cpi	r24, 0x20	; 32
    20f4:	41 f0       	breq	.+16     	; 0x2106 <twi_writeTo+0xa0>
    20f6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    20fa:	80 33       	cpi	r24, 0x30	; 48
    20fc:	31 f0       	breq	.+12     	; 0x210a <twi_writeTo+0xa4>
    20fe:	94 e0       	ldi	r25, 0x04	; 4
    2100:	05 c0       	rjmp	.+10     	; 0x210c <twi_writeTo+0xa6>
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	03 c0       	rjmp	.+6      	; 0x210c <twi_writeTo+0xa6>
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	01 c0       	rjmp	.+2      	; 0x210c <twi_writeTo+0xa6>
    210a:	93 e0       	ldi	r25, 0x03	; 3
    210c:	89 2f       	mov	r24, r25
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <twi_transmit>:
    2112:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <twi_txBufferLength>
    2116:	26 2f       	mov	r18, r22
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	24 0f       	add	r18, r20
    211c:	31 1d       	adc	r19, r1
    211e:	21 32       	cpi	r18, 0x21	; 33
    2120:	31 05       	cpc	r19, r1
    2122:	dc f4       	brge	.+54     	; 0x215a <twi_transmit+0x48>
    2124:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <twi_state>
    2128:	24 30       	cpi	r18, 0x04	; 4
    212a:	c9 f4       	brne	.+50     	; 0x215e <twi_transmit+0x4c>
    212c:	fc 01       	movw	r30, r24
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	86 17       	cp	r24, r22
    2134:	58 f4       	brcc	.+22     	; 0x214c <twi_transmit+0x3a>
    2136:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <twi_txBufferLength>
    213a:	21 91       	ld	r18, Z+
    213c:	dc 01       	movw	r26, r24
    213e:	a4 57       	subi	r26, 0x74	; 116
    2140:	bd 4f       	sbci	r27, 0xFD	; 253
    2142:	a3 0f       	add	r26, r19
    2144:	b1 1d       	adc	r27, r1
    2146:	2c 93       	st	X, r18
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	f3 cf       	rjmp	.-26     	; 0x2132 <twi_transmit+0x20>
    214c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    2150:	68 0f       	add	r22, r24
    2152:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <twi_txBufferLength>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	08 95       	ret
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	08 95       	ret
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	08 95       	ret

00002162 <twi_attachSlaveRxEvent>:
    2162:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <twi_onSlaveReceive+0x1>
    2166:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <twi_onSlaveReceive>
    216a:	08 95       	ret

0000216c <twi_attachSlaveTxEvent>:
    216c:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <twi_onSlaveTransmit+0x1>
    2170:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <twi_onSlaveTransmit>
    2174:	08 95       	ret

00002176 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2176:	85 ed       	ldi	r24, 0xD5	; 213
    2178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    217c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2180:	84 fd       	sbrc	r24, 4
    2182:	fc cf       	rjmp	.-8      	; 0x217c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2184:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    2188:	08 95       	ret

0000218a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    218a:	85 ec       	ldi	r24, 0xC5	; 197
    218c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2190:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    2194:	08 95       	ret

00002196 <__vector_24>:
}

ISR(TWI_vect)
{
    2196:	1f 92       	push	r1
    2198:	0f 92       	push	r0
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	0f 92       	push	r0
    219e:	11 24       	eor	r1, r1
    21a0:	2f 93       	push	r18
    21a2:	3f 93       	push	r19
    21a4:	4f 93       	push	r20
    21a6:	5f 93       	push	r21
    21a8:	6f 93       	push	r22
    21aa:	7f 93       	push	r23
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	af 93       	push	r26
    21b2:	bf 93       	push	r27
    21b4:	ef 93       	push	r30
    21b6:	ff 93       	push	r31
  switch(TW_STATUS){
    21b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    21bc:	88 7f       	andi	r24, 0xF8	; 248
    21be:	80 36       	cpi	r24, 0x60	; 96
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_24+0x2e>
    21c2:	9e c0       	rjmp	.+316    	; 0x2300 <__vector_24+0x16a>
    21c4:	78 f5       	brcc	.+94     	; 0x2224 <__vector_24+0x8e>
    21c6:	88 32       	cpi	r24, 0x28	; 40
    21c8:	09 f4       	brne	.+2      	; 0x21cc <__vector_24+0x36>
    21ca:	5d c0       	rjmp	.+186    	; 0x2286 <__vector_24+0xf0>
    21cc:	90 f4       	brcc	.+36     	; 0x21f2 <__vector_24+0x5c>
    21ce:	80 31       	cpi	r24, 0x10	; 16
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <__vector_24+0x3e>
    21d2:	56 c0       	rjmp	.+172    	; 0x2280 <__vector_24+0xea>
    21d4:	38 f4       	brcc	.+14     	; 0x21e4 <__vector_24+0x4e>
    21d6:	88 23       	and	r24, r24
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__vector_24+0x46>
    21da:	f5 c0       	rjmp	.+490    	; 0x23c6 <__vector_24+0x230>
    21dc:	88 30       	cpi	r24, 0x08	; 8
    21de:	09 f4       	brne	.+2      	; 0x21e2 <__vector_24+0x4c>
    21e0:	4f c0       	rjmp	.+158    	; 0x2280 <__vector_24+0xea>
    21e2:	f5 c0       	rjmp	.+490    	; 0x23ce <__vector_24+0x238>
    21e4:	88 31       	cpi	r24, 0x18	; 24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_24+0x54>
    21e8:	4e c0       	rjmp	.+156    	; 0x2286 <__vector_24+0xf0>
    21ea:	80 32       	cpi	r24, 0x20	; 32
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_24+0x5a>
    21ee:	5f c0       	rjmp	.+190    	; 0x22ae <__vector_24+0x118>
    21f0:	ee c0       	rjmp	.+476    	; 0x23ce <__vector_24+0x238>
    21f2:	80 34       	cpi	r24, 0x40	; 64
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_24+0x62>
    21f6:	6a c0       	rjmp	.+212    	; 0x22cc <__vector_24+0x136>
    21f8:	58 f4       	brcc	.+22     	; 0x2210 <__vector_24+0x7a>
    21fa:	80 33       	cpi	r24, 0x30	; 48
    21fc:	09 f4       	brne	.+2      	; 0x2200 <__vector_24+0x6a>
    21fe:	57 c0       	rjmp	.+174    	; 0x22ae <__vector_24+0x118>
    2200:	88 33       	cpi	r24, 0x38	; 56
    2202:	09 f0       	breq	.+2      	; 0x2206 <__vector_24+0x70>
    2204:	e4 c0       	rjmp	.+456    	; 0x23ce <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2206:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_error>
      twi_releaseBus();
    220a:	0e 94 c5 10 	call	0x218a	; 0x218a <twi_releaseBus>
      break;
    220e:	df c0       	rjmp	.+446    	; 0x23ce <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2210:	80 35       	cpi	r24, 0x50	; 80
    2212:	09 f4       	brne	.+2      	; 0x2216 <__vector_24+0x80>
    2214:	4f c0       	rjmp	.+158    	; 0x22b4 <__vector_24+0x11e>
    2216:	88 35       	cpi	r24, 0x58	; 88
    2218:	09 f4       	brne	.+2      	; 0x221c <__vector_24+0x86>
    221a:	5d c0       	rjmp	.+186    	; 0x22d6 <__vector_24+0x140>
    221c:	88 34       	cpi	r24, 0x48	; 72
    221e:	09 f0       	breq	.+2      	; 0x2222 <__vector_24+0x8c>
    2220:	d6 c0       	rjmp	.+428    	; 0x23ce <__vector_24+0x238>
    2222:	d3 c0       	rjmp	.+422    	; 0x23ca <__vector_24+0x234>
    2224:	88 39       	cpi	r24, 0x98	; 152
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_24+0x94>
    2228:	c4 c0       	rjmp	.+392    	; 0x23b2 <__vector_24+0x21c>
    222a:	a8 f4       	brcc	.+42     	; 0x2256 <__vector_24+0xc0>
    222c:	88 37       	cpi	r24, 0x78	; 120
    222e:	09 f4       	brne	.+2      	; 0x2232 <__vector_24+0x9c>
    2230:	67 c0       	rjmp	.+206    	; 0x2300 <__vector_24+0x16a>
    2232:	38 f4       	brcc	.+14     	; 0x2242 <__vector_24+0xac>
    2234:	88 36       	cpi	r24, 0x68	; 104
    2236:	09 f4       	brne	.+2      	; 0x223a <__vector_24+0xa4>
    2238:	63 c0       	rjmp	.+198    	; 0x2300 <__vector_24+0x16a>
    223a:	80 37       	cpi	r24, 0x70	; 112
    223c:	09 f4       	brne	.+2      	; 0x2240 <__vector_24+0xaa>
    223e:	60 c0       	rjmp	.+192    	; 0x2300 <__vector_24+0x16a>
    2240:	c6 c0       	rjmp	.+396    	; 0x23ce <__vector_24+0x238>
    2242:	88 38       	cpi	r24, 0x88	; 136
    2244:	09 f4       	brne	.+2      	; 0x2248 <__vector_24+0xb2>
    2246:	b5 c0       	rjmp	.+362    	; 0x23b2 <__vector_24+0x21c>
    2248:	80 39       	cpi	r24, 0x90	; 144
    224a:	09 f4       	brne	.+2      	; 0x224e <__vector_24+0xb8>
    224c:	5f c0       	rjmp	.+190    	; 0x230c <__vector_24+0x176>
    224e:	80 38       	cpi	r24, 0x80	; 128
    2250:	09 f0       	breq	.+2      	; 0x2254 <__vector_24+0xbe>
    2252:	bd c0       	rjmp	.+378    	; 0x23ce <__vector_24+0x238>
    2254:	5b c0       	rjmp	.+182    	; 0x230c <__vector_24+0x176>
    2256:	80 3b       	cpi	r24, 0xB0	; 176
    2258:	09 f4       	brne	.+2      	; 0x225c <__vector_24+0xc6>
    225a:	83 c0       	rjmp	.+262    	; 0x2362 <__vector_24+0x1cc>
    225c:	38 f4       	brcc	.+14     	; 0x226c <__vector_24+0xd6>
    225e:	80 3a       	cpi	r24, 0xA0	; 160
    2260:	09 f4       	brne	.+2      	; 0x2264 <__vector_24+0xce>
    2262:	66 c0       	rjmp	.+204    	; 0x2330 <__vector_24+0x19a>
    2264:	88 3a       	cpi	r24, 0xA8	; 168
    2266:	09 f4       	brne	.+2      	; 0x226a <__vector_24+0xd4>
    2268:	7c c0       	rjmp	.+248    	; 0x2362 <__vector_24+0x1cc>
    226a:	b1 c0       	rjmp	.+354    	; 0x23ce <__vector_24+0x238>
    226c:	80 3c       	cpi	r24, 0xC0	; 192
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0xdc>
    2270:	a4 c0       	rjmp	.+328    	; 0x23ba <__vector_24+0x224>
    2272:	88 3c       	cpi	r24, 0xC8	; 200
    2274:	09 f4       	brne	.+2      	; 0x2278 <__vector_24+0xe2>
    2276:	a1 c0       	rjmp	.+322    	; 0x23ba <__vector_24+0x224>
    2278:	88 3b       	cpi	r24, 0xB8	; 184
    227a:	09 f4       	brne	.+2      	; 0x227e <__vector_24+0xe8>
    227c:	87 c0       	rjmp	.+270    	; 0x238c <__vector_24+0x1f6>
    227e:	a7 c0       	rjmp	.+334    	; 0x23ce <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2280:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    2284:	10 c0       	rjmp	.+32     	; 0x22a6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2286:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    228a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_masterBufferLength>
    228e:	98 17       	cp	r25, r24
    2290:	70 f5       	brcc	.+92     	; 0x22ee <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2292:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	8e 0f       	add	r24, r30
    229a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	e2 55       	subi	r30, 0x52	; 82
    22a2:	fd 4f       	sbci	r31, 0xFD	; 253
    22a4:	80 81       	ld	r24, Z
    22a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22aa:	85 ec       	ldi	r24, 0xC5	; 197
    22ac:	83 c0       	rjmp	.+262    	; 0x23b4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    22ae:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_error>
    22b2:	8b c0       	rjmp	.+278    	; 0x23ca <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22b4:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	8e 0f       	add	r24, r30
    22bc:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    22c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	e2 55       	subi	r30, 0x52	; 82
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22cc:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    22d0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_masterBufferLength>
    22d4:	6b c0       	rjmp	.+214    	; 0x23ac <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22d6:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8e 0f       	add	r24, r30
    22de:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    22e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	e2 55       	subi	r30, 0x52	; 82
    22ea:	fd 4f       	sbci	r31, 0xFD	; 253
    22ec:	80 83       	st	Z, r24
	if (twi_sendStop)
    22ee:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <twi_sendStop>
    22f2:	81 11       	cpse	r24, r1
    22f4:	6a c0       	rjmp	.+212    	; 0x23ca <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22fc:	84 ea       	ldi	r24, 0xA4	; 164
    22fe:	5e c0       	rjmp	.+188    	; 0x23bc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2306:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_rxBufferIndex>
    230a:	cf cf       	rjmp	.-98     	; 0x22aa <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    230c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_rxBufferIndex>
    2310:	80 32       	cpi	r24, 0x20	; 32
    2312:	08 f0       	brcs	.+2      	; 0x2316 <__vector_24+0x180>
    2314:	4e c0       	rjmp	.+156    	; 0x23b2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2316:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <twi_rxBufferIndex>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	8e 0f       	add	r24, r30
    231e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <twi_rxBufferIndex>
    2322:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	e6 59       	subi	r30, 0x96	; 150
    232a:	fd 4f       	sbci	r31, 0xFD	; 253
    232c:	80 83       	st	Z, r24
    232e:	bd cf       	rjmp	.-134    	; 0x22aa <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2330:	0e 94 c5 10 	call	0x218a	; 0x218a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2334:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_rxBufferIndex>
    2338:	80 32       	cpi	r24, 0x20	; 32
    233a:	30 f4       	brcc	.+12     	; 0x2348 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    233c:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <twi_rxBufferIndex>
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	e6 59       	subi	r30, 0x96	; 150
    2344:	fd 4f       	sbci	r31, 0xFD	; 253
    2346:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2348:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <twi_rxBufferIndex>
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <twi_onSlaveReceive>
    2352:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <twi_onSlaveReceive+0x1>
    2356:	8a e6       	ldi	r24, 0x6A	; 106
    2358:	92 e0       	ldi	r25, 0x02	; 2
    235a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    235c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_rxBufferIndex>
      break;
    2360:	36 c0       	rjmp	.+108    	; 0x23ce <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2362:	84 e0       	ldi	r24, 0x04	; 4
    2364:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2368:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    236c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2370:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <twi_onSlaveTransmit>
    2374:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <twi_onSlaveTransmit+0x1>
    2378:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    237a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    237e:	81 11       	cpse	r24, r1
    2380:	05 c0       	rjmp	.+10     	; 0x238c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2388:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    238c:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <twi_txBufferIndex>
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	8e 0f       	add	r24, r30
    2394:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi_txBufferIndex>
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	e4 57       	subi	r30, 0x74	; 116
    239c:	fd 4f       	sbci	r31, 0xFD	; 253
    239e:	80 81       	ld	r24, Z
    23a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    23a4:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi_txBufferIndex>
    23a8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    23ac:	98 17       	cp	r25, r24
    23ae:	08 f4       	brcc	.+2      	; 0x23b2 <__vector_24+0x21c>
    23b0:	7c cf       	rjmp	.-264    	; 0x22aa <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23b2:	85 e8       	ldi	r24, 0x85	; 133
    23b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23b8:	0a c0       	rjmp	.+20     	; 0x23ce <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23ba:	85 ec       	ldi	r24, 0xC5	; 197
    23bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23c0:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
      break;
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23c6:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi_error>
      twi_stop();
    23ca:	0e 94 bb 10 	call	0x2176	; 0x2176 <twi_stop>
      break;
  }
}
    23ce:	ff 91       	pop	r31
    23d0:	ef 91       	pop	r30
    23d2:	bf 91       	pop	r27
    23d4:	af 91       	pop	r26
    23d6:	9f 91       	pop	r25
    23d8:	8f 91       	pop	r24
    23da:	7f 91       	pop	r23
    23dc:	6f 91       	pop	r22
    23de:	5f 91       	pop	r21
    23e0:	4f 91       	pop	r20
    23e2:	3f 91       	pop	r19
    23e4:	2f 91       	pop	r18
    23e6:	0f 90       	pop	r0
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <__tablejump2__>:
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	05 90       	lpm	r0, Z+
    23f6:	f4 91       	lpm	r31, Z
    23f8:	e0 2d       	mov	r30, r0
    23fa:	09 94       	ijmp

000023fc <malloc>:
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	91 05       	cpc	r25, r1
    2408:	10 f4       	brcc	.+4      	; 0x240e <malloc+0x12>
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__flp>
    2412:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__flp+0x1>
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a0 e0       	ldi	r26, 0x00	; 0
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	30 97       	sbiw	r30, 0x00	; 0
    2420:	19 f1       	breq	.+70     	; 0x2468 <malloc+0x6c>
    2422:	40 81       	ld	r20, Z
    2424:	51 81       	ldd	r21, Z+1	; 0x01
    2426:	02 81       	ldd	r16, Z+2	; 0x02
    2428:	13 81       	ldd	r17, Z+3	; 0x03
    242a:	48 17       	cp	r20, r24
    242c:	59 07       	cpc	r21, r25
    242e:	c8 f0       	brcs	.+50     	; 0x2462 <malloc+0x66>
    2430:	84 17       	cp	r24, r20
    2432:	95 07       	cpc	r25, r21
    2434:	69 f4       	brne	.+26     	; 0x2450 <malloc+0x54>
    2436:	10 97       	sbiw	r26, 0x00	; 0
    2438:	31 f0       	breq	.+12     	; 0x2446 <malloc+0x4a>
    243a:	12 96       	adiw	r26, 0x02	; 2
    243c:	0c 93       	st	X, r16
    243e:	12 97       	sbiw	r26, 0x02	; 2
    2440:	13 96       	adiw	r26, 0x03	; 3
    2442:	1c 93       	st	X, r17
    2444:	27 c0       	rjmp	.+78     	; 0x2494 <malloc+0x98>
    2446:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <__flp>
    244a:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <__flp+0x1>
    244e:	22 c0       	rjmp	.+68     	; 0x2494 <malloc+0x98>
    2450:	21 15       	cp	r18, r1
    2452:	31 05       	cpc	r19, r1
    2454:	19 f0       	breq	.+6      	; 0x245c <malloc+0x60>
    2456:	42 17       	cp	r20, r18
    2458:	53 07       	cpc	r21, r19
    245a:	18 f4       	brcc	.+6      	; 0x2462 <malloc+0x66>
    245c:	9a 01       	movw	r18, r20
    245e:	bd 01       	movw	r22, r26
    2460:	ef 01       	movw	r28, r30
    2462:	df 01       	movw	r26, r30
    2464:	f8 01       	movw	r30, r16
    2466:	db cf       	rjmp	.-74     	; 0x241e <malloc+0x22>
    2468:	21 15       	cp	r18, r1
    246a:	31 05       	cpc	r19, r1
    246c:	f9 f0       	breq	.+62     	; 0x24ac <malloc+0xb0>
    246e:	28 1b       	sub	r18, r24
    2470:	39 0b       	sbc	r19, r25
    2472:	24 30       	cpi	r18, 0x04	; 4
    2474:	31 05       	cpc	r19, r1
    2476:	80 f4       	brcc	.+32     	; 0x2498 <malloc+0x9c>
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	61 15       	cp	r22, r1
    247e:	71 05       	cpc	r23, r1
    2480:	21 f0       	breq	.+8      	; 0x248a <malloc+0x8e>
    2482:	fb 01       	movw	r30, r22
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <malloc+0x96>
    248a:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__flp+0x1>
    248e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__flp>
    2492:	fe 01       	movw	r30, r28
    2494:	32 96       	adiw	r30, 0x02	; 2
    2496:	44 c0       	rjmp	.+136    	; 0x2520 <malloc+0x124>
    2498:	fe 01       	movw	r30, r28
    249a:	e2 0f       	add	r30, r18
    249c:	f3 1f       	adc	r31, r19
    249e:	81 93       	st	Z+, r24
    24a0:	91 93       	st	Z+, r25
    24a2:	22 50       	subi	r18, 0x02	; 2
    24a4:	31 09       	sbc	r19, r1
    24a6:	39 83       	std	Y+1, r19	; 0x01
    24a8:	28 83       	st	Y, r18
    24aa:	3a c0       	rjmp	.+116    	; 0x2520 <malloc+0x124>
    24ac:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    24b0:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    24b4:	23 2b       	or	r18, r19
    24b6:	41 f4       	brne	.+16     	; 0x24c8 <malloc+0xcc>
    24b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    24bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    24c0:	30 93 d7 02 	sts	0x02D7, r19	; 0x8002d7 <__brkval+0x1>
    24c4:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <__brkval>
    24c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    24cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    24d0:	21 15       	cp	r18, r1
    24d2:	31 05       	cpc	r19, r1
    24d4:	41 f4       	brne	.+16     	; 0x24e6 <malloc+0xea>
    24d6:	2d b7       	in	r18, 0x3d	; 61
    24d8:	3e b7       	in	r19, 0x3e	; 62
    24da:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    24de:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    24e2:	24 1b       	sub	r18, r20
    24e4:	35 0b       	sbc	r19, r21
    24e6:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__brkval>
    24ea:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__brkval+0x1>
    24ee:	e2 17       	cp	r30, r18
    24f0:	f3 07       	cpc	r31, r19
    24f2:	a0 f4       	brcc	.+40     	; 0x251c <malloc+0x120>
    24f4:	2e 1b       	sub	r18, r30
    24f6:	3f 0b       	sbc	r19, r31
    24f8:	28 17       	cp	r18, r24
    24fa:	39 07       	cpc	r19, r25
    24fc:	78 f0       	brcs	.+30     	; 0x251c <malloc+0x120>
    24fe:	ac 01       	movw	r20, r24
    2500:	4e 5f       	subi	r20, 0xFE	; 254
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	24 17       	cp	r18, r20
    2506:	35 07       	cpc	r19, r21
    2508:	48 f0       	brcs	.+18     	; 0x251c <malloc+0x120>
    250a:	4e 0f       	add	r20, r30
    250c:	5f 1f       	adc	r21, r31
    250e:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <__brkval+0x1>
    2512:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <__brkval>
    2516:	81 93       	st	Z+, r24
    2518:	91 93       	st	Z+, r25
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <malloc+0x124>
    251c:	e0 e0       	ldi	r30, 0x00	; 0
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	cf 01       	movw	r24, r30
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

0000252c <free>:
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	09 f4       	brne	.+2      	; 0x2536 <free+0xa>
    2534:	81 c0       	rjmp	.+258    	; 0x2638 <free+0x10c>
    2536:	fc 01       	movw	r30, r24
    2538:	32 97       	sbiw	r30, 0x02	; 2
    253a:	13 82       	std	Z+3, r1	; 0x03
    253c:	12 82       	std	Z+2, r1	; 0x02
    253e:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
    2542:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
    2546:	10 97       	sbiw	r26, 0x00	; 0
    2548:	81 f4       	brne	.+32     	; 0x256a <free+0x3e>
    254a:	20 81       	ld	r18, Z
    254c:	31 81       	ldd	r19, Z+1	; 0x01
    254e:	82 0f       	add	r24, r18
    2550:	93 1f       	adc	r25, r19
    2552:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    2556:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    255a:	28 17       	cp	r18, r24
    255c:	39 07       	cpc	r19, r25
    255e:	51 f5       	brne	.+84     	; 0x25b4 <free+0x88>
    2560:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
    2564:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
    2568:	67 c0       	rjmp	.+206    	; 0x2638 <free+0x10c>
    256a:	ed 01       	movw	r28, r26
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	ce 17       	cp	r28, r30
    2572:	df 07       	cpc	r29, r31
    2574:	40 f4       	brcc	.+16     	; 0x2586 <free+0x5a>
    2576:	4a 81       	ldd	r20, Y+2	; 0x02
    2578:	5b 81       	ldd	r21, Y+3	; 0x03
    257a:	9e 01       	movw	r18, r28
    257c:	41 15       	cp	r20, r1
    257e:	51 05       	cpc	r21, r1
    2580:	f1 f0       	breq	.+60     	; 0x25be <free+0x92>
    2582:	ea 01       	movw	r28, r20
    2584:	f5 cf       	rjmp	.-22     	; 0x2570 <free+0x44>
    2586:	d3 83       	std	Z+3, r29	; 0x03
    2588:	c2 83       	std	Z+2, r28	; 0x02
    258a:	40 81       	ld	r20, Z
    258c:	51 81       	ldd	r21, Z+1	; 0x01
    258e:	84 0f       	add	r24, r20
    2590:	95 1f       	adc	r25, r21
    2592:	c8 17       	cp	r28, r24
    2594:	d9 07       	cpc	r29, r25
    2596:	59 f4       	brne	.+22     	; 0x25ae <free+0x82>
    2598:	88 81       	ld	r24, Y
    259a:	99 81       	ldd	r25, Y+1	; 0x01
    259c:	84 0f       	add	r24, r20
    259e:	95 1f       	adc	r25, r21
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	93 83       	std	Z+3, r25	; 0x03
    25ac:	82 83       	std	Z+2, r24	; 0x02
    25ae:	21 15       	cp	r18, r1
    25b0:	31 05       	cpc	r19, r1
    25b2:	29 f4       	brne	.+10     	; 0x25be <free+0x92>
    25b4:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
    25b8:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
    25bc:	3d c0       	rjmp	.+122    	; 0x2638 <free+0x10c>
    25be:	e9 01       	movw	r28, r18
    25c0:	fb 83       	std	Y+3, r31	; 0x03
    25c2:	ea 83       	std	Y+2, r30	; 0x02
    25c4:	49 91       	ld	r20, Y+
    25c6:	59 91       	ld	r21, Y+
    25c8:	c4 0f       	add	r28, r20
    25ca:	d5 1f       	adc	r29, r21
    25cc:	ec 17       	cp	r30, r28
    25ce:	fd 07       	cpc	r31, r29
    25d0:	61 f4       	brne	.+24     	; 0x25ea <free+0xbe>
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	84 0f       	add	r24, r20
    25d8:	95 1f       	adc	r25, r21
    25da:	02 96       	adiw	r24, 0x02	; 2
    25dc:	e9 01       	movw	r28, r18
    25de:	99 83       	std	Y+1, r25	; 0x01
    25e0:	88 83       	st	Y, r24
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    25ea:	e0 e0       	ldi	r30, 0x00	; 0
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	12 96       	adiw	r26, 0x02	; 2
    25f0:	8d 91       	ld	r24, X+
    25f2:	9c 91       	ld	r25, X
    25f4:	13 97       	sbiw	r26, 0x03	; 3
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	19 f0       	breq	.+6      	; 0x2600 <free+0xd4>
    25fa:	fd 01       	movw	r30, r26
    25fc:	dc 01       	movw	r26, r24
    25fe:	f7 cf       	rjmp	.-18     	; 0x25ee <free+0xc2>
    2600:	8d 91       	ld	r24, X+
    2602:	9c 91       	ld	r25, X
    2604:	11 97       	sbiw	r26, 0x01	; 1
    2606:	9d 01       	movw	r18, r26
    2608:	2e 5f       	subi	r18, 0xFE	; 254
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	82 0f       	add	r24, r18
    260e:	93 1f       	adc	r25, r19
    2610:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    2614:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    2618:	28 17       	cp	r18, r24
    261a:	39 07       	cpc	r19, r25
    261c:	69 f4       	brne	.+26     	; 0x2638 <free+0x10c>
    261e:	30 97       	sbiw	r30, 0x00	; 0
    2620:	29 f4       	brne	.+10     	; 0x262c <free+0x100>
    2622:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__flp+0x1>
    2626:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__flp>
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <free+0x104>
    262c:	13 82       	std	Z+3, r1	; 0x03
    262e:	12 82       	std	Z+2, r1	; 0x02
    2630:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <__brkval+0x1>
    2634:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <__brkval>
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

0000263e <realloc>:
    263e:	a0 e0       	ldi	r26, 0x00	; 0
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e2       	ldi	r30, 0x25	; 37
    2644:	f3 e1       	ldi	r31, 0x13	; 19
    2646:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__prologue_saves__+0x8>
    264a:	ec 01       	movw	r28, r24
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	21 f4       	brne	.+8      	; 0x2658 <realloc+0x1a>
    2650:	cb 01       	movw	r24, r22
    2652:	0e 94 fe 11 	call	0x23fc	; 0x23fc <malloc>
    2656:	b4 c0       	rjmp	.+360    	; 0x27c0 <realloc+0x182>
    2658:	fc 01       	movw	r30, r24
    265a:	e6 0f       	add	r30, r22
    265c:	f7 1f       	adc	r31, r23
    265e:	9c 01       	movw	r18, r24
    2660:	22 50       	subi	r18, 0x02	; 2
    2662:	31 09       	sbc	r19, r1
    2664:	e2 17       	cp	r30, r18
    2666:	f3 07       	cpc	r31, r19
    2668:	08 f4       	brcc	.+2      	; 0x266c <realloc+0x2e>
    266a:	a8 c0       	rjmp	.+336    	; 0x27bc <realloc+0x17e>
    266c:	d9 01       	movw	r26, r18
    266e:	0d 91       	ld	r16, X+
    2670:	1c 91       	ld	r17, X
    2672:	11 97       	sbiw	r26, 0x01	; 1
    2674:	06 17       	cp	r16, r22
    2676:	17 07       	cpc	r17, r23
    2678:	b0 f0       	brcs	.+44     	; 0x26a6 <realloc+0x68>
    267a:	05 30       	cpi	r16, 0x05	; 5
    267c:	11 05       	cpc	r17, r1
    267e:	08 f4       	brcc	.+2      	; 0x2682 <realloc+0x44>
    2680:	9b c0       	rjmp	.+310    	; 0x27b8 <realloc+0x17a>
    2682:	c8 01       	movw	r24, r16
    2684:	04 97       	sbiw	r24, 0x04	; 4
    2686:	86 17       	cp	r24, r22
    2688:	97 07       	cpc	r25, r23
    268a:	08 f4       	brcc	.+2      	; 0x268e <realloc+0x50>
    268c:	95 c0       	rjmp	.+298    	; 0x27b8 <realloc+0x17a>
    268e:	02 50       	subi	r16, 0x02	; 2
    2690:	11 09       	sbc	r17, r1
    2692:	06 1b       	sub	r16, r22
    2694:	17 0b       	sbc	r17, r23
    2696:	01 93       	st	Z+, r16
    2698:	11 93       	st	Z+, r17
    269a:	6d 93       	st	X+, r22
    269c:	7c 93       	st	X, r23
    269e:	cf 01       	movw	r24, r30
    26a0:	0e 94 96 12 	call	0x252c	; 0x252c <free>
    26a4:	89 c0       	rjmp	.+274    	; 0x27b8 <realloc+0x17a>
    26a6:	5b 01       	movw	r10, r22
    26a8:	a0 1a       	sub	r10, r16
    26aa:	b1 0a       	sbc	r11, r17
    26ac:	4c 01       	movw	r8, r24
    26ae:	80 0e       	add	r8, r16
    26b0:	91 1e       	adc	r9, r17
    26b2:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
    26b6:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
    26ba:	61 2c       	mov	r6, r1
    26bc:	71 2c       	mov	r7, r1
    26be:	e1 2c       	mov	r14, r1
    26c0:	f1 2c       	mov	r15, r1
    26c2:	10 97       	sbiw	r26, 0x00	; 0
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <realloc+0x8a>
    26c6:	46 c0       	rjmp	.+140    	; 0x2754 <realloc+0x116>
    26c8:	8d 91       	ld	r24, X+
    26ca:	9c 91       	ld	r25, X
    26cc:	11 97       	sbiw	r26, 0x01	; 1
    26ce:	a8 15       	cp	r26, r8
    26d0:	b9 05       	cpc	r27, r9
    26d2:	b1 f5       	brne	.+108    	; 0x2740 <realloc+0x102>
    26d4:	6c 01       	movw	r12, r24
    26d6:	42 e0       	ldi	r20, 0x02	; 2
    26d8:	c4 0e       	add	r12, r20
    26da:	d1 1c       	adc	r13, r1
    26dc:	ca 14       	cp	r12, r10
    26de:	db 04       	cpc	r13, r11
    26e0:	78 f1       	brcs	.+94     	; 0x2740 <realloc+0x102>
    26e2:	4c 01       	movw	r8, r24
    26e4:	8a 18       	sub	r8, r10
    26e6:	9b 08       	sbc	r9, r11
    26e8:	64 01       	movw	r12, r8
    26ea:	42 e0       	ldi	r20, 0x02	; 2
    26ec:	c4 0e       	add	r12, r20
    26ee:	d1 1c       	adc	r13, r1
    26f0:	12 96       	adiw	r26, 0x02	; 2
    26f2:	bc 90       	ld	r11, X
    26f4:	12 97       	sbiw	r26, 0x02	; 2
    26f6:	13 96       	adiw	r26, 0x03	; 3
    26f8:	ac 91       	ld	r26, X
    26fa:	b5 e0       	ldi	r27, 0x05	; 5
    26fc:	cb 16       	cp	r12, r27
    26fe:	d1 04       	cpc	r13, r1
    2700:	40 f0       	brcs	.+16     	; 0x2712 <realloc+0xd4>
    2702:	b2 82       	std	Z+2, r11	; 0x02
    2704:	a3 83       	std	Z+3, r26	; 0x03
    2706:	91 82       	std	Z+1, r9	; 0x01
    2708:	80 82       	st	Z, r8
    270a:	d9 01       	movw	r26, r18
    270c:	6d 93       	st	X+, r22
    270e:	7c 93       	st	X, r23
    2710:	09 c0       	rjmp	.+18     	; 0x2724 <realloc+0xe6>
    2712:	0e 5f       	subi	r16, 0xFE	; 254
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	80 0f       	add	r24, r16
    2718:	91 1f       	adc	r25, r17
    271a:	f9 01       	movw	r30, r18
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	80 83       	st	Z, r24
    2720:	eb 2d       	mov	r30, r11
    2722:	fa 2f       	mov	r31, r26
    2724:	e1 14       	cp	r14, r1
    2726:	f1 04       	cpc	r15, r1
    2728:	31 f0       	breq	.+12     	; 0x2736 <realloc+0xf8>
    272a:	d7 01       	movw	r26, r14
    272c:	13 96       	adiw	r26, 0x03	; 3
    272e:	fc 93       	st	X, r31
    2730:	ee 93       	st	-X, r30
    2732:	12 97       	sbiw	r26, 0x02	; 2
    2734:	41 c0       	rjmp	.+130    	; 0x27b8 <realloc+0x17a>
    2736:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
    273a:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
    273e:	3c c0       	rjmp	.+120    	; 0x27b8 <realloc+0x17a>
    2740:	68 16       	cp	r6, r24
    2742:	79 06       	cpc	r7, r25
    2744:	08 f4       	brcc	.+2      	; 0x2748 <realloc+0x10a>
    2746:	3c 01       	movw	r6, r24
    2748:	7d 01       	movw	r14, r26
    274a:	12 96       	adiw	r26, 0x02	; 2
    274c:	0d 90       	ld	r0, X+
    274e:	bc 91       	ld	r27, X
    2750:	a0 2d       	mov	r26, r0
    2752:	b7 cf       	rjmp	.-146    	; 0x26c2 <realloc+0x84>
    2754:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__brkval>
    2758:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__brkval+0x1>
    275c:	88 16       	cp	r8, r24
    275e:	99 06       	cpc	r9, r25
    2760:	e1 f4       	brne	.+56     	; 0x279a <realloc+0x15c>
    2762:	66 16       	cp	r6, r22
    2764:	77 06       	cpc	r7, r23
    2766:	c8 f4       	brcc	.+50     	; 0x279a <realloc+0x15c>
    2768:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    276c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	41 f4       	brne	.+16     	; 0x2784 <realloc+0x146>
    2774:	8d b7       	in	r24, 0x3d	; 61
    2776:	9e b7       	in	r25, 0x3e	; 62
    2778:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    277c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2780:	84 1b       	sub	r24, r20
    2782:	95 0b       	sbc	r25, r21
    2784:	e8 17       	cp	r30, r24
    2786:	f9 07       	cpc	r31, r25
    2788:	c8 f4       	brcc	.+50     	; 0x27bc <realloc+0x17e>
    278a:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
    278e:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
    2792:	f9 01       	movw	r30, r18
    2794:	71 83       	std	Z+1, r23	; 0x01
    2796:	60 83       	st	Z, r22
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <realloc+0x17a>
    279a:	cb 01       	movw	r24, r22
    279c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <malloc>
    27a0:	7c 01       	movw	r14, r24
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	59 f0       	breq	.+22     	; 0x27bc <realloc+0x17e>
    27a6:	a8 01       	movw	r20, r16
    27a8:	be 01       	movw	r22, r28
    27aa:	0e 94 e5 13 	call	0x27ca	; 0x27ca <memcpy>
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 94 96 12 	call	0x252c	; 0x252c <free>
    27b4:	c7 01       	movw	r24, r14
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <realloc+0x182>
    27b8:	ce 01       	movw	r24, r28
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <realloc+0x182>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	ee e0       	ldi	r30, 0x0E	; 14
    27c6:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__epilogue_restores__+0x8>

000027ca <memcpy>:
    27ca:	fb 01       	movw	r30, r22
    27cc:	dc 01       	movw	r26, r24
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <memcpy+0xa>
    27d0:	01 90       	ld	r0, Z+
    27d2:	0d 92       	st	X+, r0
    27d4:	41 50       	subi	r20, 0x01	; 1
    27d6:	50 40       	sbci	r21, 0x00	; 0
    27d8:	d8 f7       	brcc	.-10     	; 0x27d0 <memcpy+0x6>
    27da:	08 95       	ret

000027dc <strcpy>:
    27dc:	fb 01       	movw	r30, r22
    27de:	dc 01       	movw	r26, r24
    27e0:	01 90       	ld	r0, Z+
    27e2:	0d 92       	st	X+, r0
    27e4:	00 20       	and	r0, r0
    27e6:	e1 f7       	brne	.-8      	; 0x27e0 <strcpy+0x4>
    27e8:	08 95       	ret

000027ea <sprintf>:
    27ea:	ae e0       	ldi	r26, 0x0E	; 14
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	eb ef       	ldi	r30, 0xFB	; 251
    27f0:	f3 e1       	ldi	r31, 0x13	; 19
    27f2:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x1c>
    27f6:	0d 89       	ldd	r16, Y+21	; 0x15
    27f8:	1e 89       	ldd	r17, Y+22	; 0x16
    27fa:	86 e0       	ldi	r24, 0x06	; 6
    27fc:	8c 83       	std	Y+4, r24	; 0x04
    27fe:	1a 83       	std	Y+2, r17	; 0x02
    2800:	09 83       	std	Y+1, r16	; 0x01
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	9f e7       	ldi	r25, 0x7F	; 127
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	ae 01       	movw	r20, r28
    280c:	47 5e       	subi	r20, 0xE7	; 231
    280e:	5f 4f       	sbci	r21, 0xFF	; 255
    2810:	6f 89       	ldd	r22, Y+23	; 0x17
    2812:	78 8d       	ldd	r23, Y+24	; 0x18
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	0e 94 17 14 	call	0x282e	; 0x282e <vfprintf>
    281c:	ef 81       	ldd	r30, Y+7	; 0x07
    281e:	f8 85       	ldd	r31, Y+8	; 0x08
    2820:	e0 0f       	add	r30, r16
    2822:	f1 1f       	adc	r31, r17
    2824:	10 82       	st	Z, r1
    2826:	2e 96       	adiw	r28, 0x0e	; 14
    2828:	e4 e0       	ldi	r30, 0x04	; 4
    282a:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__+0x1c>

0000282e <vfprintf>:
    282e:	ab e0       	ldi	r26, 0x0B	; 11
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ed e1       	ldi	r30, 0x1D	; 29
    2834:	f4 e1       	ldi	r31, 0x14	; 20
    2836:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__>
    283a:	6c 01       	movw	r12, r24
    283c:	7b 01       	movw	r14, r22
    283e:	8a 01       	movw	r16, r20
    2840:	fc 01       	movw	r30, r24
    2842:	17 82       	std	Z+7, r1	; 0x07
    2844:	16 82       	std	Z+6, r1	; 0x06
    2846:	83 81       	ldd	r24, Z+3	; 0x03
    2848:	81 ff       	sbrs	r24, 1
    284a:	cc c1       	rjmp	.+920    	; 0x2be4 <vfprintf+0x3b6>
    284c:	ce 01       	movw	r24, r28
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	3c 01       	movw	r6, r24
    2852:	f6 01       	movw	r30, r12
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	f7 01       	movw	r30, r14
    2858:	93 fd       	sbrc	r25, 3
    285a:	85 91       	lpm	r24, Z+
    285c:	93 ff       	sbrs	r25, 3
    285e:	81 91       	ld	r24, Z+
    2860:	7f 01       	movw	r14, r30
    2862:	88 23       	and	r24, r24
    2864:	09 f4       	brne	.+2      	; 0x2868 <vfprintf+0x3a>
    2866:	ba c1       	rjmp	.+884    	; 0x2bdc <vfprintf+0x3ae>
    2868:	85 32       	cpi	r24, 0x25	; 37
    286a:	39 f4       	brne	.+14     	; 0x287a <vfprintf+0x4c>
    286c:	93 fd       	sbrc	r25, 3
    286e:	85 91       	lpm	r24, Z+
    2870:	93 ff       	sbrs	r25, 3
    2872:	81 91       	ld	r24, Z+
    2874:	7f 01       	movw	r14, r30
    2876:	85 32       	cpi	r24, 0x25	; 37
    2878:	29 f4       	brne	.+10     	; 0x2884 <vfprintf+0x56>
    287a:	b6 01       	movw	r22, r12
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2882:	e7 cf       	rjmp	.-50     	; 0x2852 <vfprintf+0x24>
    2884:	91 2c       	mov	r9, r1
    2886:	21 2c       	mov	r2, r1
    2888:	31 2c       	mov	r3, r1
    288a:	ff e1       	ldi	r31, 0x1F	; 31
    288c:	f3 15       	cp	r31, r3
    288e:	d8 f0       	brcs	.+54     	; 0x28c6 <vfprintf+0x98>
    2890:	8b 32       	cpi	r24, 0x2B	; 43
    2892:	79 f0       	breq	.+30     	; 0x28b2 <vfprintf+0x84>
    2894:	38 f4       	brcc	.+14     	; 0x28a4 <vfprintf+0x76>
    2896:	80 32       	cpi	r24, 0x20	; 32
    2898:	79 f0       	breq	.+30     	; 0x28b8 <vfprintf+0x8a>
    289a:	83 32       	cpi	r24, 0x23	; 35
    289c:	a1 f4       	brne	.+40     	; 0x28c6 <vfprintf+0x98>
    289e:	23 2d       	mov	r18, r3
    28a0:	20 61       	ori	r18, 0x10	; 16
    28a2:	1d c0       	rjmp	.+58     	; 0x28de <vfprintf+0xb0>
    28a4:	8d 32       	cpi	r24, 0x2D	; 45
    28a6:	61 f0       	breq	.+24     	; 0x28c0 <vfprintf+0x92>
    28a8:	80 33       	cpi	r24, 0x30	; 48
    28aa:	69 f4       	brne	.+26     	; 0x28c6 <vfprintf+0x98>
    28ac:	23 2d       	mov	r18, r3
    28ae:	21 60       	ori	r18, 0x01	; 1
    28b0:	16 c0       	rjmp	.+44     	; 0x28de <vfprintf+0xb0>
    28b2:	83 2d       	mov	r24, r3
    28b4:	82 60       	ori	r24, 0x02	; 2
    28b6:	38 2e       	mov	r3, r24
    28b8:	e3 2d       	mov	r30, r3
    28ba:	e4 60       	ori	r30, 0x04	; 4
    28bc:	3e 2e       	mov	r3, r30
    28be:	2a c0       	rjmp	.+84     	; 0x2914 <vfprintf+0xe6>
    28c0:	f3 2d       	mov	r31, r3
    28c2:	f8 60       	ori	r31, 0x08	; 8
    28c4:	1d c0       	rjmp	.+58     	; 0x2900 <vfprintf+0xd2>
    28c6:	37 fc       	sbrc	r3, 7
    28c8:	2d c0       	rjmp	.+90     	; 0x2924 <vfprintf+0xf6>
    28ca:	20 ed       	ldi	r18, 0xD0	; 208
    28cc:	28 0f       	add	r18, r24
    28ce:	2a 30       	cpi	r18, 0x0A	; 10
    28d0:	40 f0       	brcs	.+16     	; 0x28e2 <vfprintf+0xb4>
    28d2:	8e 32       	cpi	r24, 0x2E	; 46
    28d4:	b9 f4       	brne	.+46     	; 0x2904 <vfprintf+0xd6>
    28d6:	36 fc       	sbrc	r3, 6
    28d8:	81 c1       	rjmp	.+770    	; 0x2bdc <vfprintf+0x3ae>
    28da:	23 2d       	mov	r18, r3
    28dc:	20 64       	ori	r18, 0x40	; 64
    28de:	32 2e       	mov	r3, r18
    28e0:	19 c0       	rjmp	.+50     	; 0x2914 <vfprintf+0xe6>
    28e2:	36 fe       	sbrs	r3, 6
    28e4:	06 c0       	rjmp	.+12     	; 0x28f2 <vfprintf+0xc4>
    28e6:	8a e0       	ldi	r24, 0x0A	; 10
    28e8:	98 9e       	mul	r9, r24
    28ea:	20 0d       	add	r18, r0
    28ec:	11 24       	eor	r1, r1
    28ee:	92 2e       	mov	r9, r18
    28f0:	11 c0       	rjmp	.+34     	; 0x2914 <vfprintf+0xe6>
    28f2:	ea e0       	ldi	r30, 0x0A	; 10
    28f4:	2e 9e       	mul	r2, r30
    28f6:	20 0d       	add	r18, r0
    28f8:	11 24       	eor	r1, r1
    28fa:	22 2e       	mov	r2, r18
    28fc:	f3 2d       	mov	r31, r3
    28fe:	f0 62       	ori	r31, 0x20	; 32
    2900:	3f 2e       	mov	r3, r31
    2902:	08 c0       	rjmp	.+16     	; 0x2914 <vfprintf+0xe6>
    2904:	8c 36       	cpi	r24, 0x6C	; 108
    2906:	21 f4       	brne	.+8      	; 0x2910 <vfprintf+0xe2>
    2908:	83 2d       	mov	r24, r3
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	38 2e       	mov	r3, r24
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <vfprintf+0xe6>
    2910:	88 36       	cpi	r24, 0x68	; 104
    2912:	41 f4       	brne	.+16     	; 0x2924 <vfprintf+0xf6>
    2914:	f7 01       	movw	r30, r14
    2916:	93 fd       	sbrc	r25, 3
    2918:	85 91       	lpm	r24, Z+
    291a:	93 ff       	sbrs	r25, 3
    291c:	81 91       	ld	r24, Z+
    291e:	7f 01       	movw	r14, r30
    2920:	81 11       	cpse	r24, r1
    2922:	b3 cf       	rjmp	.-154    	; 0x288a <vfprintf+0x5c>
    2924:	98 2f       	mov	r25, r24
    2926:	9f 7d       	andi	r25, 0xDF	; 223
    2928:	95 54       	subi	r25, 0x45	; 69
    292a:	93 30       	cpi	r25, 0x03	; 3
    292c:	28 f4       	brcc	.+10     	; 0x2938 <vfprintf+0x10a>
    292e:	0c 5f       	subi	r16, 0xFC	; 252
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	9f e3       	ldi	r25, 0x3F	; 63
    2934:	99 83       	std	Y+1, r25	; 0x01
    2936:	0d c0       	rjmp	.+26     	; 0x2952 <vfprintf+0x124>
    2938:	83 36       	cpi	r24, 0x63	; 99
    293a:	31 f0       	breq	.+12     	; 0x2948 <vfprintf+0x11a>
    293c:	83 37       	cpi	r24, 0x73	; 115
    293e:	71 f0       	breq	.+28     	; 0x295c <vfprintf+0x12e>
    2940:	83 35       	cpi	r24, 0x53	; 83
    2942:	09 f0       	breq	.+2      	; 0x2946 <vfprintf+0x118>
    2944:	59 c0       	rjmp	.+178    	; 0x29f8 <vfprintf+0x1ca>
    2946:	21 c0       	rjmp	.+66     	; 0x298a <vfprintf+0x15c>
    2948:	f8 01       	movw	r30, r16
    294a:	80 81       	ld	r24, Z
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	0e 5f       	subi	r16, 0xFE	; 254
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	88 24       	eor	r8, r8
    2954:	83 94       	inc	r8
    2956:	91 2c       	mov	r9, r1
    2958:	53 01       	movw	r10, r6
    295a:	13 c0       	rjmp	.+38     	; 0x2982 <vfprintf+0x154>
    295c:	28 01       	movw	r4, r16
    295e:	f2 e0       	ldi	r31, 0x02	; 2
    2960:	4f 0e       	add	r4, r31
    2962:	51 1c       	adc	r5, r1
    2964:	f8 01       	movw	r30, r16
    2966:	a0 80       	ld	r10, Z
    2968:	b1 80       	ldd	r11, Z+1	; 0x01
    296a:	36 fe       	sbrs	r3, 6
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <vfprintf+0x146>
    296e:	69 2d       	mov	r22, r9
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <vfprintf+0x14a>
    2974:	6f ef       	ldi	r22, 0xFF	; 255
    2976:	7f ef       	ldi	r23, 0xFF	; 255
    2978:	c5 01       	movw	r24, r10
    297a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <strnlen>
    297e:	4c 01       	movw	r8, r24
    2980:	82 01       	movw	r16, r4
    2982:	f3 2d       	mov	r31, r3
    2984:	ff 77       	andi	r31, 0x7F	; 127
    2986:	3f 2e       	mov	r3, r31
    2988:	16 c0       	rjmp	.+44     	; 0x29b6 <vfprintf+0x188>
    298a:	28 01       	movw	r4, r16
    298c:	22 e0       	ldi	r18, 0x02	; 2
    298e:	42 0e       	add	r4, r18
    2990:	51 1c       	adc	r5, r1
    2992:	f8 01       	movw	r30, r16
    2994:	a0 80       	ld	r10, Z
    2996:	b1 80       	ldd	r11, Z+1	; 0x01
    2998:	36 fe       	sbrs	r3, 6
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <vfprintf+0x174>
    299c:	69 2d       	mov	r22, r9
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <vfprintf+0x178>
    29a2:	6f ef       	ldi	r22, 0xFF	; 255
    29a4:	7f ef       	ldi	r23, 0xFF	; 255
    29a6:	c5 01       	movw	r24, r10
    29a8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <strnlen_P>
    29ac:	4c 01       	movw	r8, r24
    29ae:	f3 2d       	mov	r31, r3
    29b0:	f0 68       	ori	r31, 0x80	; 128
    29b2:	3f 2e       	mov	r3, r31
    29b4:	82 01       	movw	r16, r4
    29b6:	33 fc       	sbrc	r3, 3
    29b8:	1b c0       	rjmp	.+54     	; 0x29f0 <vfprintf+0x1c2>
    29ba:	82 2d       	mov	r24, r2
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	88 16       	cp	r8, r24
    29c0:	99 06       	cpc	r9, r25
    29c2:	b0 f4       	brcc	.+44     	; 0x29f0 <vfprintf+0x1c2>
    29c4:	b6 01       	movw	r22, r12
    29c6:	80 e2       	ldi	r24, 0x20	; 32
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    29ce:	2a 94       	dec	r2
    29d0:	f4 cf       	rjmp	.-24     	; 0x29ba <vfprintf+0x18c>
    29d2:	f5 01       	movw	r30, r10
    29d4:	37 fc       	sbrc	r3, 7
    29d6:	85 91       	lpm	r24, Z+
    29d8:	37 fe       	sbrs	r3, 7
    29da:	81 91       	ld	r24, Z+
    29dc:	5f 01       	movw	r10, r30
    29de:	b6 01       	movw	r22, r12
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    29e6:	21 10       	cpse	r2, r1
    29e8:	2a 94       	dec	r2
    29ea:	21 e0       	ldi	r18, 0x01	; 1
    29ec:	82 1a       	sub	r8, r18
    29ee:	91 08       	sbc	r9, r1
    29f0:	81 14       	cp	r8, r1
    29f2:	91 04       	cpc	r9, r1
    29f4:	71 f7       	brne	.-36     	; 0x29d2 <vfprintf+0x1a4>
    29f6:	e8 c0       	rjmp	.+464    	; 0x2bc8 <vfprintf+0x39a>
    29f8:	84 36       	cpi	r24, 0x64	; 100
    29fa:	11 f0       	breq	.+4      	; 0x2a00 <vfprintf+0x1d2>
    29fc:	89 36       	cpi	r24, 0x69	; 105
    29fe:	41 f5       	brne	.+80     	; 0x2a50 <vfprintf+0x222>
    2a00:	f8 01       	movw	r30, r16
    2a02:	37 fe       	sbrs	r3, 7
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <vfprintf+0x1e6>
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	0c 5f       	subi	r16, 0xFC	; 252
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	08 c0       	rjmp	.+16     	; 0x2a24 <vfprintf+0x1f6>
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	07 2e       	mov	r0, r23
    2a1a:	00 0c       	add	r0, r0
    2a1c:	88 0b       	sbc	r24, r24
    2a1e:	99 0b       	sbc	r25, r25
    2a20:	0e 5f       	subi	r16, 0xFE	; 254
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	f3 2d       	mov	r31, r3
    2a26:	ff 76       	andi	r31, 0x6F	; 111
    2a28:	3f 2e       	mov	r3, r31
    2a2a:	97 ff       	sbrs	r25, 7
    2a2c:	09 c0       	rjmp	.+18     	; 0x2a40 <vfprintf+0x212>
    2a2e:	90 95       	com	r25
    2a30:	80 95       	com	r24
    2a32:	70 95       	com	r23
    2a34:	61 95       	neg	r22
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	f0 68       	ori	r31, 0x80	; 128
    2a3e:	3f 2e       	mov	r3, r31
    2a40:	2a e0       	ldi	r18, 0x0A	; 10
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	a3 01       	movw	r20, r6
    2a46:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__ultoa_invert>
    2a4a:	88 2e       	mov	r8, r24
    2a4c:	86 18       	sub	r8, r6
    2a4e:	45 c0       	rjmp	.+138    	; 0x2ada <vfprintf+0x2ac>
    2a50:	85 37       	cpi	r24, 0x75	; 117
    2a52:	31 f4       	brne	.+12     	; 0x2a60 <vfprintf+0x232>
    2a54:	23 2d       	mov	r18, r3
    2a56:	2f 7e       	andi	r18, 0xEF	; 239
    2a58:	b2 2e       	mov	r11, r18
    2a5a:	2a e0       	ldi	r18, 0x0A	; 10
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	25 c0       	rjmp	.+74     	; 0x2aaa <vfprintf+0x27c>
    2a60:	93 2d       	mov	r25, r3
    2a62:	99 7f       	andi	r25, 0xF9	; 249
    2a64:	b9 2e       	mov	r11, r25
    2a66:	8f 36       	cpi	r24, 0x6F	; 111
    2a68:	c1 f0       	breq	.+48     	; 0x2a9a <vfprintf+0x26c>
    2a6a:	18 f4       	brcc	.+6      	; 0x2a72 <vfprintf+0x244>
    2a6c:	88 35       	cpi	r24, 0x58	; 88
    2a6e:	79 f0       	breq	.+30     	; 0x2a8e <vfprintf+0x260>
    2a70:	b5 c0       	rjmp	.+362    	; 0x2bdc <vfprintf+0x3ae>
    2a72:	80 37       	cpi	r24, 0x70	; 112
    2a74:	19 f0       	breq	.+6      	; 0x2a7c <vfprintf+0x24e>
    2a76:	88 37       	cpi	r24, 0x78	; 120
    2a78:	21 f0       	breq	.+8      	; 0x2a82 <vfprintf+0x254>
    2a7a:	b0 c0       	rjmp	.+352    	; 0x2bdc <vfprintf+0x3ae>
    2a7c:	e9 2f       	mov	r30, r25
    2a7e:	e0 61       	ori	r30, 0x10	; 16
    2a80:	be 2e       	mov	r11, r30
    2a82:	b4 fe       	sbrs	r11, 4
    2a84:	0d c0       	rjmp	.+26     	; 0x2aa0 <vfprintf+0x272>
    2a86:	fb 2d       	mov	r31, r11
    2a88:	f4 60       	ori	r31, 0x04	; 4
    2a8a:	bf 2e       	mov	r11, r31
    2a8c:	09 c0       	rjmp	.+18     	; 0x2aa0 <vfprintf+0x272>
    2a8e:	34 fe       	sbrs	r3, 4
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <vfprintf+0x278>
    2a92:	29 2f       	mov	r18, r25
    2a94:	26 60       	ori	r18, 0x06	; 6
    2a96:	b2 2e       	mov	r11, r18
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <vfprintf+0x278>
    2a9a:	28 e0       	ldi	r18, 0x08	; 8
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <vfprintf+0x27c>
    2aa0:	20 e1       	ldi	r18, 0x10	; 16
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <vfprintf+0x27c>
    2aa6:	20 e1       	ldi	r18, 0x10	; 16
    2aa8:	32 e0       	ldi	r19, 0x02	; 2
    2aaa:	f8 01       	movw	r30, r16
    2aac:	b7 fe       	sbrs	r11, 7
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <vfprintf+0x290>
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	0c 5f       	subi	r16, 0xFC	; 252
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	06 c0       	rjmp	.+12     	; 0x2aca <vfprintf+0x29c>
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 5f       	subi	r16, 0xFE	; 254
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	a3 01       	movw	r20, r6
    2acc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__ultoa_invert>
    2ad0:	88 2e       	mov	r8, r24
    2ad2:	86 18       	sub	r8, r6
    2ad4:	fb 2d       	mov	r31, r11
    2ad6:	ff 77       	andi	r31, 0x7F	; 127
    2ad8:	3f 2e       	mov	r3, r31
    2ada:	36 fe       	sbrs	r3, 6
    2adc:	0d c0       	rjmp	.+26     	; 0x2af8 <vfprintf+0x2ca>
    2ade:	23 2d       	mov	r18, r3
    2ae0:	2e 7f       	andi	r18, 0xFE	; 254
    2ae2:	a2 2e       	mov	r10, r18
    2ae4:	89 14       	cp	r8, r9
    2ae6:	58 f4       	brcc	.+22     	; 0x2afe <vfprintf+0x2d0>
    2ae8:	34 fe       	sbrs	r3, 4
    2aea:	0b c0       	rjmp	.+22     	; 0x2b02 <vfprintf+0x2d4>
    2aec:	32 fc       	sbrc	r3, 2
    2aee:	09 c0       	rjmp	.+18     	; 0x2b02 <vfprintf+0x2d4>
    2af0:	83 2d       	mov	r24, r3
    2af2:	8e 7e       	andi	r24, 0xEE	; 238
    2af4:	a8 2e       	mov	r10, r24
    2af6:	05 c0       	rjmp	.+10     	; 0x2b02 <vfprintf+0x2d4>
    2af8:	b8 2c       	mov	r11, r8
    2afa:	a3 2c       	mov	r10, r3
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <vfprintf+0x2d6>
    2afe:	b8 2c       	mov	r11, r8
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <vfprintf+0x2d6>
    2b02:	b9 2c       	mov	r11, r9
    2b04:	a4 fe       	sbrs	r10, 4
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <vfprintf+0x2f8>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e8 0d       	add	r30, r8
    2b0c:	f1 1d       	adc	r31, r1
    2b0e:	80 81       	ld	r24, Z
    2b10:	80 33       	cpi	r24, 0x30	; 48
    2b12:	21 f4       	brne	.+8      	; 0x2b1c <vfprintf+0x2ee>
    2b14:	9a 2d       	mov	r25, r10
    2b16:	99 7e       	andi	r25, 0xE9	; 233
    2b18:	a9 2e       	mov	r10, r25
    2b1a:	09 c0       	rjmp	.+18     	; 0x2b2e <vfprintf+0x300>
    2b1c:	a2 fe       	sbrs	r10, 2
    2b1e:	06 c0       	rjmp	.+12     	; 0x2b2c <vfprintf+0x2fe>
    2b20:	b3 94       	inc	r11
    2b22:	b3 94       	inc	r11
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <vfprintf+0x300>
    2b26:	8a 2d       	mov	r24, r10
    2b28:	86 78       	andi	r24, 0x86	; 134
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <vfprintf+0x300>
    2b2c:	b3 94       	inc	r11
    2b2e:	a3 fc       	sbrc	r10, 3
    2b30:	11 c0       	rjmp	.+34     	; 0x2b54 <vfprintf+0x326>
    2b32:	a0 fe       	sbrs	r10, 0
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <vfprintf+0x314>
    2b36:	b2 14       	cp	r11, r2
    2b38:	88 f4       	brcc	.+34     	; 0x2b5c <vfprintf+0x32e>
    2b3a:	28 0c       	add	r2, r8
    2b3c:	92 2c       	mov	r9, r2
    2b3e:	9b 18       	sub	r9, r11
    2b40:	0e c0       	rjmp	.+28     	; 0x2b5e <vfprintf+0x330>
    2b42:	b2 14       	cp	r11, r2
    2b44:	60 f4       	brcc	.+24     	; 0x2b5e <vfprintf+0x330>
    2b46:	b6 01       	movw	r22, r12
    2b48:	80 e2       	ldi	r24, 0x20	; 32
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2b50:	b3 94       	inc	r11
    2b52:	f7 cf       	rjmp	.-18     	; 0x2b42 <vfprintf+0x314>
    2b54:	b2 14       	cp	r11, r2
    2b56:	18 f4       	brcc	.+6      	; 0x2b5e <vfprintf+0x330>
    2b58:	2b 18       	sub	r2, r11
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <vfprintf+0x332>
    2b5c:	98 2c       	mov	r9, r8
    2b5e:	21 2c       	mov	r2, r1
    2b60:	a4 fe       	sbrs	r10, 4
    2b62:	10 c0       	rjmp	.+32     	; 0x2b84 <vfprintf+0x356>
    2b64:	b6 01       	movw	r22, r12
    2b66:	80 e3       	ldi	r24, 0x30	; 48
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2b6e:	a2 fe       	sbrs	r10, 2
    2b70:	17 c0       	rjmp	.+46     	; 0x2ba0 <vfprintf+0x372>
    2b72:	a1 fc       	sbrc	r10, 1
    2b74:	03 c0       	rjmp	.+6      	; 0x2b7c <vfprintf+0x34e>
    2b76:	88 e7       	ldi	r24, 0x78	; 120
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <vfprintf+0x352>
    2b7c:	88 e5       	ldi	r24, 0x58	; 88
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	b6 01       	movw	r22, r12
    2b82:	0c c0       	rjmp	.+24     	; 0x2b9c <vfprintf+0x36e>
    2b84:	8a 2d       	mov	r24, r10
    2b86:	86 78       	andi	r24, 0x86	; 134
    2b88:	59 f0       	breq	.+22     	; 0x2ba0 <vfprintf+0x372>
    2b8a:	a1 fe       	sbrs	r10, 1
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <vfprintf+0x364>
    2b8e:	8b e2       	ldi	r24, 0x2B	; 43
    2b90:	01 c0       	rjmp	.+2      	; 0x2b94 <vfprintf+0x366>
    2b92:	80 e2       	ldi	r24, 0x20	; 32
    2b94:	a7 fc       	sbrc	r10, 7
    2b96:	8d e2       	ldi	r24, 0x2D	; 45
    2b98:	b6 01       	movw	r22, r12
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2ba0:	89 14       	cp	r8, r9
    2ba2:	38 f4       	brcc	.+14     	; 0x2bb2 <vfprintf+0x384>
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	80 e3       	ldi	r24, 0x30	; 48
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2bae:	9a 94       	dec	r9
    2bb0:	f7 cf       	rjmp	.-18     	; 0x2ba0 <vfprintf+0x372>
    2bb2:	8a 94       	dec	r8
    2bb4:	f3 01       	movw	r30, r6
    2bb6:	e8 0d       	add	r30, r8
    2bb8:	f1 1d       	adc	r31, r1
    2bba:	80 81       	ld	r24, Z
    2bbc:	b6 01       	movw	r22, r12
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2bc4:	81 10       	cpse	r8, r1
    2bc6:	f5 cf       	rjmp	.-22     	; 0x2bb2 <vfprintf+0x384>
    2bc8:	22 20       	and	r2, r2
    2bca:	09 f4       	brne	.+2      	; 0x2bce <vfprintf+0x3a0>
    2bcc:	42 ce       	rjmp	.-892    	; 0x2852 <vfprintf+0x24>
    2bce:	b6 01       	movw	r22, r12
    2bd0:	80 e2       	ldi	r24, 0x20	; 32
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fputc>
    2bd8:	2a 94       	dec	r2
    2bda:	f6 cf       	rjmp	.-20     	; 0x2bc8 <vfprintf+0x39a>
    2bdc:	f6 01       	movw	r30, r12
    2bde:	86 81       	ldd	r24, Z+6	; 0x06
    2be0:	97 81       	ldd	r25, Z+7	; 0x07
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <vfprintf+0x3ba>
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	9f ef       	ldi	r25, 0xFF	; 255
    2be8:	2b 96       	adiw	r28, 0x0b	; 11
    2bea:	e2 e1       	ldi	r30, 0x12	; 18
    2bec:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__>

00002bf0 <strnlen_P>:
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	05 90       	lpm	r0, Z+
    2bf4:	61 50       	subi	r22, 0x01	; 1
    2bf6:	70 40       	sbci	r23, 0x00	; 0
    2bf8:	01 10       	cpse	r0, r1
    2bfa:	d8 f7       	brcc	.-10     	; 0x2bf2 <strnlen_P+0x2>
    2bfc:	80 95       	com	r24
    2bfe:	90 95       	com	r25
    2c00:	8e 0f       	add	r24, r30
    2c02:	9f 1f       	adc	r25, r31
    2c04:	08 95       	ret

00002c06 <strnlen>:
    2c06:	fc 01       	movw	r30, r24
    2c08:	61 50       	subi	r22, 0x01	; 1
    2c0a:	70 40       	sbci	r23, 0x00	; 0
    2c0c:	01 90       	ld	r0, Z+
    2c0e:	01 10       	cpse	r0, r1
    2c10:	d8 f7       	brcc	.-10     	; 0x2c08 <strnlen+0x2>
    2c12:	80 95       	com	r24
    2c14:	90 95       	com	r25
    2c16:	8e 0f       	add	r24, r30
    2c18:	9f 1f       	adc	r25, r31
    2c1a:	08 95       	ret

00002c1c <fputc>:
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	fb 01       	movw	r30, r22
    2c26:	23 81       	ldd	r18, Z+3	; 0x03
    2c28:	21 fd       	sbrc	r18, 1
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <fputc+0x16>
    2c2c:	8f ef       	ldi	r24, 0xFF	; 255
    2c2e:	9f ef       	ldi	r25, 0xFF	; 255
    2c30:	2c c0       	rjmp	.+88     	; 0x2c8a <fputc+0x6e>
    2c32:	22 ff       	sbrs	r18, 2
    2c34:	16 c0       	rjmp	.+44     	; 0x2c62 <fputc+0x46>
    2c36:	46 81       	ldd	r20, Z+6	; 0x06
    2c38:	57 81       	ldd	r21, Z+7	; 0x07
    2c3a:	24 81       	ldd	r18, Z+4	; 0x04
    2c3c:	35 81       	ldd	r19, Z+5	; 0x05
    2c3e:	42 17       	cp	r20, r18
    2c40:	53 07       	cpc	r21, r19
    2c42:	44 f4       	brge	.+16     	; 0x2c54 <fputc+0x38>
    2c44:	a0 81       	ld	r26, Z
    2c46:	b1 81       	ldd	r27, Z+1	; 0x01
    2c48:	9d 01       	movw	r18, r26
    2c4a:	2f 5f       	subi	r18, 0xFF	; 255
    2c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4e:	31 83       	std	Z+1, r19	; 0x01
    2c50:	20 83       	st	Z, r18
    2c52:	8c 93       	st	X, r24
    2c54:	26 81       	ldd	r18, Z+6	; 0x06
    2c56:	37 81       	ldd	r19, Z+7	; 0x07
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	37 83       	std	Z+7, r19	; 0x07
    2c5e:	26 83       	std	Z+6, r18	; 0x06
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <fputc+0x6e>
    2c62:	8b 01       	movw	r16, r22
    2c64:	ec 01       	movw	r28, r24
    2c66:	fb 01       	movw	r30, r22
    2c68:	00 84       	ldd	r0, Z+8	; 0x08
    2c6a:	f1 85       	ldd	r31, Z+9	; 0x09
    2c6c:	e0 2d       	mov	r30, r0
    2c6e:	09 95       	icall
    2c70:	89 2b       	or	r24, r25
    2c72:	e1 f6       	brne	.-72     	; 0x2c2c <fputc+0x10>
    2c74:	d8 01       	movw	r26, r16
    2c76:	16 96       	adiw	r26, 0x06	; 6
    2c78:	8d 91       	ld	r24, X+
    2c7a:	9c 91       	ld	r25, X
    2c7c:	17 97       	sbiw	r26, 0x07	; 7
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	17 96       	adiw	r26, 0x07	; 7
    2c82:	9c 93       	st	X, r25
    2c84:	8e 93       	st	-X, r24
    2c86:	16 97       	sbiw	r26, 0x06	; 6
    2c88:	ce 01       	movw	r24, r28
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	08 95       	ret

00002c94 <__ultoa_invert>:
    2c94:	fa 01       	movw	r30, r20
    2c96:	aa 27       	eor	r26, r26
    2c98:	28 30       	cpi	r18, 0x08	; 8
    2c9a:	51 f1       	breq	.+84     	; 0x2cf0 <__ultoa_invert+0x5c>
    2c9c:	20 31       	cpi	r18, 0x10	; 16
    2c9e:	81 f1       	breq	.+96     	; 0x2d00 <__ultoa_invert+0x6c>
    2ca0:	e8 94       	clt
    2ca2:	6f 93       	push	r22
    2ca4:	6e 7f       	andi	r22, 0xFE	; 254
    2ca6:	6e 5f       	subi	r22, 0xFE	; 254
    2ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    2caa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cac:	9f 4f       	sbci	r25, 0xFF	; 255
    2cae:	af 4f       	sbci	r26, 0xFF	; 255
    2cb0:	b1 e0       	ldi	r27, 0x01	; 1
    2cb2:	3e d0       	rcall	.+124    	; 0x2d30 <__ultoa_invert+0x9c>
    2cb4:	b4 e0       	ldi	r27, 0x04	; 4
    2cb6:	3c d0       	rcall	.+120    	; 0x2d30 <__ultoa_invert+0x9c>
    2cb8:	67 0f       	add	r22, r23
    2cba:	78 1f       	adc	r23, r24
    2cbc:	89 1f       	adc	r24, r25
    2cbe:	9a 1f       	adc	r25, r26
    2cc0:	a1 1d       	adc	r26, r1
    2cc2:	68 0f       	add	r22, r24
    2cc4:	79 1f       	adc	r23, r25
    2cc6:	8a 1f       	adc	r24, r26
    2cc8:	91 1d       	adc	r25, r1
    2cca:	a1 1d       	adc	r26, r1
    2ccc:	6a 0f       	add	r22, r26
    2cce:	71 1d       	adc	r23, r1
    2cd0:	81 1d       	adc	r24, r1
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	a1 1d       	adc	r26, r1
    2cd6:	20 d0       	rcall	.+64     	; 0x2d18 <__ultoa_invert+0x84>
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <__ultoa_invert+0x48>
    2cda:	68 94       	set
    2cdc:	3f 91       	pop	r19
    2cde:	2a e0       	ldi	r18, 0x0A	; 10
    2ce0:	26 9f       	mul	r18, r22
    2ce2:	11 24       	eor	r1, r1
    2ce4:	30 19       	sub	r19, r0
    2ce6:	30 5d       	subi	r19, 0xD0	; 208
    2ce8:	31 93       	st	Z+, r19
    2cea:	de f6       	brtc	.-74     	; 0x2ca2 <__ultoa_invert+0xe>
    2cec:	cf 01       	movw	r24, r30
    2cee:	08 95       	ret
    2cf0:	46 2f       	mov	r20, r22
    2cf2:	47 70       	andi	r20, 0x07	; 7
    2cf4:	40 5d       	subi	r20, 0xD0	; 208
    2cf6:	41 93       	st	Z+, r20
    2cf8:	b3 e0       	ldi	r27, 0x03	; 3
    2cfa:	0f d0       	rcall	.+30     	; 0x2d1a <__ultoa_invert+0x86>
    2cfc:	c9 f7       	brne	.-14     	; 0x2cf0 <__ultoa_invert+0x5c>
    2cfe:	f6 cf       	rjmp	.-20     	; 0x2cec <__ultoa_invert+0x58>
    2d00:	46 2f       	mov	r20, r22
    2d02:	4f 70       	andi	r20, 0x0F	; 15
    2d04:	40 5d       	subi	r20, 0xD0	; 208
    2d06:	4a 33       	cpi	r20, 0x3A	; 58
    2d08:	18 f0       	brcs	.+6      	; 0x2d10 <__ultoa_invert+0x7c>
    2d0a:	49 5d       	subi	r20, 0xD9	; 217
    2d0c:	31 fd       	sbrc	r19, 1
    2d0e:	40 52       	subi	r20, 0x20	; 32
    2d10:	41 93       	st	Z+, r20
    2d12:	02 d0       	rcall	.+4      	; 0x2d18 <__ultoa_invert+0x84>
    2d14:	a9 f7       	brne	.-22     	; 0x2d00 <__ultoa_invert+0x6c>
    2d16:	ea cf       	rjmp	.-44     	; 0x2cec <__ultoa_invert+0x58>
    2d18:	b4 e0       	ldi	r27, 0x04	; 4
    2d1a:	a6 95       	lsr	r26
    2d1c:	97 95       	ror	r25
    2d1e:	87 95       	ror	r24
    2d20:	77 95       	ror	r23
    2d22:	67 95       	ror	r22
    2d24:	ba 95       	dec	r27
    2d26:	c9 f7       	brne	.-14     	; 0x2d1a <__ultoa_invert+0x86>
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	61 05       	cpc	r22, r1
    2d2c:	71 05       	cpc	r23, r1
    2d2e:	08 95       	ret
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	0a 2e       	mov	r0, r26
    2d36:	06 94       	lsr	r0
    2d38:	57 95       	ror	r21
    2d3a:	47 95       	ror	r20
    2d3c:	37 95       	ror	r19
    2d3e:	27 95       	ror	r18
    2d40:	ba 95       	dec	r27
    2d42:	c9 f7       	brne	.-14     	; 0x2d36 <__ultoa_invert+0xa2>
    2d44:	62 0f       	add	r22, r18
    2d46:	73 1f       	adc	r23, r19
    2d48:	84 1f       	adc	r24, r20
    2d4a:	95 1f       	adc	r25, r21
    2d4c:	a0 1d       	adc	r26, r0
    2d4e:	08 95       	ret

00002d50 <__prologue_saves__>:
    2d50:	2f 92       	push	r2
    2d52:	3f 92       	push	r3
    2d54:	4f 92       	push	r4
    2d56:	5f 92       	push	r5
    2d58:	6f 92       	push	r6
    2d5a:	7f 92       	push	r7
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	ca 1b       	sub	r28, r26
    2d7a:	db 0b       	sbc	r29, r27
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	09 94       	ijmp

00002d88 <__epilogue_restores__>:
    2d88:	2a 88       	ldd	r2, Y+18	; 0x12
    2d8a:	39 88       	ldd	r3, Y+17	; 0x11
    2d8c:	48 88       	ldd	r4, Y+16	; 0x10
    2d8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9e:	df 80       	ldd	r13, Y+7	; 0x07
    2da0:	ee 80       	ldd	r14, Y+6	; 0x06
    2da2:	fd 80       	ldd	r15, Y+5	; 0x05
    2da4:	0c 81       	ldd	r16, Y+4	; 0x04
    2da6:	1b 81       	ldd	r17, Y+3	; 0x03
    2da8:	aa 81       	ldd	r26, Y+2	; 0x02
    2daa:	b9 81       	ldd	r27, Y+1	; 0x01
    2dac:	ce 0f       	add	r28, r30
    2dae:	d1 1d       	adc	r29, r1
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	ed 01       	movw	r28, r26
    2dbc:	08 95       	ret

00002dbe <__do_global_dtors>:
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
    2dc0:	c3 e6       	ldi	r28, 0x63	; 99
    2dc2:	d0 e0       	ldi	r29, 0x00	; 0
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <__do_global_dtors+0x10>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__tablejump2__>
    2dcc:	21 96       	adiw	r28, 0x01	; 1
    2dce:	c4 36       	cpi	r28, 0x64	; 100
    2dd0:	d1 07       	cpc	r29, r17
    2dd2:	c9 f7       	brne	.-14     	; 0x2dc6 <__do_global_dtors+0x8>
    2dd4:	f8 94       	cli

00002dd6 <__stop_program>:
    2dd6:	ff cf       	rjmp	.-2      	; 0x2dd6 <__stop_program>
