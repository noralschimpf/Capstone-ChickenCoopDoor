
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00002fac  00003040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a2  0080025e  0080025e  0000319e  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  0000319e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010f52  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c20  00000000  00000000  00014a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000464b  00000000  00000000  0001766e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b48  00000000  00000000  0001bcbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003381  00000000  00000000  0001d804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009a7d  00000000  00000000  00020b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000860  00000000  00000000  0002a602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_1>
       8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__vector_18>
      4c:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	a7 04       	cpc	r10, r7
      ba:	66 06       	cpc	r6, r22
      bc:	90 10       	cpse	r9, r0

000000be <__ctors_end>:
      be:	b7 04       	cpc	r11, r7

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	12 e0       	ldi	r17, 0x02	; 2
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	ec ea       	ldi	r30, 0xAC	; 172
      d4:	ff e2       	ldi	r31, 0x2F	; 47
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	ae 35       	cpi	r26, 0x5E	; 94
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	24 e0       	ldi	r18, 0x04	; 4
      e4:	ae e5       	ldi	r26, 0x5E	; 94
      e6:	b2 e0       	ldi	r27, 0x02	; 2
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a0 30       	cpi	r26, 0x00	; 0
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 94 06 	call	0xd28	; 0xd28 <main>
     10c:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN7DisplayD1Ev>:
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24
     11a:	c6 96       	adiw	r24, 0x36	; 54
     11c:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     120:	ce 01       	movw	r24, r28
     122:	c0 96       	adiw	r24, 0x30	; 48
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_ZN6StringD1Ev>

0000012c <_ZN7Display8print2lnE6StringS0_>:
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	7b 01       	movw	r14, r22
     13c:	8a 01       	movw	r16, r20
     13e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN21Adafruit_RGBLCDShield5clearEv>
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	ce 01       	movw	r24, r28
     148:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     14c:	b7 01       	movw	r22, r14
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN5Print5printERK6String>
     154:	41 e0       	ldi	r20, 0x01	; 1
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     15e:	b8 01       	movw	r22, r16
     160:	ce 01       	movw	r24, r28
     162:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN5Print5printERK6String>
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	ce 01       	movw	r24, r28
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000017c <_ZN7Display11refreshLineEv>:
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	2c 97       	sbiw	r28, 0x0c	; 12
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	8c 01       	movw	r16, r24
     196:	63 e3       	ldi	r22, 0x33	; 51
     198:	72 e0       	ldi	r23, 0x02	; 2
     19a:	ce 01       	movw	r24, r28
     19c:	07 96       	adiw	r24, 0x07	; 7
     19e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     1a2:	f8 01       	movw	r30, r16
     1a4:	82 a5       	ldd	r24, Z+42	; 0x2a
     1a6:	93 a5       	ldd	r25, Z+43	; 0x2b
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	19 f0       	breq	.+6      	; 0x1b2 <_ZN7Display11refreshLineEv+0x36>
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	41 f0       	breq	.+16     	; 0x1c0 <_ZN7Display11refreshLineEv+0x44>
     1b0:	0e c0       	rjmp	.+28     	; 0x1ce <_ZN7Display11refreshLineEv+0x52>
     1b2:	b8 01       	movw	r22, r16
     1b4:	60 5d       	subi	r22, 0xD0	; 208
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	ce 01       	movw	r24, r28
     1ba:	07 96       	adiw	r24, 0x07	; 7
     1bc:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN6StringaSERKS_>
     1c0:	b8 01       	movw	r22, r16
     1c2:	6a 5c       	subi	r22, 0xCA	; 202
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	ce 01       	movw	r24, r28
     1c8:	07 96       	adiw	r24, 0x07	; 7
     1ca:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN6StringaSERKS_>
     1ce:	f8 01       	movw	r30, r16
     1d0:	46 a5       	ldd	r20, Z+46	; 0x2e
     1d2:	57 a5       	ldd	r21, Z+47	; 0x2f
     1d4:	84 a5       	ldd	r24, Z+44	; 0x2c
     1d6:	95 a5       	ldd	r25, Z+45	; 0x2d
     1d8:	48 17       	cp	r20, r24
     1da:	59 07       	cpc	r21, r25
     1dc:	14 f4       	brge	.+4      	; 0x1e2 <_ZN7Display11refreshLineEv+0x66>
     1de:	15 a6       	std	Z+45, r1	; 0x2d
     1e0:	14 a6       	std	Z+44, r1	; 0x2c
     1e2:	f8 01       	movw	r30, r16
     1e4:	24 a5       	ldd	r18, Z+44	; 0x2c
     1e6:	35 a5       	ldd	r19, Z+45	; 0x2d
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	41 f4       	brne	.+16     	; 0x1fe <_ZN7Display11refreshLineEv+0x82>
     1ee:	2b 85       	ldd	r18, Y+11	; 0x0b
     1f0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1f2:	94 e0       	ldi	r25, 0x04	; 4
     1f4:	44 0f       	add	r20, r20
     1f6:	55 1f       	adc	r21, r21
     1f8:	9a 95       	dec	r25
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZN7Display11refreshLineEv+0x78>
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <_ZN7Display11refreshLineEv+0x96>
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	84 e0       	ldi	r24, 0x04	; 4
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <_ZN7Display11refreshLineEv+0x88>
     20c:	a9 01       	movw	r20, r18
     20e:	40 51       	subi	r20, 0x10	; 16
     210:	51 09       	sbc	r21, r1
     212:	be 01       	movw	r22, r28
     214:	69 5f       	subi	r22, 0xF9	; 249
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	ce 01       	movw	r24, r28
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZNK6String9substringEjj>
     220:	be 01       	movw	r22, r28
     222:	6f 5f       	subi	r22, 0xFF	; 255
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	ce 01       	movw	r24, r28
     228:	07 96       	adiw	r24, 0x07	; 7
     22a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN6StringaSEOS_>
     22e:	ce 01       	movw	r24, r28
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     236:	f8 01       	movw	r30, r16
     238:	42 a5       	ldd	r20, Z+42	; 0x2a
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	c8 01       	movw	r24, r16
     23e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     242:	be 01       	movw	r22, r28
     244:	69 5f       	subi	r22, 0xF9	; 249
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	c8 01       	movw	r24, r16
     24a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN5Print5printERK6String>
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	c8 01       	movw	r24, r16
     254:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     258:	f8 01       	movw	r30, r16
     25a:	04 a5       	ldd	r16, Z+44	; 0x2c
     25c:	15 a5       	ldd	r17, Z+45	; 0x2d
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	ce 01       	movw	r24, r28
     264:	07 96       	adiw	r24, 0x07	; 7
     266:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     26a:	c8 01       	movw	r24, r16
     26c:	2c 96       	adiw	r28, 0x0c	; 12
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     282:	4f 92       	push	r4
     284:	5f 92       	push	r5
     286:	6f 92       	push	r6
     288:	7f 92       	push	r7
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2c 97       	sbiw	r28, 0x0c	; 12
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
     2b2:	4c 01       	movw	r8, r24
     2b4:	3b 01       	movw	r6, r22
     2b6:	2a 01       	movw	r4, r20
     2b8:	b2 2e       	mov	r11, r18
     2ba:	c0 96       	adiw	r24, 0x30	; 48
     2bc:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN6StringaSERKS_>
     2c0:	b2 01       	movw	r22, r4
     2c2:	c4 01       	movw	r24, r8
     2c4:	c6 96       	adiw	r24, 0x36	; 54
     2c6:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN6StringaSERKS_>
     2ca:	f4 01       	movw	r30, r8
     2cc:	f7 a6       	std	Z+47, r15	; 0x2f
     2ce:	e6 a6       	std	Z+46, r14	; 0x2e
     2d0:	d3 a6       	std	Z+43, r13	; 0x2b
     2d2:	c2 a6       	std	Z+42, r12	; 0x2a
     2d4:	f8 01       	movw	r30, r16
     2d6:	80 81       	ld	r24, Z
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	f4 01       	movw	r30, r8
     2dc:	97 8f       	std	Z+31, r25	; 0x1f
     2de:	86 8f       	std	Z+30, r24	; 0x1e
     2e0:	f8 01       	movw	r30, r16
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	f4 01       	movw	r30, r8
     2e8:	91 a3       	std	Z+33, r25	; 0x21
     2ea:	80 a3       	std	Z+32, r24	; 0x20
     2ec:	f8 01       	movw	r30, r16
     2ee:	84 81       	ldd	r24, Z+4	; 0x04
     2f0:	95 81       	ldd	r25, Z+5	; 0x05
     2f2:	f4 01       	movw	r30, r8
     2f4:	93 a3       	std	Z+35, r25	; 0x23
     2f6:	82 a3       	std	Z+34, r24	; 0x22
     2f8:	f8 01       	movw	r30, r16
     2fa:	86 81       	ldd	r24, Z+6	; 0x06
     2fc:	97 81       	ldd	r25, Z+7	; 0x07
     2fe:	f4 01       	movw	r30, r8
     300:	95 a3       	std	Z+37, r25	; 0x25
     302:	84 a3       	std	Z+36, r24	; 0x24
     304:	f8 01       	movw	r30, r16
     306:	80 85       	ldd	r24, Z+8	; 0x08
     308:	91 85       	ldd	r25, Z+9	; 0x09
     30a:	f4 01       	movw	r30, r8
     30c:	97 a3       	std	Z+39, r25	; 0x27
     30e:	86 a3       	std	Z+38, r24	; 0x26
     310:	6b 2d       	mov	r22, r11
     312:	c4 01       	movw	r24, r8
     314:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     318:	f4 01       	movw	r30, r8
     31a:	a4 ae       	std	Z+60, r10	; 0x3c
     31c:	a1 10       	cpse	r10, r1
     31e:	1e c0       	rjmp	.+60     	; 0x35c <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     320:	15 a6       	std	Z+45, r1	; 0x2d
     322:	14 a6       	std	Z+44, r1	; 0x2c
     324:	b2 01       	movw	r22, r4
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN6StringC1ERKS_>
     32e:	b3 01       	movw	r22, r6
     330:	ce 01       	movw	r24, r28
     332:	07 96       	adiw	r24, 0x07	; 7
     334:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN6StringC1ERKS_>
     338:	ae 01       	movw	r20, r28
     33a:	4f 5f       	subi	r20, 0xFF	; 255
     33c:	5f 4f       	sbci	r21, 0xFF	; 255
     33e:	be 01       	movw	r22, r28
     340:	69 5f       	subi	r22, 0xF9	; 249
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	c4 01       	movw	r24, r8
     346:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7Display8print2lnE6StringS0_>
     34a:	ce 01       	movw	r24, r28
     34c:	07 96       	adiw	r24, 0x07	; 7
     34e:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     352:	ce 01       	movw	r24, r28
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     35c:	c4 01       	movw	r24, r8
     35e:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN7Display11refreshLineEv>
     362:	f4 01       	movw	r30, r8
     364:	95 a7       	std	Z+45, r25	; 0x2d
     366:	84 a7       	std	Z+44, r24	; 0x2c
     368:	2c 96       	adiw	r28, 0x0c	; 12
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	08 95       	ret

00000396 <_ZN7Display13selectDisplayEibPcS0_>:
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	ac 97       	sbiw	r28, 0x2c	; 44
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	4c 01       	movw	r8, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	44 23       	and	r20, r20
     3c2:	21 f0       	breq	.+8      	; 0x3cc <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3c4:	c4 01       	movw	r24, r8
     3c6:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN7Display11refreshLineEv>
     3ca:	9e c0       	rjmp	.+316    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     3cc:	8e 01       	movw	r16, r28
     3ce:	0f 5f       	subi	r16, 0xFF	; 255
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
     3d2:	62 30       	cpi	r22, 0x02	; 2
     3d4:	71 05       	cpc	r23, r1
     3d6:	59 f1       	breq	.+86     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3d8:	ec f4       	brge	.+58     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3da:	61 15       	cp	r22, r1
     3dc:	71 05       	cpc	r23, r1
     3de:	09 f4       	brne	.+2      	; 0x3e2 <_ZN7Display13selectDisplayEibPcS0_+0x4c>
     3e0:	59 c0       	rjmp	.+178    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	71 05       	cpc	r23, r1
     3e6:	09 f0       	breq	.+2      	; 0x3ea <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3e8:	55 c0       	rjmp	.+170    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3ea:	1a 82       	std	Y+2, r1	; 0x02
     3ec:	19 82       	std	Y+1, r1	; 0x01
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
     3fa:	98 87       	std	Y+8, r25	; 0x08
     3fc:	8f 83       	std	Y+7, r24	; 0x07
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	89 87       	std	Y+9, r24	; 0x09
     402:	6d e3       	ldi	r22, 0x3D	; 61
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	ce 01       	movw	r24, r28
     408:	81 96       	adiw	r24, 0x21	; 33
     40a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     40e:	68 e4       	ldi	r22, 0x48	; 72
     410:	71 e0       	ldi	r23, 0x01	; 1
     412:	21 c0       	rjmp	.+66     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     414:	63 30       	cpi	r22, 0x03	; 3
     416:	71 05       	cpc	r23, r1
     418:	59 f1       	breq	.+86     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     41a:	64 30       	cpi	r22, 0x04	; 4
     41c:	71 05       	cpc	r23, r1
     41e:	d1 f5       	brne	.+116    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	3f 93       	push	r19
     426:	2f 93       	push	r18
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	27 c0       	rjmp	.+78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     42e:	1a 82       	std	Y+2, r1	; 0x02
     430:	19 82       	std	Y+1, r1	; 0x01
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	9e 83       	std	Y+6, r25	; 0x06
     43c:	8d 83       	std	Y+5, r24	; 0x05
     43e:	98 87       	std	Y+8, r25	; 0x08
     440:	8f 83       	std	Y+7, r24	; 0x07
     442:	9a 87       	std	Y+10, r25	; 0x0a
     444:	89 87       	std	Y+9, r24	; 0x09
     446:	6d e3       	ldi	r22, 0x3D	; 61
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	ce 01       	movw	r24, r28
     44c:	81 96       	adiw	r24, 0x21	; 33
     44e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     452:	65 e5       	ldi	r22, 0x55	; 85
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	ce 01       	movw	r24, r28
     458:	87 96       	adiw	r24, 0x27	; 39
     45a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     45e:	a1 2c       	mov	r10, r1
     460:	cc 24       	eor	r12, r12
     462:	ca 94       	dec	r12
     464:	dc 2c       	mov	r13, r12
     466:	e1 2c       	mov	r14, r1
     468:	f1 2c       	mov	r15, r1
     46a:	23 e0       	ldi	r18, 0x03	; 3
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	3b c0       	rjmp	.+118    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	3f 93       	push	r19
     476:	2f 93       	push	r18
     478:	82 e6       	ldi	r24, 0x62	; 98
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	1f 93       	push	r17
     482:	0f 93       	push	r16
     484:	0e 94 df 14 	call	0x29be	; 0x29be <sprintf>
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	3a c0       	rjmp	.+116    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9c 83       	std	Y+4, r25	; 0x04
     4a2:	8b 83       	std	Y+3, r24	; 0x03
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	98 87       	std	Y+8, r25	; 0x08
     4b2:	8f 83       	std	Y+7, r24	; 0x07
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9a 87       	std	Y+10, r25	; 0x0a
     4ba:	89 87       	std	Y+9, r24	; 0x09
     4bc:	63 e1       	ldi	r22, 0x13	; 19
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	ce 01       	movw	r24, r28
     4c2:	81 96       	adiw	r24, 0x21	; 33
     4c4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     4c8:	63 e3       	ldi	r22, 0x33	; 51
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	ce 01       	movw	r24, r28
     4ce:	87 96       	adiw	r24, 0x27	; 39
     4d0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     4d4:	a1 2c       	mov	r10, r1
     4d6:	cc 24       	eor	r12, r12
     4d8:	c3 94       	inc	r12
     4da:	d1 2c       	mov	r13, r1
     4dc:	ee 24       	eor	r14, r14
     4de:	e3 94       	inc	r14
     4e0:	f1 2c       	mov	r15, r1
     4e2:	22 e0       	ldi	r18, 0x02	; 2
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	ae 01       	movw	r20, r28
     4e8:	4f 5d       	subi	r20, 0xDF	; 223
     4ea:	5f 4f       	sbci	r21, 0xFF	; 255
     4ec:	be 01       	movw	r22, r28
     4ee:	69 5d       	subi	r22, 0xD9	; 217
     4f0:	7f 4f       	sbci	r23, 0xFF	; 255
     4f2:	c4 01       	movw	r24, r8
     4f4:	0e 94 41 01 	call	0x282	; 0x282 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     4f8:	ce 01       	movw	r24, r28
     4fa:	87 96       	adiw	r24, 0x27	; 39
     4fc:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     500:	ce 01       	movw	r24, r28
     502:	81 96       	adiw	r24, 0x21	; 33
     504:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     508:	ac 96       	adiw	r28, 0x2c	; 44
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	08 95       	ret

0000052c <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	fb 01       	movw	r30, r22
     538:	82 81       	ldd	r24, Z+2	; 0x02
     53a:	93 81       	ldd	r25, Z+3	; 0x03
     53c:	9b 83       	std	Y+3, r25	; 0x03
     53e:	8a 83       	std	Y+2, r24	; 0x02
     540:	84 e4       	ldi	r24, 0x44	; 68
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	88 83       	st	Y, r24
     548:	84 81       	ldd	r24, Z+4	; 0x04
     54a:	8c 83       	std	Y+4, r24	; 0x04
     54c:	85 81       	ldd	r24, Z+5	; 0x05
     54e:	8d 83       	std	Y+5, r24	; 0x05
     550:	86 81       	ldd	r24, Z+6	; 0x06
     552:	8e 83       	std	Y+6, r24	; 0x06
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	37 96       	adiw	r30, 0x07	; 7
     558:	de 01       	movw	r26, r28
     55a:	17 96       	adiw	r26, 0x07	; 7
     55c:	01 90       	ld	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	8a 95       	dec	r24
     562:	e1 f7       	brne	.-8      	; 0x55c <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	fb 01       	movw	r30, r22
     568:	3f 96       	adiw	r30, 0x0f	; 15
     56a:	de 01       	movw	r26, r28
     56c:	1f 96       	adiw	r26, 0x0f	; 15
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	8a 95       	dec	r24
     574:	e1 f7       	brne	.-8      	; 0x56e <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     576:	fb 01       	movw	r30, r22
     578:	84 89       	ldd	r24, Z+20	; 0x14
     57a:	8c 8b       	std	Y+20, r24	; 0x14
     57c:	85 89       	ldd	r24, Z+21	; 0x15
     57e:	8d 8b       	std	Y+21, r24	; 0x15
     580:	86 89       	ldd	r24, Z+22	; 0x16
     582:	8e 8b       	std	Y+22, r24	; 0x16
     584:	87 89       	ldd	r24, Z+23	; 0x17
     586:	8f 8b       	std	Y+23, r24	; 0x17
     588:	80 8d       	ldd	r24, Z+24	; 0x18
     58a:	88 8f       	std	Y+24, r24	; 0x18
     58c:	81 8d       	ldd	r24, Z+25	; 0x19
     58e:	89 8f       	std	Y+25, r24	; 0x19
     590:	82 8d       	ldd	r24, Z+26	; 0x1a
     592:	8a 8f       	std	Y+26, r24	; 0x1a
     594:	83 8d       	ldd	r24, Z+27	; 0x1b
     596:	8b 8f       	std	Y+27, r24	; 0x1b
     598:	63 e3       	ldi	r22, 0x33	; 51
     59a:	72 e0       	ldi	r23, 0x02	; 2
     59c:	ce 01       	movw	r24, r28
     59e:	c0 96       	adiw	r24, 0x30	; 48
     5a0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     5a4:	63 e3       	ldi	r22, 0x33	; 51
     5a6:	72 e0       	ldi	r23, 0x02	; 2
     5a8:	ce 01       	movw	r24, r28
     5aa:	c6 96       	adiw	r24, 0x36	; 54
     5ac:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	42 e0       	ldi	r20, 0x02	; 2
     5b4:	60 e1       	ldi	r22, 0x10	; 16
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     5bc:	ce 01       	movw	r24, r28
     5be:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN21Adafruit_RGBLCDShield5clearEv>
     5c2:	03 e3       	ldi	r16, 0x33	; 51
     5c4:	12 e0       	ldi	r17, 0x02	; 2
     5c6:	98 01       	movw	r18, r16
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN7Display13selectDisplayEibPcS0_>
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <_ZN7Display21UpdateMenuFromButtonsEv>:
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     5ec:	80 ff       	sbrs	r24, 0
     5ee:	06 c0       	rjmp	.+12     	; 0x5fc <_ZN7Display21UpdateMenuFromButtonsEv+0x1e>
     5f0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     5f2:	7f 8d       	ldd	r23, Y+31	; 0x1f
     5f4:	6f 3f       	cpi	r22, 0xFF	; 255
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
     5f8:	79 07       	cpc	r23, r25
     5fa:	01 f5       	brne	.+64     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     5fc:	83 ff       	sbrs	r24, 3
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <_ZN7Display21UpdateMenuFromButtonsEv+0x2e>
     600:	68 a1       	ldd	r22, Y+32	; 0x20
     602:	79 a1       	ldd	r23, Y+33	; 0x21
     604:	6f 3f       	cpi	r22, 0xFF	; 255
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	79 07       	cpc	r23, r25
     60a:	c1 f4       	brne	.+48     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     60c:	82 ff       	sbrs	r24, 2
     60e:	06 c0       	rjmp	.+12     	; 0x61c <_ZN7Display21UpdateMenuFromButtonsEv+0x3e>
     610:	6a a1       	ldd	r22, Y+34	; 0x22
     612:	7b a1       	ldd	r23, Y+35	; 0x23
     614:	6f 3f       	cpi	r22, 0xFF	; 255
     616:	9f ef       	ldi	r25, 0xFF	; 255
     618:	79 07       	cpc	r23, r25
     61a:	81 f4       	brne	.+32     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     61c:	84 ff       	sbrs	r24, 4
     61e:	06 c0       	rjmp	.+12     	; 0x62c <_ZN7Display21UpdateMenuFromButtonsEv+0x4e>
     620:	6c a1       	ldd	r22, Y+36	; 0x24
     622:	7d a1       	ldd	r23, Y+37	; 0x25
     624:	6f 3f       	cpi	r22, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	79 07       	cpc	r23, r25
     62a:	41 f4       	brne	.+16     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     62c:	81 ff       	sbrs	r24, 1
     62e:	12 c0       	rjmp	.+36     	; 0x654 <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     630:	6e a1       	ldd	r22, Y+38	; 0x26
     632:	7f a1       	ldd	r23, Y+39	; 0x27
     634:	6f 3f       	cpi	r22, 0xFF	; 255
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	78 07       	cpc	r23, r24
     63a:	61 f0       	breq	.+24     	; 0x654 <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     63c:	03 e3       	ldi	r16, 0x33	; 51
     63e:	12 e0       	ldi	r17, 0x02	; 2
     640:	98 01       	movw	r18, r16
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	ce 01       	movw	r24, r28
     646:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN7Display13selectDisplayEibPcS0_>
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret
     654:	ce 01       	movw	r24, r28
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	0c 94 be 00 	jmp	0x17c	; 0x17c <_ZN7Display11refreshLineEv>

00000662 <setup>:
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	c9 55       	subi	r28, 0x59	; 89
     670:	d1 09       	sbc	r29, r1
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	26 e0       	ldi	r18, 0x06	; 6
     67e:	40 e8       	ldi	r20, 0x80	; 128
     680:	55 e2       	ldi	r21, 0x25	; 37
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	82 e9       	ldi	r24, 0x92	; 146
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN14HardwareSerial5beginEmh>
     68e:	80 e6       	ldi	r24, 0x60	; 96
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	fc 01       	movw	r30, r24
     694:	22 81       	ldd	r18, Z+2	; 0x02
     696:	33 81       	ldd	r19, Z+3	; 0x03
     698:	22 96       	adiw	r28, 0x02	; 2
     69a:	3f af       	std	Y+63, r19	; 0x3f
     69c:	2e af       	std	Y+62, r18	; 0x3e
     69e:	22 97       	sbiw	r28, 0x02	; 2
     6a0:	24 e4       	ldi	r18, 0x44	; 68
     6a2:	32 e0       	ldi	r19, 0x02	; 2
     6a4:	3f af       	std	Y+63, r19	; 0x3f
     6a6:	2e af       	std	Y+62, r18	; 0x3e
     6a8:	24 81       	ldd	r18, Z+4	; 0x04
     6aa:	23 96       	adiw	r28, 0x03	; 3
     6ac:	2f af       	std	Y+63, r18	; 0x3f
     6ae:	23 97       	sbiw	r28, 0x03	; 3
     6b0:	25 81       	ldd	r18, Z+5	; 0x05
     6b2:	24 96       	adiw	r28, 0x04	; 4
     6b4:	2f af       	std	Y+63, r18	; 0x3f
     6b6:	24 97       	sbiw	r28, 0x04	; 4
     6b8:	26 81       	ldd	r18, Z+6	; 0x06
     6ba:	25 96       	adiw	r28, 0x05	; 5
     6bc:	2f af       	std	Y+63, r18	; 0x3f
     6be:	25 97       	sbiw	r28, 0x05	; 5
     6c0:	28 e0       	ldi	r18, 0x08	; 8
     6c2:	e7 e6       	ldi	r30, 0x67	; 103
     6c4:	f2 e0       	ldi	r31, 0x02	; 2
     6c6:	de 01       	movw	r26, r28
     6c8:	ab 5b       	subi	r26, 0xBB	; 187
     6ca:	bf 4f       	sbci	r27, 0xFF	; 255
     6cc:	01 90       	ld	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	2a 95       	dec	r18
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <setup+0x6a>
     6d4:	25 e0       	ldi	r18, 0x05	; 5
     6d6:	ef e6       	ldi	r30, 0x6F	; 111
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	de 01       	movw	r26, r28
     6dc:	a3 5b       	subi	r26, 0xB3	; 179
     6de:	bf 4f       	sbci	r27, 0xFF	; 255
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	2a 95       	dec	r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <setup+0x7e>
     6e8:	fc 01       	movw	r30, r24
     6ea:	24 89       	ldd	r18, Z+20	; 0x14
     6ec:	63 96       	adiw	r28, 0x13	; 19
     6ee:	2f af       	std	Y+63, r18	; 0x3f
     6f0:	63 97       	sbiw	r28, 0x13	; 19
     6f2:	25 89       	ldd	r18, Z+21	; 0x15
     6f4:	64 96       	adiw	r28, 0x14	; 20
     6f6:	2f af       	std	Y+63, r18	; 0x3f
     6f8:	64 97       	sbiw	r28, 0x14	; 20
     6fa:	26 89       	ldd	r18, Z+22	; 0x16
     6fc:	65 96       	adiw	r28, 0x15	; 21
     6fe:	2f af       	std	Y+63, r18	; 0x3f
     700:	65 97       	sbiw	r28, 0x15	; 21
     702:	27 89       	ldd	r18, Z+23	; 0x17
     704:	66 96       	adiw	r28, 0x16	; 22
     706:	2f af       	std	Y+63, r18	; 0x3f
     708:	66 97       	sbiw	r28, 0x16	; 22
     70a:	20 8d       	ldd	r18, Z+24	; 0x18
     70c:	67 96       	adiw	r28, 0x17	; 23
     70e:	2f af       	std	Y+63, r18	; 0x3f
     710:	67 97       	sbiw	r28, 0x17	; 23
     712:	21 8d       	ldd	r18, Z+25	; 0x19
     714:	68 96       	adiw	r28, 0x18	; 24
     716:	2f af       	std	Y+63, r18	; 0x3f
     718:	68 97       	sbiw	r28, 0x18	; 24
     71a:	22 8d       	ldd	r18, Z+26	; 0x1a
     71c:	69 96       	adiw	r28, 0x19	; 25
     71e:	2f af       	std	Y+63, r18	; 0x3f
     720:	69 97       	sbiw	r28, 0x19	; 25
     722:	83 8d       	ldd	r24, Z+27	; 0x1b
     724:	6a 96       	adiw	r28, 0x1a	; 26
     726:	8f af       	std	Y+63, r24	; 0x3f
     728:	6a 97       	sbiw	r28, 0x1a	; 26
     72a:	be 01       	movw	r22, r28
     72c:	62 5c       	subi	r22, 0xC2	; 194
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	8e 01       	movw	r16, r28
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	c8 01       	movw	r24, r16
     738:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     73c:	10 93 5f 02 	sts	0x025F, r17	; 0x80025f <__data_end+0x1>
     740:	00 93 5e 02 	sts	0x025E, r16	; 0x80025e <__data_end>
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     754:	62 e0       	ldi	r22, 0x02	; 2
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     75c:	43 e0       	ldi	r20, 0x03	; 3
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	66 e9       	ldi	r22, 0x96	; 150
     762:	74 e0       	ldi	r23, 0x04	; 4
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 07 07 	call	0xe0e	; 0xe0e <attachInterrupt>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <analogReference>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <isOkay>
     776:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <isClosing>
     77a:	6e e9       	ldi	r22, 0x9E	; 158
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	82 e9       	ldi	r24, 0x92	; 146
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>
     786:	c8 01       	movw	r24, r16
     788:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7DisplayD1Ev>
     78c:	c7 5a       	subi	r28, 0xA7	; 167
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <loop>:
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	68 eb       	ldi	r22, 0xB8	; 184
     7aa:	7b e0       	ldi	r23, 0x0B	; 11
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay>
     7b4:	6c ea       	ldi	r22, 0xAC	; 172
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	82 e9       	ldi	r24, 0x92	; 146
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>
     7c0:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <CurrentMenu>
     7c4:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <CurrentMenu+0x1>
     7c8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <MenuSelect>
     7cc:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <MenuSelect+0x1>
     7d0:	28 17       	cp	r18, r24
     7d2:	39 07       	cpc	r19, r25
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <loop+0x40>
     7d6:	64 eb       	ldi	r22, 0xB4	; 180
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	82 e9       	ldi	r24, 0x92	; 146
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>
     7e2:	15 c0       	rjmp	.+42     	; 0x80e <loop+0x6a>
     7e4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <millis>
     7e8:	00 91 8a 02 	lds	r16, 0x028A	; 0x80028a <MenuLastUpdated>
     7ec:	10 91 8b 02 	lds	r17, 0x028B	; 0x80028b <MenuLastUpdated+0x1>
     7f0:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <MenuLastUpdated+0x2>
     7f4:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <MenuLastUpdated+0x3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	80 1b       	sub	r24, r16
     7fe:	91 0b       	sbc	r25, r17
     800:	a2 0b       	sbc	r26, r18
     802:	b3 0b       	sbc	r27, r19
     804:	89 3b       	cpi	r24, 0xB9	; 185
     806:	9b 40       	sbci	r25, 0x0B	; 11
     808:	a1 05       	cpc	r26, r1
     80a:	b1 05       	cpc	r27, r1
     80c:	c0 f0       	brcs	.+48     	; 0x83e <loop+0x9a>
     80e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__data_end>
     812:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__data_end+0x1>
     816:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN7Display21UpdateMenuFromButtonsEv>
     81a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <MenuSelect>
     81e:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <MenuSelect+0x1>
     822:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <CurrentMenu+0x1>
     826:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <CurrentMenu>
     82a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <millis>
     82e:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <MenuLastUpdated>
     832:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <MenuLastUpdated+0x1>
     836:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <MenuLastUpdated+0x2>
     83a:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <MenuLastUpdated+0x3>
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <_Z14openDoorActioni>:
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	8a e0       	ldi	r24, 0x0A	; 10
     84e:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	89 e0       	ldi	r24, 0x09	; 9
     856:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     85a:	63 ed       	ldi	r22, 0xD3	; 211
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	82 e9       	ldi	r24, 0x92	; 146
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	8a e0       	ldi	r24, 0x0A	; 10
     86a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	89 e0       	ldi	r24, 0x09	; 9
     872:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     876:	c8 ef       	ldi	r28, 0xF8	; 248
     878:	da e2       	ldi	r29, 0x2A	; 42
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <isOkay>
     880:	88 23       	and	r24, r24
     882:	99 f0       	breq	.+38     	; 0x8aa <_Z14openDoorActioni+0x66>
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay>
     890:	11 23       	and	r17, r17
     892:	49 f0       	breq	.+18     	; 0x8a6 <_Z14openDoorActioni+0x62>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	89 e0       	ldi	r24, 0x09	; 9
     8a0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <_Z14openDoorActioni+0x66>
     8a6:	21 97       	sbiw	r28, 0x01	; 1
     8a8:	49 f7       	brne	.-46     	; 0x87c <_Z14openDoorActioni+0x38>
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8a e0       	ldi	r24, 0x0A	; 10
     8ae:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	89 e0       	ldi	r24, 0x09	; 9
     8b6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8a e0       	ldi	r24, 0x0A	; 10
     8be:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	89 e0       	ldi	r24, 0x09	; 9
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0c 94 9e 08 	jmp	0x113c	; 0x113c <pinMode>

000008d0 <_Z13emergencyOpenv>:
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	89 e0       	ldi	r24, 0x09	; 9
     8d4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	89 e0       	ldi	r24, 0x09	; 9
     8e4:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     8f0:	68 ee       	ldi	r22, 0xE8	; 232
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay>
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	72 e0       	ldi	r23, 0x02	; 2
     900:	82 e9       	ldi	r24, 0x92	; 146
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>
     908:	88 ee       	ldi	r24, 0xE8	; 232
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 22 04 	call	0x844	; 0x844 <_Z14openDoorActioni>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	0e 94 9e 08 	call	0x113c	; 0x113c <pinMode>
     920:	6c e0       	ldi	r22, 0x0C	; 12
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	82 e9       	ldi	r24, 0x92	; 146
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <_ZN5Print7printlnEPKc>

0000092c <_Z17LimitSwitchActivev>:
     92c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <isClosing>
     930:	88 23       	and	r24, r24
     932:	61 f0       	breq	.+24     	; 0x94c <_Z17LimitSwitchActivev+0x20>
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	89 e0       	ldi	r24, 0x09	; 9
     938:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
     944:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_Z13emergencyOpenv>
     948:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <isOkay>
     94c:	08 95       	ret

0000094e <_GLOBAL__sub_I_Temperature>:
     94e:	63 e3       	ldi	r22, 0x33	; 51
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	84 e8       	ldi	r24, 0x84	; 132
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     95a:	63 e3       	ldi	r22, 0x33	; 51
     95c:	72 e0       	ldi	r23, 0x02	; 2
     95e:	8e e7       	ldi	r24, 0x7E	; 126
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
     966:	80 e6       	ldi	r24, 0x60	; 96
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <_ZN21Adafruit_RGBLCDShieldC1Ev>

0000096e <_GLOBAL__sub_D_Temperature>:
     96e:	8e e7       	ldi	r24, 0x7E	; 126
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN6StringD1Ev>
     976:	84 e8       	ldi	r24, 0x84	; 132
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_ZN6StringD1Ev>

0000097e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     97e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     980:	91 8d       	ldd	r25, Z+25	; 0x19
     982:	22 8d       	ldd	r18, Z+26	; 0x1a
     984:	89 2f       	mov	r24, r25
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	80 5c       	subi	r24, 0xC0	; 192
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	82 1b       	sub	r24, r18
     98e:	91 09       	sbc	r25, r1
}
     990:	8f 73       	andi	r24, 0x3F	; 63
     992:	99 27       	eor	r25, r25
     994:	08 95       	ret

00000996 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     996:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     998:	91 8d       	ldd	r25, Z+25	; 0x19
     99a:	82 8d       	ldd	r24, Z+26	; 0x1a
     99c:	98 17       	cp	r25, r24
     99e:	31 f0       	breq	.+12     	; 0x9ac <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9a0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9a2:	e8 0f       	add	r30, r24
     9a4:	f1 1d       	adc	r31, r1
     9a6:	85 8d       	ldd	r24, Z+29	; 0x1d
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     9b0:	08 95       	ret

000009b2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9b2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9b4:	91 8d       	ldd	r25, Z+25	; 0x19
     9b6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9b8:	98 17       	cp	r25, r24
     9ba:	61 f0       	breq	.+24     	; 0x9d4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     9bc:	82 8d       	ldd	r24, Z+26	; 0x1a
     9be:	df 01       	movw	r26, r30
     9c0:	a8 0f       	add	r26, r24
     9c2:	b1 1d       	adc	r27, r1
     9c4:	5d 96       	adiw	r26, 0x1d	; 29
     9c6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     9c8:	92 8d       	ldd	r25, Z+26	; 0x1a
     9ca:	9f 5f       	subi	r25, 0xFF	; 255
     9cc:	9f 73       	andi	r25, 0x3F	; 63
     9ce:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9d4:	8f ef       	ldi	r24, 0xFF	; 255
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     9d8:	08 95       	ret

000009da <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     9da:	fc 01       	movw	r30, r24
     9dc:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     9de:	44 8d       	ldd	r20, Z+28	; 0x1c
     9e0:	25 2f       	mov	r18, r21
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	84 2f       	mov	r24, r20
     9e6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     9e8:	82 1b       	sub	r24, r18
     9ea:	93 0b       	sbc	r25, r19
     9ec:	54 17       	cp	r21, r20
     9ee:	10 f0       	brcs	.+4      	; 0x9f4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     9f0:	cf 96       	adiw	r24, 0x3f	; 63
     9f2:	08 95       	ret
  return tail - head - 1;
     9f4:	01 97       	sbiw	r24, 0x01	; 1
}
     9f6:	08 95       	ret

000009f8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     9f8:	8c e5       	ldi	r24, 0x5C	; 92
     9fa:	96 e0       	ldi	r25, 0x06	; 6
     9fc:	89 2b       	or	r24, r25
     9fe:	49 f0       	breq	.+18     	; 0xa12 <_Z14serialEventRunv+0x1a>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	89 2b       	or	r24, r25
     a06:	29 f0       	breq	.+10     	; 0xa12 <_Z14serialEventRunv+0x1a>
     a08:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_Z17Serial0_availablev>
     a0c:	81 11       	cpse	r24, r1
     a0e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a12:	08 95       	ret

00000a14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a14:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a16:	84 8d       	ldd	r24, Z+28	; 0x1c
     a18:	df 01       	movw	r26, r30
     a1a:	a8 0f       	add	r26, r24
     a1c:	b1 1d       	adc	r27, r1
     a1e:	a3 5a       	subi	r26, 0xA3	; 163
     a20:	bf 4f       	sbci	r27, 0xFF	; 255
     a22:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a24:	84 8d       	ldd	r24, Z+28	; 0x1c
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	8f 73       	andi	r24, 0x3F	; 63
     a2c:	99 27       	eor	r25, r25
     a2e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a30:	a6 89       	ldd	r26, Z+22	; 0x16
     a32:	b7 89       	ldd	r27, Z+23	; 0x17
     a34:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a36:	a0 89       	ldd	r26, Z+16	; 0x10
     a38:	b1 89       	ldd	r27, Z+17	; 0x11
     a3a:	8c 91       	ld	r24, X
     a3c:	83 70       	andi	r24, 0x03	; 3
     a3e:	80 64       	ori	r24, 0x40	; 64
     a40:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a42:	93 8d       	ldd	r25, Z+27	; 0x1b
     a44:	84 8d       	ldd	r24, Z+28	; 0x1c
     a46:	98 13       	cpse	r25, r24
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a4a:	02 88       	ldd	r0, Z+18	; 0x12
     a4c:	f3 89       	ldd	r31, Z+19	; 0x13
     a4e:	e0 2d       	mov	r30, r0
     a50:	80 81       	ld	r24, Z
     a52:	8f 7d       	andi	r24, 0xDF	; 223
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret

00000a58 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
  _written = true;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     a6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a6e:	98 13       	cpse	r25, r24
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <_ZN14HardwareSerial5writeEh+0x24>
     a72:	e8 89       	ldd	r30, Y+16	; 0x10
     a74:	f9 89       	ldd	r31, Y+17	; 0x11
     a76:	80 81       	ld	r24, Z
     a78:	85 fd       	sbrc	r24, 5
     a7a:	26 c0       	rjmp	.+76     	; 0xac8 <_ZN14HardwareSerial5writeEh+0x70>
     a7c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a7e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0f 5f       	subi	r16, 0xFF	; 255
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	0f 73       	andi	r16, 0x3F	; 63
     a88:	11 27       	eor	r17, r17
     a8a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a8e:	e8 12       	cpse	r14, r24
     a90:	0c c0       	rjmp	.+24     	; 0xaaa <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	07 fc       	sbrc	r0, 7
     a96:	fa cf       	rjmp	.-12     	; 0xa8c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a98:	e8 89       	ldd	r30, Y+16	; 0x10
     a9a:	f9 89       	ldd	r31, Y+17	; 0x11
     a9c:	80 81       	ld	r24, Z
     a9e:	85 ff       	sbrs	r24, 5
     aa0:	f5 cf       	rjmp	.-22     	; 0xa8c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     aa8:	f1 cf       	rjmp	.-30     	; 0xa8c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aac:	fe 01       	movw	r30, r28
     aae:	e8 0f       	add	r30, r24
     ab0:	f1 1d       	adc	r31, r1
     ab2:	e3 5a       	subi	r30, 0xA3	; 163
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ab8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aba:	f8 94       	cli
    _tx_buffer_head = i;
     abc:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     abe:	ea 89       	ldd	r30, Y+18	; 0x12
     ac0:	fb 89       	ldd	r31, Y+19	; 0x13
     ac2:	80 81       	ld	r24, Z
     ac4:	80 62       	ori	r24, 0x20	; 32
     ac6:	0a c0       	rjmp	.+20     	; 0xadc <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ac8:	9f b7       	in	r25, 0x3f	; 63
     aca:	f8 94       	cli
      *_udr = c;
     acc:	ee 89       	ldd	r30, Y+22	; 0x16
     ace:	ff 89       	ldd	r31, Y+23	; 0x17
     ad0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ad2:	e8 89       	ldd	r30, Y+16	; 0x10
     ad4:	f9 89       	ldd	r31, Y+17	; 0x11
     ad6:	80 81       	ld	r24, Z
     ad8:	83 70       	andi	r24, 0x03	; 3
     ada:	80 64       	ori	r24, 0x40	; 64
     adc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ade:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     af8:	88 8d       	ldd	r24, Y+24	; 0x18
     afa:	88 23       	and	r24, r24
     afc:	c9 f0       	breq	.+50     	; 0xb30 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     afe:	ea 89       	ldd	r30, Y+18	; 0x12
     b00:	fb 89       	ldd	r31, Y+19	; 0x13
     b02:	80 81       	ld	r24, Z
     b04:	85 fd       	sbrc	r24, 5
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <_ZN14HardwareSerial5flushEv+0x20>
     b08:	a8 89       	ldd	r26, Y+16	; 0x10
     b0a:	b9 89       	ldd	r27, Y+17	; 0x11
     b0c:	8c 91       	ld	r24, X
     b0e:	86 fd       	sbrc	r24, 6
     b10:	0f c0       	rjmp	.+30     	; 0xb30 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	07 fc       	sbrc	r0, 7
     b16:	f5 cf       	rjmp	.-22     	; 0xb02 <_ZN14HardwareSerial5flushEv+0x10>
     b18:	80 81       	ld	r24, Z
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	f2 cf       	rjmp	.-28     	; 0xb02 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b1e:	a8 89       	ldd	r26, Y+16	; 0x10
     b20:	b9 89       	ldd	r27, Y+17	; 0x11
     b22:	8c 91       	ld	r24, X
     b24:	85 ff       	sbrs	r24, 5
     b26:	ed cf       	rjmp	.-38     	; 0xb02 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b2e:	e7 cf       	rjmp	.-50     	; 0xafe <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ec 01       	movw	r28, r24
     b46:	6a 01       	movw	r12, r20
     b48:	7b 01       	movw	r14, r22
     b4a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b4c:	e8 89       	ldd	r30, Y+16	; 0x10
     b4e:	f9 89       	ldd	r31, Y+17	; 0x11
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b54:	41 15       	cp	r20, r1
     b56:	51 4e       	sbci	r21, 0xE1	; 225
     b58:	61 05       	cpc	r22, r1
     b5a:	71 05       	cpc	r23, r1
     b5c:	b1 f0       	breq	.+44     	; 0xb8a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	79 e0       	ldi	r23, 0x09	; 9
     b62:	8d e3       	ldi	r24, 0x3D	; 61
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a7 01       	movw	r20, r14
     b68:	96 01       	movw	r18, r12
     b6a:	0e 94 c0 12 	call	0x2580	; 0x2580 <__udivmodsi4>
     b6e:	da 01       	movw	r26, r20
     b70:	c9 01       	movw	r24, r18
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	b6 95       	lsr	r27
     b7a:	a7 95       	ror	r26
     b7c:	97 95       	ror	r25
     b7e:	87 95       	ror	r24
     b80:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b82:	21 15       	cp	r18, r1
     b84:	80 e1       	ldi	r24, 0x10	; 16
     b86:	38 07       	cpc	r19, r24
     b88:	a8 f0       	brcs	.+42     	; 0xbb4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b8a:	e8 89       	ldd	r30, Y+16	; 0x10
     b8c:	f9 89       	ldd	r31, Y+17	; 0x11
     b8e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b90:	60 e8       	ldi	r22, 0x80	; 128
     b92:	74 e8       	ldi	r23, 0x84	; 132
     b94:	8e e1       	ldi	r24, 0x1E	; 30
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a7 01       	movw	r20, r14
     b9a:	96 01       	movw	r18, r12
     b9c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__udivmodsi4>
     ba0:	da 01       	movw	r26, r20
     ba2:	c9 01       	movw	r24, r18
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	a1 09       	sbc	r26, r1
     ba8:	b1 09       	sbc	r27, r1
     baa:	b6 95       	lsr	r27
     bac:	a7 95       	ror	r26
     bae:	97 95       	ror	r25
     bb0:	87 95       	ror	r24
     bb2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     bb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb6:	fd 85       	ldd	r31, Y+13	; 0x0d
     bb8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     bba:	ee 85       	ldd	r30, Y+14	; 0x0e
     bbc:	ff 85       	ldd	r31, Y+15	; 0x0f
     bbe:	20 83       	st	Z, r18

  _written = false;
     bc0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     bc2:	ec 89       	ldd	r30, Y+20	; 0x14
     bc4:	fd 89       	ldd	r31, Y+21	; 0x15
     bc6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     bc8:	ea 89       	ldd	r30, Y+18	; 0x12
     bca:	fb 89       	ldd	r31, Y+19	; 0x13
     bcc:	80 81       	ld	r24, Z
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     bd2:	ea 89       	ldd	r30, Y+18	; 0x12
     bd4:	fb 89       	ldd	r31, Y+19	; 0x13
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     bdc:	ea 89       	ldd	r30, Y+18	; 0x12
     bde:	fb 89       	ldd	r31, Y+19	; 0x13
     be0:	80 81       	ld	r24, Z
     be2:	80 68       	ori	r24, 0x80	; 128
     be4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     be6:	ea 89       	ldd	r30, Y+18	; 0x12
     be8:	fb 89       	ldd	r31, Y+19	; 0x13
     bea:	80 81       	ld	r24, Z
     bec:	8f 7d       	andi	r24, 0xDF	; 223
     bee:	80 83       	st	Z, r24
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	08 95       	ret

00000c00 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	08 95       	ret

00000c06 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     c06:	08 95       	ret

00000c08 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c08:	1f 92       	push	r1
     c0a:	0f 92       	push	r0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	2f 93       	push	r18
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c1c:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <Serial+0x10>
     c20:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <Serial+0x11>
     c24:	80 81       	ld	r24, Z
     c26:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <Serial+0x16>
     c2a:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <Serial+0x17>
     c2e:	82 fd       	sbrc	r24, 2
     c30:	12 c0       	rjmp	.+36     	; 0xc56 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c32:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c34:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <Serial+0x19>
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c3c:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Serial+0x1a>
     c40:	82 17       	cp	r24, r18
     c42:	51 f0       	breq	.+20     	; 0xc58 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     c44:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <Serial+0x19>
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ee 56       	subi	r30, 0x6E	; 110
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     c50:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <Serial+0x19>
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c56:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c8e:	82 e9       	ldi	r24, 0x92	; 146
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     cb8:	82 e9       	ldi	r24, 0x92	; 146
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN14HardwareSerial9availableEv>
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	89 2b       	or	r24, r25
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <_Z17Serial0_availablev+0x10>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
}
     cc8:	82 2f       	mov	r24, r18
     cca:	08 95       	ret

00000ccc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ccc:	e2 e9       	ldi	r30, 0x92	; 146
     cce:	f2 e0       	ldi	r31, 0x02	; 2
     cd0:	13 82       	std	Z+3, r1	; 0x03
     cd2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     cd4:	88 ee       	ldi	r24, 0xE8	; 232
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	84 83       	std	Z+4, r24	; 0x04
     cde:	95 83       	std	Z+5, r25	; 0x05
     ce0:	a6 83       	std	Z+6, r26	; 0x06
     ce2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ce4:	83 e2       	ldi	r24, 0x23	; 35
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	85 ec       	ldi	r24, 0xC5	; 197
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	95 87       	std	Z+13, r25	; 0x0d
     cf2:	84 87       	std	Z+12, r24	; 0x0c
     cf4:	84 ec       	ldi	r24, 0xC4	; 196
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	97 87       	std	Z+15, r25	; 0x0f
     cfa:	86 87       	std	Z+14, r24	; 0x0e
     cfc:	80 ec       	ldi	r24, 0xC0	; 192
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	91 8b       	std	Z+17, r25	; 0x11
     d02:	80 8b       	std	Z+16, r24	; 0x10
     d04:	81 ec       	ldi	r24, 0xC1	; 193
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	93 8b       	std	Z+19, r25	; 0x13
     d0a:	82 8b       	std	Z+18, r24	; 0x12
     d0c:	82 ec       	ldi	r24, 0xC2	; 194
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	95 8b       	std	Z+21, r25	; 0x15
     d12:	84 8b       	std	Z+20, r24	; 0x14
     d14:	86 ec       	ldi	r24, 0xC6	; 198
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	97 8b       	std	Z+23, r25	; 0x17
     d1a:	86 8b       	std	Z+22, r24	; 0x16
     d1c:	11 8e       	std	Z+25, r1	; 0x19
     d1e:	12 8e       	std	Z+26, r1	; 0x1a
     d20:	13 8e       	std	Z+27, r1	; 0x1b
     d22:	14 8e       	std	Z+28, r1	; 0x1c
     d24:	08 95       	ret

00000d26 <initVariant>:
     d26:	08 95       	ret

00000d28 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     d28:	0e 94 37 08 	call	0x106e	; 0x106e <init>

	initVariant();
     d2c:	0e 94 93 06 	call	0xd26	; 0xd26 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d30:	0e 94 31 03 	call	0x662	; 0x662 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d34:	cc ef       	ldi	r28, 0xFC	; 252
     d36:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     d38:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <loop>
		if (serialEventRun) serialEventRun();
     d3c:	20 97       	sbiw	r28, 0x00	; 0
     d3e:	e1 f3       	breq	.-8      	; 0xd38 <main+0x10>
     d40:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z14serialEventRunv>
     d44:	f9 cf       	rjmp	.-14     	; 0xd38 <main+0x10>

00000d46 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	6c 01       	movw	r12, r24
     d58:	7a 01       	movw	r14, r20
     d5a:	8b 01       	movw	r16, r22
     d5c:	c0 e0       	ldi	r28, 0x00	; 0
     d5e:	d0 e0       	ldi	r29, 0x00	; 0
     d60:	ce 15       	cp	r28, r14
     d62:	df 05       	cpc	r29, r15
     d64:	81 f0       	breq	.+32     	; 0xd86 <_ZN5Print5writeEPKhj+0x40>
     d66:	d8 01       	movw	r26, r16
     d68:	6d 91       	ld	r22, X+
     d6a:	8d 01       	movw	r16, r26
     d6c:	d6 01       	movw	r26, r12
     d6e:	ed 91       	ld	r30, X+
     d70:	fc 91       	ld	r31, X
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	c6 01       	movw	r24, r12
     d7a:	09 95       	icall
     d7c:	89 2b       	or	r24, r25
     d7e:	11 f0       	breq	.+4      	; 0xd84 <_ZN5Print5writeEPKhj+0x3e>
     d80:	21 96       	adiw	r28, 0x01	; 1
     d82:	ee cf       	rjmp	.-36     	; 0xd60 <_ZN5Print5writeEPKhj+0x1a>
     d84:	7e 01       	movw	r14, r28
     d86:	c7 01       	movw	r24, r14
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <_ZN5Print5writeEPKc>:
     d9a:	61 15       	cp	r22, r1
     d9c:	71 05       	cpc	r23, r1
     d9e:	79 f0       	breq	.+30     	; 0xdbe <_ZN5Print5writeEPKc+0x24>
     da0:	fb 01       	movw	r30, r22
     da2:	01 90       	ld	r0, Z+
     da4:	00 20       	and	r0, r0
     da6:	e9 f7       	brne	.-6      	; 0xda2 <_ZN5Print5writeEPKc+0x8>
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	af 01       	movw	r20, r30
     dac:	46 1b       	sub	r20, r22
     dae:	57 0b       	sbc	r21, r23
     db0:	dc 01       	movw	r26, r24
     db2:	ed 91       	ld	r30, X+
     db4:	fc 91       	ld	r31, X
     db6:	02 80       	ldd	r0, Z+2	; 0x02
     db8:	f3 81       	ldd	r31, Z+3	; 0x03
     dba:	e0 2d       	mov	r30, r0
     dbc:	09 94       	ijmp
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <_ZN5Print5printERK6String>:
     dc4:	db 01       	movw	r26, r22
     dc6:	14 96       	adiw	r26, 0x04	; 4
     dc8:	4d 91       	ld	r20, X+
     dca:	5c 91       	ld	r21, X
     dcc:	15 97       	sbiw	r26, 0x05	; 5
     dce:	6d 91       	ld	r22, X+
     dd0:	7c 91       	ld	r23, X
     dd2:	dc 01       	movw	r26, r24
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	02 80       	ldd	r0, Z+2	; 0x02
     dda:	f3 81       	ldd	r31, Z+3	; 0x03
     ddc:	e0 2d       	mov	r30, r0
     dde:	09 94       	ijmp

00000de0 <_ZN5Print7printlnEv>:
     de0:	61 e3       	ldi	r22, 0x31	; 49
     de2:	72 e0       	ldi	r23, 0x02	; 2
     de4:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <_ZN5Print5writeEPKc>

00000de8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     df2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN5Print5writeEPKc>
     df6:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     df8:	ce 01       	movw	r24, r28
     dfa:	0e 94 f0 06 	call	0xde0	; 0xde0 <_ZN5Print7printlnEv>
  return n;
}
     dfe:	80 0f       	add	r24, r16
     e00:	91 1f       	adc	r25, r17
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     e0c:	08 95       	ret

00000e0e <attachInterrupt>:
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	e8 f4       	brcc	.+58     	; 0xe4c <attachInterrupt+0x3e>
     e12:	e8 2f       	mov	r30, r24
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ea 5f       	subi	r30, 0xFA	; 250
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	71 83       	std	Z+1, r23	; 0x01
     e20:	60 83       	st	Z, r22
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	41 f0       	breq	.+16     	; 0xe36 <attachInterrupt+0x28>
     e26:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     e2a:	8c 7f       	andi	r24, 0xFC	; 252
     e2c:	48 2b       	or	r20, r24
     e2e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     e32:	e8 9a       	sbi	0x1d, 0	; 29
     e34:	08 95       	ret
     e36:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     e3a:	83 7f       	andi	r24, 0xF3	; 243
     e3c:	44 0f       	add	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	48 2b       	or	r20, r24
     e46:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     e4a:	e9 9a       	sbi	0x1d, 1	; 29
     e4c:	08 95       	ret

00000e4e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
     e70:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
     e74:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
     e78:	09 95       	icall
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
     ebe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
     ec2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
     ec6:	09 95       	icall
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     f00:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <timer0_millis>
     f04:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <timer0_millis+0x1>
     f08:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <timer0_millis+0x2>
     f0c:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     f10:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     f14:	23 e0       	ldi	r18, 0x03	; 3
     f16:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     f18:	2d 37       	cpi	r18, 0x7D	; 125
     f1a:	20 f4       	brcc	.+8      	; 0xf24 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	a1 1d       	adc	r26, r1
     f20:	b1 1d       	adc	r27, r1
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     f24:	26 e8       	ldi	r18, 0x86	; 134
     f26:	23 0f       	add	r18, r19
		m += 1;
     f28:	02 96       	adiw	r24, 0x02	; 2
     f2a:	a1 1d       	adc	r26, r1
     f2c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f2e:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <timer0_fract>
	timer0_millis = m;
     f32:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <timer0_millis>
     f36:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <timer0_millis+0x1>
     f3a:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <timer0_millis+0x2>
     f3e:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <timer0_millis+0x3>
	timer0_overflow_count++;
     f42:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
     f46:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
     f4a:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
     f4e:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	a1 1d       	adc	r26, r1
     f56:	b1 1d       	adc	r27, r1
     f58:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <timer0_overflow_count>
     f5c:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <timer0_overflow_count+0x1>
     f60:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <timer0_overflow_count+0x2>
     f64:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <timer0_overflow_count+0x3>
}
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f7e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f80:	f8 94       	cli
	m = timer0_millis;
     f82:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <timer0_millis>
     f86:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <timer0_millis+0x1>
     f8a:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <timer0_millis+0x2>
     f8e:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <timer0_millis+0x3>
	SREG = oldSREG;
     f92:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f94:	08 95       	ret

00000f96 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f96:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f98:	f8 94       	cli
	m = timer0_overflow_count;
     f9a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
     f9e:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
     fa2:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
     fa6:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     faa:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fac:	a8 9b       	sbis	0x15, 0	; 21
     fae:	05 c0       	rjmp	.+10     	; 0xfba <micros+0x24>
     fb0:	2f 3f       	cpi	r18, 0xFF	; 255
     fb2:	19 f0       	breq	.+6      	; 0xfba <micros+0x24>
		m++;
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	a1 1d       	adc	r26, r1
     fb8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fba:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     fbc:	ba 2f       	mov	r27, r26
     fbe:	a9 2f       	mov	r26, r25
     fc0:	98 2f       	mov	r25, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	82 0f       	add	r24, r18
     fc6:	91 1d       	adc	r25, r1
     fc8:	a1 1d       	adc	r26, r1
     fca:	b1 1d       	adc	r27, r1
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	42 e0       	ldi	r20, 0x02	; 2
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	4a 95       	dec	r20
     fdc:	d1 f7       	brne	.-12     	; 0xfd2 <micros+0x3c>
}
     fde:	08 95       	ret

00000fe0 <delay>:

void delay(unsigned long ms)
{
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     ff4:	0e 94 cb 07 	call	0xf96	; 0xf96 <micros>
     ff8:	4b 01       	movw	r8, r22
     ffa:	5c 01       	movw	r10, r24

	while (ms > 0) {
     ffc:	c1 14       	cp	r12, r1
     ffe:	d1 04       	cpc	r13, r1
    1000:	e1 04       	cpc	r14, r1
    1002:	f1 04       	cpc	r15, r1
    1004:	01 f1       	breq	.+64     	; 0x1046 <delay+0x66>
		yield();
    1006:	0e 94 94 10 	call	0x2128	; 0x2128 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    100a:	0e 94 cb 07 	call	0xf96	; 0xf96 <micros>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	88 19       	sub	r24, r8
    1014:	99 09       	sbc	r25, r9
    1016:	aa 09       	sbc	r26, r10
    1018:	bb 09       	sbc	r27, r11
    101a:	88 3e       	cpi	r24, 0xE8	; 232
    101c:	93 40       	sbci	r25, 0x03	; 3
    101e:	a1 05       	cpc	r26, r1
    1020:	b1 05       	cpc	r27, r1
    1022:	60 f3       	brcs	.-40     	; 0xffc <delay+0x1c>
			ms--;
    1024:	21 e0       	ldi	r18, 0x01	; 1
    1026:	c2 1a       	sub	r12, r18
    1028:	d1 08       	sbc	r13, r1
    102a:	e1 08       	sbc	r14, r1
    102c:	f1 08       	sbc	r15, r1
			start += 1000;
    102e:	88 ee       	ldi	r24, 0xE8	; 232
    1030:	88 0e       	add	r8, r24
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	98 1e       	adc	r9, r24
    1036:	a1 1c       	adc	r10, r1
    1038:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    103a:	c1 14       	cp	r12, r1
    103c:	d1 04       	cpc	r13, r1
    103e:	e1 04       	cpc	r14, r1
    1040:	f1 04       	cpc	r15, r1
    1042:	19 f7       	brne	.-58     	; 0x100a <delay+0x2a>
    1044:	db cf       	rjmp	.-74     	; 0xffc <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	08 95       	ret

00001058 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	38 f0       	brcs	.+14     	; 0x106c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1066:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <delayMicroseconds+0x10>
    106c:	08 95       	ret

0000106e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    106e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1070:	84 b5       	in	r24, 0x24	; 36
    1072:	82 60       	ori	r24, 0x02	; 2
    1074:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1076:	84 b5       	in	r24, 0x24	; 36
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    107c:	85 b5       	in	r24, 0x25	; 37
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1082:	85 b5       	in	r24, 0x25	; 37
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1088:	ee e6       	ldi	r30, 0x6E	; 110
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1092:	e1 e8       	ldi	r30, 0x81	; 129
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1098:	80 81       	ld	r24, Z
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    109e:	80 81       	ld	r24, Z
    10a0:	81 60       	ori	r24, 0x01	; 1
    10a2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10ae:	e1 eb       	ldi	r30, 0xB1	; 177
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10b8:	e0 eb       	ldi	r30, 0xB0	; 176
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10c2:	ea e7       	ldi	r30, 0x7A	; 122
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	84 60       	ori	r24, 0x04	; 4
    10ca:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10cc:	80 81       	ld	r24, Z
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10d2:	80 81       	ld	r24, Z
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    10e2:	08 95       	ret

000010e4 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    10e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <analog_reference>
    10e8:	08 95       	ret

000010ea <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	81 f0       	breq	.+32     	; 0x110e <turnOffPWM+0x24>
    10ee:	28 f4       	brcc	.+10     	; 0x10fa <turnOffPWM+0x10>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	99 f0       	breq	.+38     	; 0x111a <turnOffPWM+0x30>
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	a1 f0       	breq	.+40     	; 0x1120 <turnOffPWM+0x36>
    10f8:	08 95       	ret
    10fa:	87 30       	cpi	r24, 0x07	; 7
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <turnOffPWM+0x3e>
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	b9 f0       	breq	.+46     	; 0x1130 <turnOffPWM+0x46>
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	d1 f4       	brne	.+52     	; 0x113a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1106:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    110a:	8f 7d       	andi	r24, 0xDF	; 223
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    110e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1112:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1114:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1118:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    111a:	84 b5       	in	r24, 0x24	; 36
    111c:	8f 77       	andi	r24, 0x7F	; 127
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1120:	84 b5       	in	r24, 0x24	; 36
    1122:	8f 7d       	andi	r24, 0xDF	; 223
    1124:	84 bd       	out	0x24, r24	; 36
    1126:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1128:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1130:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1134:	8f 7d       	andi	r24, 0xDF	; 223
    1136:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    113a:	08 95       	ret

0000113c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	fc 01       	movw	r30, r24
    1144:	e4 58       	subi	r30, 0x84	; 132
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    114a:	fc 01       	movw	r30, r24
    114c:	e0 57       	subi	r30, 0x70	; 112
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1152:	88 23       	and	r24, r24
    1154:	61 f1       	breq	.+88     	; 0x11ae <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	fc 01       	movw	r30, r24
    115e:	e2 55       	subi	r30, 0x52	; 82
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	c5 91       	lpm	r28, Z+
    1164:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1166:	fc 01       	movw	r30, r24
    1168:	ec 55       	subi	r30, 0x5C	; 92
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	a5 91       	lpm	r26, Z+
    116e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1170:	61 11       	cpse	r22, r1
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1174:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1176:	f8 94       	cli
		*reg &= ~bit;
    1178:	88 81       	ld	r24, Y
    117a:	20 95       	com	r18
    117c:	82 23       	and	r24, r18
    117e:	88 83       	st	Y, r24
		*out &= ~bit;
    1180:	ec 91       	ld	r30, X
    1182:	2e 23       	and	r18, r30
    1184:	0b c0       	rjmp	.+22     	; 0x119c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1186:	62 30       	cpi	r22, 0x02	; 2
    1188:	61 f4       	brne	.+24     	; 0x11a2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    118a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    118c:	f8 94       	cli
		*reg &= ~bit;
    118e:	88 81       	ld	r24, Y
    1190:	32 2f       	mov	r19, r18
    1192:	30 95       	com	r19
    1194:	83 23       	and	r24, r19
    1196:	88 83       	st	Y, r24
		*out |= bit;
    1198:	ec 91       	ld	r30, X
    119a:	2e 2b       	or	r18, r30
    119c:	2c 93       	st	X, r18
		SREG = oldSREG;
    119e:	9f bf       	out	0x3f, r25	; 63
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    11a2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    11a4:	f8 94       	cli
		*reg |= bit;
    11a6:	e8 81       	ld	r30, Y
    11a8:	2e 2b       	or	r18, r30
    11aa:	28 83       	st	Y, r18
		SREG = oldSREG;
    11ac:	8f bf       	out	0x3f, r24	; 63
	}
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	e8 59       	subi	r30, 0x98	; 152
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11c6:	f9 01       	movw	r30, r18
    11c8:	e4 58       	subi	r30, 0x84	; 132
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11ce:	f9 01       	movw	r30, r18
    11d0:	e0 57       	subi	r30, 0x70	; 112
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11d6:	cc 23       	and	r28, r28
    11d8:	c1 f0       	breq	.+48     	; 0x120a <digitalWrite+0x56>
    11da:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11dc:	81 11       	cpse	r24, r1
    11de:	0e 94 75 08 	call	0x10ea	; 0x10ea <turnOffPWM>

	out = portOutputRegister(port);
    11e2:	ec 2f       	mov	r30, r28
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	ec 55       	subi	r30, 0x5C	; 92
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	a5 91       	lpm	r26, Z+
    11f0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11f2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11f4:	f8 94       	cli

	if (val == LOW) {
    11f6:	11 11       	cpse	r17, r1
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <digitalWrite+0x4e>
		*out &= ~bit;
    11fa:	8c 91       	ld	r24, X
    11fc:	d0 95       	com	r29
    11fe:	d8 23       	and	r29, r24
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1202:	ec 91       	ld	r30, X
    1204:	de 2b       	or	r29, r30
    1206:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1208:	9f bf       	out	0x3f, r25	; 63
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	08 95       	ret

00001212 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    1212:	08 95       	ret

00001214 <_ZN6StringD1Ev>:
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	0c 94 80 13 	jmp	0x2700	; 0x2700 <free>

0000121e <_ZN6String10invalidateEv>:
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
    1224:	88 81       	ld	r24, Y
    1226:	99 81       	ldd	r25, Y+1	; 0x01
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	11 f0       	breq	.+4      	; 0x1230 <_ZN6String10invalidateEv+0x12>
    122c:	0e 94 80 13 	call	0x2700	; 0x2700 <free>
    1230:	19 82       	std	Y+1, r1	; 0x01
    1232:	18 82       	st	Y, r1
    1234:	1d 82       	std	Y+5, r1	; 0x05
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <_ZN6String12changeBufferEj>:
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	ec 01       	movw	r28, r24
    124c:	8b 01       	movw	r16, r22
    124e:	6f 5f       	subi	r22, 0xFF	; 255
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	88 81       	ld	r24, Y
    1254:	99 81       	ldd	r25, Y+1	; 0x01
    1256:	0e 94 09 14 	call	0x2812	; 0x2812 <realloc>
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	31 f0       	breq	.+12     	; 0x126a <_ZN6String12changeBufferEj+0x28>
    125e:	99 83       	std	Y+1, r25	; 0x01
    1260:	88 83       	st	Y, r24
    1262:	1b 83       	std	Y+3, r17	; 0x03
    1264:	0a 83       	std	Y+2, r16	; 0x02
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	01 c0       	rjmp	.+2      	; 0x126c <_ZN6String12changeBufferEj+0x2a>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <_ZN6String7reserveEj>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
    127c:	88 81       	ld	r24, Y
    127e:	99 81       	ldd	r25, Y+1	; 0x01
    1280:	89 2b       	or	r24, r25
    1282:	29 f0       	breq	.+10     	; 0x128e <_ZN6String7reserveEj+0x18>
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	86 17       	cp	r24, r22
    128a:	97 07       	cpc	r25, r23
    128c:	60 f4       	brcc	.+24     	; 0x12a6 <_ZN6String7reserveEj+0x30>
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN6String12changeBufferEj>
    1294:	88 23       	and	r24, r24
    1296:	41 f0       	breq	.+16     	; 0x12a8 <_ZN6String7reserveEj+0x32>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	89 2b       	or	r24, r25
    129e:	19 f4       	brne	.+6      	; 0x12a6 <_ZN6String7reserveEj+0x30>
    12a0:	e8 81       	ld	r30, Y
    12a2:	f9 81       	ldd	r31, Y+1	; 0x01
    12a4:	10 82       	st	Z, r1
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <_ZN6String4copyEPKcj>:
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	7b 01       	movw	r14, r22
    12be:	8a 01       	movw	r16, r20
    12c0:	ba 01       	movw	r22, r20
    12c2:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN6String7reserveEj>
    12c6:	81 11       	cpse	r24, r1
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <_ZN6String4copyEPKcj+0x24>
    12ca:	ce 01       	movw	r24, r28
    12cc:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6String10invalidateEv>
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <_ZN6String4copyEPKcj+0x32>
    12d2:	1d 83       	std	Y+5, r17	; 0x05
    12d4:	0c 83       	std	Y+4, r16	; 0x04
    12d6:	b7 01       	movw	r22, r14
    12d8:	88 81       	ld	r24, Y
    12da:	99 81       	ldd	r25, Y+1	; 0x01
    12dc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <strcpy>
    12e0:	ce 01       	movw	r24, r28
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	08 95       	ret

000012f0 <_ZN6StringC1EPKc>:
    12f0:	fc 01       	movw	r30, r24
    12f2:	11 82       	std	Z+1, r1	; 0x01
    12f4:	10 82       	st	Z, r1
    12f6:	13 82       	std	Z+3, r1	; 0x03
    12f8:	12 82       	std	Z+2, r1	; 0x02
    12fa:	15 82       	std	Z+5, r1	; 0x05
    12fc:	14 82       	std	Z+4, r1	; 0x04
    12fe:	61 15       	cp	r22, r1
    1300:	71 05       	cpc	r23, r1
    1302:	51 f0       	breq	.+20     	; 0x1318 <_ZN6StringC1EPKc+0x28>
    1304:	fb 01       	movw	r30, r22
    1306:	01 90       	ld	r0, Z+
    1308:	00 20       	and	r0, r0
    130a:	e9 f7       	brne	.-6      	; 0x1306 <_ZN6StringC1EPKc+0x16>
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	af 01       	movw	r20, r30
    1310:	46 1b       	sub	r20, r22
    1312:	57 0b       	sbc	r21, r23
    1314:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <_ZN6String4copyEPKcj>
    1318:	08 95       	ret

0000131a <_ZN6String4moveERS_>:
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	8c 01       	movw	r16, r24
    1324:	eb 01       	movw	r28, r22
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	d1 f0       	breq	.+52     	; 0x1364 <_ZN6String4moveERS_+0x4a>
    1330:	68 81       	ld	r22, Y
    1332:	79 81       	ldd	r23, Y+1	; 0x01
    1334:	61 15       	cp	r22, r1
    1336:	71 05       	cpc	r23, r1
    1338:	99 f0       	breq	.+38     	; 0x1360 <_ZN6String4moveERS_+0x46>
    133a:	29 e0       	ldi	r18, 0x09	; 9
    133c:	39 e0       	ldi	r19, 0x09	; 9
    133e:	23 2b       	or	r18, r19
    1340:	79 f0       	breq	.+30     	; 0x1360 <_ZN6String4moveERS_+0x46>
    1342:	42 81       	ldd	r20, Z+2	; 0x02
    1344:	53 81       	ldd	r21, Z+3	; 0x03
    1346:	2c 81       	ldd	r18, Y+4	; 0x04
    1348:	3d 81       	ldd	r19, Y+5	; 0x05
    134a:	42 17       	cp	r20, r18
    134c:	53 07       	cpc	r21, r19
    134e:	40 f0       	brcs	.+16     	; 0x1360 <_ZN6String4moveERS_+0x46>
    1350:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <strcpy>
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	f8 01       	movw	r30, r16
    135a:	95 83       	std	Z+5, r25	; 0x05
    135c:	84 83       	std	Z+4, r24	; 0x04
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <_ZN6String4moveERS_+0x6c>
    1360:	0e 94 80 13 	call	0x2700	; 0x2700 <free>
    1364:	88 81       	ld	r24, Y
    1366:	99 81       	ldd	r25, Y+1	; 0x01
    1368:	f8 01       	movw	r30, r16
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	93 83       	std	Z+3, r25	; 0x03
    1374:	82 83       	std	Z+2, r24	; 0x02
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	95 83       	std	Z+5, r25	; 0x05
    137c:	84 83       	std	Z+4, r24	; 0x04
    137e:	19 82       	std	Y+1, r1	; 0x01
    1380:	18 82       	st	Y, r1
    1382:	1b 82       	std	Y+3, r1	; 0x03
    1384:	1a 82       	std	Y+2, r1	; 0x02
    1386:	1d 82       	std	Y+5, r1	; 0x05
    1388:	1c 82       	std	Y+4, r1	; 0x04
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <_ZN6StringaSERKS_>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	ec 01       	movw	r28, r24
    139a:	fb 01       	movw	r30, r22
    139c:	86 17       	cp	r24, r22
    139e:	97 07       	cpc	r25, r23
    13a0:	61 f0       	breq	.+24     	; 0x13ba <_ZN6StringaSERKS_+0x26>
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	61 15       	cp	r22, r1
    13a8:	71 05       	cpc	r23, r1
    13aa:	29 f0       	breq	.+10     	; 0x13b6 <_ZN6StringaSERKS_+0x22>
    13ac:	44 81       	ldd	r20, Z+4	; 0x04
    13ae:	55 81       	ldd	r21, Z+5	; 0x05
    13b0:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN6String4copyEPKcj>
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <_ZN6StringaSERKS_+0x26>
    13b6:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6String10invalidateEv>
    13ba:	ce 01       	movw	r24, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <_ZN6StringC1ERKS_>:
    13c2:	fc 01       	movw	r30, r24
    13c4:	11 82       	std	Z+1, r1	; 0x01
    13c6:	10 82       	st	Z, r1
    13c8:	13 82       	std	Z+3, r1	; 0x03
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	15 82       	std	Z+5, r1	; 0x05
    13ce:	14 82       	std	Z+4, r1	; 0x04
    13d0:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <_ZN6StringaSERKS_>

000013d4 <_ZN6StringaSEOS_>:
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
    13da:	86 17       	cp	r24, r22
    13dc:	97 07       	cpc	r25, r23
    13de:	11 f0       	breq	.+4      	; 0x13e4 <_ZN6StringaSEOS_+0x10>
    13e0:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN6String4moveERS_>
    13e4:	ce 01       	movw	r24, r28
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <_ZN6StringaSEPKc>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	61 15       	cp	r22, r1
    13f4:	71 05       	cpc	r23, r1
    13f6:	59 f0       	breq	.+22     	; 0x140e <_ZN6StringaSEPKc+0x22>
    13f8:	fb 01       	movw	r30, r22
    13fa:	01 90       	ld	r0, Z+
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <_ZN6StringaSEPKc+0xe>
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	af 01       	movw	r20, r30
    1404:	46 1b       	sub	r20, r22
    1406:	57 0b       	sbc	r21, r23
    1408:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN6String4copyEPKcj>
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <_ZN6StringaSEPKc+0x26>
    140e:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6String10invalidateEv>
    1412:	ce 01       	movw	r24, r28
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	7c 01       	movw	r14, r24
    142e:	6b 01       	movw	r12, r22
    1430:	8a 01       	movw	r16, r20
    1432:	e9 01       	movw	r28, r18
	if (left > right) {
    1434:	24 17       	cp	r18, r20
    1436:	35 07       	cpc	r19, r21
    1438:	20 f4       	brcc	.+8      	; 0x1442 <_ZNK6String9substringEjj+0x28>
    143a:	81 2f       	mov	r24, r17
    143c:	89 01       	movw	r16, r18
    143e:	c4 2f       	mov	r28, r20
    1440:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1442:	63 e3       	ldi	r22, 0x33	; 51
    1444:	72 e0       	ldi	r23, 0x02	; 2
    1446:	c7 01       	movw	r24, r14
    1448:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    144c:	d6 01       	movw	r26, r12
    144e:	14 96       	adiw	r26, 0x04	; 4
    1450:	8d 91       	ld	r24, X+
    1452:	9c 91       	ld	r25, X
    1454:	15 97       	sbiw	r26, 0x05	; 5
    1456:	08 17       	cp	r16, r24
    1458:	19 07       	cpc	r17, r25
    145a:	c8 f4       	brcc	.+50     	; 0x148e <_ZNK6String9substringEjj+0x74>
    145c:	8c 17       	cp	r24, r28
    145e:	9d 07       	cpc	r25, r29
    1460:	08 f4       	brcc	.+2      	; 0x1464 <_ZNK6String9substringEjj+0x4a>
    1462:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1464:	d6 01       	movw	r26, r12
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	11 97       	sbiw	r26, 0x01	; 1
    146c:	ec 0f       	add	r30, r28
    146e:	fd 1f       	adc	r31, r29
    1470:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1472:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1474:	6d 91       	ld	r22, X+
    1476:	7c 91       	ld	r23, X
    1478:	60 0f       	add	r22, r16
    147a:	71 1f       	adc	r23, r17
    147c:	c7 01       	movw	r24, r14
    147e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1482:	d6 01       	movw	r26, r12
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	ec 0f       	add	r30, r28
    148a:	fd 1f       	adc	r31, r29
    148c:	b0 82       	st	Z, r11
	return out;
}
    148e:	c7 01       	movw	r24, r14
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	08 95       	ret

000014a4 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    14a4:	fc 01       	movw	r30, r24
    14a6:	13 82       	std	Z+3, r1	; 0x03
    14a8:	12 82       	std	Z+2, r1	; 0x02
    14aa:	84 e4       	ldi	r24, 0x44	; 68
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	12 8e       	std	Z+26, r1	; 0x1a
    14b4:	14 8a       	std	Z+20, r1	; 0x14
    14b6:	8f e0       	ldi	r24, 0x0F	; 15
    14b8:	84 83       	std	Z+4, r24	; 0x04
    14ba:	8e e0       	ldi	r24, 0x0E	; 14
    14bc:	85 83       	std	Z+5, r24	; 0x05
    14be:	8d e0       	ldi	r24, 0x0D	; 13
    14c0:	86 83       	std	Z+6, r24	; 0x06
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	87 83       	std	Z+7, r24	; 0x07
    14c6:	8b e0       	ldi	r24, 0x0B	; 11
    14c8:	80 87       	std	Z+8, r24	; 0x08
    14ca:	8a e0       	ldi	r24, 0x0A	; 10
    14cc:	81 87       	std	Z+9, r24	; 0x09
    14ce:	89 e0       	ldi	r24, 0x09	; 9
    14d0:	82 87       	std	Z+10, r24	; 0x0a
    14d2:	17 86       	std	Z+15, r1	; 0x0f
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 8b       	std	Z+16, r24	; 0x10
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	81 8b       	std	Z+17, r24	; 0x11
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	82 8b       	std	Z+18, r24	; 0x12
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	83 8b       	std	Z+19, r24	; 0x13
    14e4:	08 95       	ret

000014e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    14e6:	fc 01       	movw	r30, r24
    14e8:	96 2f       	mov	r25, r22
    14ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    14ec:	8f 3f       	cpi	r24, 0xFF	; 255
    14ee:	21 f0       	breq	.+8      	; 0x14f8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    14f0:	cf 01       	movw	r24, r30
    14f2:	4b 96       	adiw	r24, 0x1b	; 27
    14f4:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    14f8:	64 2f       	mov	r22, r20
    14fa:	89 2f       	mov	r24, r25
    14fc:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <digitalWrite>

00001500 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	d6 2f       	mov	r29, r22
    150a:	8c 01       	movw	r16, r24
    150c:	05 5e       	subi	r16, 0xE5	; 229
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	c1 e0       	ldi	r28, 0x01	; 1
    1512:	62 fb       	bst	r22, 2
    1514:	44 27       	eor	r20, r20
    1516:	40 f9       	bld	r20, 0
    1518:	4c 27       	eor	r20, r28
    151a:	68 e0       	ldi	r22, 0x08	; 8
    151c:	c8 01       	movw	r24, r16
    151e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1522:	d1 fb       	bst	r29, 1
    1524:	44 27       	eor	r20, r20
    1526:	40 f9       	bld	r20, 0
    1528:	4c 27       	eor	r20, r28
    152a:	67 e0       	ldi	r22, 0x07	; 7
    152c:	c8 01       	movw	r24, r16
    152e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1532:	4d 2f       	mov	r20, r29
    1534:	41 70       	andi	r20, 0x01	; 1
    1536:	4c 27       	eor	r20, r28
    1538:	66 e0       	ldi	r22, 0x06	; 6
    153a:	c8 01       	movw	r24, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh>

00001548 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    1548:	fc 01       	movw	r30, r24
    154a:	96 2f       	mov	r25, r22
    154c:	82 8d       	ldd	r24, Z+26	; 0x1a
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	21 f0       	breq	.+8      	; 0x155a <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1552:	cf 01       	movw	r24, r30
    1554:	4b 96       	adiw	r24, 0x1b	; 27
    1556:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    155a:	64 2f       	mov	r22, r20
    155c:	89 2f       	mov	r24, r25
    155e:	0c 94 9e 08 	jmp	0x113c	; 0x113c <pinMode>

00001562 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	6e 81       	ldd	r22, Y+6	; 0x06
    156c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	ce 01       	movw	r24, r28
    157e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	6e 81       	ldd	r22, Y+6	; 0x06
    158e:	ce 01       	movw	r24, r28
    1590:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1594:	84 e6       	ldi	r24, 0x64	; 100
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <delayMicroseconds>

000015a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	8c 01       	movw	r16, r24
    15b6:	fc 01       	movw	r30, r24
    15b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ba:	98 01       	movw	r18, r16
    15bc:	29 5f       	subi	r18, 0xF9	; 249
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	79 01       	movw	r14, r18
    15c2:	c6 2f       	mov	r28, r22
    15c4:	d0 e0       	ldi	r29, 0x00	; 0
    15c6:	8f 3f       	cpi	r24, 0xFF	; 255
    15c8:	09 f4       	brne	.+2      	; 0x15cc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    15ca:	73 c0       	rjmp	.+230    	; 0x16b2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    15cc:	68 01       	movw	r12, r16
    15ce:	3b e1       	ldi	r19, 0x1B	; 27
    15d0:	c3 0e       	add	r12, r19
    15d2:	d1 1c       	adc	r13, r1
    15d4:	c6 01       	movw	r24, r12
    15d6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    15da:	f7 01       	movw	r30, r14
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	a1 e0       	ldi	r26, 0x01	; 1
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	b1 90       	ld	r11, Z+
    15e6:	ee 24       	eor	r14, r14
    15e8:	e3 94       	inc	r14
    15ea:	f1 2c       	mov	r15, r1
    15ec:	bd 01       	movw	r22, r26
    15ee:	0b 2c       	mov	r0, r11
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    15fa:	60 95       	com	r22
    15fc:	70 95       	com	r23
    15fe:	86 23       	and	r24, r22
    1600:	97 23       	and	r25, r23
    1602:	9e 01       	movw	r18, r28
    1604:	04 2e       	mov	r0, r20
    1606:	02 c0       	rjmp	.+4      	; 0x160c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1608:	35 95       	asr	r19
    160a:	27 95       	ror	r18
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    1610:	21 70       	andi	r18, 0x01	; 1
    1612:	33 27       	eor	r19, r19
    1614:	02 c0       	rjmp	.+4      	; 0x161a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	ba 94       	dec	r11
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    161e:	82 2b       	or	r24, r18
    1620:	93 2b       	or	r25, r19
    1622:	4f 5f       	subi	r20, 0xFF	; 255
    1624:	5f 4f       	sbci	r21, 0xFF	; 255
    1626:	44 30       	cpi	r20, 0x04	; 4
    1628:	51 05       	cpc	r21, r1
    162a:	e1 f6       	brne	.-72     	; 0x15e4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    162c:	e7 01       	movw	r28, r14
    162e:	f8 01       	movw	r30, r16
    1630:	06 80       	ldd	r0, Z+6	; 0x06
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1634:	cc 0f       	add	r28, r28
    1636:	dd 1f       	adc	r29, r29
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    163c:	c0 95       	com	r28
    163e:	d0 95       	com	r29
    1640:	c8 23       	and	r28, r24
    1642:	d9 23       	and	r29, r25
    1644:	be 01       	movw	r22, r28
    1646:	c6 01       	movw	r24, r12
    1648:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    1654:	c7 01       	movw	r24, r14
    1656:	f8 01       	movw	r30, r16
    1658:	06 80       	ldd	r0, Z+6	; 0x06
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1664:	c8 2b       	or	r28, r24
    1666:	d9 2b       	or	r29, r25
    1668:	be 01       	movw	r22, r28
    166a:	c6 01       	movw	r24, r12
    166c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    1678:	b7 01       	movw	r22, r14
    167a:	f8 01       	movw	r30, r16
    167c:	06 80       	ldd	r0, Z+6	; 0x06
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    1688:	60 95       	com	r22
    168a:	70 95       	com	r23
    168c:	6c 23       	and	r22, r28
    168e:	7d 23       	and	r23, r29
    1690:	c6 01       	movw	r24, r12
    1692:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1696:	84 e6       	ldi	r24, 0x64	; 100
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <delayMicroseconds>
    16b2:	c1 2c       	mov	r12, r1
    16b4:	d1 2c       	mov	r13, r1
    16b6:	57 01       	movw	r10, r14
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	f7 01       	movw	r30, r14
    16bc:	61 91       	ld	r22, Z+
    16be:	7f 01       	movw	r14, r30
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    16c6:	ae 01       	movw	r20, r28
    16c8:	0c 2c       	mov	r0, r12
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    16cc:	55 95       	asr	r21
    16ce:	47 95       	ror	r20
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    16d4:	41 70       	andi	r20, 0x01	; 1
    16d6:	f5 01       	movw	r30, r10
    16d8:	60 81       	ld	r22, Z
    16da:	c8 01       	movw	r24, r16
    16dc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    16e0:	ff ef       	ldi	r31, 0xFF	; 255
    16e2:	cf 1a       	sub	r12, r31
    16e4:	df 0a       	sbc	r13, r31
    16e6:	24 e0       	ldi	r18, 0x04	; 4
    16e8:	c2 16       	cp	r12, r18
    16ea:	d1 04       	cpc	r13, r1
    16ec:	21 f7       	brne	.-56     	; 0x16b6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    16ee:	c8 01       	movw	r24, r16
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	bf 90       	pop	r11
    1702:	af 90       	pop	r10
    1704:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001708 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1708:	af 92       	push	r10
    170a:	bf 92       	push	r11
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
    171e:	5c 01       	movw	r10, r24
    1720:	87 e0       	ldi	r24, 0x07	; 7
    1722:	a8 0e       	add	r10, r24
    1724:	b1 1c       	adc	r11, r1
    1726:	00 e0       	ldi	r16, 0x00	; 0
    1728:	10 e0       	ldi	r17, 0x00	; 0
    172a:	e6 2e       	mov	r14, r22
    172c:	f1 2c       	mov	r15, r1
    172e:	65 01       	movw	r12, r10
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	f5 01       	movw	r30, r10
    1734:	61 91       	ld	r22, Z+
    1736:	5f 01       	movw	r10, r30
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    173e:	a7 01       	movw	r20, r14
    1740:	00 2e       	mov	r0, r16
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1744:	55 95       	asr	r21
    1746:	47 95       	ror	r20
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    174c:	41 70       	andi	r20, 0x01	; 1
    174e:	f6 01       	movw	r30, r12
    1750:	60 81       	ld	r22, Z
    1752:	ce 01       	movw	r24, r28
    1754:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	08 30       	cpi	r16, 0x08	; 8
    175e:	11 05       	cpc	r17, r1
    1760:	31 f7       	brne	.-52     	; 0x172e <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1762:	ce 01       	movw	r24, r28
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

0000177c <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	ec 01       	movw	r28, r24
    1784:	16 2f       	mov	r17, r22
    1786:	6c 81       	ldd	r22, Y+4	; 0x04
    1788:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    178c:	6d 81       	ldd	r22, Y+5	; 0x05
    178e:	6f 3f       	cpi	r22, 0xFF	; 255
    1790:	21 f0       	breq	.+8      	; 0x179a <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	ce 01       	movw	r24, r28
    1796:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    179a:	8c 89       	ldd	r24, Y+20	; 0x14
    179c:	61 2f       	mov	r22, r17
    179e:	84 ff       	sbrs	r24, 4
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    17a2:	ce 01       	movw	r24, r28
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	75 95       	asr	r23
    17b4:	67 95       	ror	r22
    17b6:	8a 95       	dec	r24
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    17ba:	ce 01       	movw	r24, r28
    17bc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    17c0:	61 2f       	mov	r22, r17
    17c2:	ce 01       	movw	r24, r28
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000017ce <_ZN21Adafruit_RGBLCDShield7commandEh>:
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0c 94 be 0b 	jmp	0x177c	; 0x177c <_ZN21Adafruit_RGBLCDShield4sendEhh>

000017d4 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>
    17da:	80 ed       	ldi	r24, 0xD0	; 208
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <delayMicroseconds>

000017e2 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	28 97       	sbiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9c 01       	movw	r18, r24
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	eb e0       	ldi	r30, 0x0B	; 11
    17fc:	f1 e0       	ldi	r31, 0x01	; 1
    17fe:	de 01       	movw	r26, r28
    1800:	11 96       	adiw	r26, 0x01	; 1
    1802:	01 90       	ld	r0, Z+
    1804:	0d 92       	st	X+, r0
    1806:	8a 95       	dec	r24
    1808:	e1 f7       	brne	.-8      	; 0x1802 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    180a:	f9 01       	movw	r30, r18
    180c:	80 8d       	ldd	r24, Z+24	; 0x18
    180e:	84 17       	cp	r24, r20
    1810:	10 f4       	brcc	.+4      	; 0x1816 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    1812:	4f ef       	ldi	r20, 0xFF	; 255
    1814:	48 0f       	add	r20, r24
    1816:	fe 01       	movw	r30, r28
    1818:	31 96       	adiw	r30, 0x01	; 1
    181a:	e4 0f       	add	r30, r20
    181c:	f1 1d       	adc	r31, r1
    181e:	e4 0f       	add	r30, r20
    1820:	f1 1d       	adc	r31, r1
    1822:	90 81       	ld	r25, Z
    1824:	69 0f       	add	r22, r25
    1826:	60 68       	ori	r22, 0x80	; 128
    1828:	c9 01       	movw	r24, r18
    182a:	28 96       	adiw	r28, 0x08	; 8
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>

0000183e <_ZN21Adafruit_RGBLCDShield7displayEv>:
    183e:	fc 01       	movw	r30, r24
    1840:	65 89       	ldd	r22, Z+21	; 0x15
    1842:	26 2f       	mov	r18, r22
    1844:	24 60       	ori	r18, 0x04	; 4
    1846:	25 8b       	std	Z+21, r18	; 0x15
    1848:	6c 60       	ori	r22, 0x0C	; 12
    184a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>

0000184e <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    184e:	8f 92       	push	r8
    1850:	9f 92       	push	r9
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
    1868:	d4 2e       	mov	r13, r20
    186a:	c2 2e       	mov	r12, r18
    186c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    186e:	8f 3f       	cpi	r24, 0xFF	; 255
    1870:	41 f4       	brne	.+16     	; 0x1882 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	8d 15       	cp	r24, r13
    1876:	08 f0       	brcs	.+2      	; 0x187a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    1878:	5e c0       	rjmp	.+188    	; 0x1936 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    187a:	8c 89       	ldd	r24, Y+20	; 0x14
    187c:	88 60       	ori	r24, 0x08	; 8
    187e:	8c 8b       	std	Y+20, r24	; 0x14
    1880:	5a c0       	rjmp	.+180    	; 0x1936 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1882:	88 e3       	ldi	r24, 0x38	; 56
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN7TwoWire5beginEv>
    188a:	8e 01       	movw	r16, r28
    188c:	05 5e       	subi	r16, 0xE5	; 229
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN17Adafruit_MCP230175beginEv>
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	68 e0       	ldi	r22, 0x08	; 8
    189a:	c8 01       	movw	r24, r16
    189c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	66 e0       	ldi	r22, 0x06	; 6
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	67 e0       	ldi	r22, 0x07	; 7
    18ae:	c8 01       	movw	r24, r16
    18b0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18b4:	67 e0       	ldi	r22, 0x07	; 7
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    18bc:	6d 81       	ldd	r22, Y+5	; 0x05
    18be:	66 23       	and	r22, r22
    18c0:	21 f0       	breq	.+8      	; 0x18ca <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	c8 01       	movw	r24, r16
    18c6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	6c 81       	ldd	r22, Y+4	; 0x04
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	6e 81       	ldd	r22, Y+6	; 0x06
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18de:	7e 01       	movw	r14, r28
    18e0:	e7 e0       	ldi	r30, 0x07	; 7
    18e2:	ee 0e       	add	r14, r30
    18e4:	f1 1c       	adc	r15, r1
    18e6:	5e 01       	movw	r10, r28
    18e8:	fb e0       	ldi	r31, 0x0B	; 11
    18ea:	af 0e       	add	r10, r31
    18ec:	b1 1c       	adc	r11, r1
    18ee:	f7 01       	movw	r30, r14
    18f0:	61 91       	ld	r22, Z+
    18f2:	7f 01       	movw	r14, r30
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	c8 01       	movw	r24, r16
    18f8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    18fc:	ea 14       	cp	r14, r10
    18fe:	fb 04       	cpc	r15, r11
    1900:	b1 f7       	brne	.-20     	; 0x18ee <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    1902:	7e 01       	movw	r14, r28
    1904:	ff e0       	ldi	r31, 0x0F	; 15
    1906:	ef 0e       	add	r14, r31
    1908:	f1 1c       	adc	r15, r1
    190a:	5e 01       	movw	r10, r28
    190c:	84 e1       	ldi	r24, 0x14	; 20
    190e:	a8 0e       	add	r10, r24
    1910:	b1 1c       	adc	r11, r1
    1912:	47 01       	movw	r8, r14
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	f7 01       	movw	r30, r14
    1918:	61 91       	ld	r22, Z+
    191a:	7f 01       	movw	r14, r30
    191c:	c8 01       	movw	r24, r16
    191e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN17Adafruit_MCP230177pinModeEhh>
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	f4 01       	movw	r30, r8
    1926:	60 81       	ld	r22, Z
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <_ZN17Adafruit_MCP230176pullUpEhh>
    192e:	ea 14       	cp	r14, r10
    1930:	fb 04       	cpc	r15, r11
    1932:	79 f7       	brne	.-34     	; 0x1912 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    1934:	9e cf       	rjmp	.-196    	; 0x1872 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    1936:	d8 8e       	std	Y+24, r13	; 0x18
    1938:	19 8e       	std	Y+25, r1	; 0x19
    193a:	cc 20       	and	r12, r12
    193c:	31 f0       	breq	.+12     	; 0x194a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    193e:	f1 e0       	ldi	r31, 0x01	; 1
    1940:	df 12       	cpse	r13, r31
    1942:	03 c0       	rjmp	.+6      	; 0x194a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1944:	8c 89       	ldd	r24, Y+20	; 0x14
    1946:	84 60       	ori	r24, 0x04	; 4
    1948:	8c 8b       	std	Y+20, r24	; 0x14
    194a:	80 e5       	ldi	r24, 0x50	; 80
    194c:	93 ec       	ldi	r25, 0xC3	; 195
    194e:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	6c 81       	ldd	r22, Y+4	; 0x04
    1956:	ce 01       	movw	r24, r28
    1958:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	6e 81       	ldd	r22, Y+6	; 0x06
    1960:	ce 01       	movw	r24, r28
    1962:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1966:	6d 81       	ldd	r22, Y+5	; 0x05
    1968:	6f 3f       	cpi	r22, 0xFF	; 255
    196a:	21 f0       	breq	.+8      	; 0x1974 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	ce 01       	movw	r24, r28
    1970:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1974:	6c 89       	ldd	r22, Y+20	; 0x14
    1976:	64 fd       	sbrc	r22, 4
    1978:	1d c0       	rjmp	.+58     	; 0x19b4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	ce 01       	movw	r24, r28
    197e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1982:	84 e9       	ldi	r24, 0x94	; 148
    1984:	91 e1       	ldi	r25, 0x11	; 17
    1986:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    198a:	63 e0       	ldi	r22, 0x03	; 3
    198c:	ce 01       	movw	r24, r28
    198e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1992:	84 e9       	ldi	r24, 0x94	; 148
    1994:	91 e1       	ldi	r25, 0x11	; 17
    1996:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    199a:	63 e0       	ldi	r22, 0x03	; 3
    199c:	ce 01       	movw	r24, r28
    199e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    19a2:	86 e9       	ldi	r24, 0x96	; 150
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    19b2:	16 c0       	rjmp	.+44     	; 0x19e0 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    19b4:	60 62       	ori	r22, 0x20	; 32
    19b6:	ce 01       	movw	r24, r28
    19b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>
    19bc:	84 e9       	ldi	r24, 0x94	; 148
    19be:	91 e1       	ldi	r25, 0x11	; 17
    19c0:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    19c4:	6c 89       	ldd	r22, Y+20	; 0x14
    19c6:	60 62       	ori	r22, 0x20	; 32
    19c8:	ce 01       	movw	r24, r28
    19ca:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>
    19ce:	86 e9       	ldi	r24, 0x96	; 150
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
    19d6:	6c 89       	ldd	r22, Y+20	; 0x14
    19d8:	60 62       	ori	r22, 0x20	; 32
    19da:	ce 01       	movw	r24, r28
    19dc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>
    19e0:	6c 89       	ldd	r22, Y+20	; 0x14
    19e2:	60 62       	ori	r22, 0x20	; 32
    19e4:	ce 01       	movw	r24, r28
    19e6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	8d 8b       	std	Y+21, r24	; 0x15
    19ee:	ce 01       	movw	r24, r28
    19f0:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN21Adafruit_RGBLCDShield7displayEv>
    19f4:	ce 01       	movw	r24, r28
    19f6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN21Adafruit_RGBLCDShield5clearEv>
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	8e 8b       	std	Y+22, r24	; 0x16
    19fe:	66 e0       	ldi	r22, 0x06	; 6
    1a00:	ce 01       	movw	r24, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <_ZN21Adafruit_RGBLCDShield7commandEh>

00001a1e <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	08 95       	ret

00001a2a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	7c 01       	movw	r14, r24
    1a3a:	2f e0       	ldi	r18, 0x0F	; 15
    1a3c:	e2 0e       	add	r14, r18
    1a3e:	f1 1c       	adc	r15, r1
    1a40:	c0 e0       	ldi	r28, 0x00	; 0
    1a42:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    1a44:	2f e1       	ldi	r18, 0x1F	; 31
    1a46:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1a48:	8c 01       	movw	r16, r24
    1a4a:	05 5e       	subi	r16, 0xE5	; 229
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	f7 01       	movw	r30, r14
    1a50:	61 91       	ld	r22, Z+
    1a52:	7f 01       	movw	r14, r30
    1a54:	c8 01       	movw	r24, r16
    1a56:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN17Adafruit_MCP2301711digitalReadEh>
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	0c 2e       	mov	r0, r28
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    1a6a:	20 95       	com	r18
    1a6c:	30 95       	com	r19
    1a6e:	d2 22       	and	r13, r18
    1a70:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    1a72:	c5 30       	cpi	r28, 0x05	; 5
    1a74:	d1 05       	cpc	r29, r1
    1a76:	59 f7       	brne	.-42     	; 0x1a4e <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    1a78:	8d 2d       	mov	r24, r13
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	08 95       	ret

00001a8a <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    1a8a:	68 2f       	mov	r22, r24
    1a8c:	88 e3       	ldi	r24, 0x38	; 56
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <_ZN7TwoWire5writeEh>

00001a94 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1a9a:	68 30       	cpi	r22, 0x08	; 8
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <_ZN17Adafruit_MCP230175beginEh+0xc>
    1a9e:	67 e0       	ldi	r22, 0x07	; 7
    1aa0:	68 83       	st	Y, r22

  WIRE.begin();
    1aa2:	88 e3       	ldi	r24, 0x38	; 56
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1aaa:	68 81       	ld	r22, Y
    1aac:	60 62       	ori	r22, 0x20	; 32
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	88 e3       	ldi	r24, 0x38	; 56
    1ab2:	93 e0       	ldi	r25, 0x03	; 3
    1ab4:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1ac4:	88 e3       	ldi	r24, 0x38	; 56
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1acc:	68 81       	ld	r22, Y
    1ace:	60 62       	ori	r22, 0x20	; 32
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	88 e3       	ldi	r24, 0x38	; 56
    1ad4:	93 e0       	ldi	r25, 0x03	; 3
    1ad6:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1ae6:	88 e3       	ldi	r24, 0x38	; 56
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
}
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    1aee:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>

00001af2 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN17Adafruit_MCP230175beginEh>

00001af8 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	d6 2f       	mov	r29, r22
    1afe:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b00:	fc 01       	movw	r30, r24
    1b02:	60 81       	ld	r22, Z
    1b04:	60 62       	ori	r22, 0x20	; 32
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	88 e3       	ldi	r24, 0x38	; 56
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1b10:	82 e1       	ldi	r24, 0x12	; 18
    1b12:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1b16:	8d 2f       	mov	r24, r29
    1b18:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(ba >> 8);
    1b1c:	8c 2f       	mov	r24, r28
    1b1e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1b22:	88 e3       	ldi	r24, 0x38	; 56
    1b24:	93 e0       	ldi	r25, 0x03	; 3
}
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    1b2a:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>

00001b2e <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	8c 01       	movw	r16, r24
    1b3a:	c6 2f       	mov	r28, r22
    1b3c:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1b3e:	60 31       	cpi	r22, 0x10	; 16
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    1b42:	51 c0       	rjmp	.+162    	; 0x1be6 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    1b44:	68 30       	cpi	r22, 0x08	; 8
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    1b48:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    1b4a:	ff 24       	eor	r15, r15
    1b4c:	f3 94       	inc	r15
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1b50:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b52:	f8 01       	movw	r30, r16
    1b54:	60 81       	ld	r22, Z
    1b56:	60 62       	ori	r22, 0x20	; 32
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	88 e3       	ldi	r24, 0x38	; 56
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1b62:	8f 2d       	mov	r24, r15
    1b64:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1b68:	88 e3       	ldi	r24, 0x38	; 56
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b70:	f8 01       	movw	r30, r16
    1b72:	60 81       	ld	r22, Z
    1b74:	60 62       	ori	r22, 0x20	; 32
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	88 e3       	ldi	r24, 0x38	; 56
    1b7e:	93 e0       	ldi	r25, 0x03	; 3
    1b80:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b84:	88 e3       	ldi	r24, 0x38	; 56
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1b90:	d1 11       	cpse	r29, r1
    1b92:	09 c0       	rjmp	.+18     	; 0x1ba6 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1b94:	a9 01       	movw	r20, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1b98:	44 0f       	add	r20, r20
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	ca 95       	dec	r28
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1ba0:	ea 01       	movw	r28, r20
    1ba2:	c8 2b       	or	r28, r24
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1ba6:	f9 01       	movw	r30, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1baa:	ee 0f       	add	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	ca 95       	dec	r28
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1bb2:	ef 01       	movw	r28, r30
    1bb4:	c0 95       	com	r28
    1bb6:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bb8:	f8 01       	movw	r30, r16
    1bba:	60 81       	ld	r22, Z
    1bbc:	60 62       	ori	r22, 0x20	; 32
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	88 e3       	ldi	r24, 0x38	; 56
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1bc8:	8f 2d       	mov	r24, r15
    1bca:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(iodir);	
    1bce:	8c 2f       	mov	r24, r28
    1bd0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1bd4:	88 e3       	ldi	r24, 0x38	; 56
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
}
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1be2:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	08 95       	ret

00001bf2 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bf8:	68 81       	ld	r22, Y
    1bfa:	60 62       	ori	r22, 0x20	; 32
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	88 e3       	ldi	r24, 0x38	; 56
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1c06:	82 e1       	ldi	r24, 0x12	; 18
    1c08:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1c0c:	88 e3       	ldi	r24, 0x38	; 56
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1c14:	68 81       	ld	r22, Y
    1c16:	60 62       	ori	r22, 0x20	; 32
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	42 e0       	ldi	r20, 0x02	; 2
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	88 e3       	ldi	r24, 0x38	; 56
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c26:	88 e3       	ldi	r24, 0x38	; 56
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
    1c2e:	c8 2f       	mov	r28, r24
    1c30:	88 e3       	ldi	r24, 0x38	; 56
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1c38:	98 2f       	mov	r25, r24
    1c3a:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1c3c:	8c 2b       	or	r24, r28
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	8c 01       	movw	r16, r24
    1c4e:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1c50:	60 31       	cpi	r22, 0x10	; 16
    1c52:	58 f5       	brcc	.+86     	; 0x1caa <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1c54:	68 30       	cpi	r22, 0x08	; 8
    1c56:	18 f0       	brcs	.+6      	; 0x1c5e <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1c58:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1c5a:	d3 e1       	ldi	r29, 0x13	; 19
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1c5e:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c60:	f8 01       	movw	r30, r16
    1c62:	60 81       	ld	r22, Z
    1c64:	60 62       	ori	r22, 0x20	; 32
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	88 e3       	ldi	r24, 0x38	; 56
    1c6a:	93 e0       	ldi	r25, 0x03	; 3
    1c6c:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1c70:	8d 2f       	mov	r24, r29
    1c72:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1c76:	88 e3       	ldi	r24, 0x38	; 56
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1c7e:	f8 01       	movw	r30, r16
    1c80:	60 81       	ld	r22, Z
    1c82:	60 62       	ori	r22, 0x20	; 32
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	88 e3       	ldi	r24, 0x38	; 56
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c92:	88 e3       	ldi	r24, 0x38	; 56
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1c9a:	99 27       	eor	r25, r25
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1c9e:	95 95       	asr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	ca 95       	dec	r28
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1caa:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	c6 2f       	mov	r28, r22
    1cc4:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1cc6:	60 31       	cpi	r22, 0x10	; 16
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1cca:	52 c0       	rjmp	.+164    	; 0x1d70 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1ccc:	68 30       	cpi	r22, 0x08	; 8
    1cce:	20 f0       	brcs	.+8      	; 0x1cd8 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1cd0:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1cd2:	9d e0       	ldi	r25, 0x0D	; 13
    1cd4:	f9 2e       	mov	r15, r25
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1cd8:	8c e0       	ldi	r24, 0x0C	; 12
    1cda:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1cdc:	f8 01       	movw	r30, r16
    1cde:	60 81       	ld	r22, Z
    1ce0:	60 62       	ori	r22, 0x20	; 32
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	88 e3       	ldi	r24, 0x38	; 56
    1ce6:	93 e0       	ldi	r25, 0x03	; 3
    1ce8:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1cec:	8f 2d       	mov	r24, r15
    1cee:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1cf2:	88 e3       	ldi	r24, 0x38	; 56
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	60 81       	ld	r22, Z
    1cfe:	60 62       	ori	r22, 0x20	; 32
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	88 e3       	ldi	r24, 0x38	; 56
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1d0e:	88 e3       	ldi	r24, 0x38	; 56
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1d16:	21 e0       	ldi	r18, 0x01	; 1
    1d18:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1d1a:	d1 30       	cpi	r29, 0x01	; 1
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1d1e:	a9 01       	movw	r20, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1d22:	44 0f       	add	r20, r20
    1d24:	55 1f       	adc	r21, r21
    1d26:	ca 95       	dec	r28
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1d2a:	ea 01       	movw	r28, r20
    1d2c:	c8 2b       	or	r28, r24
    1d2e:	09 c0       	rjmp	.+18     	; 0x1d42 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1d30:	f9 01       	movw	r30, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ca 95       	dec	r28
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1d3c:	ef 01       	movw	r28, r30
    1d3e:	c0 95       	com	r28
    1d40:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1d42:	f8 01       	movw	r30, r16
    1d44:	60 81       	ld	r22, Z
    1d46:	60 62       	ori	r22, 0x20	; 32
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	88 e3       	ldi	r24, 0x38	; 56
    1d4c:	93 e0       	ldi	r25, 0x03	; 3
    1d4e:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1d52:	8f 2d       	mov	r24, r15
    1d54:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(gppu);	
    1d58:	8c 2f       	mov	r24, r28
    1d5a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1d5e:	88 e3       	ldi	r24, 0x38	; 56
    1d60:	93 e0       	ldi	r25, 0x03	; 3
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1d6c:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	08 95       	ret

00001d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	8c 01       	movw	r16, r24
    1d8a:	c6 2f       	mov	r28, r22
    1d8c:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1d8e:	60 31       	cpi	r22, 0x10	; 16
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1d92:	56 c0       	rjmp	.+172    	; 0x1e40 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1d94:	68 30       	cpi	r22, 0x08	; 8
    1d96:	28 f0       	brcs	.+10     	; 0x1da2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1d98:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1d9a:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1d9c:	93 e1       	ldi	r25, 0x13	; 19
    1d9e:	f9 2e       	mov	r15, r25
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1da2:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1da4:	82 e1       	ldi	r24, 0x12	; 18
    1da6:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1da8:	f8 01       	movw	r30, r16
    1daa:	60 81       	ld	r22, Z
    1dac:	60 62       	ori	r22, 0x20	; 32
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	88 e3       	ldi	r24, 0x38	; 56
    1db2:	93 e0       	ldi	r25, 0x03	; 3
    1db4:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1db8:	8d 2f       	mov	r24, r29
    1dba:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1dbe:	88 e3       	ldi	r24, 0x38	; 56
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	60 81       	ld	r22, Z
    1dca:	60 62       	ori	r22, 0x20	; 32
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	88 e3       	ldi	r24, 0x38	; 56
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1dda:	88 e3       	ldi	r24, 0x38	; 56
    1ddc:	93 e0       	ldi	r25, 0x03	; 3
    1dde:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1de2:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1de8:	ef 12       	cpse	r14, r31
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1dec:	a9 01       	movw	r20, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1df0:	44 0f       	add	r20, r20
    1df2:	55 1f       	adc	r21, r21
    1df4:	ca 95       	dec	r28
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1df8:	ea 01       	movw	r28, r20
    1dfa:	c8 2b       	or	r28, r24
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1dfe:	f9 01       	movw	r30, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	ca 95       	dec	r28
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1e0a:	ef 01       	movw	r28, r30
    1e0c:	c0 95       	com	r28
    1e0e:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1e10:	f8 01       	movw	r30, r16
    1e12:	60 81       	ld	r22, Z
    1e14:	60 62       	ori	r22, 0x20	; 32
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	88 e3       	ldi	r24, 0x38	; 56
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1e20:	8f 2d       	mov	r24, r15
    1e22:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  wiresend(gpio);	
    1e26:	8c 2f       	mov	r24, r28
    1e28:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZL8wiresendh>
  WIRE.endTransmission();
    1e2c:	88 e3       	ldi	r24, 0x38	; 56
    1e2e:	93 e0       	ldi	r25, 0x03	; 3
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1e3c:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN7TwoWire15endTransmissionEv>
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	08 95       	ret

00001e4e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1e4e:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1e58:	82 1b       	sub	r24, r18
    1e5a:	91 09       	sbc	r25, r1
    1e5c:	08 95       	ret

00001e5e <_ZN7TwoWire4readEv>:
    1e5e:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1e62:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1e66:	98 17       	cp	r25, r24
    1e68:	50 f4       	brcc	.+20     	; 0x1e7e <_ZN7TwoWire4readEv+0x20>
    1e6a:	e9 2f       	mov	r30, r25
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	e2 59       	subi	r30, 0x92	; 146
    1e70:	fc 4f       	sbci	r31, 0xFC	; 252
    1e72:	20 81       	ld	r18, Z
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	9f 5f       	subi	r25, 0xFF	; 255
    1e78:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <_ZN7TwoWire4readEv+0x24>
    1e7e:	2f ef       	ldi	r18, 0xFF	; 255
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	c9 01       	movw	r24, r18
    1e84:	08 95       	ret

00001e86 <_ZN7TwoWire4peekEv>:
    1e86:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1e8a:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1e8e:	e8 17       	cp	r30, r24
    1e90:	30 f4       	brcc	.+12     	; 0x1e9e <_ZN7TwoWire4peekEv+0x18>
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	e2 59       	subi	r30, 0x92	; 146
    1e96:	fc 4f       	sbci	r31, 0xFC	; 252
    1e98:	80 81       	ld	r24, Z
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	08 95       	ret
    1e9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ea0:	9f ef       	ldi	r25, 0xFF	; 255
    1ea2:	08 95       	ret

00001ea4 <_ZN7TwoWire5flushEv>:
    1ea4:	08 95       	ret

00001ea6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	ec 01       	movw	r28, r24
    1eac:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <_ZN7TwoWire14user_onReceiveE>
    1eb0:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <_ZN7TwoWire14user_onReceiveE+0x1>
    1eb4:	30 97       	sbiw	r30, 0x00	; 0
    1eb6:	f1 f0       	breq	.+60     	; 0x1ef4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1eb8:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1ebc:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1ec0:	98 17       	cp	r25, r24
    1ec2:	c0 f0       	brcs	.+48     	; 0x1ef4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	29 2f       	mov	r18, r25
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	26 17       	cp	r18, r22
    1ecc:	37 07       	cpc	r19, r23
    1ece:	54 f4       	brge	.+20     	; 0x1ee4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1ed0:	de 01       	movw	r26, r28
    1ed2:	a2 0f       	add	r26, r18
    1ed4:	b3 1f       	adc	r27, r19
    1ed6:	4c 91       	ld	r20, X
    1ed8:	d9 01       	movw	r26, r18
    1eda:	a2 59       	subi	r26, 0x92	; 146
    1edc:	bc 4f       	sbci	r27, 0xFC	; 252
    1ede:	4c 93       	st	X, r20
    1ee0:	9f 5f       	subi	r25, 0xFF	; 255
    1ee2:	f1 cf       	rjmp	.-30     	; 0x1ec6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1ee4:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1ee8:	60 93 6c 03 	sts	0x036C, r22	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1eec:	cb 01       	movw	r24, r22
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	09 94       	ijmp
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <_ZN7TwoWire16onRequestServiceEv>:
    1efa:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <_ZN7TwoWire14user_onRequestE>
    1efe:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <_ZN7TwoWire14user_onRequestE+0x1>
    1f02:	30 97       	sbiw	r30, 0x00	; 0
    1f04:	29 f0       	breq	.+10     	; 0x1f10 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1f06:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    1f0a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    1f0e:	09 94       	ijmp
    1f10:	08 95       	ret

00001f12 <_ZN7TwoWire5writeEPKhj>:
    1f12:	cf 92       	push	r12
    1f14:	df 92       	push	r13
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	7c 01       	movw	r14, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8a 01       	movw	r16, r20
    1f28:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <_ZN7TwoWire12transmittingE>
    1f2c:	22 23       	and	r18, r18
    1f2e:	89 f0       	breq	.+34     	; 0x1f52 <_ZN7TwoWire5writeEPKhj+0x40>
    1f30:	eb 01       	movw	r28, r22
    1f32:	6b 01       	movw	r12, r22
    1f34:	c4 0e       	add	r12, r20
    1f36:	d5 1e       	adc	r13, r21
    1f38:	cc 15       	cp	r28, r12
    1f3a:	dd 05       	cpc	r29, r13
    1f3c:	69 f0       	breq	.+26     	; 0x1f58 <_ZN7TwoWire5writeEPKhj+0x46>
    1f3e:	69 91       	ld	r22, Y+
    1f40:	d7 01       	movw	r26, r14
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	01 90       	ld	r0, Z+
    1f48:	f0 81       	ld	r31, Z
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	c7 01       	movw	r24, r14
    1f4e:	09 95       	icall
    1f50:	f3 cf       	rjmp	.-26     	; 0x1f38 <_ZN7TwoWire5writeEPKhj+0x26>
    1f52:	64 2f       	mov	r22, r20
    1f54:	0e 94 51 11 	call	0x22a2	; 0x22a2 <twi_transmit>
    1f58:	c8 01       	movw	r24, r16
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	08 95       	ret

00001f6c <_ZN7TwoWire5writeEh>:
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	1f 92       	push	r1
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	69 83       	std	Y+1, r22	; 0x01
    1f78:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <_ZN7TwoWire12transmittingE>
    1f7c:	22 23       	and	r18, r18
    1f7e:	d1 f0       	breq	.+52     	; 0x1fb4 <_ZN7TwoWire5writeEh+0x48>
    1f80:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    1f84:	20 32       	cpi	r18, 0x20	; 32
    1f86:	40 f0       	brcs	.+16     	; 0x1f98 <_ZN7TwoWire5writeEh+0x2c>
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	33 83       	std	Z+3, r19	; 0x03
    1f90:	22 83       	std	Z+2, r18	; 0x02
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <_ZN7TwoWire5writeEh+0x56>
    1f98:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    1f9c:	e8 2f       	mov	r30, r24
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	e5 5b       	subi	r30, 0xB5	; 181
    1fa2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	90 83       	st	Z, r25
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    1fae:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <_ZN7TwoWire5writeEh+0x52>
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	0e 94 51 11 	call	0x22a2	; 0x22a2 <twi_transmit>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0f 90       	pop	r0
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <_ZN7TwoWireC1Ev>:
    1fca:	fc 01       	movw	r30, r24
    1fcc:	13 82       	std	Z+3, r1	; 0x03
    1fce:	12 82       	std	Z+2, r1	; 0x02
    1fd0:	88 ee       	ldi	r24, 0xE8	; 232
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	84 83       	std	Z+4, r24	; 0x04
    1fda:	95 83       	std	Z+5, r25	; 0x05
    1fdc:	a6 83       	std	Z+6, r26	; 0x06
    1fde:	b7 83       	std	Z+7, r27	; 0x07
    1fe0:	80 e5       	ldi	r24, 0x50	; 80
    1fe2:	92 e0       	ldi	r25, 0x02	; 2
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	08 95       	ret

00001fea <_ZN7TwoWire5beginEv>:
    1fea:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    1fee:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    1ff2:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    1ff6:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    1ffa:	0e 94 95 10 	call	0x212a	; 0x212a <twi_init>
    1ffe:	8d e7       	ldi	r24, 0x7D	; 125
    2000:	9f e0       	ldi	r25, 0x0F	; 15
    2002:	0e 94 7e 11 	call	0x22fc	; 0x22fc <twi_attachSlaveTxEvent>
    2006:	83 e5       	ldi	r24, 0x53	; 83
    2008:	9f e0       	ldi	r25, 0x0F	; 15
    200a:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <twi_attachSlaveRxEvent>

0000200e <_ZN7TwoWire17beginTransmissionEh>:
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZN7TwoWire12transmittingE>
    2014:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <_ZN7TwoWire9txAddressE>
    2018:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    201c:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    2020:	08 95       	ret

00002022 <_ZN7TwoWire17beginTransmissionEi>:
    2022:	0c 94 07 10 	jmp	0x200e	; 0x200e <_ZN7TwoWire17beginTransmissionEh>

00002026 <_ZN7TwoWire15endTransmissionEh>:
    2026:	0f 93       	push	r16
    2028:	06 2f       	mov	r16, r22
    202a:	21 e0       	ldi	r18, 0x01	; 1
    202c:	40 91 49 03 	lds	r20, 0x0349	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    2030:	6b e4       	ldi	r22, 0x4B	; 75
    2032:	73 e0       	ldi	r23, 0x03	; 3
    2034:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_ZN7TwoWire9txAddressE>
    2038:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <twi_writeTo>
    203c:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    2040:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    2044:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <_ZN7TwoWire12transmittingE>
    2048:	0f 91       	pop	r16
    204a:	08 95       	ret

0000204c <_ZN7TwoWire11requestFromEhhmhh>:
    204c:	4f 92       	push	r4
    204e:	5f 92       	push	r5
    2050:	6f 92       	push	r6
    2052:	7f 92       	push	r7
    2054:	af 92       	push	r10
    2056:	bf 92       	push	r11
    2058:	cf 92       	push	r12
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	5c 01       	movw	r10, r24
    2068:	f6 2e       	mov	r15, r22
    206a:	d4 2f       	mov	r29, r20
    206c:	28 01       	movw	r4, r16
    206e:	39 01       	movw	r6, r18
    2070:	ee 20       	and	r14, r14
    2072:	21 f1       	breq	.+72     	; 0x20bc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2074:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN7TwoWire17beginTransmissionEh>
    2078:	ce 2d       	mov	r28, r14
    207a:	c4 30       	cpi	r28, 0x04	; 4
    207c:	08 f0       	brcs	.+2      	; 0x2080 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    207e:	c3 e0       	ldi	r28, 0x03	; 3
    2080:	c1 50       	subi	r28, 0x01	; 1
    2082:	c0 f0       	brcs	.+48     	; 0x20b4 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2084:	28 e0       	ldi	r18, 0x08	; 8
    2086:	c2 9f       	mul	r28, r18
    2088:	c0 01       	movw	r24, r0
    208a:	11 24       	eor	r1, r1
    208c:	a3 01       	movw	r20, r6
    208e:	92 01       	movw	r18, r4
    2090:	04 c0       	rjmp	.+8      	; 0x209a <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2092:	56 95       	lsr	r21
    2094:	47 95       	ror	r20
    2096:	37 95       	ror	r19
    2098:	27 95       	ror	r18
    209a:	8a 95       	dec	r24
    209c:	d2 f7       	brpl	.-12     	; 0x2092 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    209e:	ca 01       	movw	r24, r20
    20a0:	b9 01       	movw	r22, r18
    20a2:	d5 01       	movw	r26, r10
    20a4:	ed 91       	ld	r30, X+
    20a6:	fc 91       	ld	r31, X
    20a8:	01 90       	ld	r0, Z+
    20aa:	f0 81       	ld	r31, Z
    20ac:	e0 2d       	mov	r30, r0
    20ae:	c5 01       	movw	r24, r10
    20b0:	09 95       	icall
    20b2:	e6 cf       	rjmp	.-52     	; 0x2080 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	c5 01       	movw	r24, r10
    20b8:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN7TwoWire15endTransmissionEh>
    20bc:	4d 2f       	mov	r20, r29
    20be:	d1 32       	cpi	r29, 0x21	; 33
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	2c 2d       	mov	r18, r12
    20c6:	6e e6       	ldi	r22, 0x6E	; 110
    20c8:	73 e0       	ldi	r23, 0x03	; 3
    20ca:	8f 2d       	mov	r24, r15
    20cc:	0e 94 b3 10 	call	0x2166	; 0x2166 <twi_readFrom>
    20d0:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    20d4:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	7f 90       	pop	r7
    20ec:	6f 90       	pop	r6
    20ee:	5f 90       	pop	r5
    20f0:	4f 90       	pop	r4
    20f2:	08 95       	ret

000020f4 <_ZN7TwoWire11requestFromEhhh>:
    20f4:	cf 92       	push	r12
    20f6:	ef 92       	push	r14
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	c2 2e       	mov	r12, r18
    20fe:	e1 2c       	mov	r14, r1
    2100:	00 e0       	ldi	r16, 0x00	; 0
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	98 01       	movw	r18, r16
    2106:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEhhmhh>
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ef 90       	pop	r14
    2110:	cf 90       	pop	r12
    2112:	08 95       	ret

00002114 <_ZN7TwoWire11requestFromEii>:
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <_ZN7TwoWire11requestFromEhhh>

0000211a <_ZN7TwoWire15endTransmissionEv>:
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	0c 94 13 10 	jmp	0x2026	; 0x2026 <_ZN7TwoWire15endTransmissionEh>

00002120 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2120:	88 e3       	ldi	r24, 0x38	; 56
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_ZN7TwoWireC1Ev>

00002128 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2128:	08 95       	ret

0000212a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    212a:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <twi_sendStop>
    2134:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	82 e1       	ldi	r24, 0x12	; 18
    213c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	83 e1       	ldi	r24, 0x13	; 19
    2144:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
    2148:	e9 eb       	ldi	r30, 0xB9	; 185
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8e 7f       	andi	r24, 0xFE	; 254
    2150:	80 83       	st	Z, r24
    2152:	80 81       	ld	r24, Z
    2154:	8d 7f       	andi	r24, 0xFD	; 253
    2156:	80 83       	st	Z, r24
    2158:	88 e4       	ldi	r24, 0x48	; 72
    215a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    215e:	85 e4       	ldi	r24, 0x45	; 69
    2160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2164:	08 95       	ret

00002166 <twi_readFrom>:
    2166:	41 32       	cpi	r20, 0x21	; 33
    2168:	08 f0       	brcs	.+2      	; 0x216c <twi_readFrom+0x6>
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <twi_readFrom+0x8c>
    216c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <twi_state>
    2170:	91 11       	cpse	r25, r1
    2172:	fc cf       	rjmp	.-8      	; 0x216c <twi_readFrom+0x6>
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <twi_state>
    217a:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <twi_sendStop>
    217e:	2f ef       	ldi	r18, 0xFF	; 255
    2180:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <twi_error>
    2184:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_masterBufferIndex>
    2188:	24 0f       	add	r18, r20
    218a:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <twi_masterBufferLength>
    218e:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <twi_slarw>
    2192:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <twi_slarw>
    2196:	88 0f       	add	r24, r24
    2198:	89 2b       	or	r24, r25
    219a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_slarw>
    219e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <twi_inRepStart>
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	61 f4       	brne	.+24     	; 0x21be <twi_readFrom+0x58>
    21a6:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    21aa:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    21ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    21b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21b6:	83 fd       	sbrc	r24, 3
    21b8:	f8 cf       	rjmp	.-16     	; 0x21aa <twi_readFrom+0x44>
    21ba:	85 ec       	ldi	r24, 0xC5	; 197
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <twi_readFrom+0x5a>
    21be:	85 ee       	ldi	r24, 0xE5	; 229
    21c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21c4:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <twi_state>
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	e1 f3       	breq	.-8      	; 0x21c4 <twi_readFrom+0x5e>
    21cc:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    21d0:	84 17       	cp	r24, r20
    21d2:	10 f4       	brcc	.+4      	; 0x21d8 <twi_readFrom+0x72>
    21d4:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    21d8:	a4 ed       	ldi	r26, 0xD4	; 212
    21da:	b3 e0       	ldi	r27, 0x03	; 3
    21dc:	96 2f       	mov	r25, r22
    21de:	fb 01       	movw	r30, r22
    21e0:	8e 2f       	mov	r24, r30
    21e2:	89 1b       	sub	r24, r25
    21e4:	84 17       	cp	r24, r20
    21e6:	18 f4       	brcc	.+6      	; 0x21ee <twi_readFrom+0x88>
    21e8:	8d 91       	ld	r24, X+
    21ea:	81 93       	st	Z+, r24
    21ec:	f9 cf       	rjmp	.-14     	; 0x21e0 <twi_readFrom+0x7a>
    21ee:	84 2f       	mov	r24, r20
    21f0:	08 95       	ret
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	08 95       	ret

000021f6 <twi_writeTo>:
    21f6:	0f 93       	push	r16
    21f8:	41 32       	cpi	r20, 0x21	; 33
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <twi_writeTo+0x8>
    21fc:	4a c0       	rjmp	.+148    	; 0x2292 <twi_writeTo+0x9c>
    21fe:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <twi_state>
    2202:	91 11       	cpse	r25, r1
    2204:	fc cf       	rjmp	.-8      	; 0x21fe <twi_writeTo+0x8>
    2206:	32 e0       	ldi	r19, 0x02	; 2
    2208:	30 93 fb 03 	sts	0x03FB, r19	; 0x8003fb <twi_state>
    220c:	00 93 f9 03 	sts	0x03F9, r16	; 0x8003f9 <twi_sendStop>
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <twi_error>
    2216:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_masterBufferIndex>
    221a:	40 93 d2 03 	sts	0x03D2, r20	; 0x8003d2 <twi_masterBufferLength>
    221e:	56 2f       	mov	r21, r22
    2220:	a4 ed       	ldi	r26, 0xD4	; 212
    2222:	b3 e0       	ldi	r27, 0x03	; 3
    2224:	fb 01       	movw	r30, r22
    2226:	3e 2f       	mov	r19, r30
    2228:	35 1b       	sub	r19, r21
    222a:	34 17       	cp	r19, r20
    222c:	18 f4       	brcc	.+6      	; 0x2234 <twi_writeTo+0x3e>
    222e:	31 91       	ld	r19, Z+
    2230:	3d 93       	st	X+, r19
    2232:	f9 cf       	rjmp	.-14     	; 0x2226 <twi_writeTo+0x30>
    2234:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <twi_slarw>
    2238:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <twi_slarw>
    223c:	88 0f       	add	r24, r24
    223e:	83 2b       	or	r24, r19
    2240:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_slarw>
    2244:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <twi_inRepStart>
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	61 f4       	brne	.+24     	; 0x2264 <twi_writeTo+0x6e>
    224c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    2250:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    2254:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    225c:	83 fd       	sbrc	r24, 3
    225e:	f8 cf       	rjmp	.-16     	; 0x2250 <twi_writeTo+0x5a>
    2260:	85 ec       	ldi	r24, 0xC5	; 197
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <twi_writeTo+0x70>
    2264:	85 ee       	ldi	r24, 0xE5	; 229
    2266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    226a:	22 23       	and	r18, r18
    226c:	21 f0       	breq	.+8      	; 0x2276 <twi_writeTo+0x80>
    226e:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <twi_state>
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	d1 f3       	breq	.-12     	; 0x226a <twi_writeTo+0x74>
    2276:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    227a:	8f 3f       	cpi	r24, 0xFF	; 255
    227c:	79 f0       	breq	.+30     	; 0x229c <twi_writeTo+0xa6>
    227e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    2282:	80 32       	cpi	r24, 0x20	; 32
    2284:	41 f0       	breq	.+16     	; 0x2296 <twi_writeTo+0xa0>
    2286:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    228a:	80 33       	cpi	r24, 0x30	; 48
    228c:	31 f0       	breq	.+12     	; 0x229a <twi_writeTo+0xa4>
    228e:	94 e0       	ldi	r25, 0x04	; 4
    2290:	05 c0       	rjmp	.+10     	; 0x229c <twi_writeTo+0xa6>
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	03 c0       	rjmp	.+6      	; 0x229c <twi_writeTo+0xa6>
    2296:	92 e0       	ldi	r25, 0x02	; 2
    2298:	01 c0       	rjmp	.+2      	; 0x229c <twi_writeTo+0xa6>
    229a:	93 e0       	ldi	r25, 0x03	; 3
    229c:	89 2f       	mov	r24, r25
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <twi_transmit>:
    22a2:	40 91 b0 03 	lds	r20, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    22a6:	26 2f       	mov	r18, r22
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	24 0f       	add	r18, r20
    22ac:	31 1d       	adc	r19, r1
    22ae:	21 32       	cpi	r18, 0x21	; 33
    22b0:	31 05       	cpc	r19, r1
    22b2:	dc f4       	brge	.+54     	; 0x22ea <twi_transmit+0x48>
    22b4:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <twi_state>
    22b8:	24 30       	cpi	r18, 0x04	; 4
    22ba:	c9 f4       	brne	.+50     	; 0x22ee <twi_transmit+0x4c>
    22bc:	fc 01       	movw	r30, r24
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	86 17       	cp	r24, r22
    22c4:	58 f4       	brcc	.+22     	; 0x22dc <twi_transmit+0x3a>
    22c6:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    22ca:	21 91       	ld	r18, Z+
    22cc:	dc 01       	movw	r26, r24
    22ce:	ae 54       	subi	r26, 0x4E	; 78
    22d0:	bc 4f       	sbci	r27, 0xFC	; 252
    22d2:	a3 0f       	add	r26, r19
    22d4:	b1 1d       	adc	r27, r1
    22d6:	2c 93       	st	X, r18
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	f3 cf       	rjmp	.-26     	; 0x22c2 <twi_transmit+0x20>
    22dc:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    22e0:	68 0f       	add	r22, r24
    22e2:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <twi_txBufferLength>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	08 95       	ret
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	08 95       	ret
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	08 95       	ret

000022f2 <twi_attachSlaveRxEvent>:
    22f2:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <twi_onSlaveReceive+0x1>
    22f6:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <twi_onSlaveReceive>
    22fa:	08 95       	ret

000022fc <twi_attachSlaveTxEvent>:
    22fc:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <twi_onSlaveTransmit+0x1>
    2300:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <twi_onSlaveTransmit>
    2304:	08 95       	ret

00002306 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2306:	85 ed       	ldi	r24, 0xD5	; 213
    2308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    230c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2310:	84 fd       	sbrc	r24, 4
    2312:	fc cf       	rjmp	.-8      	; 0x230c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2314:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    2318:	08 95       	ret

0000231a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    231a:	85 ec       	ldi	r24, 0xC5	; 197
    231c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2320:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    2324:	08 95       	ret

00002326 <__vector_24>:
}

ISR(TWI_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	2f 93       	push	r18
    2332:	3f 93       	push	r19
    2334:	4f 93       	push	r20
    2336:	5f 93       	push	r21
    2338:	6f 93       	push	r22
    233a:	7f 93       	push	r23
    233c:	8f 93       	push	r24
    233e:	9f 93       	push	r25
    2340:	af 93       	push	r26
    2342:	bf 93       	push	r27
    2344:	ef 93       	push	r30
    2346:	ff 93       	push	r31
  switch(TW_STATUS){
    2348:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    234c:	88 7f       	andi	r24, 0xF8	; 248
    234e:	80 36       	cpi	r24, 0x60	; 96
    2350:	09 f4       	brne	.+2      	; 0x2354 <__vector_24+0x2e>
    2352:	9e c0       	rjmp	.+316    	; 0x2490 <__vector_24+0x16a>
    2354:	78 f5       	brcc	.+94     	; 0x23b4 <__vector_24+0x8e>
    2356:	88 32       	cpi	r24, 0x28	; 40
    2358:	09 f4       	brne	.+2      	; 0x235c <__vector_24+0x36>
    235a:	5d c0       	rjmp	.+186    	; 0x2416 <__vector_24+0xf0>
    235c:	90 f4       	brcc	.+36     	; 0x2382 <__vector_24+0x5c>
    235e:	80 31       	cpi	r24, 0x10	; 16
    2360:	09 f4       	brne	.+2      	; 0x2364 <__vector_24+0x3e>
    2362:	56 c0       	rjmp	.+172    	; 0x2410 <__vector_24+0xea>
    2364:	38 f4       	brcc	.+14     	; 0x2374 <__vector_24+0x4e>
    2366:	88 23       	and	r24, r24
    2368:	09 f4       	brne	.+2      	; 0x236c <__vector_24+0x46>
    236a:	f5 c0       	rjmp	.+490    	; 0x2556 <__vector_24+0x230>
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	09 f4       	brne	.+2      	; 0x2372 <__vector_24+0x4c>
    2370:	4f c0       	rjmp	.+158    	; 0x2410 <__vector_24+0xea>
    2372:	f5 c0       	rjmp	.+490    	; 0x255e <__vector_24+0x238>
    2374:	88 31       	cpi	r24, 0x18	; 24
    2376:	09 f4       	brne	.+2      	; 0x237a <__vector_24+0x54>
    2378:	4e c0       	rjmp	.+156    	; 0x2416 <__vector_24+0xf0>
    237a:	80 32       	cpi	r24, 0x20	; 32
    237c:	09 f4       	brne	.+2      	; 0x2380 <__vector_24+0x5a>
    237e:	5f c0       	rjmp	.+190    	; 0x243e <__vector_24+0x118>
    2380:	ee c0       	rjmp	.+476    	; 0x255e <__vector_24+0x238>
    2382:	80 34       	cpi	r24, 0x40	; 64
    2384:	09 f4       	brne	.+2      	; 0x2388 <__vector_24+0x62>
    2386:	6a c0       	rjmp	.+212    	; 0x245c <__vector_24+0x136>
    2388:	58 f4       	brcc	.+22     	; 0x23a0 <__vector_24+0x7a>
    238a:	80 33       	cpi	r24, 0x30	; 48
    238c:	09 f4       	brne	.+2      	; 0x2390 <__vector_24+0x6a>
    238e:	57 c0       	rjmp	.+174    	; 0x243e <__vector_24+0x118>
    2390:	88 33       	cpi	r24, 0x38	; 56
    2392:	09 f0       	breq	.+2      	; 0x2396 <__vector_24+0x70>
    2394:	e4 c0       	rjmp	.+456    	; 0x255e <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2396:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_error>
      twi_releaseBus();
    239a:	0e 94 8d 11 	call	0x231a	; 0x231a <twi_releaseBus>
      break;
    239e:	df c0       	rjmp	.+446    	; 0x255e <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    23a0:	80 35       	cpi	r24, 0x50	; 80
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <__vector_24+0x80>
    23a4:	4f c0       	rjmp	.+158    	; 0x2444 <__vector_24+0x11e>
    23a6:	88 35       	cpi	r24, 0x58	; 88
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_24+0x86>
    23aa:	5d c0       	rjmp	.+186    	; 0x2466 <__vector_24+0x140>
    23ac:	88 34       	cpi	r24, 0x48	; 72
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <__vector_24+0x8c>
    23b0:	d6 c0       	rjmp	.+428    	; 0x255e <__vector_24+0x238>
    23b2:	d3 c0       	rjmp	.+422    	; 0x255a <__vector_24+0x234>
    23b4:	88 39       	cpi	r24, 0x98	; 152
    23b6:	09 f4       	brne	.+2      	; 0x23ba <__vector_24+0x94>
    23b8:	c4 c0       	rjmp	.+392    	; 0x2542 <__vector_24+0x21c>
    23ba:	a8 f4       	brcc	.+42     	; 0x23e6 <__vector_24+0xc0>
    23bc:	88 37       	cpi	r24, 0x78	; 120
    23be:	09 f4       	brne	.+2      	; 0x23c2 <__vector_24+0x9c>
    23c0:	67 c0       	rjmp	.+206    	; 0x2490 <__vector_24+0x16a>
    23c2:	38 f4       	brcc	.+14     	; 0x23d2 <__vector_24+0xac>
    23c4:	88 36       	cpi	r24, 0x68	; 104
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__vector_24+0xa4>
    23c8:	63 c0       	rjmp	.+198    	; 0x2490 <__vector_24+0x16a>
    23ca:	80 37       	cpi	r24, 0x70	; 112
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__vector_24+0xaa>
    23ce:	60 c0       	rjmp	.+192    	; 0x2490 <__vector_24+0x16a>
    23d0:	c6 c0       	rjmp	.+396    	; 0x255e <__vector_24+0x238>
    23d2:	88 38       	cpi	r24, 0x88	; 136
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <__vector_24+0xb2>
    23d6:	b5 c0       	rjmp	.+362    	; 0x2542 <__vector_24+0x21c>
    23d8:	80 39       	cpi	r24, 0x90	; 144
    23da:	09 f4       	brne	.+2      	; 0x23de <__vector_24+0xb8>
    23dc:	5f c0       	rjmp	.+190    	; 0x249c <__vector_24+0x176>
    23de:	80 38       	cpi	r24, 0x80	; 128
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <__vector_24+0xbe>
    23e2:	bd c0       	rjmp	.+378    	; 0x255e <__vector_24+0x238>
    23e4:	5b c0       	rjmp	.+182    	; 0x249c <__vector_24+0x176>
    23e6:	80 3b       	cpi	r24, 0xB0	; 176
    23e8:	09 f4       	brne	.+2      	; 0x23ec <__vector_24+0xc6>
    23ea:	83 c0       	rjmp	.+262    	; 0x24f2 <__vector_24+0x1cc>
    23ec:	38 f4       	brcc	.+14     	; 0x23fc <__vector_24+0xd6>
    23ee:	80 3a       	cpi	r24, 0xA0	; 160
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__vector_24+0xce>
    23f2:	66 c0       	rjmp	.+204    	; 0x24c0 <__vector_24+0x19a>
    23f4:	88 3a       	cpi	r24, 0xA8	; 168
    23f6:	09 f4       	brne	.+2      	; 0x23fa <__vector_24+0xd4>
    23f8:	7c c0       	rjmp	.+248    	; 0x24f2 <__vector_24+0x1cc>
    23fa:	b1 c0       	rjmp	.+354    	; 0x255e <__vector_24+0x238>
    23fc:	80 3c       	cpi	r24, 0xC0	; 192
    23fe:	09 f4       	brne	.+2      	; 0x2402 <__vector_24+0xdc>
    2400:	a4 c0       	rjmp	.+328    	; 0x254a <__vector_24+0x224>
    2402:	88 3c       	cpi	r24, 0xC8	; 200
    2404:	09 f4       	brne	.+2      	; 0x2408 <__vector_24+0xe2>
    2406:	a1 c0       	rjmp	.+322    	; 0x254a <__vector_24+0x224>
    2408:	88 3b       	cpi	r24, 0xB8	; 184
    240a:	09 f4       	brne	.+2      	; 0x240e <__vector_24+0xe8>
    240c:	87 c0       	rjmp	.+270    	; 0x251c <__vector_24+0x1f6>
    240e:	a7 c0       	rjmp	.+334    	; 0x255e <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2410:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    2414:	10 c0       	rjmp	.+32     	; 0x2436 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2416:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    241a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_masterBufferLength>
    241e:	98 17       	cp	r25, r24
    2420:	70 f5       	brcc	.+92     	; 0x247e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2422:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8e 0f       	add	r24, r30
    242a:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	ec 52       	subi	r30, 0x2C	; 44
    2432:	fc 4f       	sbci	r31, 0xFC	; 252
    2434:	80 81       	ld	r24, Z
    2436:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    243a:	85 ec       	ldi	r24, 0xC5	; 197
    243c:	83 c0       	rjmp	.+262    	; 0x2544 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    243e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_error>
    2442:	8b c0       	rjmp	.+278    	; 0x255a <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2444:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	8e 0f       	add	r24, r30
    244c:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    2450:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	ec 52       	subi	r30, 0x2C	; 44
    2458:	fc 4f       	sbci	r31, 0xFC	; 252
    245a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    245c:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    2460:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_masterBufferLength>
    2464:	6b c0       	rjmp	.+214    	; 0x253c <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2466:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	8e 0f       	add	r24, r30
    246e:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    2472:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	ec 52       	subi	r30, 0x2C	; 44
    247a:	fc 4f       	sbci	r31, 0xFC	; 252
    247c:	80 83       	st	Z, r24
	if (twi_sendStop)
    247e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <twi_sendStop>
    2482:	81 11       	cpse	r24, r1
    2484:	6a c0       	rjmp	.+212    	; 0x255a <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    248c:	84 ea       	ldi	r24, 0xA4	; 164
    248e:	5e c0       	rjmp	.+188    	; 0x254c <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2496:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_rxBufferIndex>
    249a:	cf cf       	rjmp	.-98     	; 0x243a <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    249c:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_rxBufferIndex>
    24a0:	80 32       	cpi	r24, 0x20	; 32
    24a2:	08 f0       	brcs	.+2      	; 0x24a6 <__vector_24+0x180>
    24a4:	4e c0       	rjmp	.+156    	; 0x2542 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    24a6:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_rxBufferIndex>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	8e 0f       	add	r24, r30
    24ae:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_rxBufferIndex>
    24b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	e0 57       	subi	r30, 0x70	; 112
    24ba:	fc 4f       	sbci	r31, 0xFC	; 252
    24bc:	80 83       	st	Z, r24
    24be:	bd cf       	rjmp	.-134    	; 0x243a <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    24c0:	0e 94 8d 11 	call	0x231a	; 0x231a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    24c4:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_rxBufferIndex>
    24c8:	80 32       	cpi	r24, 0x20	; 32
    24ca:	30 f4       	brcc	.+12     	; 0x24d8 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    24cc:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_rxBufferIndex>
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	e0 57       	subi	r30, 0x70	; 112
    24d4:	fc 4f       	sbci	r31, 0xFC	; 252
    24d6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    24d8:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <twi_rxBufferIndex>
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <twi_onSlaveReceive>
    24e2:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <twi_onSlaveReceive+0x1>
    24e6:	80 e9       	ldi	r24, 0x90	; 144
    24e8:	93 e0       	ldi	r25, 0x03	; 3
    24ea:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    24ec:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_rxBufferIndex>
      break;
    24f0:	36 c0       	rjmp	.+108    	; 0x255e <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    24f8:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    24fc:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2500:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <twi_onSlaveTransmit>
    2504:	f0 91 f7 03 	lds	r31, 0x03F7	; 0x8003f7 <twi_onSlaveTransmit+0x1>
    2508:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    250a:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    250e:	81 11       	cpse	r24, r1
    2510:	05 c0       	rjmp	.+10     	; 0x251c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2518:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    251c:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <twi_txBufferIndex>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	8e 0f       	add	r24, r30
    2524:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_txBufferIndex>
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ee 54       	subi	r30, 0x4E	; 78
    252c:	fc 4f       	sbci	r31, 0xFC	; 252
    252e:	80 81       	ld	r24, Z
    2530:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2534:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <twi_txBufferIndex>
    2538:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    253c:	98 17       	cp	r25, r24
    253e:	08 f4       	brcc	.+2      	; 0x2542 <__vector_24+0x21c>
    2540:	7c cf       	rjmp	.-264    	; 0x243a <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2542:	85 e8       	ldi	r24, 0x85	; 133
    2544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2548:	0a c0       	rjmp	.+20     	; 0x255e <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    254a:	85 ec       	ldi	r24, 0xC5	; 197
    254c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2550:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
      break;
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2556:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_error>
      twi_stop();
    255a:	0e 94 83 11 	call	0x2306	; 0x2306 <twi_stop>
      break;
  }
}
    255e:	ff 91       	pop	r31
    2560:	ef 91       	pop	r30
    2562:	bf 91       	pop	r27
    2564:	af 91       	pop	r26
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	7f 91       	pop	r23
    256c:	6f 91       	pop	r22
    256e:	5f 91       	pop	r21
    2570:	4f 91       	pop	r20
    2572:	3f 91       	pop	r19
    2574:	2f 91       	pop	r18
    2576:	0f 90       	pop	r0
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	0f 90       	pop	r0
    257c:	1f 90       	pop	r1
    257e:	18 95       	reti

00002580 <__udivmodsi4>:
    2580:	a1 e2       	ldi	r26, 0x21	; 33
    2582:	1a 2e       	mov	r1, r26
    2584:	aa 1b       	sub	r26, r26
    2586:	bb 1b       	sub	r27, r27
    2588:	fd 01       	movw	r30, r26
    258a:	0d c0       	rjmp	.+26     	; 0x25a6 <__udivmodsi4_ep>

0000258c <__udivmodsi4_loop>:
    258c:	aa 1f       	adc	r26, r26
    258e:	bb 1f       	adc	r27, r27
    2590:	ee 1f       	adc	r30, r30
    2592:	ff 1f       	adc	r31, r31
    2594:	a2 17       	cp	r26, r18
    2596:	b3 07       	cpc	r27, r19
    2598:	e4 07       	cpc	r30, r20
    259a:	f5 07       	cpc	r31, r21
    259c:	20 f0       	brcs	.+8      	; 0x25a6 <__udivmodsi4_ep>
    259e:	a2 1b       	sub	r26, r18
    25a0:	b3 0b       	sbc	r27, r19
    25a2:	e4 0b       	sbc	r30, r20
    25a4:	f5 0b       	sbc	r31, r21

000025a6 <__udivmodsi4_ep>:
    25a6:	66 1f       	adc	r22, r22
    25a8:	77 1f       	adc	r23, r23
    25aa:	88 1f       	adc	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	1a 94       	dec	r1
    25b0:	69 f7       	brne	.-38     	; 0x258c <__udivmodsi4_loop>
    25b2:	60 95       	com	r22
    25b4:	70 95       	com	r23
    25b6:	80 95       	com	r24
    25b8:	90 95       	com	r25
    25ba:	9b 01       	movw	r18, r22
    25bc:	ac 01       	movw	r20, r24
    25be:	bd 01       	movw	r22, r26
    25c0:	cf 01       	movw	r24, r30
    25c2:	08 95       	ret

000025c4 <__tablejump2__>:
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	05 90       	lpm	r0, Z+
    25ca:	f4 91       	lpm	r31, Z
    25cc:	e0 2d       	mov	r30, r0
    25ce:	09 94       	ijmp

000025d0 <malloc>:
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	82 30       	cpi	r24, 0x02	; 2
    25da:	91 05       	cpc	r25, r1
    25dc:	10 f4       	brcc	.+4      	; 0x25e2 <malloc+0x12>
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <__flp>
    25e6:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <__flp+0x1>
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	30 97       	sbiw	r30, 0x00	; 0
    25f4:	19 f1       	breq	.+70     	; 0x263c <malloc+0x6c>
    25f6:	40 81       	ld	r20, Z
    25f8:	51 81       	ldd	r21, Z+1	; 0x01
    25fa:	02 81       	ldd	r16, Z+2	; 0x02
    25fc:	13 81       	ldd	r17, Z+3	; 0x03
    25fe:	48 17       	cp	r20, r24
    2600:	59 07       	cpc	r21, r25
    2602:	c8 f0       	brcs	.+50     	; 0x2636 <malloc+0x66>
    2604:	84 17       	cp	r24, r20
    2606:	95 07       	cpc	r25, r21
    2608:	69 f4       	brne	.+26     	; 0x2624 <malloc+0x54>
    260a:	10 97       	sbiw	r26, 0x00	; 0
    260c:	31 f0       	breq	.+12     	; 0x261a <malloc+0x4a>
    260e:	12 96       	adiw	r26, 0x02	; 2
    2610:	0c 93       	st	X, r16
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	13 96       	adiw	r26, 0x03	; 3
    2616:	1c 93       	st	X, r17
    2618:	27 c0       	rjmp	.+78     	; 0x2668 <malloc+0x98>
    261a:	00 93 fe 03 	sts	0x03FE, r16	; 0x8003fe <__flp>
    261e:	10 93 ff 03 	sts	0x03FF, r17	; 0x8003ff <__flp+0x1>
    2622:	22 c0       	rjmp	.+68     	; 0x2668 <malloc+0x98>
    2624:	21 15       	cp	r18, r1
    2626:	31 05       	cpc	r19, r1
    2628:	19 f0       	breq	.+6      	; 0x2630 <malloc+0x60>
    262a:	42 17       	cp	r20, r18
    262c:	53 07       	cpc	r21, r19
    262e:	18 f4       	brcc	.+6      	; 0x2636 <malloc+0x66>
    2630:	9a 01       	movw	r18, r20
    2632:	bd 01       	movw	r22, r26
    2634:	ef 01       	movw	r28, r30
    2636:	df 01       	movw	r26, r30
    2638:	f8 01       	movw	r30, r16
    263a:	db cf       	rjmp	.-74     	; 0x25f2 <malloc+0x22>
    263c:	21 15       	cp	r18, r1
    263e:	31 05       	cpc	r19, r1
    2640:	f9 f0       	breq	.+62     	; 0x2680 <malloc+0xb0>
    2642:	28 1b       	sub	r18, r24
    2644:	39 0b       	sbc	r19, r25
    2646:	24 30       	cpi	r18, 0x04	; 4
    2648:	31 05       	cpc	r19, r1
    264a:	80 f4       	brcc	.+32     	; 0x266c <malloc+0x9c>
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	61 15       	cp	r22, r1
    2652:	71 05       	cpc	r23, r1
    2654:	21 f0       	breq	.+8      	; 0x265e <malloc+0x8e>
    2656:	fb 01       	movw	r30, r22
    2658:	93 83       	std	Z+3, r25	; 0x03
    265a:	82 83       	std	Z+2, r24	; 0x02
    265c:	04 c0       	rjmp	.+8      	; 0x2666 <malloc+0x96>
    265e:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <__flp+0x1>
    2662:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <__flp>
    2666:	fe 01       	movw	r30, r28
    2668:	32 96       	adiw	r30, 0x02	; 2
    266a:	44 c0       	rjmp	.+136    	; 0x26f4 <malloc+0x124>
    266c:	fe 01       	movw	r30, r28
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	81 93       	st	Z+, r24
    2674:	91 93       	st	Z+, r25
    2676:	22 50       	subi	r18, 0x02	; 2
    2678:	31 09       	sbc	r19, r1
    267a:	39 83       	std	Y+1, r19	; 0x01
    267c:	28 83       	st	Y, r18
    267e:	3a c0       	rjmp	.+116    	; 0x26f4 <malloc+0x124>
    2680:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
    2684:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
    2688:	23 2b       	or	r18, r19
    268a:	41 f4       	brne	.+16     	; 0x269c <malloc+0xcc>
    268c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2690:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2694:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <__brkval+0x1>
    2698:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <__brkval>
    269c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    26a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    26a4:	21 15       	cp	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	41 f4       	brne	.+16     	; 0x26ba <malloc+0xea>
    26aa:	2d b7       	in	r18, 0x3d	; 61
    26ac:	3e b7       	in	r19, 0x3e	; 62
    26ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26b6:	24 1b       	sub	r18, r20
    26b8:	35 0b       	sbc	r19, r21
    26ba:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <__brkval>
    26be:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <__brkval+0x1>
    26c2:	e2 17       	cp	r30, r18
    26c4:	f3 07       	cpc	r31, r19
    26c6:	a0 f4       	brcc	.+40     	; 0x26f0 <malloc+0x120>
    26c8:	2e 1b       	sub	r18, r30
    26ca:	3f 0b       	sbc	r19, r31
    26cc:	28 17       	cp	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	78 f0       	brcs	.+30     	; 0x26f0 <malloc+0x120>
    26d2:	ac 01       	movw	r20, r24
    26d4:	4e 5f       	subi	r20, 0xFE	; 254
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	24 17       	cp	r18, r20
    26da:	35 07       	cpc	r19, r21
    26dc:	48 f0       	brcs	.+18     	; 0x26f0 <malloc+0x120>
    26de:	4e 0f       	add	r20, r30
    26e0:	5f 1f       	adc	r21, r31
    26e2:	50 93 fd 03 	sts	0x03FD, r21	; 0x8003fd <__brkval+0x1>
    26e6:	40 93 fc 03 	sts	0x03FC, r20	; 0x8003fc <__brkval>
    26ea:	81 93       	st	Z+, r24
    26ec:	91 93       	st	Z+, r25
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <malloc+0x124>
    26f0:	e0 e0       	ldi	r30, 0x00	; 0
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	cf 01       	movw	r24, r30
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <free>:
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	09 f4       	brne	.+2      	; 0x270a <free+0xa>
    2708:	81 c0       	rjmp	.+258    	; 0x280c <free+0x10c>
    270a:	fc 01       	movw	r30, r24
    270c:	32 97       	sbiw	r30, 0x02	; 2
    270e:	13 82       	std	Z+3, r1	; 0x03
    2710:	12 82       	std	Z+2, r1	; 0x02
    2712:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <__flp>
    2716:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <__flp+0x1>
    271a:	10 97       	sbiw	r26, 0x00	; 0
    271c:	81 f4       	brne	.+32     	; 0x273e <free+0x3e>
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
    272a:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
    272e:	28 17       	cp	r18, r24
    2730:	39 07       	cpc	r19, r25
    2732:	51 f5       	brne	.+84     	; 0x2788 <free+0x88>
    2734:	f0 93 fd 03 	sts	0x03FD, r31	; 0x8003fd <__brkval+0x1>
    2738:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <__brkval>
    273c:	67 c0       	rjmp	.+206    	; 0x280c <free+0x10c>
    273e:	ed 01       	movw	r28, r26
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	ce 17       	cp	r28, r30
    2746:	df 07       	cpc	r29, r31
    2748:	40 f4       	brcc	.+16     	; 0x275a <free+0x5a>
    274a:	4a 81       	ldd	r20, Y+2	; 0x02
    274c:	5b 81       	ldd	r21, Y+3	; 0x03
    274e:	9e 01       	movw	r18, r28
    2750:	41 15       	cp	r20, r1
    2752:	51 05       	cpc	r21, r1
    2754:	f1 f0       	breq	.+60     	; 0x2792 <free+0x92>
    2756:	ea 01       	movw	r28, r20
    2758:	f5 cf       	rjmp	.-22     	; 0x2744 <free+0x44>
    275a:	d3 83       	std	Z+3, r29	; 0x03
    275c:	c2 83       	std	Z+2, r28	; 0x02
    275e:	40 81       	ld	r20, Z
    2760:	51 81       	ldd	r21, Z+1	; 0x01
    2762:	84 0f       	add	r24, r20
    2764:	95 1f       	adc	r25, r21
    2766:	c8 17       	cp	r28, r24
    2768:	d9 07       	cpc	r29, r25
    276a:	59 f4       	brne	.+22     	; 0x2782 <free+0x82>
    276c:	88 81       	ld	r24, Y
    276e:	99 81       	ldd	r25, Y+1	; 0x01
    2770:	84 0f       	add	r24, r20
    2772:	95 1f       	adc	r25, r21
    2774:	02 96       	adiw	r24, 0x02	; 2
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	93 83       	std	Z+3, r25	; 0x03
    2780:	82 83       	std	Z+2, r24	; 0x02
    2782:	21 15       	cp	r18, r1
    2784:	31 05       	cpc	r19, r1
    2786:	29 f4       	brne	.+10     	; 0x2792 <free+0x92>
    2788:	f0 93 ff 03 	sts	0x03FF, r31	; 0x8003ff <__flp+0x1>
    278c:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <__flp>
    2790:	3d c0       	rjmp	.+122    	; 0x280c <free+0x10c>
    2792:	e9 01       	movw	r28, r18
    2794:	fb 83       	std	Y+3, r31	; 0x03
    2796:	ea 83       	std	Y+2, r30	; 0x02
    2798:	49 91       	ld	r20, Y+
    279a:	59 91       	ld	r21, Y+
    279c:	c4 0f       	add	r28, r20
    279e:	d5 1f       	adc	r29, r21
    27a0:	ec 17       	cp	r30, r28
    27a2:	fd 07       	cpc	r31, r29
    27a4:	61 f4       	brne	.+24     	; 0x27be <free+0xbe>
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	84 0f       	add	r24, r20
    27ac:	95 1f       	adc	r25, r21
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	e9 01       	movw	r28, r18
    27b2:	99 83       	std	Y+1, r25	; 0x01
    27b4:	88 83       	st	Y, r24
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	9b 83       	std	Y+3, r25	; 0x03
    27bc:	8a 83       	std	Y+2, r24	; 0x02
    27be:	e0 e0       	ldi	r30, 0x00	; 0
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	12 96       	adiw	r26, 0x02	; 2
    27c4:	8d 91       	ld	r24, X+
    27c6:	9c 91       	ld	r25, X
    27c8:	13 97       	sbiw	r26, 0x03	; 3
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <free+0xd4>
    27ce:	fd 01       	movw	r30, r26
    27d0:	dc 01       	movw	r26, r24
    27d2:	f7 cf       	rjmp	.-18     	; 0x27c2 <free+0xc2>
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	9d 01       	movw	r18, r26
    27dc:	2e 5f       	subi	r18, 0xFE	; 254
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	82 0f       	add	r24, r18
    27e2:	93 1f       	adc	r25, r19
    27e4:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <__brkval>
    27e8:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <__brkval+0x1>
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	69 f4       	brne	.+26     	; 0x280c <free+0x10c>
    27f2:	30 97       	sbiw	r30, 0x00	; 0
    27f4:	29 f4       	brne	.+10     	; 0x2800 <free+0x100>
    27f6:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <__flp+0x1>
    27fa:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <__flp>
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <free+0x104>
    2800:	13 82       	std	Z+3, r1	; 0x03
    2802:	12 82       	std	Z+2, r1	; 0x02
    2804:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <__brkval+0x1>
    2808:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <__brkval>
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <realloc>:
    2812:	a0 e0       	ldi	r26, 0x00	; 0
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ef e0       	ldi	r30, 0x0F	; 15
    2818:	f4 e1       	ldi	r31, 0x14	; 20
    281a:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__prologue_saves__+0x8>
    281e:	ec 01       	movw	r28, r24
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	21 f4       	brne	.+8      	; 0x282c <realloc+0x1a>
    2824:	cb 01       	movw	r24, r22
    2826:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <malloc>
    282a:	b4 c0       	rjmp	.+360    	; 0x2994 <realloc+0x182>
    282c:	fc 01       	movw	r30, r24
    282e:	e6 0f       	add	r30, r22
    2830:	f7 1f       	adc	r31, r23
    2832:	9c 01       	movw	r18, r24
    2834:	22 50       	subi	r18, 0x02	; 2
    2836:	31 09       	sbc	r19, r1
    2838:	e2 17       	cp	r30, r18
    283a:	f3 07       	cpc	r31, r19
    283c:	08 f4       	brcc	.+2      	; 0x2840 <realloc+0x2e>
    283e:	a8 c0       	rjmp	.+336    	; 0x2990 <realloc+0x17e>
    2840:	d9 01       	movw	r26, r18
    2842:	0d 91       	ld	r16, X+
    2844:	1c 91       	ld	r17, X
    2846:	11 97       	sbiw	r26, 0x01	; 1
    2848:	06 17       	cp	r16, r22
    284a:	17 07       	cpc	r17, r23
    284c:	b0 f0       	brcs	.+44     	; 0x287a <realloc+0x68>
    284e:	05 30       	cpi	r16, 0x05	; 5
    2850:	11 05       	cpc	r17, r1
    2852:	08 f4       	brcc	.+2      	; 0x2856 <realloc+0x44>
    2854:	9b c0       	rjmp	.+310    	; 0x298c <realloc+0x17a>
    2856:	c8 01       	movw	r24, r16
    2858:	04 97       	sbiw	r24, 0x04	; 4
    285a:	86 17       	cp	r24, r22
    285c:	97 07       	cpc	r25, r23
    285e:	08 f4       	brcc	.+2      	; 0x2862 <realloc+0x50>
    2860:	95 c0       	rjmp	.+298    	; 0x298c <realloc+0x17a>
    2862:	02 50       	subi	r16, 0x02	; 2
    2864:	11 09       	sbc	r17, r1
    2866:	06 1b       	sub	r16, r22
    2868:	17 0b       	sbc	r17, r23
    286a:	01 93       	st	Z+, r16
    286c:	11 93       	st	Z+, r17
    286e:	6d 93       	st	X+, r22
    2870:	7c 93       	st	X, r23
    2872:	cf 01       	movw	r24, r30
    2874:	0e 94 80 13 	call	0x2700	; 0x2700 <free>
    2878:	89 c0       	rjmp	.+274    	; 0x298c <realloc+0x17a>
    287a:	5b 01       	movw	r10, r22
    287c:	a0 1a       	sub	r10, r16
    287e:	b1 0a       	sbc	r11, r17
    2880:	4c 01       	movw	r8, r24
    2882:	80 0e       	add	r8, r16
    2884:	91 1e       	adc	r9, r17
    2886:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <__flp>
    288a:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <__flp+0x1>
    288e:	61 2c       	mov	r6, r1
    2890:	71 2c       	mov	r7, r1
    2892:	e1 2c       	mov	r14, r1
    2894:	f1 2c       	mov	r15, r1
    2896:	10 97       	sbiw	r26, 0x00	; 0
    2898:	09 f4       	brne	.+2      	; 0x289c <realloc+0x8a>
    289a:	46 c0       	rjmp	.+140    	; 0x2928 <realloc+0x116>
    289c:	8d 91       	ld	r24, X+
    289e:	9c 91       	ld	r25, X
    28a0:	11 97       	sbiw	r26, 0x01	; 1
    28a2:	a8 15       	cp	r26, r8
    28a4:	b9 05       	cpc	r27, r9
    28a6:	b1 f5       	brne	.+108    	; 0x2914 <realloc+0x102>
    28a8:	6c 01       	movw	r12, r24
    28aa:	42 e0       	ldi	r20, 0x02	; 2
    28ac:	c4 0e       	add	r12, r20
    28ae:	d1 1c       	adc	r13, r1
    28b0:	ca 14       	cp	r12, r10
    28b2:	db 04       	cpc	r13, r11
    28b4:	78 f1       	brcs	.+94     	; 0x2914 <realloc+0x102>
    28b6:	4c 01       	movw	r8, r24
    28b8:	8a 18       	sub	r8, r10
    28ba:	9b 08       	sbc	r9, r11
    28bc:	64 01       	movw	r12, r8
    28be:	42 e0       	ldi	r20, 0x02	; 2
    28c0:	c4 0e       	add	r12, r20
    28c2:	d1 1c       	adc	r13, r1
    28c4:	12 96       	adiw	r26, 0x02	; 2
    28c6:	bc 90       	ld	r11, X
    28c8:	12 97       	sbiw	r26, 0x02	; 2
    28ca:	13 96       	adiw	r26, 0x03	; 3
    28cc:	ac 91       	ld	r26, X
    28ce:	b5 e0       	ldi	r27, 0x05	; 5
    28d0:	cb 16       	cp	r12, r27
    28d2:	d1 04       	cpc	r13, r1
    28d4:	40 f0       	brcs	.+16     	; 0x28e6 <realloc+0xd4>
    28d6:	b2 82       	std	Z+2, r11	; 0x02
    28d8:	a3 83       	std	Z+3, r26	; 0x03
    28da:	91 82       	std	Z+1, r9	; 0x01
    28dc:	80 82       	st	Z, r8
    28de:	d9 01       	movw	r26, r18
    28e0:	6d 93       	st	X+, r22
    28e2:	7c 93       	st	X, r23
    28e4:	09 c0       	rjmp	.+18     	; 0x28f8 <realloc+0xe6>
    28e6:	0e 5f       	subi	r16, 0xFE	; 254
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	80 0f       	add	r24, r16
    28ec:	91 1f       	adc	r25, r17
    28ee:	f9 01       	movw	r30, r18
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
    28f4:	eb 2d       	mov	r30, r11
    28f6:	fa 2f       	mov	r31, r26
    28f8:	e1 14       	cp	r14, r1
    28fa:	f1 04       	cpc	r15, r1
    28fc:	31 f0       	breq	.+12     	; 0x290a <realloc+0xf8>
    28fe:	d7 01       	movw	r26, r14
    2900:	13 96       	adiw	r26, 0x03	; 3
    2902:	fc 93       	st	X, r31
    2904:	ee 93       	st	-X, r30
    2906:	12 97       	sbiw	r26, 0x02	; 2
    2908:	41 c0       	rjmp	.+130    	; 0x298c <realloc+0x17a>
    290a:	f0 93 ff 03 	sts	0x03FF, r31	; 0x8003ff <__flp+0x1>
    290e:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <__flp>
    2912:	3c c0       	rjmp	.+120    	; 0x298c <realloc+0x17a>
    2914:	68 16       	cp	r6, r24
    2916:	79 06       	cpc	r7, r25
    2918:	08 f4       	brcc	.+2      	; 0x291c <realloc+0x10a>
    291a:	3c 01       	movw	r6, r24
    291c:	7d 01       	movw	r14, r26
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	0d 90       	ld	r0, X+
    2922:	bc 91       	ld	r27, X
    2924:	a0 2d       	mov	r26, r0
    2926:	b7 cf       	rjmp	.-146    	; 0x2896 <realloc+0x84>
    2928:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <__brkval>
    292c:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <__brkval+0x1>
    2930:	88 16       	cp	r8, r24
    2932:	99 06       	cpc	r9, r25
    2934:	e1 f4       	brne	.+56     	; 0x296e <realloc+0x15c>
    2936:	66 16       	cp	r6, r22
    2938:	77 06       	cpc	r7, r23
    293a:	c8 f4       	brcc	.+50     	; 0x296e <realloc+0x15c>
    293c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2940:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	41 f4       	brne	.+16     	; 0x2958 <realloc+0x146>
    2948:	8d b7       	in	r24, 0x3d	; 61
    294a:	9e b7       	in	r25, 0x3e	; 62
    294c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2950:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2954:	84 1b       	sub	r24, r20
    2956:	95 0b       	sbc	r25, r21
    2958:	e8 17       	cp	r30, r24
    295a:	f9 07       	cpc	r31, r25
    295c:	c8 f4       	brcc	.+50     	; 0x2990 <realloc+0x17e>
    295e:	f0 93 fd 03 	sts	0x03FD, r31	; 0x8003fd <__brkval+0x1>
    2962:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <__brkval>
    2966:	f9 01       	movw	r30, r18
    2968:	71 83       	std	Z+1, r23	; 0x01
    296a:	60 83       	st	Z, r22
    296c:	0f c0       	rjmp	.+30     	; 0x298c <realloc+0x17a>
    296e:	cb 01       	movw	r24, r22
    2970:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <malloc>
    2974:	7c 01       	movw	r14, r24
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	59 f0       	breq	.+22     	; 0x2990 <realloc+0x17e>
    297a:	a8 01       	movw	r20, r16
    297c:	be 01       	movw	r22, r28
    297e:	0e 94 cf 14 	call	0x299e	; 0x299e <memcpy>
    2982:	ce 01       	movw	r24, r28
    2984:	0e 94 80 13 	call	0x2700	; 0x2700 <free>
    2988:	c7 01       	movw	r24, r14
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <realloc+0x182>
    298c:	ce 01       	movw	r24, r28
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <realloc+0x182>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	ee e0       	ldi	r30, 0x0E	; 14
    299a:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__epilogue_restores__+0x8>

0000299e <memcpy>:
    299e:	fb 01       	movw	r30, r22
    29a0:	dc 01       	movw	r26, r24
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <memcpy+0xa>
    29a4:	01 90       	ld	r0, Z+
    29a6:	0d 92       	st	X+, r0
    29a8:	41 50       	subi	r20, 0x01	; 1
    29aa:	50 40       	sbci	r21, 0x00	; 0
    29ac:	d8 f7       	brcc	.-10     	; 0x29a4 <memcpy+0x6>
    29ae:	08 95       	ret

000029b0 <strcpy>:
    29b0:	fb 01       	movw	r30, r22
    29b2:	dc 01       	movw	r26, r24
    29b4:	01 90       	ld	r0, Z+
    29b6:	0d 92       	st	X+, r0
    29b8:	00 20       	and	r0, r0
    29ba:	e1 f7       	brne	.-8      	; 0x29b4 <strcpy+0x4>
    29bc:	08 95       	ret

000029be <sprintf>:
    29be:	ae e0       	ldi	r26, 0x0E	; 14
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e5 ee       	ldi	r30, 0xE5	; 229
    29c4:	f4 e1       	ldi	r31, 0x14	; 20
    29c6:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x1c>
    29ca:	0d 89       	ldd	r16, Y+21	; 0x15
    29cc:	1e 89       	ldd	r17, Y+22	; 0x16
    29ce:	86 e0       	ldi	r24, 0x06	; 6
    29d0:	8c 83       	std	Y+4, r24	; 0x04
    29d2:	1a 83       	std	Y+2, r17	; 0x02
    29d4:	09 83       	std	Y+1, r16	; 0x01
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	9f e7       	ldi	r25, 0x7F	; 127
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	ae 01       	movw	r20, r28
    29e0:	47 5e       	subi	r20, 0xE7	; 231
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	6f 89       	ldd	r22, Y+23	; 0x17
    29e6:	78 8d       	ldd	r23, Y+24	; 0x18
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	0e 94 01 15 	call	0x2a02	; 0x2a02 <vfprintf>
    29f0:	ef 81       	ldd	r30, Y+7	; 0x07
    29f2:	f8 85       	ldd	r31, Y+8	; 0x08
    29f4:	e0 0f       	add	r30, r16
    29f6:	f1 1f       	adc	r31, r17
    29f8:	10 82       	st	Z, r1
    29fa:	2e 96       	adiw	r28, 0x0e	; 14
    29fc:	e4 e0       	ldi	r30, 0x04	; 4
    29fe:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x1c>

00002a02 <vfprintf>:
    2a02:	ab e0       	ldi	r26, 0x0B	; 11
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e7 e0       	ldi	r30, 0x07	; 7
    2a08:	f5 e1       	ldi	r31, 0x15	; 21
    2a0a:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__prologue_saves__>
    2a0e:	6c 01       	movw	r12, r24
    2a10:	7b 01       	movw	r14, r22
    2a12:	8a 01       	movw	r16, r20
    2a14:	fc 01       	movw	r30, r24
    2a16:	17 82       	std	Z+7, r1	; 0x07
    2a18:	16 82       	std	Z+6, r1	; 0x06
    2a1a:	83 81       	ldd	r24, Z+3	; 0x03
    2a1c:	81 ff       	sbrs	r24, 1
    2a1e:	cc c1       	rjmp	.+920    	; 0x2db8 <vfprintf+0x3b6>
    2a20:	ce 01       	movw	r24, r28
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	3c 01       	movw	r6, r24
    2a26:	f6 01       	movw	r30, r12
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	93 fd       	sbrc	r25, 3
    2a2e:	85 91       	lpm	r24, Z+
    2a30:	93 ff       	sbrs	r25, 3
    2a32:	81 91       	ld	r24, Z+
    2a34:	7f 01       	movw	r14, r30
    2a36:	88 23       	and	r24, r24
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <vfprintf+0x3a>
    2a3a:	ba c1       	rjmp	.+884    	; 0x2db0 <vfprintf+0x3ae>
    2a3c:	85 32       	cpi	r24, 0x25	; 37
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <vfprintf+0x4c>
    2a40:	93 fd       	sbrc	r25, 3
    2a42:	85 91       	lpm	r24, Z+
    2a44:	93 ff       	sbrs	r25, 3
    2a46:	81 91       	ld	r24, Z+
    2a48:	7f 01       	movw	r14, r30
    2a4a:	85 32       	cpi	r24, 0x25	; 37
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <vfprintf+0x56>
    2a4e:	b6 01       	movw	r22, r12
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2a56:	e7 cf       	rjmp	.-50     	; 0x2a26 <vfprintf+0x24>
    2a58:	91 2c       	mov	r9, r1
    2a5a:	21 2c       	mov	r2, r1
    2a5c:	31 2c       	mov	r3, r1
    2a5e:	ff e1       	ldi	r31, 0x1F	; 31
    2a60:	f3 15       	cp	r31, r3
    2a62:	d8 f0       	brcs	.+54     	; 0x2a9a <vfprintf+0x98>
    2a64:	8b 32       	cpi	r24, 0x2B	; 43
    2a66:	79 f0       	breq	.+30     	; 0x2a86 <vfprintf+0x84>
    2a68:	38 f4       	brcc	.+14     	; 0x2a78 <vfprintf+0x76>
    2a6a:	80 32       	cpi	r24, 0x20	; 32
    2a6c:	79 f0       	breq	.+30     	; 0x2a8c <vfprintf+0x8a>
    2a6e:	83 32       	cpi	r24, 0x23	; 35
    2a70:	a1 f4       	brne	.+40     	; 0x2a9a <vfprintf+0x98>
    2a72:	23 2d       	mov	r18, r3
    2a74:	20 61       	ori	r18, 0x10	; 16
    2a76:	1d c0       	rjmp	.+58     	; 0x2ab2 <vfprintf+0xb0>
    2a78:	8d 32       	cpi	r24, 0x2D	; 45
    2a7a:	61 f0       	breq	.+24     	; 0x2a94 <vfprintf+0x92>
    2a7c:	80 33       	cpi	r24, 0x30	; 48
    2a7e:	69 f4       	brne	.+26     	; 0x2a9a <vfprintf+0x98>
    2a80:	23 2d       	mov	r18, r3
    2a82:	21 60       	ori	r18, 0x01	; 1
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <vfprintf+0xb0>
    2a86:	83 2d       	mov	r24, r3
    2a88:	82 60       	ori	r24, 0x02	; 2
    2a8a:	38 2e       	mov	r3, r24
    2a8c:	e3 2d       	mov	r30, r3
    2a8e:	e4 60       	ori	r30, 0x04	; 4
    2a90:	3e 2e       	mov	r3, r30
    2a92:	2a c0       	rjmp	.+84     	; 0x2ae8 <vfprintf+0xe6>
    2a94:	f3 2d       	mov	r31, r3
    2a96:	f8 60       	ori	r31, 0x08	; 8
    2a98:	1d c0       	rjmp	.+58     	; 0x2ad4 <vfprintf+0xd2>
    2a9a:	37 fc       	sbrc	r3, 7
    2a9c:	2d c0       	rjmp	.+90     	; 0x2af8 <vfprintf+0xf6>
    2a9e:	20 ed       	ldi	r18, 0xD0	; 208
    2aa0:	28 0f       	add	r18, r24
    2aa2:	2a 30       	cpi	r18, 0x0A	; 10
    2aa4:	40 f0       	brcs	.+16     	; 0x2ab6 <vfprintf+0xb4>
    2aa6:	8e 32       	cpi	r24, 0x2E	; 46
    2aa8:	b9 f4       	brne	.+46     	; 0x2ad8 <vfprintf+0xd6>
    2aaa:	36 fc       	sbrc	r3, 6
    2aac:	81 c1       	rjmp	.+770    	; 0x2db0 <vfprintf+0x3ae>
    2aae:	23 2d       	mov	r18, r3
    2ab0:	20 64       	ori	r18, 0x40	; 64
    2ab2:	32 2e       	mov	r3, r18
    2ab4:	19 c0       	rjmp	.+50     	; 0x2ae8 <vfprintf+0xe6>
    2ab6:	36 fe       	sbrs	r3, 6
    2ab8:	06 c0       	rjmp	.+12     	; 0x2ac6 <vfprintf+0xc4>
    2aba:	8a e0       	ldi	r24, 0x0A	; 10
    2abc:	98 9e       	mul	r9, r24
    2abe:	20 0d       	add	r18, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	92 2e       	mov	r9, r18
    2ac4:	11 c0       	rjmp	.+34     	; 0x2ae8 <vfprintf+0xe6>
    2ac6:	ea e0       	ldi	r30, 0x0A	; 10
    2ac8:	2e 9e       	mul	r2, r30
    2aca:	20 0d       	add	r18, r0
    2acc:	11 24       	eor	r1, r1
    2ace:	22 2e       	mov	r2, r18
    2ad0:	f3 2d       	mov	r31, r3
    2ad2:	f0 62       	ori	r31, 0x20	; 32
    2ad4:	3f 2e       	mov	r3, r31
    2ad6:	08 c0       	rjmp	.+16     	; 0x2ae8 <vfprintf+0xe6>
    2ad8:	8c 36       	cpi	r24, 0x6C	; 108
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <vfprintf+0xe2>
    2adc:	83 2d       	mov	r24, r3
    2ade:	80 68       	ori	r24, 0x80	; 128
    2ae0:	38 2e       	mov	r3, r24
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0xe6>
    2ae4:	88 36       	cpi	r24, 0x68	; 104
    2ae6:	41 f4       	brne	.+16     	; 0x2af8 <vfprintf+0xf6>
    2ae8:	f7 01       	movw	r30, r14
    2aea:	93 fd       	sbrc	r25, 3
    2aec:	85 91       	lpm	r24, Z+
    2aee:	93 ff       	sbrs	r25, 3
    2af0:	81 91       	ld	r24, Z+
    2af2:	7f 01       	movw	r14, r30
    2af4:	81 11       	cpse	r24, r1
    2af6:	b3 cf       	rjmp	.-154    	; 0x2a5e <vfprintf+0x5c>
    2af8:	98 2f       	mov	r25, r24
    2afa:	9f 7d       	andi	r25, 0xDF	; 223
    2afc:	95 54       	subi	r25, 0x45	; 69
    2afe:	93 30       	cpi	r25, 0x03	; 3
    2b00:	28 f4       	brcc	.+10     	; 0x2b0c <vfprintf+0x10a>
    2b02:	0c 5f       	subi	r16, 0xFC	; 252
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	9f e3       	ldi	r25, 0x3F	; 63
    2b08:	99 83       	std	Y+1, r25	; 0x01
    2b0a:	0d c0       	rjmp	.+26     	; 0x2b26 <vfprintf+0x124>
    2b0c:	83 36       	cpi	r24, 0x63	; 99
    2b0e:	31 f0       	breq	.+12     	; 0x2b1c <vfprintf+0x11a>
    2b10:	83 37       	cpi	r24, 0x73	; 115
    2b12:	71 f0       	breq	.+28     	; 0x2b30 <vfprintf+0x12e>
    2b14:	83 35       	cpi	r24, 0x53	; 83
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <vfprintf+0x118>
    2b18:	59 c0       	rjmp	.+178    	; 0x2bcc <vfprintf+0x1ca>
    2b1a:	21 c0       	rjmp	.+66     	; 0x2b5e <vfprintf+0x15c>
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 81       	ld	r24, Z
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	0e 5f       	subi	r16, 0xFE	; 254
    2b24:	1f 4f       	sbci	r17, 0xFF	; 255
    2b26:	88 24       	eor	r8, r8
    2b28:	83 94       	inc	r8
    2b2a:	91 2c       	mov	r9, r1
    2b2c:	53 01       	movw	r10, r6
    2b2e:	13 c0       	rjmp	.+38     	; 0x2b56 <vfprintf+0x154>
    2b30:	28 01       	movw	r4, r16
    2b32:	f2 e0       	ldi	r31, 0x02	; 2
    2b34:	4f 0e       	add	r4, r31
    2b36:	51 1c       	adc	r5, r1
    2b38:	f8 01       	movw	r30, r16
    2b3a:	a0 80       	ld	r10, Z
    2b3c:	b1 80       	ldd	r11, Z+1	; 0x01
    2b3e:	36 fe       	sbrs	r3, 6
    2b40:	03 c0       	rjmp	.+6      	; 0x2b48 <vfprintf+0x146>
    2b42:	69 2d       	mov	r22, r9
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <vfprintf+0x14a>
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	7f ef       	ldi	r23, 0xFF	; 255
    2b4c:	c5 01       	movw	r24, r10
    2b4e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <strnlen>
    2b52:	4c 01       	movw	r8, r24
    2b54:	82 01       	movw	r16, r4
    2b56:	f3 2d       	mov	r31, r3
    2b58:	ff 77       	andi	r31, 0x7F	; 127
    2b5a:	3f 2e       	mov	r3, r31
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <vfprintf+0x188>
    2b5e:	28 01       	movw	r4, r16
    2b60:	22 e0       	ldi	r18, 0x02	; 2
    2b62:	42 0e       	add	r4, r18
    2b64:	51 1c       	adc	r5, r1
    2b66:	f8 01       	movw	r30, r16
    2b68:	a0 80       	ld	r10, Z
    2b6a:	b1 80       	ldd	r11, Z+1	; 0x01
    2b6c:	36 fe       	sbrs	r3, 6
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <vfprintf+0x174>
    2b70:	69 2d       	mov	r22, r9
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <vfprintf+0x178>
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	7f ef       	ldi	r23, 0xFF	; 255
    2b7a:	c5 01       	movw	r24, r10
    2b7c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <strnlen_P>
    2b80:	4c 01       	movw	r8, r24
    2b82:	f3 2d       	mov	r31, r3
    2b84:	f0 68       	ori	r31, 0x80	; 128
    2b86:	3f 2e       	mov	r3, r31
    2b88:	82 01       	movw	r16, r4
    2b8a:	33 fc       	sbrc	r3, 3
    2b8c:	1b c0       	rjmp	.+54     	; 0x2bc4 <vfprintf+0x1c2>
    2b8e:	82 2d       	mov	r24, r2
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	88 16       	cp	r8, r24
    2b94:	99 06       	cpc	r9, r25
    2b96:	b0 f4       	brcc	.+44     	; 0x2bc4 <vfprintf+0x1c2>
    2b98:	b6 01       	movw	r22, r12
    2b9a:	80 e2       	ldi	r24, 0x20	; 32
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2ba2:	2a 94       	dec	r2
    2ba4:	f4 cf       	rjmp	.-24     	; 0x2b8e <vfprintf+0x18c>
    2ba6:	f5 01       	movw	r30, r10
    2ba8:	37 fc       	sbrc	r3, 7
    2baa:	85 91       	lpm	r24, Z+
    2bac:	37 fe       	sbrs	r3, 7
    2bae:	81 91       	ld	r24, Z+
    2bb0:	5f 01       	movw	r10, r30
    2bb2:	b6 01       	movw	r22, r12
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2bba:	21 10       	cpse	r2, r1
    2bbc:	2a 94       	dec	r2
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	82 1a       	sub	r8, r18
    2bc2:	91 08       	sbc	r9, r1
    2bc4:	81 14       	cp	r8, r1
    2bc6:	91 04       	cpc	r9, r1
    2bc8:	71 f7       	brne	.-36     	; 0x2ba6 <vfprintf+0x1a4>
    2bca:	e8 c0       	rjmp	.+464    	; 0x2d9c <vfprintf+0x39a>
    2bcc:	84 36       	cpi	r24, 0x64	; 100
    2bce:	11 f0       	breq	.+4      	; 0x2bd4 <vfprintf+0x1d2>
    2bd0:	89 36       	cpi	r24, 0x69	; 105
    2bd2:	41 f5       	brne	.+80     	; 0x2c24 <vfprintf+0x222>
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	37 fe       	sbrs	r3, 7
    2bd8:	07 c0       	rjmp	.+14     	; 0x2be8 <vfprintf+0x1e6>
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0c 5f       	subi	r16, 0xFC	; 252
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	08 c0       	rjmp	.+16     	; 0x2bf8 <vfprintf+0x1f6>
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	07 2e       	mov	r0, r23
    2bee:	00 0c       	add	r0, r0
    2bf0:	88 0b       	sbc	r24, r24
    2bf2:	99 0b       	sbc	r25, r25
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	f3 2d       	mov	r31, r3
    2bfa:	ff 76       	andi	r31, 0x6F	; 111
    2bfc:	3f 2e       	mov	r3, r31
    2bfe:	97 ff       	sbrs	r25, 7
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <vfprintf+0x212>
    2c02:	90 95       	com	r25
    2c04:	80 95       	com	r24
    2c06:	70 95       	com	r23
    2c08:	61 95       	neg	r22
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c10:	f0 68       	ori	r31, 0x80	; 128
    2c12:	3f 2e       	mov	r3, r31
    2c14:	2a e0       	ldi	r18, 0x0A	; 10
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	a3 01       	movw	r20, r6
    2c1a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2c1e:	88 2e       	mov	r8, r24
    2c20:	86 18       	sub	r8, r6
    2c22:	45 c0       	rjmp	.+138    	; 0x2cae <vfprintf+0x2ac>
    2c24:	85 37       	cpi	r24, 0x75	; 117
    2c26:	31 f4       	brne	.+12     	; 0x2c34 <vfprintf+0x232>
    2c28:	23 2d       	mov	r18, r3
    2c2a:	2f 7e       	andi	r18, 0xEF	; 239
    2c2c:	b2 2e       	mov	r11, r18
    2c2e:	2a e0       	ldi	r18, 0x0A	; 10
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	25 c0       	rjmp	.+74     	; 0x2c7e <vfprintf+0x27c>
    2c34:	93 2d       	mov	r25, r3
    2c36:	99 7f       	andi	r25, 0xF9	; 249
    2c38:	b9 2e       	mov	r11, r25
    2c3a:	8f 36       	cpi	r24, 0x6F	; 111
    2c3c:	c1 f0       	breq	.+48     	; 0x2c6e <vfprintf+0x26c>
    2c3e:	18 f4       	brcc	.+6      	; 0x2c46 <vfprintf+0x244>
    2c40:	88 35       	cpi	r24, 0x58	; 88
    2c42:	79 f0       	breq	.+30     	; 0x2c62 <vfprintf+0x260>
    2c44:	b5 c0       	rjmp	.+362    	; 0x2db0 <vfprintf+0x3ae>
    2c46:	80 37       	cpi	r24, 0x70	; 112
    2c48:	19 f0       	breq	.+6      	; 0x2c50 <vfprintf+0x24e>
    2c4a:	88 37       	cpi	r24, 0x78	; 120
    2c4c:	21 f0       	breq	.+8      	; 0x2c56 <vfprintf+0x254>
    2c4e:	b0 c0       	rjmp	.+352    	; 0x2db0 <vfprintf+0x3ae>
    2c50:	e9 2f       	mov	r30, r25
    2c52:	e0 61       	ori	r30, 0x10	; 16
    2c54:	be 2e       	mov	r11, r30
    2c56:	b4 fe       	sbrs	r11, 4
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <vfprintf+0x272>
    2c5a:	fb 2d       	mov	r31, r11
    2c5c:	f4 60       	ori	r31, 0x04	; 4
    2c5e:	bf 2e       	mov	r11, r31
    2c60:	09 c0       	rjmp	.+18     	; 0x2c74 <vfprintf+0x272>
    2c62:	34 fe       	sbrs	r3, 4
    2c64:	0a c0       	rjmp	.+20     	; 0x2c7a <vfprintf+0x278>
    2c66:	29 2f       	mov	r18, r25
    2c68:	26 60       	ori	r18, 0x06	; 6
    2c6a:	b2 2e       	mov	r11, r18
    2c6c:	06 c0       	rjmp	.+12     	; 0x2c7a <vfprintf+0x278>
    2c6e:	28 e0       	ldi	r18, 0x08	; 8
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <vfprintf+0x27c>
    2c74:	20 e1       	ldi	r18, 0x10	; 16
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <vfprintf+0x27c>
    2c7a:	20 e1       	ldi	r18, 0x10	; 16
    2c7c:	32 e0       	ldi	r19, 0x02	; 2
    2c7e:	f8 01       	movw	r30, r16
    2c80:	b7 fe       	sbrs	r11, 7
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <vfprintf+0x290>
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	0c 5f       	subi	r16, 0xFC	; 252
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x29c>
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 5f       	subi	r16, 0xFE	; 254
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	a3 01       	movw	r20, r6
    2ca0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2ca4:	88 2e       	mov	r8, r24
    2ca6:	86 18       	sub	r8, r6
    2ca8:	fb 2d       	mov	r31, r11
    2caa:	ff 77       	andi	r31, 0x7F	; 127
    2cac:	3f 2e       	mov	r3, r31
    2cae:	36 fe       	sbrs	r3, 6
    2cb0:	0d c0       	rjmp	.+26     	; 0x2ccc <vfprintf+0x2ca>
    2cb2:	23 2d       	mov	r18, r3
    2cb4:	2e 7f       	andi	r18, 0xFE	; 254
    2cb6:	a2 2e       	mov	r10, r18
    2cb8:	89 14       	cp	r8, r9
    2cba:	58 f4       	brcc	.+22     	; 0x2cd2 <vfprintf+0x2d0>
    2cbc:	34 fe       	sbrs	r3, 4
    2cbe:	0b c0       	rjmp	.+22     	; 0x2cd6 <vfprintf+0x2d4>
    2cc0:	32 fc       	sbrc	r3, 2
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <vfprintf+0x2d4>
    2cc4:	83 2d       	mov	r24, r3
    2cc6:	8e 7e       	andi	r24, 0xEE	; 238
    2cc8:	a8 2e       	mov	r10, r24
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <vfprintf+0x2d4>
    2ccc:	b8 2c       	mov	r11, r8
    2cce:	a3 2c       	mov	r10, r3
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <vfprintf+0x2d6>
    2cd2:	b8 2c       	mov	r11, r8
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <vfprintf+0x2d6>
    2cd6:	b9 2c       	mov	r11, r9
    2cd8:	a4 fe       	sbrs	r10, 4
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <vfprintf+0x2f8>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e8 0d       	add	r30, r8
    2ce0:	f1 1d       	adc	r31, r1
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 33       	cpi	r24, 0x30	; 48
    2ce6:	21 f4       	brne	.+8      	; 0x2cf0 <vfprintf+0x2ee>
    2ce8:	9a 2d       	mov	r25, r10
    2cea:	99 7e       	andi	r25, 0xE9	; 233
    2cec:	a9 2e       	mov	r10, r25
    2cee:	09 c0       	rjmp	.+18     	; 0x2d02 <vfprintf+0x300>
    2cf0:	a2 fe       	sbrs	r10, 2
    2cf2:	06 c0       	rjmp	.+12     	; 0x2d00 <vfprintf+0x2fe>
    2cf4:	b3 94       	inc	r11
    2cf6:	b3 94       	inc	r11
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <vfprintf+0x300>
    2cfa:	8a 2d       	mov	r24, r10
    2cfc:	86 78       	andi	r24, 0x86	; 134
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <vfprintf+0x300>
    2d00:	b3 94       	inc	r11
    2d02:	a3 fc       	sbrc	r10, 3
    2d04:	11 c0       	rjmp	.+34     	; 0x2d28 <vfprintf+0x326>
    2d06:	a0 fe       	sbrs	r10, 0
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <vfprintf+0x314>
    2d0a:	b2 14       	cp	r11, r2
    2d0c:	88 f4       	brcc	.+34     	; 0x2d30 <vfprintf+0x32e>
    2d0e:	28 0c       	add	r2, r8
    2d10:	92 2c       	mov	r9, r2
    2d12:	9b 18       	sub	r9, r11
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <vfprintf+0x330>
    2d16:	b2 14       	cp	r11, r2
    2d18:	60 f4       	brcc	.+24     	; 0x2d32 <vfprintf+0x330>
    2d1a:	b6 01       	movw	r22, r12
    2d1c:	80 e2       	ldi	r24, 0x20	; 32
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d24:	b3 94       	inc	r11
    2d26:	f7 cf       	rjmp	.-18     	; 0x2d16 <vfprintf+0x314>
    2d28:	b2 14       	cp	r11, r2
    2d2a:	18 f4       	brcc	.+6      	; 0x2d32 <vfprintf+0x330>
    2d2c:	2b 18       	sub	r2, r11
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <vfprintf+0x332>
    2d30:	98 2c       	mov	r9, r8
    2d32:	21 2c       	mov	r2, r1
    2d34:	a4 fe       	sbrs	r10, 4
    2d36:	10 c0       	rjmp	.+32     	; 0x2d58 <vfprintf+0x356>
    2d38:	b6 01       	movw	r22, r12
    2d3a:	80 e3       	ldi	r24, 0x30	; 48
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d42:	a2 fe       	sbrs	r10, 2
    2d44:	17 c0       	rjmp	.+46     	; 0x2d74 <vfprintf+0x372>
    2d46:	a1 fc       	sbrc	r10, 1
    2d48:	03 c0       	rjmp	.+6      	; 0x2d50 <vfprintf+0x34e>
    2d4a:	88 e7       	ldi	r24, 0x78	; 120
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <vfprintf+0x352>
    2d50:	88 e5       	ldi	r24, 0x58	; 88
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	b6 01       	movw	r22, r12
    2d56:	0c c0       	rjmp	.+24     	; 0x2d70 <vfprintf+0x36e>
    2d58:	8a 2d       	mov	r24, r10
    2d5a:	86 78       	andi	r24, 0x86	; 134
    2d5c:	59 f0       	breq	.+22     	; 0x2d74 <vfprintf+0x372>
    2d5e:	a1 fe       	sbrs	r10, 1
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <vfprintf+0x364>
    2d62:	8b e2       	ldi	r24, 0x2B	; 43
    2d64:	01 c0       	rjmp	.+2      	; 0x2d68 <vfprintf+0x366>
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	a7 fc       	sbrc	r10, 7
    2d6a:	8d e2       	ldi	r24, 0x2D	; 45
    2d6c:	b6 01       	movw	r22, r12
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d74:	89 14       	cp	r8, r9
    2d76:	38 f4       	brcc	.+14     	; 0x2d86 <vfprintf+0x384>
    2d78:	b6 01       	movw	r22, r12
    2d7a:	80 e3       	ldi	r24, 0x30	; 48
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d82:	9a 94       	dec	r9
    2d84:	f7 cf       	rjmp	.-18     	; 0x2d74 <vfprintf+0x372>
    2d86:	8a 94       	dec	r8
    2d88:	f3 01       	movw	r30, r6
    2d8a:	e8 0d       	add	r30, r8
    2d8c:	f1 1d       	adc	r31, r1
    2d8e:	80 81       	ld	r24, Z
    2d90:	b6 01       	movw	r22, r12
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d98:	81 10       	cpse	r8, r1
    2d9a:	f5 cf       	rjmp	.-22     	; 0x2d86 <vfprintf+0x384>
    2d9c:	22 20       	and	r2, r2
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <vfprintf+0x3a0>
    2da0:	42 ce       	rjmp	.-892    	; 0x2a26 <vfprintf+0x24>
    2da2:	b6 01       	movw	r22, r12
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2dac:	2a 94       	dec	r2
    2dae:	f6 cf       	rjmp	.-20     	; 0x2d9c <vfprintf+0x39a>
    2db0:	f6 01       	movw	r30, r12
    2db2:	86 81       	ldd	r24, Z+6	; 0x06
    2db4:	97 81       	ldd	r25, Z+7	; 0x07
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <vfprintf+0x3ba>
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	9f ef       	ldi	r25, 0xFF	; 255
    2dbc:	2b 96       	adiw	r28, 0x0b	; 11
    2dbe:	e2 e1       	ldi	r30, 0x12	; 18
    2dc0:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__epilogue_restores__>

00002dc4 <strnlen_P>:
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	05 90       	lpm	r0, Z+
    2dc8:	61 50       	subi	r22, 0x01	; 1
    2dca:	70 40       	sbci	r23, 0x00	; 0
    2dcc:	01 10       	cpse	r0, r1
    2dce:	d8 f7       	brcc	.-10     	; 0x2dc6 <strnlen_P+0x2>
    2dd0:	80 95       	com	r24
    2dd2:	90 95       	com	r25
    2dd4:	8e 0f       	add	r24, r30
    2dd6:	9f 1f       	adc	r25, r31
    2dd8:	08 95       	ret

00002dda <strnlen>:
    2dda:	fc 01       	movw	r30, r24
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 90       	ld	r0, Z+
    2de2:	01 10       	cpse	r0, r1
    2de4:	d8 f7       	brcc	.-10     	; 0x2ddc <strnlen+0x2>
    2de6:	80 95       	com	r24
    2de8:	90 95       	com	r25
    2dea:	8e 0f       	add	r24, r30
    2dec:	9f 1f       	adc	r25, r31
    2dee:	08 95       	ret

00002df0 <fputc>:
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	fb 01       	movw	r30, r22
    2dfa:	23 81       	ldd	r18, Z+3	; 0x03
    2dfc:	21 fd       	sbrc	r18, 1
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <fputc+0x16>
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	9f ef       	ldi	r25, 0xFF	; 255
    2e04:	2c c0       	rjmp	.+88     	; 0x2e5e <fputc+0x6e>
    2e06:	22 ff       	sbrs	r18, 2
    2e08:	16 c0       	rjmp	.+44     	; 0x2e36 <fputc+0x46>
    2e0a:	46 81       	ldd	r20, Z+6	; 0x06
    2e0c:	57 81       	ldd	r21, Z+7	; 0x07
    2e0e:	24 81       	ldd	r18, Z+4	; 0x04
    2e10:	35 81       	ldd	r19, Z+5	; 0x05
    2e12:	42 17       	cp	r20, r18
    2e14:	53 07       	cpc	r21, r19
    2e16:	44 f4       	brge	.+16     	; 0x2e28 <fputc+0x38>
    2e18:	a0 81       	ld	r26, Z
    2e1a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1c:	9d 01       	movw	r18, r26
    2e1e:	2f 5f       	subi	r18, 0xFF	; 255
    2e20:	3f 4f       	sbci	r19, 0xFF	; 255
    2e22:	31 83       	std	Z+1, r19	; 0x01
    2e24:	20 83       	st	Z, r18
    2e26:	8c 93       	st	X, r24
    2e28:	26 81       	ldd	r18, Z+6	; 0x06
    2e2a:	37 81       	ldd	r19, Z+7	; 0x07
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	37 83       	std	Z+7, r19	; 0x07
    2e32:	26 83       	std	Z+6, r18	; 0x06
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <fputc+0x6e>
    2e36:	8b 01       	movw	r16, r22
    2e38:	ec 01       	movw	r28, r24
    2e3a:	fb 01       	movw	r30, r22
    2e3c:	00 84       	ldd	r0, Z+8	; 0x08
    2e3e:	f1 85       	ldd	r31, Z+9	; 0x09
    2e40:	e0 2d       	mov	r30, r0
    2e42:	09 95       	icall
    2e44:	89 2b       	or	r24, r25
    2e46:	e1 f6       	brne	.-72     	; 0x2e00 <fputc+0x10>
    2e48:	d8 01       	movw	r26, r16
    2e4a:	16 96       	adiw	r26, 0x06	; 6
    2e4c:	8d 91       	ld	r24, X+
    2e4e:	9c 91       	ld	r25, X
    2e50:	17 97       	sbiw	r26, 0x07	; 7
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	17 96       	adiw	r26, 0x07	; 7
    2e56:	9c 93       	st	X, r25
    2e58:	8e 93       	st	-X, r24
    2e5a:	16 97       	sbiw	r26, 0x06	; 6
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <__ultoa_invert>:
    2e68:	fa 01       	movw	r30, r20
    2e6a:	aa 27       	eor	r26, r26
    2e6c:	28 30       	cpi	r18, 0x08	; 8
    2e6e:	51 f1       	breq	.+84     	; 0x2ec4 <__ultoa_invert+0x5c>
    2e70:	20 31       	cpi	r18, 0x10	; 16
    2e72:	81 f1       	breq	.+96     	; 0x2ed4 <__ultoa_invert+0x6c>
    2e74:	e8 94       	clt
    2e76:	6f 93       	push	r22
    2e78:	6e 7f       	andi	r22, 0xFE	; 254
    2e7a:	6e 5f       	subi	r22, 0xFE	; 254
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	b1 e0       	ldi	r27, 0x01	; 1
    2e86:	3e d0       	rcall	.+124    	; 0x2f04 <__ultoa_invert+0x9c>
    2e88:	b4 e0       	ldi	r27, 0x04	; 4
    2e8a:	3c d0       	rcall	.+120    	; 0x2f04 <__ultoa_invert+0x9c>
    2e8c:	67 0f       	add	r22, r23
    2e8e:	78 1f       	adc	r23, r24
    2e90:	89 1f       	adc	r24, r25
    2e92:	9a 1f       	adc	r25, r26
    2e94:	a1 1d       	adc	r26, r1
    2e96:	68 0f       	add	r22, r24
    2e98:	79 1f       	adc	r23, r25
    2e9a:	8a 1f       	adc	r24, r26
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	6a 0f       	add	r22, r26
    2ea2:	71 1d       	adc	r23, r1
    2ea4:	81 1d       	adc	r24, r1
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	20 d0       	rcall	.+64     	; 0x2eec <__ultoa_invert+0x84>
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <__ultoa_invert+0x48>
    2eae:	68 94       	set
    2eb0:	3f 91       	pop	r19
    2eb2:	2a e0       	ldi	r18, 0x0A	; 10
    2eb4:	26 9f       	mul	r18, r22
    2eb6:	11 24       	eor	r1, r1
    2eb8:	30 19       	sub	r19, r0
    2eba:	30 5d       	subi	r19, 0xD0	; 208
    2ebc:	31 93       	st	Z+, r19
    2ebe:	de f6       	brtc	.-74     	; 0x2e76 <__ultoa_invert+0xe>
    2ec0:	cf 01       	movw	r24, r30
    2ec2:	08 95       	ret
    2ec4:	46 2f       	mov	r20, r22
    2ec6:	47 70       	andi	r20, 0x07	; 7
    2ec8:	40 5d       	subi	r20, 0xD0	; 208
    2eca:	41 93       	st	Z+, r20
    2ecc:	b3 e0       	ldi	r27, 0x03	; 3
    2ece:	0f d0       	rcall	.+30     	; 0x2eee <__ultoa_invert+0x86>
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0x5c>
    2ed2:	f6 cf       	rjmp	.-20     	; 0x2ec0 <__ultoa_invert+0x58>
    2ed4:	46 2f       	mov	r20, r22
    2ed6:	4f 70       	andi	r20, 0x0F	; 15
    2ed8:	40 5d       	subi	r20, 0xD0	; 208
    2eda:	4a 33       	cpi	r20, 0x3A	; 58
    2edc:	18 f0       	brcs	.+6      	; 0x2ee4 <__ultoa_invert+0x7c>
    2ede:	49 5d       	subi	r20, 0xD9	; 217
    2ee0:	31 fd       	sbrc	r19, 1
    2ee2:	40 52       	subi	r20, 0x20	; 32
    2ee4:	41 93       	st	Z+, r20
    2ee6:	02 d0       	rcall	.+4      	; 0x2eec <__ultoa_invert+0x84>
    2ee8:	a9 f7       	brne	.-22     	; 0x2ed4 <__ultoa_invert+0x6c>
    2eea:	ea cf       	rjmp	.-44     	; 0x2ec0 <__ultoa_invert+0x58>
    2eec:	b4 e0       	ldi	r27, 0x04	; 4
    2eee:	a6 95       	lsr	r26
    2ef0:	97 95       	ror	r25
    2ef2:	87 95       	ror	r24
    2ef4:	77 95       	ror	r23
    2ef6:	67 95       	ror	r22
    2ef8:	ba 95       	dec	r27
    2efa:	c9 f7       	brne	.-14     	; 0x2eee <__ultoa_invert+0x86>
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	61 05       	cpc	r22, r1
    2f00:	71 05       	cpc	r23, r1
    2f02:	08 95       	ret
    2f04:	9b 01       	movw	r18, r22
    2f06:	ac 01       	movw	r20, r24
    2f08:	0a 2e       	mov	r0, r26
    2f0a:	06 94       	lsr	r0
    2f0c:	57 95       	ror	r21
    2f0e:	47 95       	ror	r20
    2f10:	37 95       	ror	r19
    2f12:	27 95       	ror	r18
    2f14:	ba 95       	dec	r27
    2f16:	c9 f7       	brne	.-14     	; 0x2f0a <__ultoa_invert+0xa2>
    2f18:	62 0f       	add	r22, r18
    2f1a:	73 1f       	adc	r23, r19
    2f1c:	84 1f       	adc	r24, r20
    2f1e:	95 1f       	adc	r25, r21
    2f20:	a0 1d       	adc	r26, r0
    2f22:	08 95       	ret

00002f24 <__prologue_saves__>:
    2f24:	2f 92       	push	r2
    2f26:	3f 92       	push	r3
    2f28:	4f 92       	push	r4
    2f2a:	5f 92       	push	r5
    2f2c:	6f 92       	push	r6
    2f2e:	7f 92       	push	r7
    2f30:	8f 92       	push	r8
    2f32:	9f 92       	push	r9
    2f34:	af 92       	push	r10
    2f36:	bf 92       	push	r11
    2f38:	cf 92       	push	r12
    2f3a:	df 92       	push	r13
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	ca 1b       	sub	r28, r26
    2f4e:	db 0b       	sbc	r29, r27
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	09 94       	ijmp

00002f5c <__epilogue_restores__>:
    2f5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2f5e:	39 88       	ldd	r3, Y+17	; 0x11
    2f60:	48 88       	ldd	r4, Y+16	; 0x10
    2f62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2f70:	c8 84       	ldd	r12, Y+8	; 0x08
    2f72:	df 80       	ldd	r13, Y+7	; 0x07
    2f74:	ee 80       	ldd	r14, Y+6	; 0x06
    2f76:	fd 80       	ldd	r15, Y+5	; 0x05
    2f78:	0c 81       	ldd	r16, Y+4	; 0x04
    2f7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2f7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2f7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2f80:	ce 0f       	add	r28, r30
    2f82:	d1 1d       	adc	r29, r1
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	ed 01       	movw	r28, r26
    2f90:	08 95       	ret

00002f92 <__do_global_dtors>:
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	cf e5       	ldi	r28, 0x5F	; 95
    2f96:	d0 e0       	ldi	r29, 0x00	; 0
    2f98:	04 c0       	rjmp	.+8      	; 0x2fa2 <__do_global_dtors+0x10>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__tablejump2__>
    2fa0:	21 96       	adiw	r28, 0x01	; 1
    2fa2:	c0 36       	cpi	r28, 0x60	; 96
    2fa4:	d1 07       	cpc	r29, r17
    2fa6:	c9 f7       	brne	.-14     	; 0x2f9a <__do_global_dtors+0x8>
    2fa8:	f8 94       	cli

00002faa <__stop_program>:
    2faa:	ff cf       	rjmp	.-2      	; 0x2faa <__stop_program>
