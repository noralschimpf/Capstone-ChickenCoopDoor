
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00002d84  00002e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a3  008001f8  008001f8  00002f10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010e52  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bf2  00000000  00000000  00014676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045da  00000000  00000000  00017268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001aa8  00000000  00000000  0001b844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000334a  00000000  00000000  0001d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009894  00000000  00000000  00020636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000848  00000000  00000000  00029eca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_18>
      4c:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	00 04       	cpc	r0, r0
      ba:	bf 05       	cpc	r27, r15
      bc:	7c 0f       	add	r23, r28

000000be <__ctors_end>:
      be:	10 04       	cpc	r1, r0

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e4 e8       	ldi	r30, 0x84	; 132
      d4:	fd e2       	ldi	r31, 0x2D	; 45
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a8 3f       	cpi	r26, 0xF8	; 248
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	23 e0       	ldi	r18, 0x03	; 3
      e4:	a8 ef       	ldi	r26, 0xF8	; 248
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	ab 39       	cpi	r26, 0x9B	; 155
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 ce 11 	call	0x239c	; 0x239c <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 ed 05 	call	0xbda	; 0xbda <main>
     10c:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN7Display8print2lnE6StringS0_>:
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
     122:	7b 01       	movw	r14, r22
     124:	8a 01       	movw	r16, r20
     126:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN21Adafruit_RGBLCDShield5clearEv>
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	ce 01       	movw	r24, r28
     130:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     134:	b7 01       	movw	r22, r14
     136:	ce 01       	movw	r24, r28
     138:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN5Print5printERK6String>
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	ce 01       	movw	r24, r28
     142:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     146:	b8 01       	movw	r22, r16
     148:	ce 01       	movw	r24, r28
     14a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN5Print5printERK6String>
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	ce 01       	movw	r24, r28
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

00000164 <_ZN7Display11refreshLineEv>:
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	2c 97       	sbiw	r28, 0x0c	; 12
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
     17c:	8c 01       	movw	r16, r24
     17e:	6c ec       	ldi	r22, 0xCC	; 204
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	ce 01       	movw	r24, r28
     184:	07 96       	adiw	r24, 0x07	; 7
     186:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     18a:	f8 01       	movw	r30, r16
     18c:	82 a5       	ldd	r24, Z+42	; 0x2a
     18e:	93 a5       	ldd	r25, Z+43	; 0x2b
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	19 f0       	breq	.+6      	; 0x19a <_ZN7Display11refreshLineEv+0x36>
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	41 f0       	breq	.+16     	; 0x1a8 <_ZN7Display11refreshLineEv+0x44>
     198:	0e c0       	rjmp	.+28     	; 0x1b6 <_ZN7Display11refreshLineEv+0x52>
     19a:	b8 01       	movw	r22, r16
     19c:	60 5d       	subi	r22, 0xD0	; 208
     19e:	7f 4f       	sbci	r23, 0xFF	; 255
     1a0:	ce 01       	movw	r24, r28
     1a2:	07 96       	adiw	r24, 0x07	; 7
     1a4:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN6StringaSERKS_>
     1a8:	b8 01       	movw	r22, r16
     1aa:	6a 5c       	subi	r22, 0xCA	; 202
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	ce 01       	movw	r24, r28
     1b0:	07 96       	adiw	r24, 0x07	; 7
     1b2:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN6StringaSERKS_>
     1b6:	f8 01       	movw	r30, r16
     1b8:	46 a5       	ldd	r20, Z+46	; 0x2e
     1ba:	57 a5       	ldd	r21, Z+47	; 0x2f
     1bc:	84 a5       	ldd	r24, Z+44	; 0x2c
     1be:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c0:	48 17       	cp	r20, r24
     1c2:	59 07       	cpc	r21, r25
     1c4:	14 f4       	brge	.+4      	; 0x1ca <_ZN7Display11refreshLineEv+0x66>
     1c6:	15 a6       	std	Z+45, r1	; 0x2d
     1c8:	14 a6       	std	Z+44, r1	; 0x2c
     1ca:	f8 01       	movw	r30, r16
     1cc:	24 a5       	ldd	r18, Z+44	; 0x2c
     1ce:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <_ZN7Display11refreshLineEv+0x82>
     1d6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1d8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1da:	94 e0       	ldi	r25, 0x04	; 4
     1dc:	44 0f       	add	r20, r20
     1de:	55 1f       	adc	r21, r21
     1e0:	9a 95       	dec	r25
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <_ZN7Display11refreshLineEv+0x78>
     1e4:	0a c0       	rjmp	.+20     	; 0x1fa <_ZN7Display11refreshLineEv+0x96>
     1e6:	2f 5f       	subi	r18, 0xFF	; 255
     1e8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	22 0f       	add	r18, r18
     1ee:	33 1f       	adc	r19, r19
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <_ZN7Display11refreshLineEv+0x88>
     1f4:	a9 01       	movw	r20, r18
     1f6:	40 51       	subi	r20, 0x10	; 16
     1f8:	51 09       	sbc	r21, r1
     1fa:	be 01       	movw	r22, r28
     1fc:	69 5f       	subi	r22, 0xF9	; 249
     1fe:	7f 4f       	sbci	r23, 0xFF	; 255
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZNK6String9substringEjj>
     208:	be 01       	movw	r22, r28
     20a:	6f 5f       	subi	r22, 0xFF	; 255
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	ce 01       	movw	r24, r28
     210:	07 96       	adiw	r24, 0x07	; 7
     212:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN6StringaSEOS_>
     216:	ce 01       	movw	r24, r28
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     21e:	f8 01       	movw	r30, r16
     220:	42 a5       	ldd	r20, Z+42	; 0x2a
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	c8 01       	movw	r24, r16
     226:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     22a:	be 01       	movw	r22, r28
     22c:	69 5f       	subi	r22, 0xF9	; 249
     22e:	7f 4f       	sbci	r23, 0xFF	; 255
     230:	c8 01       	movw	r24, r16
     232:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN5Print5printERK6String>
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	c8 01       	movw	r24, r16
     23c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     240:	f8 01       	movw	r30, r16
     242:	04 a5       	ldd	r16, Z+44	; 0x2c
     244:	15 a5       	ldd	r17, Z+45	; 0x2d
     246:	0f 5f       	subi	r16, 0xFF	; 255
     248:	1f 4f       	sbci	r17, 0xFF	; 255
     24a:	ce 01       	movw	r24, r28
     24c:	07 96       	adiw	r24, 0x07	; 7
     24e:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     252:	c8 01       	movw	r24, r16
     254:	2c 96       	adiw	r28, 0x0c	; 12
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     26a:	4f 92       	push	r4
     26c:	5f 92       	push	r5
     26e:	6f 92       	push	r6
     270:	7f 92       	push	r7
     272:	8f 92       	push	r8
     274:	9f 92       	push	r9
     276:	af 92       	push	r10
     278:	bf 92       	push	r11
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	2c 97       	sbiw	r28, 0x0c	; 12
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	4c 01       	movw	r8, r24
     29c:	3b 01       	movw	r6, r22
     29e:	2a 01       	movw	r4, r20
     2a0:	b2 2e       	mov	r11, r18
     2a2:	c0 96       	adiw	r24, 0x30	; 48
     2a4:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN6StringaSERKS_>
     2a8:	b2 01       	movw	r22, r4
     2aa:	c4 01       	movw	r24, r8
     2ac:	c6 96       	adiw	r24, 0x36	; 54
     2ae:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN6StringaSERKS_>
     2b2:	f4 01       	movw	r30, r8
     2b4:	f7 a6       	std	Z+47, r15	; 0x2f
     2b6:	e6 a6       	std	Z+46, r14	; 0x2e
     2b8:	d3 a6       	std	Z+43, r13	; 0x2b
     2ba:	c2 a6       	std	Z+42, r12	; 0x2a
     2bc:	f8 01       	movw	r30, r16
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	f4 01       	movw	r30, r8
     2c4:	97 8f       	std	Z+31, r25	; 0x1f
     2c6:	86 8f       	std	Z+30, r24	; 0x1e
     2c8:	f8 01       	movw	r30, r16
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	93 81       	ldd	r25, Z+3	; 0x03
     2ce:	f4 01       	movw	r30, r8
     2d0:	91 a3       	std	Z+33, r25	; 0x21
     2d2:	80 a3       	std	Z+32, r24	; 0x20
     2d4:	f8 01       	movw	r30, r16
     2d6:	84 81       	ldd	r24, Z+4	; 0x04
     2d8:	95 81       	ldd	r25, Z+5	; 0x05
     2da:	f4 01       	movw	r30, r8
     2dc:	93 a3       	std	Z+35, r25	; 0x23
     2de:	82 a3       	std	Z+34, r24	; 0x22
     2e0:	f8 01       	movw	r30, r16
     2e2:	86 81       	ldd	r24, Z+6	; 0x06
     2e4:	97 81       	ldd	r25, Z+7	; 0x07
     2e6:	f4 01       	movw	r30, r8
     2e8:	95 a3       	std	Z+37, r25	; 0x25
     2ea:	84 a3       	std	Z+36, r24	; 0x24
     2ec:	f8 01       	movw	r30, r16
     2ee:	80 85       	ldd	r24, Z+8	; 0x08
     2f0:	91 85       	ldd	r25, Z+9	; 0x09
     2f2:	f4 01       	movw	r30, r8
     2f4:	97 a3       	std	Z+39, r25	; 0x27
     2f6:	86 a3       	std	Z+38, r24	; 0x26
     2f8:	6b 2d       	mov	r22, r11
     2fa:	c4 01       	movw	r24, r8
     2fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     300:	f4 01       	movw	r30, r8
     302:	a4 ae       	std	Z+60, r10	; 0x3c
     304:	a1 10       	cpse	r10, r1
     306:	1e c0       	rjmp	.+60     	; 0x344 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     308:	15 a6       	std	Z+45, r1	; 0x2d
     30a:	14 a6       	std	Z+44, r1	; 0x2c
     30c:	b2 01       	movw	r22, r4
     30e:	ce 01       	movw	r24, r28
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN6StringC1ERKS_>
     316:	b3 01       	movw	r22, r6
     318:	ce 01       	movw	r24, r28
     31a:	07 96       	adiw	r24, 0x07	; 7
     31c:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN6StringC1ERKS_>
     320:	ae 01       	movw	r20, r28
     322:	4f 5f       	subi	r20, 0xFF	; 255
     324:	5f 4f       	sbci	r21, 0xFF	; 255
     326:	be 01       	movw	r22, r28
     328:	69 5f       	subi	r22, 0xF9	; 249
     32a:	7f 4f       	sbci	r23, 0xFF	; 255
     32c:	c4 01       	movw	r24, r8
     32e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7Display8print2lnE6StringS0_>
     332:	ce 01       	movw	r24, r28
     334:	07 96       	adiw	r24, 0x07	; 7
     336:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     342:	06 c0       	rjmp	.+12     	; 0x350 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     344:	c4 01       	movw	r24, r8
     346:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN7Display11refreshLineEv>
     34a:	f4 01       	movw	r30, r8
     34c:	95 a7       	std	Z+45, r25	; 0x2d
     34e:	84 a7       	std	Z+44, r24	; 0x2c
     350:	2c 96       	adiw	r28, 0x0c	; 12
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	7f 90       	pop	r7
     376:	6f 90       	pop	r6
     378:	5f 90       	pop	r5
     37a:	4f 90       	pop	r4
     37c:	08 95       	ret

0000037e <_ZN7Display13selectDisplayEibPcS0_>:
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	ac 97       	sbiw	r28, 0x2c	; 44
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	4c 01       	movw	r8, r24
     3a6:	c8 01       	movw	r24, r16
     3a8:	44 23       	and	r20, r20
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3ac:	c4 01       	movw	r24, r8
     3ae:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN7Display11refreshLineEv>
     3b2:	9e c0       	rjmp	.+316    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     3b4:	8e 01       	movw	r16, r28
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	62 30       	cpi	r22, 0x02	; 2
     3bc:	71 05       	cpc	r23, r1
     3be:	59 f1       	breq	.+86     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3c0:	ec f4       	brge	.+58     	; 0x3fc <_ZN7Display13selectDisplayEibPcS0_+0x7e>
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <_ZN7Display13selectDisplayEibPcS0_+0x4c>
     3c8:	59 c0       	rjmp	.+178    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	71 05       	cpc	r23, r1
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d0:	55 c0       	rjmp	.+170    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     3d2:	1a 82       	std	Y+2, r1	; 0x02
     3d4:	19 82       	std	Y+1, r1	; 0x01
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	8b 83       	std	Y+3, r24	; 0x03
     3de:	9e 83       	std	Y+6, r25	; 0x06
     3e0:	8d 83       	std	Y+5, r24	; 0x05
     3e2:	98 87       	std	Y+8, r25	; 0x08
     3e4:	8f 83       	std	Y+7, r24	; 0x07
     3e6:	9a 87       	std	Y+10, r25	; 0x0a
     3e8:	89 87       	std	Y+9, r24	; 0x09
     3ea:	69 e3       	ldi	r22, 0x39	; 57
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	ce 01       	movw	r24, r28
     3f0:	81 96       	adiw	r24, 0x21	; 33
     3f2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     3f6:	64 e4       	ldi	r22, 0x44	; 68
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	21 c0       	rjmp	.+66     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3fc:	63 30       	cpi	r22, 0x03	; 3
     3fe:	71 05       	cpc	r23, r1
     400:	59 f1       	breq	.+86     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     402:	64 30       	cpi	r22, 0x04	; 4
     404:	71 05       	cpc	r23, r1
     406:	d1 f5       	brne	.+116    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	3f 93       	push	r19
     40e:	2f 93       	push	r18
     410:	8c e7       	ldi	r24, 0x7C	; 124
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	27 c0       	rjmp	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	19 82       	std	Y+1, r1	; 0x01
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	9f ef       	ldi	r25, 0xFF	; 255
     41e:	9c 83       	std	Y+4, r25	; 0x04
     420:	8b 83       	std	Y+3, r24	; 0x03
     422:	9e 83       	std	Y+6, r25	; 0x06
     424:	8d 83       	std	Y+5, r24	; 0x05
     426:	98 87       	std	Y+8, r25	; 0x08
     428:	8f 83       	std	Y+7, r24	; 0x07
     42a:	9a 87       	std	Y+10, r25	; 0x0a
     42c:	89 87       	std	Y+9, r24	; 0x09
     42e:	69 e3       	ldi	r22, 0x39	; 57
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	ce 01       	movw	r24, r28
     434:	81 96       	adiw	r24, 0x21	; 33
     436:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     43a:	61 e5       	ldi	r22, 0x51	; 81
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	ce 01       	movw	r24, r28
     440:	87 96       	adiw	r24, 0x27	; 39
     442:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     446:	a1 2c       	mov	r10, r1
     448:	cc 24       	eor	r12, r12
     44a:	ca 94       	dec	r12
     44c:	dc 2c       	mov	r13, r12
     44e:	e1 2c       	mov	r14, r1
     450:	f1 2c       	mov	r15, r1
     452:	23 e0       	ldi	r18, 0x03	; 3
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	3b c0       	rjmp	.+118    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	3f 93       	push	r19
     45e:	2f 93       	push	r18
     460:	8e e5       	ldi	r24, 0x5E	; 94
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9f 93       	push	r25
     466:	8f 93       	push	r24
     468:	1f 93       	push	r17
     46a:	0f 93       	push	r16
     46c:	0e 94 cb 13 	call	0x2796	; 0x2796 <sprintf>
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	3a c0       	rjmp	.+116    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	9f ef       	ldi	r25, 0xFF	; 255
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9c 83       	std	Y+4, r25	; 0x04
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9e 83       	std	Y+6, r25	; 0x06
     492:	8d 83       	std	Y+5, r24	; 0x05
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	98 87       	std	Y+8, r25	; 0x08
     49a:	8f 83       	std	Y+7, r24	; 0x07
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9a 87       	std	Y+10, r25	; 0x0a
     4a2:	89 87       	std	Y+9, r24	; 0x09
     4a4:	6f e0       	ldi	r22, 0x0F	; 15
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	ce 01       	movw	r24, r28
     4aa:	81 96       	adiw	r24, 0x21	; 33
     4ac:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     4b0:	6f e2       	ldi	r22, 0x2F	; 47
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	ce 01       	movw	r24, r28
     4b6:	87 96       	adiw	r24, 0x27	; 39
     4b8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     4bc:	a1 2c       	mov	r10, r1
     4be:	cc 24       	eor	r12, r12
     4c0:	c3 94       	inc	r12
     4c2:	d1 2c       	mov	r13, r1
     4c4:	ee 24       	eor	r14, r14
     4c6:	e3 94       	inc	r14
     4c8:	f1 2c       	mov	r15, r1
     4ca:	22 e0       	ldi	r18, 0x02	; 2
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	ae 01       	movw	r20, r28
     4d0:	4f 5d       	subi	r20, 0xDF	; 223
     4d2:	5f 4f       	sbci	r21, 0xFF	; 255
     4d4:	be 01       	movw	r22, r28
     4d6:	69 5d       	subi	r22, 0xD9	; 217
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	c4 01       	movw	r24, r8
     4dc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     4e0:	ce 01       	movw	r24, r28
     4e2:	87 96       	adiw	r24, 0x27	; 39
     4e4:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     4e8:	ce 01       	movw	r24, r28
     4ea:	81 96       	adiw	r24, 0x21	; 33
     4ec:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     4f0:	ac 96       	adiw	r28, 0x2c	; 44
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	df 90       	pop	r13
     50a:	cf 90       	pop	r12
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	08 95       	ret

00000514 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	fb 01       	movw	r30, r22
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
     528:	8d ed       	ldi	r24, 0xDD	; 221
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	99 83       	std	Y+1, r25	; 0x01
     52e:	88 83       	st	Y, r24
     530:	84 81       	ldd	r24, Z+4	; 0x04
     532:	8c 83       	std	Y+4, r24	; 0x04
     534:	85 81       	ldd	r24, Z+5	; 0x05
     536:	8d 83       	std	Y+5, r24	; 0x05
     538:	86 81       	ldd	r24, Z+6	; 0x06
     53a:	8e 83       	std	Y+6, r24	; 0x06
     53c:	88 e0       	ldi	r24, 0x08	; 8
     53e:	37 96       	adiw	r30, 0x07	; 7
     540:	de 01       	movw	r26, r28
     542:	17 96       	adiw	r26, 0x07	; 7
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	fb 01       	movw	r30, r22
     550:	3f 96       	adiw	r30, 0x0f	; 15
     552:	de 01       	movw	r26, r28
     554:	1f 96       	adiw	r26, 0x0f	; 15
     556:	01 90       	ld	r0, Z+
     558:	0d 92       	st	X+, r0
     55a:	8a 95       	dec	r24
     55c:	e1 f7       	brne	.-8      	; 0x556 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     55e:	fb 01       	movw	r30, r22
     560:	84 89       	ldd	r24, Z+20	; 0x14
     562:	8c 8b       	std	Y+20, r24	; 0x14
     564:	85 89       	ldd	r24, Z+21	; 0x15
     566:	8d 8b       	std	Y+21, r24	; 0x15
     568:	86 89       	ldd	r24, Z+22	; 0x16
     56a:	8e 8b       	std	Y+22, r24	; 0x16
     56c:	87 89       	ldd	r24, Z+23	; 0x17
     56e:	8f 8b       	std	Y+23, r24	; 0x17
     570:	80 8d       	ldd	r24, Z+24	; 0x18
     572:	88 8f       	std	Y+24, r24	; 0x18
     574:	81 8d       	ldd	r24, Z+25	; 0x19
     576:	89 8f       	std	Y+25, r24	; 0x19
     578:	82 8d       	ldd	r24, Z+26	; 0x1a
     57a:	8a 8f       	std	Y+26, r24	; 0x1a
     57c:	83 8d       	ldd	r24, Z+27	; 0x1b
     57e:	8b 8f       	std	Y+27, r24	; 0x1b
     580:	6c ec       	ldi	r22, 0xCC	; 204
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	ce 01       	movw	r24, r28
     586:	c0 96       	adiw	r24, 0x30	; 48
     588:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     58c:	6c ec       	ldi	r22, 0xCC	; 204
     58e:	71 e0       	ldi	r23, 0x01	; 1
     590:	ce 01       	movw	r24, r28
     592:	c6 96       	adiw	r24, 0x36	; 54
     594:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	42 e0       	ldi	r20, 0x02	; 2
     59c:	60 e1       	ldi	r22, 0x10	; 16
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN21Adafruit_RGBLCDShield5clearEv>
     5aa:	0c ec       	ldi	r16, 0xCC	; 204
     5ac:	11 e0       	ldi	r17, 0x01	; 1
     5ae:	98 01       	movw	r18, r16
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN7Display13selectDisplayEibPcS0_>
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <_ZN7Display21UpdateMenuFromButtonsEv>:
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
     5d0:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     5d4:	80 ff       	sbrs	r24, 0
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <_ZN7Display21UpdateMenuFromButtonsEv+0x1e>
     5d8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     5da:	7f 8d       	ldd	r23, Y+31	; 0x1f
     5dc:	6f 3f       	cpi	r22, 0xFF	; 255
     5de:	9f ef       	ldi	r25, 0xFF	; 255
     5e0:	79 07       	cpc	r23, r25
     5e2:	01 f5       	brne	.+64     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     5e4:	83 ff       	sbrs	r24, 3
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <_ZN7Display21UpdateMenuFromButtonsEv+0x2e>
     5e8:	68 a1       	ldd	r22, Y+32	; 0x20
     5ea:	79 a1       	ldd	r23, Y+33	; 0x21
     5ec:	6f 3f       	cpi	r22, 0xFF	; 255
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	79 07       	cpc	r23, r25
     5f2:	c1 f4       	brne	.+48     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     5f4:	82 ff       	sbrs	r24, 2
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <_ZN7Display21UpdateMenuFromButtonsEv+0x3e>
     5f8:	6a a1       	ldd	r22, Y+34	; 0x22
     5fa:	7b a1       	ldd	r23, Y+35	; 0x23
     5fc:	6f 3f       	cpi	r22, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	79 07       	cpc	r23, r25
     602:	81 f4       	brne	.+32     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     604:	84 ff       	sbrs	r24, 4
     606:	06 c0       	rjmp	.+12     	; 0x614 <_ZN7Display21UpdateMenuFromButtonsEv+0x4e>
     608:	6c a1       	ldd	r22, Y+36	; 0x24
     60a:	7d a1       	ldd	r23, Y+37	; 0x25
     60c:	6f 3f       	cpi	r22, 0xFF	; 255
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	79 07       	cpc	r23, r25
     612:	41 f4       	brne	.+16     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     614:	81 ff       	sbrs	r24, 1
     616:	12 c0       	rjmp	.+36     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     618:	6e a1       	ldd	r22, Y+38	; 0x26
     61a:	7f a1       	ldd	r23, Y+39	; 0x27
     61c:	6f 3f       	cpi	r22, 0xFF	; 255
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	78 07       	cpc	r23, r24
     622:	61 f0       	breq	.+24     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     624:	0c ec       	ldi	r16, 0xCC	; 204
     626:	11 e0       	ldi	r17, 0x01	; 1
     628:	98 01       	movw	r18, r16
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN7Display13selectDisplayEibPcS0_>
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret
     63c:	ce 01       	movw	r24, r28
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	0c 94 b2 00 	jmp	0x164	; 0x164 <_ZN7Display11refreshLineEv>

0000064a <_ZN6SafetyC1Ev>:
     64a:	08 95       	ret

0000064c <setup>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	6c 97       	sbiw	r28, 0x1c	; 28
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	26 e0       	ldi	r18, 0x06	; 6
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	55 e2       	ldi	r21, 0x25	; 37
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	8d e2       	ldi	r24, 0x2D	; 45
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN14HardwareSerial5beginEmh>
     676:	8c ef       	ldi	r24, 0xFC	; 252
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	fc 01       	movw	r30, r24
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	33 81       	ldd	r19, Z+3	; 0x03
     680:	3c 83       	std	Y+4, r19	; 0x04
     682:	2b 83       	std	Y+3, r18	; 0x03
     684:	2d ed       	ldi	r18, 0xDD	; 221
     686:	31 e0       	ldi	r19, 0x01	; 1
     688:	3a 83       	std	Y+2, r19	; 0x02
     68a:	29 83       	std	Y+1, r18	; 0x01
     68c:	24 81       	ldd	r18, Z+4	; 0x04
     68e:	2d 83       	std	Y+5, r18	; 0x05
     690:	25 81       	ldd	r18, Z+5	; 0x05
     692:	2e 83       	std	Y+6, r18	; 0x06
     694:	26 81       	ldd	r18, Z+6	; 0x06
     696:	2f 83       	std	Y+7, r18	; 0x07
     698:	28 e0       	ldi	r18, 0x08	; 8
     69a:	e3 e0       	ldi	r30, 0x03	; 3
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	de 01       	movw	r26, r28
     6a0:	18 96       	adiw	r26, 0x08	; 8
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	2a 95       	dec	r18
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <setup+0x56>
     6aa:	25 e0       	ldi	r18, 0x05	; 5
     6ac:	eb e0       	ldi	r30, 0x0B	; 11
     6ae:	f2 e0       	ldi	r31, 0x02	; 2
     6b0:	de 01       	movw	r26, r28
     6b2:	50 96       	adiw	r26, 0x10	; 16
     6b4:	01 90       	ld	r0, Z+
     6b6:	0d 92       	st	X+, r0
     6b8:	2a 95       	dec	r18
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <setup+0x68>
     6bc:	fc 01       	movw	r30, r24
     6be:	24 89       	ldd	r18, Z+20	; 0x14
     6c0:	2d 8b       	std	Y+21, r18	; 0x15
     6c2:	25 89       	ldd	r18, Z+21	; 0x15
     6c4:	2e 8b       	std	Y+22, r18	; 0x16
     6c6:	26 89       	ldd	r18, Z+22	; 0x16
     6c8:	2f 8b       	std	Y+23, r18	; 0x17
     6ca:	27 89       	ldd	r18, Z+23	; 0x17
     6cc:	28 8f       	std	Y+24, r18	; 0x18
     6ce:	20 8d       	ldd	r18, Z+24	; 0x18
     6d0:	29 8f       	std	Y+25, r18	; 0x19
     6d2:	21 8d       	ldd	r18, Z+25	; 0x19
     6d4:	2a 8f       	std	Y+26, r18	; 0x1a
     6d6:	22 8d       	ldd	r18, Z+26	; 0x1a
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	83 8d       	ldd	r24, Z+27	; 0x1b
     6dc:	8c 8f       	std	Y+28, r24	; 0x1c
     6de:	8d e3       	ldi	r24, 0x3D	; 61
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_Znwj>
     6e6:	8c 01       	movw	r16, r24
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     6f2:	10 93 fb 01 	sts	0x01FB, r17	; 0x8001fb <ptrdspMainDoor+0x1>
     6f6:	00 93 fa 01 	sts	0x01FA, r16	; 0x8001fa <ptrdspMainDoor>
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_Znwj>
     702:	8c 01       	movw	r16, r24
     704:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6SafetyC1Ev>
     708:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <__data_end+0x1>
     70c:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <__data_end>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8a e0       	ldi	r24, 0x0A	; 10
     714:	0e 94 8a 07 	call	0xf14	; 0xf14 <pinMode>
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	0e 94 8a 07 	call	0xf14	; 0xf14 <pinMode>
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 8a 07 	call	0xf14	; 0xf14 <pinMode>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 5e 07 	call	0xebc	; 0xebc <analogReference>
     72e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <isClosing>
     732:	ec eb       	ldi	r30, 0xBC	; 188
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	80 83       	st	Z, r24
     73c:	78 94       	sei
     73e:	6a e9       	ldi	r22, 0x9A	; 154
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	8d e2       	ldi	r24, 0x2D	; 45
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN5Print7printlnEPKc>
     74a:	6c 96       	adiw	r28, 0x1c	; 28
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <loop>:
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	68 eb       	ldi	r22, 0xB8	; 184
     766:	7b e0       	ldi	r23, 0x0B	; 11
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <delay>
     770:	68 ea       	ldi	r22, 0xA8	; 168
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	8d e2       	ldi	r24, 0x2D	; 45
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN5Print7printlnEPKc>
     77c:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <CurrentMenu>
     780:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <CurrentMenu+0x1>
     784:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <MenuSelect>
     788:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <MenuSelect+0x1>
     78c:	28 17       	cp	r18, r24
     78e:	39 07       	cpc	r19, r25
     790:	39 f0       	breq	.+14     	; 0x7a0 <loop+0x40>
     792:	60 eb       	ldi	r22, 0xB0	; 176
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	8d e2       	ldi	r24, 0x2D	; 45
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN5Print7printlnEPKc>
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <loop+0x6a>
     7a0:	0e 94 ab 06 	call	0xd56	; 0xd56 <millis>
     7a4:	00 91 25 02 	lds	r16, 0x0225	; 0x800225 <MenuLastUpdated>
     7a8:	10 91 26 02 	lds	r17, 0x0226	; 0x800226 <MenuLastUpdated+0x1>
     7ac:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <MenuLastUpdated+0x2>
     7b0:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <MenuLastUpdated+0x3>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	80 1b       	sub	r24, r16
     7ba:	91 0b       	sbc	r25, r17
     7bc:	a2 0b       	sbc	r26, r18
     7be:	b3 0b       	sbc	r27, r19
     7c0:	89 3b       	cpi	r24, 0xB9	; 185
     7c2:	9b 40       	sbci	r25, 0x0B	; 11
     7c4:	a1 05       	cpc	r26, r1
     7c6:	b1 05       	cpc	r27, r1
     7c8:	c0 f0       	brcs	.+48     	; 0x7fa <loop+0x9a>
     7ca:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <ptrdspMainDoor>
     7ce:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <ptrdspMainDoor+0x1>
     7d2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN7Display21UpdateMenuFromButtonsEv>
     7d6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <MenuSelect>
     7da:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <MenuSelect+0x1>
     7de:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <CurrentMenu+0x1>
     7e2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <CurrentMenu>
     7e6:	0e 94 ab 06 	call	0xd56	; 0xd56 <millis>
     7ea:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <MenuLastUpdated>
     7ee:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <MenuLastUpdated+0x1>
     7f2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <MenuLastUpdated+0x2>
     7f6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <MenuLastUpdated+0x3>
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <_GLOBAL__sub_I_Temperature>:
     800:	6c ec       	ldi	r22, 0xCC	; 204
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	8f e1       	ldi	r24, 0x1F	; 31
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     80c:	6c ec       	ldi	r22, 0xCC	; 204
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	89 e1       	ldi	r24, 0x19	; 25
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
     818:	8c ef       	ldi	r24, 0xFC	; 252
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000820 <_GLOBAL__sub_D_Temperature>:
     820:	89 e1       	ldi	r24, 0x19	; 25
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6StringD1Ev>
     828:	8f e1       	ldi	r24, 0x1F	; 31
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_ZN6StringD1Ev>

00000830 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     830:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     832:	91 8d       	ldd	r25, Z+25	; 0x19
     834:	22 8d       	ldd	r18, Z+26	; 0x1a
     836:	89 2f       	mov	r24, r25
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	80 5c       	subi	r24, 0xC0	; 192
     83c:	9f 4f       	sbci	r25, 0xFF	; 255
     83e:	82 1b       	sub	r24, r18
     840:	91 09       	sbc	r25, r1
}
     842:	8f 73       	andi	r24, 0x3F	; 63
     844:	99 27       	eor	r25, r25
     846:	08 95       	ret

00000848 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     848:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     84a:	91 8d       	ldd	r25, Z+25	; 0x19
     84c:	82 8d       	ldd	r24, Z+26	; 0x1a
     84e:	98 17       	cp	r25, r24
     850:	31 f0       	breq	.+12     	; 0x85e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     852:	82 8d       	ldd	r24, Z+26	; 0x1a
     854:	e8 0f       	add	r30, r24
     856:	f1 1d       	adc	r31, r1
     858:	85 8d       	ldd	r24, Z+29	; 0x1d
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     862:	08 95       	ret

00000864 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     864:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     866:	91 8d       	ldd	r25, Z+25	; 0x19
     868:	82 8d       	ldd	r24, Z+26	; 0x1a
     86a:	98 17       	cp	r25, r24
     86c:	61 f0       	breq	.+24     	; 0x886 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     86e:	82 8d       	ldd	r24, Z+26	; 0x1a
     870:	df 01       	movw	r26, r30
     872:	a8 0f       	add	r26, r24
     874:	b1 1d       	adc	r27, r1
     876:	5d 96       	adiw	r26, 0x1d	; 29
     878:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     87a:	92 8d       	ldd	r25, Z+26	; 0x1a
     87c:	9f 5f       	subi	r25, 0xFF	; 255
     87e:	9f 73       	andi	r25, 0x3F	; 63
     880:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     88a:	08 95       	ret

0000088c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     88c:	fc 01       	movw	r30, r24
     88e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     890:	44 8d       	ldd	r20, Z+28	; 0x1c
     892:	25 2f       	mov	r18, r21
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	84 2f       	mov	r24, r20
     898:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     89a:	82 1b       	sub	r24, r18
     89c:	93 0b       	sbc	r25, r19
     89e:	54 17       	cp	r21, r20
     8a0:	10 f0       	brcs	.+4      	; 0x8a6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     8a2:	cf 96       	adiw	r24, 0x3f	; 63
     8a4:	08 95       	ret
  return tail - head - 1;
     8a6:	01 97       	sbiw	r24, 0x01	; 1
}
     8a8:	08 95       	ret

000008aa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     8aa:	85 eb       	ldi	r24, 0xB5	; 181
     8ac:	95 e0       	ldi	r25, 0x05	; 5
     8ae:	89 2b       	or	r24, r25
     8b0:	49 f0       	breq	.+18     	; 0x8c4 <_Z14serialEventRunv+0x1a>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	89 2b       	or	r24, r25
     8b8:	29 f0       	breq	.+10     	; 0x8c4 <_Z14serialEventRunv+0x1a>
     8ba:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_Z17Serial0_availablev>
     8be:	81 11       	cpse	r24, r1
     8c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     8c4:	08 95       	ret

000008c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8c6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8c8:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ca:	df 01       	movw	r26, r30
     8cc:	a8 0f       	add	r26, r24
     8ce:	b1 1d       	adc	r27, r1
     8d0:	a3 5a       	subi	r26, 0xA3	; 163
     8d2:	bf 4f       	sbci	r27, 0xFF	; 255
     8d4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8d6:	84 8d       	ldd	r24, Z+28	; 0x1c
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	8f 73       	andi	r24, 0x3F	; 63
     8de:	99 27       	eor	r25, r25
     8e0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8e2:	a6 89       	ldd	r26, Z+22	; 0x16
     8e4:	b7 89       	ldd	r27, Z+23	; 0x17
     8e6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8e8:	a0 89       	ldd	r26, Z+16	; 0x10
     8ea:	b1 89       	ldd	r27, Z+17	; 0x11
     8ec:	8c 91       	ld	r24, X
     8ee:	83 70       	andi	r24, 0x03	; 3
     8f0:	80 64       	ori	r24, 0x40	; 64
     8f2:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     8f4:	93 8d       	ldd	r25, Z+27	; 0x1b
     8f6:	84 8d       	ldd	r24, Z+28	; 0x1c
     8f8:	98 13       	cpse	r25, r24
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <__stack+0x9>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8fc:	02 88       	ldd	r0, Z+18	; 0x12
     8fe:	f3 89       	ldd	r31, Z+19	; 0x13
     900:	e0 2d       	mov	r30, r0
     902:	80 81       	ld	r24, Z
     904:	8f 7d       	andi	r24, 0xDF	; 223
     906:	80 83       	st	Z, r24
     908:	08 95       	ret

0000090a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
  _written = true;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     91c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     91e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     920:	98 13       	cpse	r25, r24
     922:	05 c0       	rjmp	.+10     	; 0x92e <_ZN14HardwareSerial5writeEh+0x24>
     924:	e8 89       	ldd	r30, Y+16	; 0x10
     926:	f9 89       	ldd	r31, Y+17	; 0x11
     928:	80 81       	ld	r24, Z
     92a:	85 fd       	sbrc	r24, 5
     92c:	26 c0       	rjmp	.+76     	; 0x97a <_ZN14HardwareSerial5writeEh+0x70>
     92e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     930:	0b 8d       	ldd	r16, Y+27	; 0x1b
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	0f 5f       	subi	r16, 0xFF	; 255
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	0f 73       	andi	r16, 0x3F	; 63
     93a:	11 27       	eor	r17, r17
     93c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     93e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     940:	e8 12       	cpse	r14, r24
     942:	0c c0       	rjmp	.+24     	; 0x95c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	07 fc       	sbrc	r0, 7
     948:	fa cf       	rjmp	.-12     	; 0x93e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     94a:	e8 89       	ldd	r30, Y+16	; 0x10
     94c:	f9 89       	ldd	r31, Y+17	; 0x11
     94e:	80 81       	ld	r24, Z
     950:	85 ff       	sbrs	r24, 5
     952:	f5 cf       	rjmp	.-22     	; 0x93e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     954:	ce 01       	movw	r24, r28
     956:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     95a:	f1 cf       	rjmp	.-30     	; 0x93e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     95c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     95e:	fe 01       	movw	r30, r28
     960:	e8 0f       	add	r30, r24
     962:	f1 1d       	adc	r31, r1
     964:	e3 5a       	subi	r30, 0xA3	; 163
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     96a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     96c:	f8 94       	cli
    _tx_buffer_head = i;
     96e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     970:	ea 89       	ldd	r30, Y+18	; 0x12
     972:	fb 89       	ldd	r31, Y+19	; 0x13
     974:	80 81       	ld	r24, Z
     976:	80 62       	ori	r24, 0x20	; 32
     978:	0a c0       	rjmp	.+20     	; 0x98e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     97a:	9f b7       	in	r25, 0x3f	; 63
     97c:	f8 94       	cli
      *_udr = c;
     97e:	ee 89       	ldd	r30, Y+22	; 0x16
     980:	ff 89       	ldd	r31, Y+23	; 0x17
     982:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     984:	e8 89       	ldd	r30, Y+16	; 0x10
     986:	f9 89       	ldd	r31, Y+17	; 0x11
     988:	80 81       	ld	r24, Z
     98a:	83 70       	andi	r24, 0x03	; 3
     98c:	80 64       	ori	r24, 0x40	; 64
     98e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     990:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	08 95       	ret

000009a4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     9aa:	88 8d       	ldd	r24, Y+24	; 0x18
     9ac:	88 23       	and	r24, r24
     9ae:	c9 f0       	breq	.+50     	; 0x9e2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     9b0:	ea 89       	ldd	r30, Y+18	; 0x12
     9b2:	fb 89       	ldd	r31, Y+19	; 0x13
     9b4:	80 81       	ld	r24, Z
     9b6:	85 fd       	sbrc	r24, 5
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <_ZN14HardwareSerial5flushEv+0x20>
     9ba:	a8 89       	ldd	r26, Y+16	; 0x10
     9bc:	b9 89       	ldd	r27, Y+17	; 0x11
     9be:	8c 91       	ld	r24, X
     9c0:	86 fd       	sbrc	r24, 6
     9c2:	0f c0       	rjmp	.+30     	; 0x9e2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	07 fc       	sbrc	r0, 7
     9c8:	f5 cf       	rjmp	.-22     	; 0x9b4 <_ZN14HardwareSerial5flushEv+0x10>
     9ca:	80 81       	ld	r24, Z
     9cc:	85 ff       	sbrs	r24, 5
     9ce:	f2 cf       	rjmp	.-28     	; 0x9b4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9d0:	a8 89       	ldd	r26, Y+16	; 0x10
     9d2:	b9 89       	ldd	r27, Y+17	; 0x11
     9d4:	8c 91       	ld	r24, X
     9d6:	85 ff       	sbrs	r24, 5
     9d8:	ed cf       	rjmp	.-38     	; 0x9b4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9e0:	e7 cf       	rjmp	.-50     	; 0x9b0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
     9f8:	6a 01       	movw	r12, r20
     9fa:	7b 01       	movw	r14, r22
     9fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9fe:	e8 89       	ldd	r30, Y+16	; 0x10
     a00:	f9 89       	ldd	r31, Y+17	; 0x11
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a06:	41 15       	cp	r20, r1
     a08:	51 4e       	sbci	r21, 0xE1	; 225
     a0a:	61 05       	cpc	r22, r1
     a0c:	71 05       	cpc	r23, r1
     a0e:	b1 f0       	breq	.+44     	; 0xa3c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	79 e0       	ldi	r23, 0x09	; 9
     a14:	8d e3       	ldi	r24, 0x3D	; 61
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__udivmodsi4>
     a20:	da 01       	movw	r26, r20
     a22:	c9 01       	movw	r24, r18
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	a1 09       	sbc	r26, r1
     a28:	b1 09       	sbc	r27, r1
     a2a:	b6 95       	lsr	r27
     a2c:	a7 95       	ror	r26
     a2e:	97 95       	ror	r25
     a30:	87 95       	ror	r24
     a32:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a34:	21 15       	cp	r18, r1
     a36:	80 e1       	ldi	r24, 0x10	; 16
     a38:	38 07       	cpc	r19, r24
     a3a:	a8 f0       	brcs	.+42     	; 0xa66 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a3c:	e8 89       	ldd	r30, Y+16	; 0x10
     a3e:	f9 89       	ldd	r31, Y+17	; 0x11
     a40:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a42:	60 e8       	ldi	r22, 0x80	; 128
     a44:	74 e8       	ldi	r23, 0x84	; 132
     a46:	8e e1       	ldi	r24, 0x1E	; 30
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	0e 94 ac 11 	call	0x2358	; 0x2358 <__udivmodsi4>
     a52:	da 01       	movw	r26, r20
     a54:	c9 01       	movw	r24, r18
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	a1 09       	sbc	r26, r1
     a5a:	b1 09       	sbc	r27, r1
     a5c:	b6 95       	lsr	r27
     a5e:	a7 95       	ror	r26
     a60:	97 95       	ror	r25
     a62:	87 95       	ror	r24
     a64:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a66:	ec 85       	ldd	r30, Y+12	; 0x0c
     a68:	fd 85       	ldd	r31, Y+13	; 0x0d
     a6a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a6c:	ee 85       	ldd	r30, Y+14	; 0x0e
     a6e:	ff 85       	ldd	r31, Y+15	; 0x0f
     a70:	20 83       	st	Z, r18

  _written = false;
     a72:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a74:	ec 89       	ldd	r30, Y+20	; 0x14
     a76:	fd 89       	ldd	r31, Y+21	; 0x15
     a78:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a7a:	ea 89       	ldd	r30, Y+18	; 0x12
     a7c:	fb 89       	ldd	r31, Y+19	; 0x13
     a7e:	80 81       	ld	r24, Z
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a84:	ea 89       	ldd	r30, Y+18	; 0x12
     a86:	fb 89       	ldd	r31, Y+19	; 0x13
     a88:	80 81       	ld	r24, Z
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a8e:	ea 89       	ldd	r30, Y+18	; 0x12
     a90:	fb 89       	ldd	r31, Y+19	; 0x13
     a92:	80 81       	ld	r24, Z
     a94:	80 68       	ori	r24, 0x80	; 128
     a96:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a98:	ea 89       	ldd	r30, Y+18	; 0x12
     a9a:	fb 89       	ldd	r31, Y+19	; 0x13
     a9c:	80 81       	ld	r24, Z
     a9e:	8f 7d       	andi	r24, 0xDF	; 223
     aa0:	80 83       	st	Z, r24
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	08 95       	ret

00000ab2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     ab8:	08 95       	ret

00000aba <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ace:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <Serial+0x10>
     ad2:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <Serial+0x11>
     ad6:	80 81       	ld	r24, Z
     ad8:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <Serial+0x16>
     adc:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <Serial+0x17>
     ae0:	82 fd       	sbrc	r24, 2
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ae4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ae6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <Serial+0x19>
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     aee:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <Serial+0x1a>
     af2:	82 17       	cp	r24, r18
     af4:	51 f0       	breq	.+20     	; 0xb0a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     af6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <Serial+0x19>
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	e3 5d       	subi	r30, 0xD3	; 211
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b02:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <Serial+0x19>
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b08:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     b40:	8d e2       	ldi	r24, 0x2D	; 45
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b6a:	8d e2       	ldi	r24, 0x2D	; 45
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 18 04 	call	0x830	; 0x830 <_ZN14HardwareSerial9availableEv>
     b72:	21 e0       	ldi	r18, 0x01	; 1
     b74:	89 2b       	or	r24, r25
     b76:	09 f4       	brne	.+2      	; 0xb7a <_Z17Serial0_availablev+0x10>
     b78:	20 e0       	ldi	r18, 0x00	; 0
}
     b7a:	82 2f       	mov	r24, r18
     b7c:	08 95       	ret

00000b7e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b7e:	ed e2       	ldi	r30, 0x2D	; 45
     b80:	f2 e0       	ldi	r31, 0x02	; 2
     b82:	13 82       	std	Z+3, r1	; 0x03
     b84:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b86:	88 ee       	ldi	r24, 0xE8	; 232
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	84 83       	std	Z+4, r24	; 0x04
     b90:	95 83       	std	Z+5, r25	; 0x05
     b92:	a6 83       	std	Z+6, r26	; 0x06
     b94:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b96:	8c eb       	ldi	r24, 0xBC	; 188
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
     b9e:	85 ec       	ldi	r24, 0xC5	; 197
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	95 87       	std	Z+13, r25	; 0x0d
     ba4:	84 87       	std	Z+12, r24	; 0x0c
     ba6:	84 ec       	ldi	r24, 0xC4	; 196
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	97 87       	std	Z+15, r25	; 0x0f
     bac:	86 87       	std	Z+14, r24	; 0x0e
     bae:	80 ec       	ldi	r24, 0xC0	; 192
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	91 8b       	std	Z+17, r25	; 0x11
     bb4:	80 8b       	std	Z+16, r24	; 0x10
     bb6:	81 ec       	ldi	r24, 0xC1	; 193
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	93 8b       	std	Z+19, r25	; 0x13
     bbc:	82 8b       	std	Z+18, r24	; 0x12
     bbe:	82 ec       	ldi	r24, 0xC2	; 194
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	95 8b       	std	Z+21, r25	; 0x15
     bc4:	84 8b       	std	Z+20, r24	; 0x14
     bc6:	86 ec       	ldi	r24, 0xC6	; 198
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	97 8b       	std	Z+23, r25	; 0x17
     bcc:	86 8b       	std	Z+22, r24	; 0x16
     bce:	11 8e       	std	Z+25, r1	; 0x19
     bd0:	12 8e       	std	Z+26, r1	; 0x1a
     bd2:	13 8e       	std	Z+27, r1	; 0x1b
     bd4:	14 8e       	std	Z+28, r1	; 0x1c
     bd6:	08 95       	ret

00000bd8 <initVariant>:
     bd8:	08 95       	ret

00000bda <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bda:	0e 94 23 07 	call	0xe46	; 0xe46 <init>

	initVariant();
     bde:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     be2:	0e 94 26 03 	call	0x64c	; 0x64c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     be6:	c5 e5       	ldi	r28, 0x55	; 85
     be8:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     bea:	0e 94 b0 03 	call	0x760	; 0x760 <loop>
		if (serialEventRun) serialEventRun();
     bee:	20 97       	sbiw	r28, 0x00	; 0
     bf0:	e1 f3       	breq	.-8      	; 0xbea <main+0x10>
     bf2:	0e 94 55 04 	call	0x8aa	; 0x8aa <_Z14serialEventRunv>
     bf6:	f9 cf       	rjmp	.-14     	; 0xbea <main+0x10>

00000bf8 <_Znwj>:
     bf8:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <malloc>

00000bfc <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	6c 01       	movw	r12, r24
     c0e:	7a 01       	movw	r14, r20
     c10:	8b 01       	movw	r16, r22
     c12:	c0 e0       	ldi	r28, 0x00	; 0
     c14:	d0 e0       	ldi	r29, 0x00	; 0
     c16:	ce 15       	cp	r28, r14
     c18:	df 05       	cpc	r29, r15
     c1a:	81 f0       	breq	.+32     	; 0xc3c <_ZN5Print5writeEPKhj+0x40>
     c1c:	d8 01       	movw	r26, r16
     c1e:	6d 91       	ld	r22, X+
     c20:	8d 01       	movw	r16, r26
     c22:	d6 01       	movw	r26, r12
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	01 90       	ld	r0, Z+
     c2a:	f0 81       	ld	r31, Z
     c2c:	e0 2d       	mov	r30, r0
     c2e:	c6 01       	movw	r24, r12
     c30:	09 95       	icall
     c32:	89 2b       	or	r24, r25
     c34:	11 f0       	breq	.+4      	; 0xc3a <_ZN5Print5writeEPKhj+0x3e>
     c36:	21 96       	adiw	r28, 0x01	; 1
     c38:	ee cf       	rjmp	.-36     	; 0xc16 <_ZN5Print5writeEPKhj+0x1a>
     c3a:	7e 01       	movw	r14, r28
     c3c:	c7 01       	movw	r24, r14
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret

00000c50 <_ZN5Print5writeEPKc>:
     c50:	61 15       	cp	r22, r1
     c52:	71 05       	cpc	r23, r1
     c54:	79 f0       	breq	.+30     	; 0xc74 <_ZN5Print5writeEPKc+0x24>
     c56:	fb 01       	movw	r30, r22
     c58:	01 90       	ld	r0, Z+
     c5a:	00 20       	and	r0, r0
     c5c:	e9 f7       	brne	.-6      	; 0xc58 <_ZN5Print5writeEPKc+0x8>
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	af 01       	movw	r20, r30
     c62:	46 1b       	sub	r20, r22
     c64:	57 0b       	sbc	r21, r23
     c66:	dc 01       	movw	r26, r24
     c68:	ed 91       	ld	r30, X+
     c6a:	fc 91       	ld	r31, X
     c6c:	02 80       	ldd	r0, Z+2	; 0x02
     c6e:	f3 81       	ldd	r31, Z+3	; 0x03
     c70:	e0 2d       	mov	r30, r0
     c72:	09 94       	ijmp
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	08 95       	ret

00000c7a <_ZN5Print5printERK6String>:
     c7a:	db 01       	movw	r26, r22
     c7c:	14 96       	adiw	r26, 0x04	; 4
     c7e:	4d 91       	ld	r20, X+
     c80:	5c 91       	ld	r21, X
     c82:	15 97       	sbiw	r26, 0x05	; 5
     c84:	6d 91       	ld	r22, X+
     c86:	7c 91       	ld	r23, X
     c88:	dc 01       	movw	r26, r24
     c8a:	ed 91       	ld	r30, X+
     c8c:	fc 91       	ld	r31, X
     c8e:	02 80       	ldd	r0, Z+2	; 0x02
     c90:	f3 81       	ldd	r31, Z+3	; 0x03
     c92:	e0 2d       	mov	r30, r0
     c94:	09 94       	ijmp

00000c96 <_ZN5Print7printlnEv>:
     c96:	6a ec       	ldi	r22, 0xCA	; 202
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_ZN5Print5writeEPKc>

00000c9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ca8:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN5Print5writeEPKc>
     cac:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN5Print7printlnEv>
  return n;
}
     cb4:	80 0f       	add	r24, r16
     cb6:	91 1f       	adc	r25, r17
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     cd8:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <timer0_millis>
     cdc:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <timer0_millis+0x1>
     ce0:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <timer0_millis+0x2>
     ce4:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     ce8:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     cec:	23 e0       	ldi	r18, 0x03	; 3
     cee:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     cf0:	2d 37       	cpi	r18, 0x7D	; 125
     cf2:	20 f4       	brcc	.+8      	; 0xcfc <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	a1 1d       	adc	r26, r1
     cf8:	b1 1d       	adc	r27, r1
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     cfc:	26 e8       	ldi	r18, 0x86	; 134
     cfe:	23 0f       	add	r18, r19
		m += 1;
     d00:	02 96       	adiw	r24, 0x02	; 2
     d02:	a1 1d       	adc	r26, r1
     d04:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     d06:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <timer0_fract>
	timer0_millis = m;
     d0a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <timer0_millis>
     d0e:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <timer0_millis+0x1>
     d12:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <timer0_millis+0x2>
     d16:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <timer0_millis+0x3>
	timer0_overflow_count++;
     d1a:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_overflow_count>
     d1e:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_overflow_count+0x1>
     d22:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_overflow_count+0x2>
     d26:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_overflow_count+0x3>
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	a1 1d       	adc	r26, r1
     d2e:	b1 1d       	adc	r27, r1
     d30:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_overflow_count>
     d34:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_overflow_count+0x1>
     d38:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_overflow_count+0x2>
     d3c:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_overflow_count+0x3>
}
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     d56:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     d58:	f8 94       	cli
	m = timer0_millis;
     d5a:	60 91 cb 02 	lds	r22, 0x02CB	; 0x8002cb <timer0_millis>
     d5e:	70 91 cc 02 	lds	r23, 0x02CC	; 0x8002cc <timer0_millis+0x1>
     d62:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <timer0_millis+0x2>
     d66:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <timer0_millis+0x3>
	SREG = oldSREG;
     d6a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     d6c:	08 95       	ret

00000d6e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d6e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d70:	f8 94       	cli
	m = timer0_overflow_count;
     d72:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_overflow_count>
     d76:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_overflow_count+0x1>
     d7a:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_overflow_count+0x2>
     d7e:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d82:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d84:	a8 9b       	sbis	0x15, 0	; 21
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <micros+0x24>
     d88:	2f 3f       	cpi	r18, 0xFF	; 255
     d8a:	19 f0       	breq	.+6      	; 0xd92 <micros+0x24>
		m++;
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	a1 1d       	adc	r26, r1
     d90:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d92:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d94:	ba 2f       	mov	r27, r26
     d96:	a9 2f       	mov	r26, r25
     d98:	98 2f       	mov	r25, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	82 0f       	add	r24, r18
     d9e:	91 1d       	adc	r25, r1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	42 e0       	ldi	r20, 0x02	; 2
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	4a 95       	dec	r20
     db4:	d1 f7       	brne	.-12     	; 0xdaa <micros+0x3c>
}
     db6:	08 95       	ret

00000db8 <delay>:

void delay(unsigned long ms)
{
     db8:	8f 92       	push	r8
     dba:	9f 92       	push	r9
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	6b 01       	movw	r12, r22
     dca:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     dcc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <micros>
     dd0:	4b 01       	movw	r8, r22
     dd2:	5c 01       	movw	r10, r24

	while (ms > 0) {
     dd4:	c1 14       	cp	r12, r1
     dd6:	d1 04       	cpc	r13, r1
     dd8:	e1 04       	cpc	r14, r1
     dda:	f1 04       	cpc	r15, r1
     ddc:	01 f1       	breq	.+64     	; 0xe1e <delay+0x66>
		yield();
     dde:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     de2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <micros>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	88 19       	sub	r24, r8
     dec:	99 09       	sbc	r25, r9
     dee:	aa 09       	sbc	r26, r10
     df0:	bb 09       	sbc	r27, r11
     df2:	88 3e       	cpi	r24, 0xE8	; 232
     df4:	93 40       	sbci	r25, 0x03	; 3
     df6:	a1 05       	cpc	r26, r1
     df8:	b1 05       	cpc	r27, r1
     dfa:	60 f3       	brcs	.-40     	; 0xdd4 <delay+0x1c>
			ms--;
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	c2 1a       	sub	r12, r18
     e00:	d1 08       	sbc	r13, r1
     e02:	e1 08       	sbc	r14, r1
     e04:	f1 08       	sbc	r15, r1
			start += 1000;
     e06:	88 ee       	ldi	r24, 0xE8	; 232
     e08:	88 0e       	add	r8, r24
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	98 1e       	adc	r9, r24
     e0e:	a1 1c       	adc	r10, r1
     e10:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e12:	c1 14       	cp	r12, r1
     e14:	d1 04       	cpc	r13, r1
     e16:	e1 04       	cpc	r14, r1
     e18:	f1 04       	cpc	r15, r1
     e1a:	19 f7       	brne	.-58     	; 0xde2 <delay+0x2a>
     e1c:	db cf       	rjmp	.-74     	; 0xdd4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	08 95       	ret

00000e30 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	91 05       	cpc	r25, r1
     e34:	38 f0       	brcs	.+14     	; 0xe44 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e3e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <delayMicroseconds+0x10>
     e44:	08 95       	ret

00000e46 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e46:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e48:	84 b5       	in	r24, 0x24	; 36
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e4e:	84 b5       	in	r24, 0x24	; 36
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e54:	85 b5       	in	r24, 0x25	; 37
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e60:	ee e6       	ldi	r30, 0x6E	; 110
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e6a:	e1 e8       	ldi	r30, 0x81	; 129
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e7c:	e0 e8       	ldi	r30, 0x80	; 128
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e86:	e1 eb       	ldi	r30, 0xB1	; 177
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e90:	e0 eb       	ldi	r30, 0xB0	; 176
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e9a:	ea e7       	ldi	r30, 0x7A	; 122
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	84 60       	ori	r24, 0x04	; 4
     ea2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ea4:	80 81       	ld	r24, Z
     ea6:	82 60       	ori	r24, 0x02	; 2
     ea8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     eaa:	80 81       	ld	r24, Z
     eac:	81 60       	ori	r24, 0x01	; 1
     eae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     eb6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     eba:	08 95       	ret

00000ebc <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     ebc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
     ec0:	08 95       	ret

00000ec2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	81 f0       	breq	.+32     	; 0xee6 <turnOffPWM+0x24>
     ec6:	28 f4       	brcc	.+10     	; 0xed2 <turnOffPWM+0x10>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	99 f0       	breq	.+38     	; 0xef2 <turnOffPWM+0x30>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	a1 f0       	breq	.+40     	; 0xef8 <turnOffPWM+0x36>
     ed0:	08 95       	ret
     ed2:	87 30       	cpi	r24, 0x07	; 7
     ed4:	a9 f0       	breq	.+42     	; 0xf00 <turnOffPWM+0x3e>
     ed6:	88 30       	cpi	r24, 0x08	; 8
     ed8:	b9 f0       	breq	.+46     	; 0xf08 <turnOffPWM+0x46>
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	d1 f4       	brne	.+52     	; 0xf12 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ede:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ee2:	8f 7d       	andi	r24, 0xDF	; 223
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ee6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     eea:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     eec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ef0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ef2:	84 b5       	in	r24, 0x24	; 36
     ef4:	8f 77       	andi	r24, 0x7F	; 127
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ef8:	84 b5       	in	r24, 0x24	; 36
     efa:	8f 7d       	andi	r24, 0xDF	; 223
     efc:	84 bd       	out	0x24, r24	; 36
     efe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f08:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f0c:	8f 7d       	andi	r24, 0xDF	; 223
     f0e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f12:	08 95       	ret

00000f14 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	e4 58       	subi	r30, 0x84	; 132
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f22:	fc 01       	movw	r30, r24
     f24:	e0 57       	subi	r30, 0x70	; 112
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f2a:	88 23       	and	r24, r24
     f2c:	61 f1       	breq	.+88     	; 0xf86 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	fc 01       	movw	r30, r24
     f36:	e2 55       	subi	r30, 0x52	; 82
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	c5 91       	lpm	r28, Z+
     f3c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f3e:	fc 01       	movw	r30, r24
     f40:	ec 55       	subi	r30, 0x5C	; 92
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	a5 91       	lpm	r26, Z+
     f46:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f48:	61 11       	cpse	r22, r1
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f4c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f4e:	f8 94       	cli
		*reg &= ~bit;
     f50:	88 81       	ld	r24, Y
     f52:	20 95       	com	r18
     f54:	82 23       	and	r24, r18
     f56:	88 83       	st	Y, r24
		*out &= ~bit;
     f58:	ec 91       	ld	r30, X
     f5a:	2e 23       	and	r18, r30
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f5e:	62 30       	cpi	r22, 0x02	; 2
     f60:	61 f4       	brne	.+24     	; 0xf7a <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f62:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f64:	f8 94       	cli
		*reg &= ~bit;
     f66:	88 81       	ld	r24, Y
     f68:	32 2f       	mov	r19, r18
     f6a:	30 95       	com	r19
     f6c:	83 23       	and	r24, r19
     f6e:	88 83       	st	Y, r24
		*out |= bit;
     f70:	ec 91       	ld	r30, X
     f72:	2e 2b       	or	r18, r30
     f74:	2c 93       	st	X, r18
		SREG = oldSREG;
     f76:	9f bf       	out	0x3f, r25	; 63
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f7a:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f7c:	f8 94       	cli
		*reg |= bit;
     f7e:	e8 81       	ld	r30, Y
     f80:	2e 2b       	or	r18, r30
     f82:	28 83       	st	Y, r18
		SREG = oldSREG;
     f84:	8f bf       	out	0x3f, r24	; 63
	}
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	e8 59       	subi	r30, 0x98	; 152
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f9e:	f9 01       	movw	r30, r18
     fa0:	e4 58       	subi	r30, 0x84	; 132
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fa6:	f9 01       	movw	r30, r18
     fa8:	e0 57       	subi	r30, 0x70	; 112
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     fae:	cc 23       	and	r28, r28
     fb0:	c1 f0       	breq	.+48     	; 0xfe2 <digitalWrite+0x56>
     fb2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fb4:	81 11       	cpse	r24, r1
     fb6:	0e 94 61 07 	call	0xec2	; 0xec2 <turnOffPWM>

	out = portOutputRegister(port);
     fba:	ec 2f       	mov	r30, r28
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ec 55       	subi	r30, 0x5C	; 92
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	a5 91       	lpm	r26, Z+
     fc8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fca:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fcc:	f8 94       	cli

	if (val == LOW) {
     fce:	11 11       	cpse	r17, r1
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <digitalWrite+0x4e>
		*out &= ~bit;
     fd2:	8c 91       	ld	r24, X
     fd4:	d0 95       	com	r29
     fd6:	d8 23       	and	r29, r24
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <digitalWrite+0x52>
	} else {
		*out |= bit;
     fda:	ec 91       	ld	r30, X
     fdc:	de 2b       	or	r29, r30
     fde:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     fe0:	9f bf       	out	0x3f, r25	; 63
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
     fea:	08 95       	ret

00000fec <_ZN6StringD1Ev>:
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <free>

00000ff6 <_ZN6String10invalidateEv>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
     ffc:	88 81       	ld	r24, Y
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	11 f0       	breq	.+4      	; 0x1008 <_ZN6String10invalidateEv+0x12>
    1004:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <free>
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	18 82       	st	Y, r1
    100c:	1d 82       	std	Y+5, r1	; 0x05
    100e:	1c 82       	std	Y+4, r1	; 0x04
    1010:	1b 82       	std	Y+3, r1	; 0x03
    1012:	1a 82       	std	Y+2, r1	; 0x02
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN6String12changeBufferEj>:
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
    1024:	8b 01       	movw	r16, r22
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	88 81       	ld	r24, Y
    102c:	99 81       	ldd	r25, Y+1	; 0x01
    102e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <realloc>
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	31 f0       	breq	.+12     	; 0x1042 <_ZN6String12changeBufferEj+0x28>
    1036:	99 83       	std	Y+1, r25	; 0x01
    1038:	88 83       	st	Y, r24
    103a:	1b 83       	std	Y+3, r17	; 0x03
    103c:	0a 83       	std	Y+2, r16	; 0x02
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <_ZN6String12changeBufferEj+0x2a>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <_ZN6String7reserveEj>:
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
    1054:	88 81       	ld	r24, Y
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	89 2b       	or	r24, r25
    105a:	29 f0       	breq	.+10     	; 0x1066 <_ZN6String7reserveEj+0x18>
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	9b 81       	ldd	r25, Y+3	; 0x03
    1060:	86 17       	cp	r24, r22
    1062:	97 07       	cpc	r25, r23
    1064:	60 f4       	brcc	.+24     	; 0x107e <_ZN6String7reserveEj+0x30>
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN6String12changeBufferEj>
    106c:	88 23       	and	r24, r24
    106e:	41 f0       	breq	.+16     	; 0x1080 <_ZN6String7reserveEj+0x32>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	89 2b       	or	r24, r25
    1076:	19 f4       	brne	.+6      	; 0x107e <_ZN6String7reserveEj+0x30>
    1078:	e8 81       	ld	r30, Y
    107a:	f9 81       	ldd	r31, Y+1	; 0x01
    107c:	10 82       	st	Z, r1
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <_ZN6String4copyEPKcj>:
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
    1094:	7b 01       	movw	r14, r22
    1096:	8a 01       	movw	r16, r20
    1098:	ba 01       	movw	r22, r20
    109a:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6String7reserveEj>
    109e:	81 11       	cpse	r24, r1
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <_ZN6String4copyEPKcj+0x24>
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6String10invalidateEv>
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <_ZN6String4copyEPKcj+0x32>
    10aa:	1d 83       	std	Y+5, r17	; 0x05
    10ac:	0c 83       	std	Y+4, r16	; 0x04
    10ae:	b7 01       	movw	r22, r14
    10b0:	88 81       	ld	r24, Y
    10b2:	99 81       	ldd	r25, Y+1	; 0x01
    10b4:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy>
    10b8:	ce 01       	movw	r24, r28
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <_ZN6StringC1EPKc>:
    10c8:	fc 01       	movw	r30, r24
    10ca:	11 82       	std	Z+1, r1	; 0x01
    10cc:	10 82       	st	Z, r1
    10ce:	13 82       	std	Z+3, r1	; 0x03
    10d0:	12 82       	std	Z+2, r1	; 0x02
    10d2:	15 82       	std	Z+5, r1	; 0x05
    10d4:	14 82       	std	Z+4, r1	; 0x04
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	51 f0       	breq	.+20     	; 0x10f0 <_ZN6StringC1EPKc+0x28>
    10dc:	fb 01       	movw	r30, r22
    10de:	01 90       	ld	r0, Z+
    10e0:	00 20       	and	r0, r0
    10e2:	e9 f7       	brne	.-6      	; 0x10de <_ZN6StringC1EPKc+0x16>
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	af 01       	movw	r20, r30
    10e8:	46 1b       	sub	r20, r22
    10ea:	57 0b       	sbc	r21, r23
    10ec:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_ZN6String4copyEPKcj>
    10f0:	08 95       	ret

000010f2 <_ZN6String4moveERS_>:
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	8c 01       	movw	r16, r24
    10fc:	eb 01       	movw	r28, r22
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	d1 f0       	breq	.+52     	; 0x113c <_ZN6String4moveERS_+0x4a>
    1108:	68 81       	ld	r22, Y
    110a:	79 81       	ldd	r23, Y+1	; 0x01
    110c:	61 15       	cp	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	99 f0       	breq	.+38     	; 0x1138 <_ZN6String4moveERS_+0x46>
    1112:	25 ef       	ldi	r18, 0xF5	; 245
    1114:	37 e0       	ldi	r19, 0x07	; 7
    1116:	23 2b       	or	r18, r19
    1118:	79 f0       	breq	.+30     	; 0x1138 <_ZN6String4moveERS_+0x46>
    111a:	42 81       	ldd	r20, Z+2	; 0x02
    111c:	53 81       	ldd	r21, Z+3	; 0x03
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	42 17       	cp	r20, r18
    1124:	53 07       	cpc	r21, r19
    1126:	40 f0       	brcs	.+16     	; 0x1138 <_ZN6String4moveERS_+0x46>
    1128:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	f8 01       	movw	r30, r16
    1132:	95 83       	std	Z+5, r25	; 0x05
    1134:	84 83       	std	Z+4, r24	; 0x04
    1136:	13 c0       	rjmp	.+38     	; 0x115e <_ZN6String4moveERS_+0x6c>
    1138:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <free>
    113c:	88 81       	ld	r24, Y
    113e:	99 81       	ldd	r25, Y+1	; 0x01
    1140:	f8 01       	movw	r30, r16
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	93 83       	std	Z+3, r25	; 0x03
    114c:	82 83       	std	Z+2, r24	; 0x02
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	95 83       	std	Z+5, r25	; 0x05
    1154:	84 83       	std	Z+4, r24	; 0x04
    1156:	19 82       	std	Y+1, r1	; 0x01
    1158:	18 82       	st	Y, r1
    115a:	1b 82       	std	Y+3, r1	; 0x03
    115c:	1a 82       	std	Y+2, r1	; 0x02
    115e:	1d 82       	std	Y+5, r1	; 0x05
    1160:	1c 82       	std	Y+4, r1	; 0x04
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <_ZN6StringaSERKS_>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	fb 01       	movw	r30, r22
    1174:	86 17       	cp	r24, r22
    1176:	97 07       	cpc	r25, r23
    1178:	61 f0       	breq	.+24     	; 0x1192 <_ZN6StringaSERKS_+0x26>
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	61 15       	cp	r22, r1
    1180:	71 05       	cpc	r23, r1
    1182:	29 f0       	breq	.+10     	; 0x118e <_ZN6StringaSERKS_+0x22>
    1184:	44 81       	ldd	r20, Z+4	; 0x04
    1186:	55 81       	ldd	r21, Z+5	; 0x05
    1188:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN6String4copyEPKcj>
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <_ZN6StringaSERKS_+0x26>
    118e:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6String10invalidateEv>
    1192:	ce 01       	movw	r24, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <_ZN6StringC1ERKS_>:
    119a:	fc 01       	movw	r30, r24
    119c:	11 82       	std	Z+1, r1	; 0x01
    119e:	10 82       	st	Z, r1
    11a0:	13 82       	std	Z+3, r1	; 0x03
    11a2:	12 82       	std	Z+2, r1	; 0x02
    11a4:	15 82       	std	Z+5, r1	; 0x05
    11a6:	14 82       	std	Z+4, r1	; 0x04
    11a8:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN6StringaSERKS_>

000011ac <_ZN6StringaSEOS_>:
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
    11b2:	86 17       	cp	r24, r22
    11b4:	97 07       	cpc	r25, r23
    11b6:	11 f0       	breq	.+4      	; 0x11bc <_ZN6StringaSEOS_+0x10>
    11b8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN6String4moveERS_>
    11bc:	ce 01       	movw	r24, r28
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <_ZN6StringaSEPKc>:
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
    11ca:	61 15       	cp	r22, r1
    11cc:	71 05       	cpc	r23, r1
    11ce:	59 f0       	breq	.+22     	; 0x11e6 <_ZN6StringaSEPKc+0x22>
    11d0:	fb 01       	movw	r30, r22
    11d2:	01 90       	ld	r0, Z+
    11d4:	00 20       	and	r0, r0
    11d6:	e9 f7       	brne	.-6      	; 0x11d2 <_ZN6StringaSEPKc+0xe>
    11d8:	31 97       	sbiw	r30, 0x01	; 1
    11da:	af 01       	movw	r20, r30
    11dc:	46 1b       	sub	r20, r22
    11de:	57 0b       	sbc	r21, r23
    11e0:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN6String4copyEPKcj>
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <_ZN6StringaSEPKc+0x26>
    11e6:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6String10invalidateEv>
    11ea:	ce 01       	movw	r24, r28
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	7c 01       	movw	r14, r24
    1206:	6b 01       	movw	r12, r22
    1208:	8a 01       	movw	r16, r20
    120a:	e9 01       	movw	r28, r18
	if (left > right) {
    120c:	24 17       	cp	r18, r20
    120e:	35 07       	cpc	r19, r21
    1210:	20 f4       	brcc	.+8      	; 0x121a <_ZNK6String9substringEjj+0x28>
    1212:	81 2f       	mov	r24, r17
    1214:	89 01       	movw	r16, r18
    1216:	c4 2f       	mov	r28, r20
    1218:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    121a:	6c ec       	ldi	r22, 0xCC	; 204
    121c:	71 e0       	ldi	r23, 0x01	; 1
    121e:	c7 01       	movw	r24, r14
    1220:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    1224:	d6 01       	movw	r26, r12
    1226:	14 96       	adiw	r26, 0x04	; 4
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	15 97       	sbiw	r26, 0x05	; 5
    122e:	08 17       	cp	r16, r24
    1230:	19 07       	cpc	r17, r25
    1232:	c8 f4       	brcc	.+50     	; 0x1266 <_ZNK6String9substringEjj+0x74>
    1234:	8c 17       	cp	r24, r28
    1236:	9d 07       	cpc	r25, r29
    1238:	08 f4       	brcc	.+2      	; 0x123c <_ZNK6String9substringEjj+0x4a>
    123a:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    123c:	d6 01       	movw	r26, r12
    123e:	ed 91       	ld	r30, X+
    1240:	fc 91       	ld	r31, X
    1242:	11 97       	sbiw	r26, 0x01	; 1
    1244:	ec 0f       	add	r30, r28
    1246:	fd 1f       	adc	r31, r29
    1248:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    124a:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    124c:	6d 91       	ld	r22, X+
    124e:	7c 91       	ld	r23, X
    1250:	60 0f       	add	r22, r16
    1252:	71 1f       	adc	r23, r17
    1254:	c7 01       	movw	r24, r14
    1256:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    125a:	d6 01       	movw	r26, r12
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	ec 0f       	add	r30, r28
    1262:	fd 1f       	adc	r31, r29
    1264:	b0 82       	st	Z, r11
	return out;
}
    1266:	c7 01       	movw	r24, r14
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	bf 90       	pop	r11
    127a:	08 95       	ret

0000127c <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    127c:	fc 01       	movw	r30, r24
    127e:	13 82       	std	Z+3, r1	; 0x03
    1280:	12 82       	std	Z+2, r1	; 0x02
    1282:	8d ed       	ldi	r24, 0xDD	; 221
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	12 8e       	std	Z+26, r1	; 0x1a
    128c:	14 8a       	std	Z+20, r1	; 0x14
    128e:	8f e0       	ldi	r24, 0x0F	; 15
    1290:	84 83       	std	Z+4, r24	; 0x04
    1292:	8e e0       	ldi	r24, 0x0E	; 14
    1294:	85 83       	std	Z+5, r24	; 0x05
    1296:	8d e0       	ldi	r24, 0x0D	; 13
    1298:	86 83       	std	Z+6, r24	; 0x06
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	87 83       	std	Z+7, r24	; 0x07
    129e:	8b e0       	ldi	r24, 0x0B	; 11
    12a0:	80 87       	std	Z+8, r24	; 0x08
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	81 87       	std	Z+9, r24	; 0x09
    12a6:	89 e0       	ldi	r24, 0x09	; 9
    12a8:	82 87       	std	Z+10, r24	; 0x0a
    12aa:	17 86       	std	Z+15, r1	; 0x0f
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 8b       	std	Z+16, r24	; 0x10
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	81 8b       	std	Z+17, r24	; 0x11
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	82 8b       	std	Z+18, r24	; 0x12
    12b8:	84 e0       	ldi	r24, 0x04	; 4
    12ba:	83 8b       	std	Z+19, r24	; 0x13
    12bc:	08 95       	ret

000012be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    12be:	fc 01       	movw	r30, r24
    12c0:	96 2f       	mov	r25, r22
    12c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    12c8:	cf 01       	movw	r24, r30
    12ca:	4b 96       	adiw	r24, 0x1b	; 27
    12cc:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12d0:	64 2f       	mov	r22, r20
    12d2:	89 2f       	mov	r24, r25
    12d4:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <digitalWrite>

000012d8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	d6 2f       	mov	r29, r22
    12e2:	8c 01       	movw	r16, r24
    12e4:	05 5e       	subi	r16, 0xE5	; 229
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	c1 e0       	ldi	r28, 0x01	; 1
    12ea:	62 fb       	bst	r22, 2
    12ec:	44 27       	eor	r20, r20
    12ee:	40 f9       	bld	r20, 0
    12f0:	4c 27       	eor	r20, r28
    12f2:	68 e0       	ldi	r22, 0x08	; 8
    12f4:	c8 01       	movw	r24, r16
    12f6:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12fa:	d1 fb       	bst	r29, 1
    12fc:	44 27       	eor	r20, r20
    12fe:	40 f9       	bld	r20, 0
    1300:	4c 27       	eor	r20, r28
    1302:	67 e0       	ldi	r22, 0x07	; 7
    1304:	c8 01       	movw	r24, r16
    1306:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    130a:	4d 2f       	mov	r20, r29
    130c:	41 70       	andi	r20, 0x01	; 1
    130e:	4c 27       	eor	r20, r28
    1310:	66 e0       	ldi	r22, 0x06	; 6
    1312:	c8 01       	movw	r24, r16
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_ZN17Adafruit_MCP2301712digitalWriteEhh>

00001320 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    1320:	fc 01       	movw	r30, r24
    1322:	96 2f       	mov	r25, r22
    1324:	82 8d       	ldd	r24, Z+26	; 0x1a
    1326:	8f 3f       	cpi	r24, 0xFF	; 255
    1328:	21 f0       	breq	.+8      	; 0x1332 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    132a:	cf 01       	movw	r24, r30
    132c:	4b 96       	adiw	r24, 0x1b	; 27
    132e:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    1332:	64 2f       	mov	r22, r20
    1334:	89 2f       	mov	r24, r25
    1336:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <pinMode>

0000133a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	6e 81       	ldd	r22, Y+6	; 0x06
    1344:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	6e 81       	ldd	r22, Y+6	; 0x06
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	6e 81       	ldd	r22, Y+6	; 0x06
    1366:	ce 01       	movw	r24, r28
    1368:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    136c:	84 e6       	ldi	r24, 0x64	; 100
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	0c 94 18 07 	jmp	0xe30	; 0xe30 <delayMicroseconds>

00001378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	8c 01       	movw	r16, r24
    138e:	fc 01       	movw	r30, r24
    1390:	82 8d       	ldd	r24, Z+26	; 0x1a
    1392:	98 01       	movw	r18, r16
    1394:	29 5f       	subi	r18, 0xF9	; 249
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	79 01       	movw	r14, r18
    139a:	c6 2f       	mov	r28, r22
    139c:	d0 e0       	ldi	r29, 0x00	; 0
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    13a2:	73 c0       	rjmp	.+230    	; 0x148a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    13a4:	68 01       	movw	r12, r16
    13a6:	3b e1       	ldi	r19, 0x1B	; 27
    13a8:	c3 0e       	add	r12, r19
    13aa:	d1 1c       	adc	r13, r1
    13ac:	c6 01       	movw	r24, r12
    13ae:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN17Adafruit_MCP2301710readGPIOABEv>
    13b2:	f7 01       	movw	r30, r14
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	a1 e0       	ldi	r26, 0x01	; 1
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	b1 90       	ld	r11, Z+
    13be:	ee 24       	eor	r14, r14
    13c0:	e3 94       	inc	r14
    13c2:	f1 2c       	mov	r15, r1
    13c4:	bd 01       	movw	r22, r26
    13c6:	0b 2c       	mov	r0, r11
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    13d2:	60 95       	com	r22
    13d4:	70 95       	com	r23
    13d6:	86 23       	and	r24, r22
    13d8:	97 23       	and	r25, r23
    13da:	9e 01       	movw	r18, r28
    13dc:	04 2e       	mov	r0, r20
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    13e0:	35 95       	asr	r19
    13e2:	27 95       	ror	r18
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    13e8:	21 70       	andi	r18, 0x01	; 1
    13ea:	33 27       	eor	r19, r19
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	ba 94       	dec	r11
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    13f6:	82 2b       	or	r24, r18
    13f8:	93 2b       	or	r25, r19
    13fa:	4f 5f       	subi	r20, 0xFF	; 255
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	44 30       	cpi	r20, 0x04	; 4
    1400:	51 05       	cpc	r21, r1
    1402:	e1 f6       	brne	.-72     	; 0x13bc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    1404:	e7 01       	movw	r28, r14
    1406:	f8 01       	movw	r30, r16
    1408:	06 80       	ldd	r0, Z+6	; 0x06
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    140c:	cc 0f       	add	r28, r28
    140e:	dd 1f       	adc	r29, r29
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    1414:	c0 95       	com	r28
    1416:	d0 95       	com	r29
    1418:	c8 23       	and	r28, r24
    141a:	d9 23       	and	r29, r25
    141c:	be 01       	movw	r22, r28
    141e:	c6 01       	movw	r24, r12
    1420:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    142c:	c7 01       	movw	r24, r14
    142e:	f8 01       	movw	r30, r16
    1430:	06 80       	ldd	r0, Z+6	; 0x06
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    143c:	c8 2b       	or	r28, r24
    143e:	d9 2b       	or	r29, r25
    1440:	be 01       	movw	r22, r28
    1442:	c6 01       	movw	r24, r12
    1444:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1450:	b7 01       	movw	r22, r14
    1452:	f8 01       	movw	r30, r16
    1454:	06 80       	ldd	r0, Z+6	; 0x06
    1456:	02 c0       	rjmp	.+4      	; 0x145c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    1460:	60 95       	com	r22
    1462:	70 95       	com	r23
    1464:	6c 23       	and	r22, r28
    1466:	7d 23       	and	r23, r29
    1468:	c6 01       	movw	r24, r12
    146a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    146e:	84 e6       	ldi	r24, 0x64	; 100
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	0c 94 18 07 	jmp	0xe30	; 0xe30 <delayMicroseconds>
    148a:	c1 2c       	mov	r12, r1
    148c:	d1 2c       	mov	r13, r1
    148e:	57 01       	movw	r10, r14
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	f7 01       	movw	r30, r14
    1494:	61 91       	ld	r22, Z+
    1496:	7f 01       	movw	r14, r30
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    149e:	ae 01       	movw	r20, r28
    14a0:	0c 2c       	mov	r0, r12
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    14ac:	41 70       	andi	r20, 0x01	; 1
    14ae:	f5 01       	movw	r30, r10
    14b0:	60 81       	ld	r22, Z
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    14b8:	ff ef       	ldi	r31, 0xFF	; 255
    14ba:	cf 1a       	sub	r12, r31
    14bc:	df 0a       	sbc	r13, r31
    14be:	24 e0       	ldi	r18, 0x04	; 4
    14c0:	c2 16       	cp	r12, r18
    14c2:	d1 04       	cpc	r13, r1
    14c4:	21 f7       	brne	.-56     	; 0x148e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    14c6:	c8 01       	movw	r24, r16
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	0c 94 9d 09 	jmp	0x133a	; 0x133a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000014e0 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
    14f6:	5c 01       	movw	r10, r24
    14f8:	87 e0       	ldi	r24, 0x07	; 7
    14fa:	a8 0e       	add	r10, r24
    14fc:	b1 1c       	adc	r11, r1
    14fe:	00 e0       	ldi	r16, 0x00	; 0
    1500:	10 e0       	ldi	r17, 0x00	; 0
    1502:	e6 2e       	mov	r14, r22
    1504:	f1 2c       	mov	r15, r1
    1506:	65 01       	movw	r12, r10
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	f5 01       	movw	r30, r10
    150c:	61 91       	ld	r22, Z+
    150e:	5f 01       	movw	r10, r30
    1510:	ce 01       	movw	r24, r28
    1512:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1516:	a7 01       	movw	r20, r14
    1518:	00 2e       	mov	r0, r16
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    1524:	41 70       	andi	r20, 0x01	; 1
    1526:	f6 01       	movw	r30, r12
    1528:	60 81       	ld	r22, Z
    152a:	ce 01       	movw	r24, r28
    152c:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1530:	0f 5f       	subi	r16, 0xFF	; 255
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	08 30       	cpi	r16, 0x08	; 8
    1536:	11 05       	cpc	r17, r1
    1538:	31 f7       	brne	.-52     	; 0x1506 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    153a:	ce 01       	movw	r24, r28
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	0c 94 9d 09 	jmp	0x133a	; 0x133a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001554 <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	ec 01       	movw	r28, r24
    155c:	16 2f       	mov	r17, r22
    155e:	6c 81       	ldd	r22, Y+4	; 0x04
    1560:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1564:	6d 81       	ldd	r22, Y+5	; 0x05
    1566:	6f 3f       	cpi	r22, 0xFF	; 255
    1568:	21 f0       	breq	.+8      	; 0x1572 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	ce 01       	movw	r24, r28
    156e:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1572:	8c 89       	ldd	r24, Y+20	; 0x14
    1574:	61 2f       	mov	r22, r17
    1576:	84 ff       	sbrs	r24, 4
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    157a:	ce 01       	movw	r24, r28
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	75 95       	asr	r23
    158c:	67 95       	ror	r22
    158e:	8a 95       	dec	r24
    1590:	e1 f7       	brne	.-8      	; 0x158a <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1598:	61 2f       	mov	r22, r17
    159a:	ce 01       	movw	r24, r28
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000015a6 <_ZN21Adafruit_RGBLCDShield7commandEh>:
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_ZN21Adafruit_RGBLCDShield4sendEhh>

000015ac <_ZN21Adafruit_RGBLCDShield5clearEv>:
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    15b2:	80 ed       	ldi	r24, 0xD0	; 208
    15b4:	97 e0       	ldi	r25, 0x07	; 7
    15b6:	0c 94 18 07 	jmp	0xe30	; 0xe30 <delayMicroseconds>

000015ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	28 97       	sbiw	r28, 0x08	; 8
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	9c 01       	movw	r18, r24
    15d0:	88 e0       	ldi	r24, 0x08	; 8
    15d2:	e7 e0       	ldi	r30, 0x07	; 7
    15d4:	f1 e0       	ldi	r31, 0x01	; 1
    15d6:	de 01       	movw	r26, r28
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	01 90       	ld	r0, Z+
    15dc:	0d 92       	st	X+, r0
    15de:	8a 95       	dec	r24
    15e0:	e1 f7       	brne	.-8      	; 0x15da <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    15e2:	f9 01       	movw	r30, r18
    15e4:	80 8d       	ldd	r24, Z+24	; 0x18
    15e6:	84 17       	cp	r24, r20
    15e8:	10 f4       	brcc	.+4      	; 0x15ee <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    15ea:	4f ef       	ldi	r20, 0xFF	; 255
    15ec:	48 0f       	add	r20, r24
    15ee:	fe 01       	movw	r30, r28
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	e4 0f       	add	r30, r20
    15f4:	f1 1d       	adc	r31, r1
    15f6:	e4 0f       	add	r30, r20
    15f8:	f1 1d       	adc	r31, r1
    15fa:	90 81       	ld	r25, Z
    15fc:	69 0f       	add	r22, r25
    15fe:	60 68       	ori	r22, 0x80	; 128
    1600:	c9 01       	movw	r24, r18
    1602:	28 96       	adiw	r28, 0x08	; 8
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001616 <_ZN21Adafruit_RGBLCDShield7displayEv>:
    1616:	fc 01       	movw	r30, r24
    1618:	65 89       	ldd	r22, Z+21	; 0x15
    161a:	26 2f       	mov	r18, r22
    161c:	24 60       	ori	r18, 0x04	; 4
    161e:	25 8b       	std	Z+21, r18	; 0x15
    1620:	6c 60       	ori	r22, 0x0C	; 12
    1622:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001626 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
    1640:	d4 2e       	mov	r13, r20
    1642:	c2 2e       	mov	r12, r18
    1644:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1646:	8f 3f       	cpi	r24, 0xFF	; 255
    1648:	41 f4       	brne	.+16     	; 0x165a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	8d 15       	cp	r24, r13
    164e:	08 f0       	brcs	.+2      	; 0x1652 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    1650:	5e c0       	rjmp	.+188    	; 0x170e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1652:	8c 89       	ldd	r24, Y+20	; 0x14
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 8b       	std	Y+20, r24	; 0x14
    1658:	5a c0       	rjmp	.+180    	; 0x170e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    165a:	83 ed       	ldi	r24, 0xD3	; 211
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN7TwoWire5beginEv>
    1662:	8e 01       	movw	r16, r28
    1664:	05 5e       	subi	r16, 0xE5	; 229
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN17Adafruit_MCP230175beginEv>
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	68 e0       	ldi	r22, 0x08	; 8
    1672:	c8 01       	movw	r24, r16
    1674:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	66 e0       	ldi	r22, 0x06	; 6
    167c:	c8 01       	movw	r24, r16
    167e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	67 e0       	ldi	r22, 0x07	; 7
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	ce 01       	movw	r24, r28
    1690:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    1694:	6d 81       	ldd	r22, Y+5	; 0x05
    1696:	66 23       	and	r22, r22
    1698:	21 f0       	breq	.+8      	; 0x16a2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	c8 01       	movw	r24, r16
    169e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	6c 81       	ldd	r22, Y+4	; 0x04
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	6e 81       	ldd	r22, Y+6	; 0x06
    16b0:	c8 01       	movw	r24, r16
    16b2:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    16b6:	7e 01       	movw	r14, r28
    16b8:	e7 e0       	ldi	r30, 0x07	; 7
    16ba:	ee 0e       	add	r14, r30
    16bc:	f1 1c       	adc	r15, r1
    16be:	5e 01       	movw	r10, r28
    16c0:	fb e0       	ldi	r31, 0x0B	; 11
    16c2:	af 0e       	add	r10, r31
    16c4:	b1 1c       	adc	r11, r1
    16c6:	f7 01       	movw	r30, r14
    16c8:	61 91       	ld	r22, Z+
    16ca:	7f 01       	movw	r14, r30
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	c8 01       	movw	r24, r16
    16d0:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    16d4:	ea 14       	cp	r14, r10
    16d6:	fb 04       	cpc	r15, r11
    16d8:	b1 f7       	brne	.-20     	; 0x16c6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    16da:	7e 01       	movw	r14, r28
    16dc:	ff e0       	ldi	r31, 0x0F	; 15
    16de:	ef 0e       	add	r14, r31
    16e0:	f1 1c       	adc	r15, r1
    16e2:	5e 01       	movw	r10, r28
    16e4:	84 e1       	ldi	r24, 0x14	; 20
    16e6:	a8 0e       	add	r10, r24
    16e8:	b1 1c       	adc	r11, r1
    16ea:	47 01       	movw	r8, r14
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	f7 01       	movw	r30, r14
    16f0:	61 91       	ld	r22, Z+
    16f2:	7f 01       	movw	r14, r30
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh>
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	f4 01       	movw	r30, r8
    16fe:	60 81       	ld	r22, Z
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN17Adafruit_MCP230176pullUpEhh>
    1706:	ea 14       	cp	r14, r10
    1708:	fb 04       	cpc	r15, r11
    170a:	79 f7       	brne	.-34     	; 0x16ea <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    170c:	9e cf       	rjmp	.-196    	; 0x164a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    170e:	d8 8e       	std	Y+24, r13	; 0x18
    1710:	19 8e       	std	Y+25, r1	; 0x19
    1712:	cc 20       	and	r12, r12
    1714:	31 f0       	breq	.+12     	; 0x1722 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1716:	f1 e0       	ldi	r31, 0x01	; 1
    1718:	df 12       	cpse	r13, r31
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    171c:	8c 89       	ldd	r24, Y+20	; 0x14
    171e:	84 60       	ori	r24, 0x04	; 4
    1720:	8c 8b       	std	Y+20, r24	; 0x14
    1722:	80 e5       	ldi	r24, 0x50	; 80
    1724:	93 ec       	ldi	r25, 0xC3	; 195
    1726:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	6c 81       	ldd	r22, Y+4	; 0x04
    172e:	ce 01       	movw	r24, r28
    1730:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	6e 81       	ldd	r22, Y+6	; 0x06
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	6f 3f       	cpi	r22, 0xFF	; 255
    1742:	21 f0       	breq	.+8      	; 0x174c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    174c:	6c 89       	ldd	r22, Y+20	; 0x14
    174e:	64 fd       	sbrc	r22, 4
    1750:	1d c0       	rjmp	.+58     	; 0x178c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    1752:	63 e0       	ldi	r22, 0x03	; 3
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    175a:	84 e9       	ldi	r24, 0x94	; 148
    175c:	91 e1       	ldi	r25, 0x11	; 17
    175e:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1762:	63 e0       	ldi	r22, 0x03	; 3
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    176a:	84 e9       	ldi	r24, 0x94	; 148
    176c:	91 e1       	ldi	r25, 0x11	; 17
    176e:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1772:	63 e0       	ldi	r22, 0x03	; 3
    1774:	ce 01       	movw	r24, r28
    1776:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    177a:	86 e9       	ldi	r24, 0x96	; 150
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	ce 01       	movw	r24, r28
    1786:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    178c:	60 62       	ori	r22, 0x20	; 32
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    1794:	84 e9       	ldi	r24, 0x94	; 148
    1796:	91 e1       	ldi	r25, 0x11	; 17
    1798:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    179c:	6c 89       	ldd	r22, Y+20	; 0x14
    179e:	60 62       	ori	r22, 0x20	; 32
    17a0:	ce 01       	movw	r24, r28
    17a2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17a6:	86 e9       	ldi	r24, 0x96	; 150
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 18 07 	call	0xe30	; 0xe30 <delayMicroseconds>
    17ae:	6c 89       	ldd	r22, Y+20	; 0x14
    17b0:	60 62       	ori	r22, 0x20	; 32
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17b8:	6c 89       	ldd	r22, Y+20	; 0x14
    17ba:	60 62       	ori	r22, 0x20	; 32
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17c2:	84 e0       	ldi	r24, 0x04	; 4
    17c4:	8d 8b       	std	Y+21, r24	; 0x15
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_ZN21Adafruit_RGBLCDShield7displayEv>
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN21Adafruit_RGBLCDShield5clearEv>
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	8e 8b       	std	Y+22, r24	; 0x16
    17d6:	66 e0       	ldi	r22, 0x06	; 6
    17d8:	ce 01       	movw	r24, r28
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

000017f6 <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	08 95       	ret

00001802 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	7c 01       	movw	r14, r24
    1812:	2f e0       	ldi	r18, 0x0F	; 15
    1814:	e2 0e       	add	r14, r18
    1816:	f1 1c       	adc	r15, r1
    1818:	c0 e0       	ldi	r28, 0x00	; 0
    181a:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    181c:	2f e1       	ldi	r18, 0x1F	; 31
    181e:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1820:	8c 01       	movw	r16, r24
    1822:	05 5e       	subi	r16, 0xE5	; 229
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	f7 01       	movw	r30, r14
    1828:	61 91       	ld	r22, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	c8 01       	movw	r24, r16
    182e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN17Adafruit_MCP2301711digitalReadEh>
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	0c 2e       	mov	r0, r28
    1838:	02 c0       	rjmp	.+4      	; 0x183e <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    183a:	22 0f       	add	r18, r18
    183c:	33 1f       	adc	r19, r19
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    1842:	20 95       	com	r18
    1844:	30 95       	com	r19
    1846:	d2 22       	and	r13, r18
    1848:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    184a:	c5 30       	cpi	r28, 0x05	; 5
    184c:	d1 05       	cpc	r29, r1
    184e:	59 f7       	brne	.-42     	; 0x1826 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    1850:	8d 2d       	mov	r24, r13
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	08 95       	ret

00001862 <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    1862:	68 2f       	mov	r22, r24
    1864:	83 ed       	ldi	r24, 0xD3	; 211
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <_ZN7TwoWire5writeEh>

0000186c <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1872:	68 30       	cpi	r22, 0x08	; 8
    1874:	08 f0       	brcs	.+2      	; 0x1878 <_ZN17Adafruit_MCP230175beginEh+0xc>
    1876:	67 e0       	ldi	r22, 0x07	; 7
    1878:	68 83       	st	Y, r22

  WIRE.begin();
    187a:	83 ed       	ldi	r24, 0xD3	; 211
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1882:	68 81       	ld	r22, Y
    1884:	60 62       	ori	r22, 0x20	; 32
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	83 ed       	ldi	r24, 0xD3	; 211
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    189c:	83 ed       	ldi	r24, 0xD3	; 211
    189e:	92 e0       	ldi	r25, 0x02	; 2
    18a0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    18a4:	68 81       	ld	r22, Y
    18a6:	60 62       	ori	r22, 0x20	; 32
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	83 ed       	ldi	r24, 0xD3	; 211
    18ac:	92 e0       	ldi	r25, 0x02	; 2
    18ae:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    18be:	83 ed       	ldi	r24, 0xD3	; 211
    18c0:	92 e0       	ldi	r25, 0x02	; 2
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    18c6:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

000018ca <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	0c 94 36 0c 	jmp	0x186c	; 0x186c <_ZN17Adafruit_MCP230175beginEh>

000018d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	d6 2f       	mov	r29, r22
    18d6:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    18d8:	fc 01       	movw	r30, r24
    18da:	60 81       	ld	r22, Z
    18dc:	60 62       	ori	r22, 0x20	; 32
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	83 ed       	ldi	r24, 0xD3	; 211
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    18e8:	82 e1       	ldi	r24, 0x12	; 18
    18ea:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    18ee:	8d 2f       	mov	r24, r29
    18f0:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(ba >> 8);
    18f4:	8c 2f       	mov	r24, r28
    18f6:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    18fa:	83 ed       	ldi	r24, 0xD3	; 211
    18fc:	92 e0       	ldi	r25, 0x02	; 2
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    1902:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

00001906 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	8c 01       	movw	r16, r24
    1912:	c6 2f       	mov	r28, r22
    1914:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1916:	60 31       	cpi	r22, 0x10	; 16
    1918:	08 f0       	brcs	.+2      	; 0x191c <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    191a:	51 c0       	rjmp	.+162    	; 0x19be <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    191c:	68 30       	cpi	r22, 0x08	; 8
    191e:	20 f0       	brcs	.+8      	; 0x1928 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    1920:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    1922:	ff 24       	eor	r15, r15
    1924:	f3 94       	inc	r15
    1926:	01 c0       	rjmp	.+2      	; 0x192a <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1928:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    192a:	f8 01       	movw	r30, r16
    192c:	60 81       	ld	r22, Z
    192e:	60 62       	ori	r22, 0x20	; 32
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	83 ed       	ldi	r24, 0xD3	; 211
    1934:	92 e0       	ldi	r25, 0x02	; 2
    1936:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    193a:	8f 2d       	mov	r24, r15
    193c:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1940:	83 ed       	ldi	r24, 0xD3	; 211
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1948:	f8 01       	movw	r30, r16
    194a:	60 81       	ld	r22, Z
    194c:	60 62       	ori	r22, 0x20	; 32
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	83 ed       	ldi	r24, 0xD3	; 211
    1956:	92 e0       	ldi	r25, 0x02	; 2
    1958:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    195c:	83 ed       	ldi	r24, 0xD3	; 211
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1968:	d1 11       	cpse	r29, r1
    196a:	09 c0       	rjmp	.+18     	; 0x197e <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    196c:	a9 01       	movw	r20, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1970:	44 0f       	add	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	ca 95       	dec	r28
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1978:	ea 01       	movw	r28, r20
    197a:	c8 2b       	or	r28, r24
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    197e:	f9 01       	movw	r30, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	ca 95       	dec	r28
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    198a:	ef 01       	movw	r28, r30
    198c:	c0 95       	com	r28
    198e:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1990:	f8 01       	movw	r30, r16
    1992:	60 81       	ld	r22, Z
    1994:	60 62       	ori	r22, 0x20	; 32
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	83 ed       	ldi	r24, 0xD3	; 211
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    19a0:	8f 2d       	mov	r24, r15
    19a2:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(iodir);	
    19a6:	8c 2f       	mov	r24, r28
    19a8:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    19ac:	83 ed       	ldi	r24, 0xD3	; 211
    19ae:	92 e0       	ldi	r25, 0x02	; 2
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    19ba:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	08 95       	ret

000019ca <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19d0:	68 81       	ld	r22, Y
    19d2:	60 62       	ori	r22, 0x20	; 32
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	83 ed       	ldi	r24, 0xD3	; 211
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    19de:	82 e1       	ldi	r24, 0x12	; 18
    19e0:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    19e4:	83 ed       	ldi	r24, 0xD3	; 211
    19e6:	92 e0       	ldi	r25, 0x02	; 2
    19e8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    19ec:	68 81       	ld	r22, Y
    19ee:	60 62       	ori	r22, 0x20	; 32
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	42 e0       	ldi	r20, 0x02	; 2
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	83 ed       	ldi	r24, 0xD3	; 211
    19f8:	92 e0       	ldi	r25, 0x02	; 2
    19fa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    19fe:	83 ed       	ldi	r24, 0xD3	; 211
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
    1a06:	c8 2f       	mov	r28, r24
    1a08:	83 ed       	ldi	r24, 0xD3	; 211
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1a10:	98 2f       	mov	r25, r24
    1a12:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1a14:	8c 2b       	or	r24, r28
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	8c 01       	movw	r16, r24
    1a26:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1a28:	60 31       	cpi	r22, 0x10	; 16
    1a2a:	58 f5       	brcc	.+86     	; 0x1a82 <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1a2c:	68 30       	cpi	r22, 0x08	; 8
    1a2e:	18 f0       	brcs	.+6      	; 0x1a36 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1a30:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1a32:	d3 e1       	ldi	r29, 0x13	; 19
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1a36:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a38:	f8 01       	movw	r30, r16
    1a3a:	60 81       	ld	r22, Z
    1a3c:	60 62       	ori	r22, 0x20	; 32
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	83 ed       	ldi	r24, 0xD3	; 211
    1a42:	92 e0       	ldi	r25, 0x02	; 2
    1a44:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1a48:	8d 2f       	mov	r24, r29
    1a4a:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a4e:	83 ed       	ldi	r24, 0xD3	; 211
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1a56:	f8 01       	movw	r30, r16
    1a58:	60 81       	ld	r22, Z
    1a5a:	60 62       	ori	r22, 0x20	; 32
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	83 ed       	ldi	r24, 0xD3	; 211
    1a64:	92 e0       	ldi	r25, 0x02	; 2
    1a66:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a6a:	83 ed       	ldi	r24, 0xD3	; 211
    1a6c:	92 e0       	ldi	r25, 0x02	; 2
    1a6e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1a72:	99 27       	eor	r25, r25
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	ca 95       	dec	r28
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	8c 01       	movw	r16, r24
    1a9a:	c6 2f       	mov	r28, r22
    1a9c:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1a9e:	60 31       	cpi	r22, 0x10	; 16
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1aa2:	52 c0       	rjmp	.+164    	; 0x1b48 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1aa4:	68 30       	cpi	r22, 0x08	; 8
    1aa6:	20 f0       	brcs	.+8      	; 0x1ab0 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1aa8:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1aaa:	9d e0       	ldi	r25, 0x0D	; 13
    1aac:	f9 2e       	mov	r15, r25
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1ab0:	8c e0       	ldi	r24, 0x0C	; 12
    1ab2:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	60 81       	ld	r22, Z
    1ab8:	60 62       	ori	r22, 0x20	; 32
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	83 ed       	ldi	r24, 0xD3	; 211
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1ac4:	8f 2d       	mov	r24, r15
    1ac6:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1aca:	83 ed       	ldi	r24, 0xD3	; 211
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	60 81       	ld	r22, Z
    1ad6:	60 62       	ori	r22, 0x20	; 32
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	83 ed       	ldi	r24, 0xD3	; 211
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1ae6:	83 ed       	ldi	r24, 0xD3	; 211
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1af2:	d1 30       	cpi	r29, 0x01	; 1
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1af6:	a9 01       	movw	r20, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1afa:	44 0f       	add	r20, r20
    1afc:	55 1f       	adc	r21, r21
    1afe:	ca 95       	dec	r28
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1b02:	ea 01       	movw	r28, r20
    1b04:	c8 2b       	or	r28, r24
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1b08:	f9 01       	movw	r30, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ca 95       	dec	r28
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1b14:	ef 01       	movw	r28, r30
    1b16:	c0 95       	com	r28
    1b18:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	60 81       	ld	r22, Z
    1b1e:	60 62       	ori	r22, 0x20	; 32
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	83 ed       	ldi	r24, 0xD3	; 211
    1b24:	92 e0       	ldi	r25, 0x02	; 2
    1b26:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1b2a:	8f 2d       	mov	r24, r15
    1b2c:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(gppu);	
    1b30:	8c 2f       	mov	r24, r28
    1b32:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1b36:	83 ed       	ldi	r24, 0xD3	; 211
    1b38:	92 e0       	ldi	r25, 0x02	; 2
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1b44:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
}
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	08 95       	ret

00001b54 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	8c 01       	movw	r16, r24
    1b62:	c6 2f       	mov	r28, r22
    1b64:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1b66:	60 31       	cpi	r22, 0x10	; 16
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1b6a:	56 c0       	rjmp	.+172    	; 0x1c18 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1b6c:	68 30       	cpi	r22, 0x08	; 8
    1b6e:	28 f0       	brcs	.+10     	; 0x1b7a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1b70:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1b72:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1b74:	93 e1       	ldi	r25, 0x13	; 19
    1b76:	f9 2e       	mov	r15, r25
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1b7a:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1b7c:	82 e1       	ldi	r24, 0x12	; 18
    1b7e:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b80:	f8 01       	movw	r30, r16
    1b82:	60 81       	ld	r22, Z
    1b84:	60 62       	ori	r22, 0x20	; 32
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	83 ed       	ldi	r24, 0xD3	; 211
    1b8a:	92 e0       	ldi	r25, 0x02	; 2
    1b8c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1b90:	8d 2f       	mov	r24, r29
    1b92:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1b96:	83 ed       	ldi	r24, 0xD3	; 211
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	60 81       	ld	r22, Z
    1ba2:	60 62       	ori	r22, 0x20	; 32
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	83 ed       	ldi	r24, 0xD3	; 211
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1bb2:	83 ed       	ldi	r24, 0xD3	; 211
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1bbc:	21 e0       	ldi	r18, 0x01	; 1
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1bc0:	ef 12       	cpse	r14, r31
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1bc8:	44 0f       	add	r20, r20
    1bca:	55 1f       	adc	r21, r21
    1bcc:	ca 95       	dec	r28
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1bd0:	ea 01       	movw	r28, r20
    1bd2:	c8 2b       	or	r28, r24
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	ca 95       	dec	r28
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1be2:	ef 01       	movw	r28, r30
    1be4:	c0 95       	com	r28
    1be6:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1be8:	f8 01       	movw	r30, r16
    1bea:	60 81       	ld	r22, Z
    1bec:	60 62       	ori	r22, 0x20	; 32
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	83 ed       	ldi	r24, 0xD3	; 211
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1bf8:	8f 2d       	mov	r24, r15
    1bfa:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  wiresend(gpio);	
    1bfe:	8c 2f       	mov	r24, r28
    1c00:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL8wiresendh>
  WIRE.endTransmission();
    1c04:	83 ed       	ldi	r24, 0xD3	; 211
    1c06:	92 e0       	ldi	r25, 0x02	; 2
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1c14:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	08 95       	ret

00001c26 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c26:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1c30:	82 1b       	sub	r24, r18
    1c32:	91 09       	sbc	r25, r1
    1c34:	08 95       	ret

00001c36 <_ZN7TwoWire4readEv>:
    1c36:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1c3a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1c3e:	98 17       	cp	r25, r24
    1c40:	50 f4       	brcc	.+20     	; 0x1c56 <_ZN7TwoWire4readEv+0x20>
    1c42:	e9 2f       	mov	r30, r25
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	e7 5f       	subi	r30, 0xF7	; 247
    1c48:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4a:	20 81       	ld	r18, Z
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	9f 5f       	subi	r25, 0xFF	; 255
    1c50:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <_ZN7TwoWire4readEv+0x24>
    1c56:	2f ef       	ldi	r18, 0xFF	; 255
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	08 95       	ret

00001c5e <_ZN7TwoWire4peekEv>:
    1c5e:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1c62:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1c66:	e8 17       	cp	r30, r24
    1c68:	30 f4       	brcc	.+12     	; 0x1c76 <_ZN7TwoWire4peekEv+0x18>
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	e7 5f       	subi	r30, 0xF7	; 247
    1c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c70:	80 81       	ld	r24, Z
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	08 95       	ret
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	08 95       	ret

00001c7c <_ZN7TwoWire5flushEv>:
    1c7c:	08 95       	ret

00001c7e <_ZN7TwoWire16onReceiveServiceEPhi>:
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	ec 01       	movw	r28, r24
    1c84:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <_ZN7TwoWire14user_onReceiveE>
    1c88:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <_ZN7TwoWire14user_onReceiveE+0x1>
    1c8c:	30 97       	sbiw	r30, 0x00	; 0
    1c8e:	f1 f0       	breq	.+60     	; 0x1ccc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c90:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1c94:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1c98:	98 17       	cp	r25, r24
    1c9a:	c0 f0       	brcs	.+48     	; 0x1ccc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	29 2f       	mov	r18, r25
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	26 17       	cp	r18, r22
    1ca4:	37 07       	cpc	r19, r23
    1ca6:	54 f4       	brge	.+20     	; 0x1cbc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1ca8:	de 01       	movw	r26, r28
    1caa:	a2 0f       	add	r26, r18
    1cac:	b3 1f       	adc	r27, r19
    1cae:	4c 91       	ld	r20, X
    1cb0:	d9 01       	movw	r26, r18
    1cb2:	a7 5f       	subi	r26, 0xF7	; 247
    1cb4:	bc 4f       	sbci	r27, 0xFC	; 252
    1cb6:	4c 93       	st	X, r20
    1cb8:	9f 5f       	subi	r25, 0xFF	; 255
    1cba:	f1 cf       	rjmp	.-30     	; 0x1c9e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1cbc:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1cc0:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	09 94       	ijmp
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <_ZN7TwoWire16onRequestServiceEv>:
    1cd2:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <_ZN7TwoWire14user_onRequestE>
    1cd6:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <_ZN7TwoWire14user_onRequestE+0x1>
    1cda:	30 97       	sbiw	r30, 0x00	; 0
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1cde:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1ce2:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1ce6:	09 94       	ijmp
    1ce8:	08 95       	ret

00001cea <_ZN7TwoWire5writeEPKhj>:
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	7c 01       	movw	r14, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8a 01       	movw	r16, r20
    1d00:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    1d04:	22 23       	and	r18, r18
    1d06:	89 f0       	breq	.+34     	; 0x1d2a <_ZN7TwoWire5writeEPKhj+0x40>
    1d08:	eb 01       	movw	r28, r22
    1d0a:	6b 01       	movw	r12, r22
    1d0c:	c4 0e       	add	r12, r20
    1d0e:	d5 1e       	adc	r13, r21
    1d10:	cc 15       	cp	r28, r12
    1d12:	dd 05       	cpc	r29, r13
    1d14:	69 f0       	breq	.+26     	; 0x1d30 <_ZN7TwoWire5writeEPKhj+0x46>
    1d16:	69 91       	ld	r22, Y+
    1d18:	d7 01       	movw	r26, r14
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	01 90       	ld	r0, Z+
    1d20:	f0 81       	ld	r31, Z
    1d22:	e0 2d       	mov	r30, r0
    1d24:	c7 01       	movw	r24, r14
    1d26:	09 95       	icall
    1d28:	f3 cf       	rjmp	.-26     	; 0x1d10 <_ZN7TwoWire5writeEPKhj+0x26>
    1d2a:	64 2f       	mov	r22, r20
    1d2c:	0e 94 3d 10 	call	0x207a	; 0x207a <twi_transmit>
    1d30:	c8 01       	movw	r24, r16
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	08 95       	ret

00001d44 <_ZN7TwoWire5writeEh>:
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	1f 92       	push	r1
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	69 83       	std	Y+1, r22	; 0x01
    1d50:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    1d54:	22 23       	and	r18, r18
    1d56:	d1 f0       	breq	.+52     	; 0x1d8c <_ZN7TwoWire5writeEh+0x48>
    1d58:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1d5c:	20 32       	cpi	r18, 0x20	; 32
    1d5e:	40 f0       	brcs	.+16     	; 0x1d70 <_ZN7TwoWire5writeEh+0x2c>
    1d60:	21 e0       	ldi	r18, 0x01	; 1
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	fc 01       	movw	r30, r24
    1d66:	33 83       	std	Z+3, r19	; 0x03
    1d68:	22 83       	std	Z+2, r18	; 0x02
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	15 c0       	rjmp	.+42     	; 0x1d9a <_ZN7TwoWire5writeEh+0x56>
    1d70:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1d74:	e8 2f       	mov	r30, r24
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	ea 51       	subi	r30, 0x1A	; 26
    1d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7c:	99 81       	ldd	r25, Y+1	; 0x01
    1d7e:	90 83       	st	Z, r25
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1d86:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <_ZN7TwoWire5writeEh+0x52>
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	0e 94 3d 10 	call	0x207a	; 0x207a <twi_transmit>
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0f 90       	pop	r0
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	08 95       	ret

00001da2 <_ZN7TwoWireC1Ev>:
    1da2:	fc 01       	movw	r30, r24
    1da4:	13 82       	std	Z+3, r1	; 0x03
    1da6:	12 82       	std	Z+2, r1	; 0x02
    1da8:	88 ee       	ldi	r24, 0xE8	; 232
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	a0 e0       	ldi	r26, 0x00	; 0
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	84 83       	std	Z+4, r24	; 0x04
    1db2:	95 83       	std	Z+5, r25	; 0x05
    1db4:	a6 83       	std	Z+6, r26	; 0x06
    1db6:	b7 83       	std	Z+7, r27	; 0x07
    1db8:	89 ee       	ldi	r24, 0xE9	; 233
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
    1dc0:	08 95       	ret

00001dc2 <_ZN7TwoWire5beginEv>:
    1dc2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1dc6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1dca:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1dce:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1dd2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <twi_init>
    1dd6:	89 e6       	ldi	r24, 0x69	; 105
    1dd8:	9e e0       	ldi	r25, 0x0E	; 14
    1dda:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <twi_attachSlaveTxEvent>
    1dde:	8f e3       	ldi	r24, 0x3F	; 63
    1de0:	9e e0       	ldi	r25, 0x0E	; 14
    1de2:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <twi_attachSlaveRxEvent>

00001de6 <_ZN7TwoWire17beginTransmissionEh>:
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    1dec:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <_ZN7TwoWire9txAddressE>
    1df0:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1df4:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1df8:	08 95       	ret

00001dfa <_ZN7TwoWire17beginTransmissionEi>:
    1dfa:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <_ZN7TwoWire17beginTransmissionEh>

00001dfe <_ZN7TwoWire15endTransmissionEh>:
    1dfe:	0f 93       	push	r16
    1e00:	06 2f       	mov	r16, r22
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1e08:	66 ee       	ldi	r22, 0xE6	; 230
    1e0a:	72 e0       	ldi	r23, 0x02	; 2
    1e0c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_ZN7TwoWire9txAddressE>
    1e10:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <twi_writeTo>
    1e14:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    1e18:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    1e1c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <_ZN7TwoWire11requestFromEhhmhh>:
    1e24:	4f 92       	push	r4
    1e26:	5f 92       	push	r5
    1e28:	6f 92       	push	r6
    1e2a:	7f 92       	push	r7
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	5c 01       	movw	r10, r24
    1e40:	f6 2e       	mov	r15, r22
    1e42:	d4 2f       	mov	r29, r20
    1e44:	28 01       	movw	r4, r16
    1e46:	39 01       	movw	r6, r18
    1e48:	ee 20       	and	r14, r14
    1e4a:	21 f1       	breq	.+72     	; 0x1e94 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1e4c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN7TwoWire17beginTransmissionEh>
    1e50:	ce 2d       	mov	r28, r14
    1e52:	c4 30       	cpi	r28, 0x04	; 4
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e56:	c3 e0       	ldi	r28, 0x03	; 3
    1e58:	c1 50       	subi	r28, 0x01	; 1
    1e5a:	c0 f0       	brcs	.+48     	; 0x1e8c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1e5c:	28 e0       	ldi	r18, 0x08	; 8
    1e5e:	c2 9f       	mul	r28, r18
    1e60:	c0 01       	movw	r24, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	a3 01       	movw	r20, r6
    1e66:	92 01       	movw	r18, r4
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1e6a:	56 95       	lsr	r21
    1e6c:	47 95       	ror	r20
    1e6e:	37 95       	ror	r19
    1e70:	27 95       	ror	r18
    1e72:	8a 95       	dec	r24
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1e76:	ca 01       	movw	r24, r20
    1e78:	b9 01       	movw	r22, r18
    1e7a:	d5 01       	movw	r26, r10
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	01 90       	ld	r0, Z+
    1e82:	f0 81       	ld	r31, Z
    1e84:	e0 2d       	mov	r30, r0
    1e86:	c5 01       	movw	r24, r10
    1e88:	09 95       	icall
    1e8a:	e6 cf       	rjmp	.-52     	; 0x1e58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	c5 01       	movw	r24, r10
    1e90:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN7TwoWire15endTransmissionEh>
    1e94:	4d 2f       	mov	r20, r29
    1e96:	d1 32       	cpi	r29, 0x21	; 33
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	2c 2d       	mov	r18, r12
    1e9e:	69 e0       	ldi	r22, 0x09	; 9
    1ea0:	73 e0       	ldi	r23, 0x03	; 3
    1ea2:	8f 2d       	mov	r24, r15
    1ea4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <twi_readFrom>
    1ea8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    1eac:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	7f 90       	pop	r7
    1ec4:	6f 90       	pop	r6
    1ec6:	5f 90       	pop	r5
    1ec8:	4f 90       	pop	r4
    1eca:	08 95       	ret

00001ecc <_ZN7TwoWire11requestFromEhhh>:
    1ecc:	cf 92       	push	r12
    1ece:	ef 92       	push	r14
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	c2 2e       	mov	r12, r18
    1ed6:	e1 2c       	mov	r14, r1
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	98 01       	movw	r18, r16
    1ede:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN7TwoWire11requestFromEhhmhh>
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ef 90       	pop	r14
    1ee8:	cf 90       	pop	r12
    1eea:	08 95       	ret

00001eec <_ZN7TwoWire11requestFromEii>:
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_ZN7TwoWire11requestFromEhhh>

00001ef2 <_ZN7TwoWire15endTransmissionEv>:
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_ZN7TwoWire15endTransmissionEh>

00001ef8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1ef8:	83 ed       	ldi	r24, 0xD3	; 211
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_ZN7TwoWireC1Ev>

00001f00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1f00:	08 95       	ret

00001f02 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f02:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <twi_state>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_sendStop>
    1f0c:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <twi_inRepStart>
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	82 e1       	ldi	r24, 0x12	; 18
    1f14:	0e 94 c6 07 	call	0xf8c	; 0xf8c <digitalWrite>
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	83 e1       	ldi	r24, 0x13	; 19
    1f1c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <digitalWrite>
    1f20:	e9 eb       	ldi	r30, 0xB9	; 185
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	8e 7f       	andi	r24, 0xFE	; 254
    1f28:	80 83       	st	Z, r24
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8d 7f       	andi	r24, 0xFD	; 253
    1f2e:	80 83       	st	Z, r24
    1f30:	88 e4       	ldi	r24, 0x48	; 72
    1f32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1f36:	85 e4       	ldi	r24, 0x45	; 69
    1f38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f3c:	08 95       	ret

00001f3e <twi_readFrom>:
    1f3e:	41 32       	cpi	r20, 0x21	; 33
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <twi_readFrom+0x6>
    1f42:	43 c0       	rjmp	.+134    	; 0x1fca <twi_readFrom+0x8c>
    1f44:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <twi_state>
    1f48:	91 11       	cpse	r25, r1
    1f4a:	fc cf       	rjmp	.-8      	; 0x1f44 <twi_readFrom+0x6>
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <twi_state>
    1f52:	20 93 94 03 	sts	0x0394, r18	; 0x800394 <twi_sendStop>
    1f56:	2f ef       	ldi	r18, 0xFF	; 255
    1f58:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <twi_error>
    1f5c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_masterBufferIndex>
    1f60:	24 0f       	add	r18, r20
    1f62:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <twi_masterBufferLength>
    1f66:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <twi_slarw>
    1f6a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <twi_slarw>
    1f6e:	88 0f       	add	r24, r24
    1f70:	89 2b       	or	r24, r25
    1f72:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <twi_slarw>
    1f76:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_inRepStart>
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	61 f4       	brne	.+24     	; 0x1f96 <twi_readFrom+0x58>
    1f7e:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <twi_inRepStart>
    1f82:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_slarw>
    1f86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f8e:	83 fd       	sbrc	r24, 3
    1f90:	f8 cf       	rjmp	.-16     	; 0x1f82 <twi_readFrom+0x44>
    1f92:	85 ec       	ldi	r24, 0xC5	; 197
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <twi_readFrom+0x5a>
    1f96:	85 ee       	ldi	r24, 0xE5	; 229
    1f98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f9c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <twi_state>
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	e1 f3       	breq	.-8      	; 0x1f9c <twi_readFrom+0x5e>
    1fa4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_masterBufferIndex>
    1fa8:	84 17       	cp	r24, r20
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <twi_readFrom+0x72>
    1fac:	40 91 6e 03 	lds	r20, 0x036E	; 0x80036e <twi_masterBufferIndex>
    1fb0:	af e6       	ldi	r26, 0x6F	; 111
    1fb2:	b3 e0       	ldi	r27, 0x03	; 3
    1fb4:	96 2f       	mov	r25, r22
    1fb6:	fb 01       	movw	r30, r22
    1fb8:	8e 2f       	mov	r24, r30
    1fba:	89 1b       	sub	r24, r25
    1fbc:	84 17       	cp	r24, r20
    1fbe:	18 f4       	brcc	.+6      	; 0x1fc6 <twi_readFrom+0x88>
    1fc0:	8d 91       	ld	r24, X+
    1fc2:	81 93       	st	Z+, r24
    1fc4:	f9 cf       	rjmp	.-14     	; 0x1fb8 <twi_readFrom+0x7a>
    1fc6:	84 2f       	mov	r24, r20
    1fc8:	08 95       	ret
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <twi_writeTo>:
    1fce:	0f 93       	push	r16
    1fd0:	41 32       	cpi	r20, 0x21	; 33
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <twi_writeTo+0x8>
    1fd4:	4a c0       	rjmp	.+148    	; 0x206a <twi_writeTo+0x9c>
    1fd6:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <twi_state>
    1fda:	91 11       	cpse	r25, r1
    1fdc:	fc cf       	rjmp	.-8      	; 0x1fd6 <twi_writeTo+0x8>
    1fde:	32 e0       	ldi	r19, 0x02	; 2
    1fe0:	30 93 96 03 	sts	0x0396, r19	; 0x800396 <twi_state>
    1fe4:	00 93 94 03 	sts	0x0394, r16	; 0x800394 <twi_sendStop>
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <twi_error>
    1fee:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_masterBufferIndex>
    1ff2:	40 93 6d 03 	sts	0x036D, r20	; 0x80036d <twi_masterBufferLength>
    1ff6:	56 2f       	mov	r21, r22
    1ff8:	af e6       	ldi	r26, 0x6F	; 111
    1ffa:	b3 e0       	ldi	r27, 0x03	; 3
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	3e 2f       	mov	r19, r30
    2000:	35 1b       	sub	r19, r21
    2002:	34 17       	cp	r19, r20
    2004:	18 f4       	brcc	.+6      	; 0x200c <twi_writeTo+0x3e>
    2006:	31 91       	ld	r19, Z+
    2008:	3d 93       	st	X+, r19
    200a:	f9 cf       	rjmp	.-14     	; 0x1ffe <twi_writeTo+0x30>
    200c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <twi_slarw>
    2010:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <twi_slarw>
    2014:	88 0f       	add	r24, r24
    2016:	83 2b       	or	r24, r19
    2018:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <twi_slarw>
    201c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_inRepStart>
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	61 f4       	brne	.+24     	; 0x203c <twi_writeTo+0x6e>
    2024:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <twi_inRepStart>
    2028:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_slarw>
    202c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2030:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2034:	83 fd       	sbrc	r24, 3
    2036:	f8 cf       	rjmp	.-16     	; 0x2028 <twi_writeTo+0x5a>
    2038:	85 ec       	ldi	r24, 0xC5	; 197
    203a:	01 c0       	rjmp	.+2      	; 0x203e <twi_writeTo+0x70>
    203c:	85 ee       	ldi	r24, 0xE5	; 229
    203e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2042:	22 23       	and	r18, r18
    2044:	21 f0       	breq	.+8      	; 0x204e <twi_writeTo+0x80>
    2046:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <twi_state>
    204a:	82 30       	cpi	r24, 0x02	; 2
    204c:	d1 f3       	breq	.-12     	; 0x2042 <twi_writeTo+0x74>
    204e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_error>
    2052:	8f 3f       	cpi	r24, 0xFF	; 255
    2054:	79 f0       	breq	.+30     	; 0x2074 <twi_writeTo+0xa6>
    2056:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_error>
    205a:	80 32       	cpi	r24, 0x20	; 32
    205c:	41 f0       	breq	.+16     	; 0x206e <twi_writeTo+0xa0>
    205e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_error>
    2062:	80 33       	cpi	r24, 0x30	; 48
    2064:	31 f0       	breq	.+12     	; 0x2072 <twi_writeTo+0xa4>
    2066:	94 e0       	ldi	r25, 0x04	; 4
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <twi_writeTo+0xa6>
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <twi_writeTo+0xa6>
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <twi_writeTo+0xa6>
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	89 2f       	mov	r24, r25
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret

0000207a <twi_transmit>:
    207a:	40 91 4b 03 	lds	r20, 0x034B	; 0x80034b <twi_txBufferLength>
    207e:	26 2f       	mov	r18, r22
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	24 0f       	add	r18, r20
    2084:	31 1d       	adc	r19, r1
    2086:	21 32       	cpi	r18, 0x21	; 33
    2088:	31 05       	cpc	r19, r1
    208a:	dc f4       	brge	.+54     	; 0x20c2 <twi_transmit+0x48>
    208c:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <twi_state>
    2090:	24 30       	cpi	r18, 0x04	; 4
    2092:	c9 f4       	brne	.+50     	; 0x20c6 <twi_transmit+0x4c>
    2094:	fc 01       	movw	r30, r24
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	86 17       	cp	r24, r22
    209c:	58 f4       	brcc	.+22     	; 0x20b4 <twi_transmit+0x3a>
    209e:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <twi_txBufferLength>
    20a2:	21 91       	ld	r18, Z+
    20a4:	dc 01       	movw	r26, r24
    20a6:	a3 5b       	subi	r26, 0xB3	; 179
    20a8:	bc 4f       	sbci	r27, 0xFC	; 252
    20aa:	a3 0f       	add	r26, r19
    20ac:	b1 1d       	adc	r27, r1
    20ae:	2c 93       	st	X, r18
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	f3 cf       	rjmp	.-26     	; 0x209a <twi_transmit+0x20>
    20b4:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_txBufferLength>
    20b8:	68 0f       	add	r22, r24
    20ba:	60 93 4b 03 	sts	0x034B, r22	; 0x80034b <twi_txBufferLength>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	08 95       	ret
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	08 95       	ret
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	08 95       	ret

000020ca <twi_attachSlaveRxEvent>:
    20ca:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <twi_onSlaveReceive+0x1>
    20ce:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_onSlaveReceive>
    20d2:	08 95       	ret

000020d4 <twi_attachSlaveTxEvent>:
    20d4:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <twi_onSlaveTransmit+0x1>
    20d8:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <twi_onSlaveTransmit>
    20dc:	08 95       	ret

000020de <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20de:	85 ed       	ldi	r24, 0xD5	; 213
    20e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20e8:	84 fd       	sbrc	r24, 4
    20ea:	fc cf       	rjmp	.-8      	; 0x20e4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20ec:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <twi_state>
    20f0:	08 95       	ret

000020f2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20f2:	85 ec       	ldi	r24, 0xC5	; 197
    20f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    20f8:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <twi_state>
    20fc:	08 95       	ret

000020fe <__vector_24>:
}

ISR(TWI_vect)
{
    20fe:	1f 92       	push	r1
    2100:	0f 92       	push	r0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	0f 92       	push	r0
    2106:	11 24       	eor	r1, r1
    2108:	2f 93       	push	r18
    210a:	3f 93       	push	r19
    210c:	4f 93       	push	r20
    210e:	5f 93       	push	r21
    2110:	6f 93       	push	r22
    2112:	7f 93       	push	r23
    2114:	8f 93       	push	r24
    2116:	9f 93       	push	r25
    2118:	af 93       	push	r26
    211a:	bf 93       	push	r27
    211c:	ef 93       	push	r30
    211e:	ff 93       	push	r31
  switch(TW_STATUS){
    2120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2124:	88 7f       	andi	r24, 0xF8	; 248
    2126:	80 36       	cpi	r24, 0x60	; 96
    2128:	09 f4       	brne	.+2      	; 0x212c <__vector_24+0x2e>
    212a:	9e c0       	rjmp	.+316    	; 0x2268 <__vector_24+0x16a>
    212c:	78 f5       	brcc	.+94     	; 0x218c <__vector_24+0x8e>
    212e:	88 32       	cpi	r24, 0x28	; 40
    2130:	09 f4       	brne	.+2      	; 0x2134 <__vector_24+0x36>
    2132:	5d c0       	rjmp	.+186    	; 0x21ee <__vector_24+0xf0>
    2134:	90 f4       	brcc	.+36     	; 0x215a <__vector_24+0x5c>
    2136:	80 31       	cpi	r24, 0x10	; 16
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_24+0x3e>
    213a:	56 c0       	rjmp	.+172    	; 0x21e8 <__vector_24+0xea>
    213c:	38 f4       	brcc	.+14     	; 0x214c <__vector_24+0x4e>
    213e:	88 23       	and	r24, r24
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_24+0x46>
    2142:	f5 c0       	rjmp	.+490    	; 0x232e <__vector_24+0x230>
    2144:	88 30       	cpi	r24, 0x08	; 8
    2146:	09 f4       	brne	.+2      	; 0x214a <__vector_24+0x4c>
    2148:	4f c0       	rjmp	.+158    	; 0x21e8 <__vector_24+0xea>
    214a:	f5 c0       	rjmp	.+490    	; 0x2336 <__vector_24+0x238>
    214c:	88 31       	cpi	r24, 0x18	; 24
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_24+0x54>
    2150:	4e c0       	rjmp	.+156    	; 0x21ee <__vector_24+0xf0>
    2152:	80 32       	cpi	r24, 0x20	; 32
    2154:	09 f4       	brne	.+2      	; 0x2158 <__vector_24+0x5a>
    2156:	5f c0       	rjmp	.+190    	; 0x2216 <__vector_24+0x118>
    2158:	ee c0       	rjmp	.+476    	; 0x2336 <__vector_24+0x238>
    215a:	80 34       	cpi	r24, 0x40	; 64
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_24+0x62>
    215e:	6a c0       	rjmp	.+212    	; 0x2234 <__vector_24+0x136>
    2160:	58 f4       	brcc	.+22     	; 0x2178 <__vector_24+0x7a>
    2162:	80 33       	cpi	r24, 0x30	; 48
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_24+0x6a>
    2166:	57 c0       	rjmp	.+174    	; 0x2216 <__vector_24+0x118>
    2168:	88 33       	cpi	r24, 0x38	; 56
    216a:	09 f0       	breq	.+2      	; 0x216e <__vector_24+0x70>
    216c:	e4 c0       	rjmp	.+456    	; 0x2336 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    216e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_error>
      twi_releaseBus();
    2172:	0e 94 79 10 	call	0x20f2	; 0x20f2 <twi_releaseBus>
      break;
    2176:	df c0       	rjmp	.+446    	; 0x2336 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2178:	80 35       	cpi	r24, 0x50	; 80
    217a:	09 f4       	brne	.+2      	; 0x217e <__vector_24+0x80>
    217c:	4f c0       	rjmp	.+158    	; 0x221c <__vector_24+0x11e>
    217e:	88 35       	cpi	r24, 0x58	; 88
    2180:	09 f4       	brne	.+2      	; 0x2184 <__vector_24+0x86>
    2182:	5d c0       	rjmp	.+186    	; 0x223e <__vector_24+0x140>
    2184:	88 34       	cpi	r24, 0x48	; 72
    2186:	09 f0       	breq	.+2      	; 0x218a <__vector_24+0x8c>
    2188:	d6 c0       	rjmp	.+428    	; 0x2336 <__vector_24+0x238>
    218a:	d3 c0       	rjmp	.+422    	; 0x2332 <__vector_24+0x234>
    218c:	88 39       	cpi	r24, 0x98	; 152
    218e:	09 f4       	brne	.+2      	; 0x2192 <__vector_24+0x94>
    2190:	c4 c0       	rjmp	.+392    	; 0x231a <__vector_24+0x21c>
    2192:	a8 f4       	brcc	.+42     	; 0x21be <__vector_24+0xc0>
    2194:	88 37       	cpi	r24, 0x78	; 120
    2196:	09 f4       	brne	.+2      	; 0x219a <__vector_24+0x9c>
    2198:	67 c0       	rjmp	.+206    	; 0x2268 <__vector_24+0x16a>
    219a:	38 f4       	brcc	.+14     	; 0x21aa <__vector_24+0xac>
    219c:	88 36       	cpi	r24, 0x68	; 104
    219e:	09 f4       	brne	.+2      	; 0x21a2 <__vector_24+0xa4>
    21a0:	63 c0       	rjmp	.+198    	; 0x2268 <__vector_24+0x16a>
    21a2:	80 37       	cpi	r24, 0x70	; 112
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <__vector_24+0xaa>
    21a6:	60 c0       	rjmp	.+192    	; 0x2268 <__vector_24+0x16a>
    21a8:	c6 c0       	rjmp	.+396    	; 0x2336 <__vector_24+0x238>
    21aa:	88 38       	cpi	r24, 0x88	; 136
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <__vector_24+0xb2>
    21ae:	b5 c0       	rjmp	.+362    	; 0x231a <__vector_24+0x21c>
    21b0:	80 39       	cpi	r24, 0x90	; 144
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <__vector_24+0xb8>
    21b4:	5f c0       	rjmp	.+190    	; 0x2274 <__vector_24+0x176>
    21b6:	80 38       	cpi	r24, 0x80	; 128
    21b8:	09 f0       	breq	.+2      	; 0x21bc <__vector_24+0xbe>
    21ba:	bd c0       	rjmp	.+378    	; 0x2336 <__vector_24+0x238>
    21bc:	5b c0       	rjmp	.+182    	; 0x2274 <__vector_24+0x176>
    21be:	80 3b       	cpi	r24, 0xB0	; 176
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_24+0xc6>
    21c2:	83 c0       	rjmp	.+262    	; 0x22ca <__vector_24+0x1cc>
    21c4:	38 f4       	brcc	.+14     	; 0x21d4 <__vector_24+0xd6>
    21c6:	80 3a       	cpi	r24, 0xA0	; 160
    21c8:	09 f4       	brne	.+2      	; 0x21cc <__vector_24+0xce>
    21ca:	66 c0       	rjmp	.+204    	; 0x2298 <__vector_24+0x19a>
    21cc:	88 3a       	cpi	r24, 0xA8	; 168
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_24+0xd4>
    21d0:	7c c0       	rjmp	.+248    	; 0x22ca <__vector_24+0x1cc>
    21d2:	b1 c0       	rjmp	.+354    	; 0x2336 <__vector_24+0x238>
    21d4:	80 3c       	cpi	r24, 0xC0	; 192
    21d6:	09 f4       	brne	.+2      	; 0x21da <__vector_24+0xdc>
    21d8:	a4 c0       	rjmp	.+328    	; 0x2322 <__vector_24+0x224>
    21da:	88 3c       	cpi	r24, 0xC8	; 200
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <__vector_24+0xe2>
    21de:	a1 c0       	rjmp	.+322    	; 0x2322 <__vector_24+0x224>
    21e0:	88 3b       	cpi	r24, 0xB8	; 184
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__vector_24+0xe8>
    21e4:	87 c0       	rjmp	.+270    	; 0x22f4 <__vector_24+0x1f6>
    21e6:	a7 c0       	rjmp	.+334    	; 0x2336 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21e8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_slarw>
    21ec:	10 c0       	rjmp	.+32     	; 0x220e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ee:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_masterBufferIndex>
    21f2:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_masterBufferLength>
    21f6:	98 17       	cp	r25, r24
    21f8:	70 f5       	brcc	.+92     	; 0x2256 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21fa:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	8e 0f       	add	r24, r30
    2202:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	e1 59       	subi	r30, 0x91	; 145
    220a:	fc 4f       	sbci	r31, 0xFC	; 252
    220c:	80 81       	ld	r24, Z
    220e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2212:	85 ec       	ldi	r24, 0xC5	; 197
    2214:	83 c0       	rjmp	.+262    	; 0x231c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2216:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_error>
    221a:	8b c0       	rjmp	.+278    	; 0x2332 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    221c:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	8e 0f       	add	r24, r30
    2224:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    2228:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	e1 59       	subi	r30, 0x91	; 145
    2230:	fc 4f       	sbci	r31, 0xFC	; 252
    2232:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2234:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_masterBufferIndex>
    2238:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_masterBufferLength>
    223c:	6b c0       	rjmp	.+214    	; 0x2314 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    223e:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	8e 0f       	add	r24, r30
    2246:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    224a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	e1 59       	subi	r30, 0x91	; 145
    2252:	fc 4f       	sbci	r31, 0xFC	; 252
    2254:	80 83       	st	Z, r24
	if (twi_sendStop)
    2256:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_sendStop>
    225a:	81 11       	cpse	r24, r1
    225c:	6a c0       	rjmp	.+212    	; 0x2332 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2264:	84 ea       	ldi	r24, 0xA4	; 164
    2266:	5e c0       	rjmp	.+188    	; 0x2324 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    226e:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <twi_rxBufferIndex>
    2272:	cf cf       	rjmp	.-98     	; 0x2212 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2274:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <twi_rxBufferIndex>
    2278:	80 32       	cpi	r24, 0x20	; 32
    227a:	08 f0       	brcs	.+2      	; 0x227e <__vector_24+0x180>
    227c:	4e c0       	rjmp	.+156    	; 0x231a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    227e:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <twi_rxBufferIndex>
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	8e 0f       	add	r24, r30
    2286:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <twi_rxBufferIndex>
    228a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	e5 5d       	subi	r30, 0xD5	; 213
    2292:	fc 4f       	sbci	r31, 0xFC	; 252
    2294:	80 83       	st	Z, r24
    2296:	bd cf       	rjmp	.-134    	; 0x2212 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2298:	0e 94 79 10 	call	0x20f2	; 0x20f2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    229c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <twi_rxBufferIndex>
    22a0:	80 32       	cpi	r24, 0x20	; 32
    22a2:	30 f4       	brcc	.+12     	; 0x22b0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22a4:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <twi_rxBufferIndex>
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	e5 5d       	subi	r30, 0xD5	; 213
    22ac:	fc 4f       	sbci	r31, 0xFC	; 252
    22ae:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22b0:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <twi_rxBufferIndex>
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_onSlaveReceive>
    22ba:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <twi_onSlaveReceive+0x1>
    22be:	8b e2       	ldi	r24, 0x2B	; 43
    22c0:	93 e0       	ldi	r25, 0x03	; 3
    22c2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22c4:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <twi_rxBufferIndex>
      break;
    22c8:	36 c0       	rjmp	.+108    	; 0x2336 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22d0:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22d4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22d8:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <twi_onSlaveTransmit>
    22dc:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <twi_onSlaveTransmit+0x1>
    22e0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22e2:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_txBufferLength>
    22e6:	81 11       	cpse	r24, r1
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22f0:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22f4:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <twi_txBufferIndex>
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	8e 0f       	add	r24, r30
    22fc:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_txBufferIndex>
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	e3 5b       	subi	r30, 0xB3	; 179
    2304:	fc 4f       	sbci	r31, 0xFC	; 252
    2306:	80 81       	ld	r24, Z
    2308:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    230c:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <twi_txBufferIndex>
    2310:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_txBufferLength>
    2314:	98 17       	cp	r25, r24
    2316:	08 f4       	brcc	.+2      	; 0x231a <__vector_24+0x21c>
    2318:	7c cf       	rjmp	.-264    	; 0x2212 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    231a:	85 e8       	ldi	r24, 0x85	; 133
    231c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2322:	85 ec       	ldi	r24, 0xC5	; 197
    2324:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2328:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <twi_state>
      break;
    232c:	04 c0       	rjmp	.+8      	; 0x2336 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    232e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_error>
      twi_stop();
    2332:	0e 94 6f 10 	call	0x20de	; 0x20de <twi_stop>
      break;
  }
}
    2336:	ff 91       	pop	r31
    2338:	ef 91       	pop	r30
    233a:	bf 91       	pop	r27
    233c:	af 91       	pop	r26
    233e:	9f 91       	pop	r25
    2340:	8f 91       	pop	r24
    2342:	7f 91       	pop	r23
    2344:	6f 91       	pop	r22
    2346:	5f 91       	pop	r21
    2348:	4f 91       	pop	r20
    234a:	3f 91       	pop	r19
    234c:	2f 91       	pop	r18
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__udivmodsi4>:
    2358:	a1 e2       	ldi	r26, 0x21	; 33
    235a:	1a 2e       	mov	r1, r26
    235c:	aa 1b       	sub	r26, r26
    235e:	bb 1b       	sub	r27, r27
    2360:	fd 01       	movw	r30, r26
    2362:	0d c0       	rjmp	.+26     	; 0x237e <__udivmodsi4_ep>

00002364 <__udivmodsi4_loop>:
    2364:	aa 1f       	adc	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	ee 1f       	adc	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	a2 17       	cp	r26, r18
    236e:	b3 07       	cpc	r27, r19
    2370:	e4 07       	cpc	r30, r20
    2372:	f5 07       	cpc	r31, r21
    2374:	20 f0       	brcs	.+8      	; 0x237e <__udivmodsi4_ep>
    2376:	a2 1b       	sub	r26, r18
    2378:	b3 0b       	sbc	r27, r19
    237a:	e4 0b       	sbc	r30, r20
    237c:	f5 0b       	sbc	r31, r21

0000237e <__udivmodsi4_ep>:
    237e:	66 1f       	adc	r22, r22
    2380:	77 1f       	adc	r23, r23
    2382:	88 1f       	adc	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	1a 94       	dec	r1
    2388:	69 f7       	brne	.-38     	; 0x2364 <__udivmodsi4_loop>
    238a:	60 95       	com	r22
    238c:	70 95       	com	r23
    238e:	80 95       	com	r24
    2390:	90 95       	com	r25
    2392:	9b 01       	movw	r18, r22
    2394:	ac 01       	movw	r20, r24
    2396:	bd 01       	movw	r22, r26
    2398:	cf 01       	movw	r24, r30
    239a:	08 95       	ret

0000239c <__tablejump2__>:
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	05 90       	lpm	r0, Z+
    23a2:	f4 91       	lpm	r31, Z
    23a4:	e0 2d       	mov	r30, r0
    23a6:	09 94       	ijmp

000023a8 <malloc>:
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	91 05       	cpc	r25, r1
    23b4:	10 f4       	brcc	.+4      	; 0x23ba <malloc+0x12>
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <__flp>
    23be:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <__flp+0x1>
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	30 97       	sbiw	r30, 0x00	; 0
    23cc:	19 f1       	breq	.+70     	; 0x2414 <malloc+0x6c>
    23ce:	40 81       	ld	r20, Z
    23d0:	51 81       	ldd	r21, Z+1	; 0x01
    23d2:	02 81       	ldd	r16, Z+2	; 0x02
    23d4:	13 81       	ldd	r17, Z+3	; 0x03
    23d6:	48 17       	cp	r20, r24
    23d8:	59 07       	cpc	r21, r25
    23da:	c8 f0       	brcs	.+50     	; 0x240e <malloc+0x66>
    23dc:	84 17       	cp	r24, r20
    23de:	95 07       	cpc	r25, r21
    23e0:	69 f4       	brne	.+26     	; 0x23fc <malloc+0x54>
    23e2:	10 97       	sbiw	r26, 0x00	; 0
    23e4:	31 f0       	breq	.+12     	; 0x23f2 <malloc+0x4a>
    23e6:	12 96       	adiw	r26, 0x02	; 2
    23e8:	0c 93       	st	X, r16
    23ea:	12 97       	sbiw	r26, 0x02	; 2
    23ec:	13 96       	adiw	r26, 0x03	; 3
    23ee:	1c 93       	st	X, r17
    23f0:	27 c0       	rjmp	.+78     	; 0x2440 <malloc+0x98>
    23f2:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <__flp>
    23f6:	10 93 9a 03 	sts	0x039A, r17	; 0x80039a <__flp+0x1>
    23fa:	22 c0       	rjmp	.+68     	; 0x2440 <malloc+0x98>
    23fc:	21 15       	cp	r18, r1
    23fe:	31 05       	cpc	r19, r1
    2400:	19 f0       	breq	.+6      	; 0x2408 <malloc+0x60>
    2402:	42 17       	cp	r20, r18
    2404:	53 07       	cpc	r21, r19
    2406:	18 f4       	brcc	.+6      	; 0x240e <malloc+0x66>
    2408:	9a 01       	movw	r18, r20
    240a:	bd 01       	movw	r22, r26
    240c:	ef 01       	movw	r28, r30
    240e:	df 01       	movw	r26, r30
    2410:	f8 01       	movw	r30, r16
    2412:	db cf       	rjmp	.-74     	; 0x23ca <malloc+0x22>
    2414:	21 15       	cp	r18, r1
    2416:	31 05       	cpc	r19, r1
    2418:	f9 f0       	breq	.+62     	; 0x2458 <malloc+0xb0>
    241a:	28 1b       	sub	r18, r24
    241c:	39 0b       	sbc	r19, r25
    241e:	24 30       	cpi	r18, 0x04	; 4
    2420:	31 05       	cpc	r19, r1
    2422:	80 f4       	brcc	.+32     	; 0x2444 <malloc+0x9c>
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	61 15       	cp	r22, r1
    242a:	71 05       	cpc	r23, r1
    242c:	21 f0       	breq	.+8      	; 0x2436 <malloc+0x8e>
    242e:	fb 01       	movw	r30, r22
    2430:	93 83       	std	Z+3, r25	; 0x03
    2432:	82 83       	std	Z+2, r24	; 0x02
    2434:	04 c0       	rjmp	.+8      	; 0x243e <malloc+0x96>
    2436:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <__flp+0x1>
    243a:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <__flp>
    243e:	fe 01       	movw	r30, r28
    2440:	32 96       	adiw	r30, 0x02	; 2
    2442:	44 c0       	rjmp	.+136    	; 0x24cc <malloc+0x124>
    2444:	fe 01       	movw	r30, r28
    2446:	e2 0f       	add	r30, r18
    2448:	f3 1f       	adc	r31, r19
    244a:	81 93       	st	Z+, r24
    244c:	91 93       	st	Z+, r25
    244e:	22 50       	subi	r18, 0x02	; 2
    2450:	31 09       	sbc	r19, r1
    2452:	39 83       	std	Y+1, r19	; 0x01
    2454:	28 83       	st	Y, r18
    2456:	3a c0       	rjmp	.+116    	; 0x24cc <malloc+0x124>
    2458:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    245c:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    2460:	23 2b       	or	r18, r19
    2462:	41 f4       	brne	.+16     	; 0x2474 <malloc+0xcc>
    2464:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2468:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    246c:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <__brkval+0x1>
    2470:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <__brkval>
    2474:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2478:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    247c:	21 15       	cp	r18, r1
    247e:	31 05       	cpc	r19, r1
    2480:	41 f4       	brne	.+16     	; 0x2492 <malloc+0xea>
    2482:	2d b7       	in	r18, 0x3d	; 61
    2484:	3e b7       	in	r19, 0x3e	; 62
    2486:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    248a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    248e:	24 1b       	sub	r18, r20
    2490:	35 0b       	sbc	r19, r21
    2492:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <__brkval>
    2496:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <__brkval+0x1>
    249a:	e2 17       	cp	r30, r18
    249c:	f3 07       	cpc	r31, r19
    249e:	a0 f4       	brcc	.+40     	; 0x24c8 <malloc+0x120>
    24a0:	2e 1b       	sub	r18, r30
    24a2:	3f 0b       	sbc	r19, r31
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	78 f0       	brcs	.+30     	; 0x24c8 <malloc+0x120>
    24aa:	ac 01       	movw	r20, r24
    24ac:	4e 5f       	subi	r20, 0xFE	; 254
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	24 17       	cp	r18, r20
    24b2:	35 07       	cpc	r19, r21
    24b4:	48 f0       	brcs	.+18     	; 0x24c8 <malloc+0x120>
    24b6:	4e 0f       	add	r20, r30
    24b8:	5f 1f       	adc	r21, r31
    24ba:	50 93 98 03 	sts	0x0398, r21	; 0x800398 <__brkval+0x1>
    24be:	40 93 97 03 	sts	0x0397, r20	; 0x800397 <__brkval>
    24c2:	81 93       	st	Z+, r24
    24c4:	91 93       	st	Z+, r25
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <malloc+0x124>
    24c8:	e0 e0       	ldi	r30, 0x00	; 0
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	cf 01       	movw	r24, r30
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	08 95       	ret

000024d8 <free>:
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f4       	brne	.+2      	; 0x24e2 <free+0xa>
    24e0:	81 c0       	rjmp	.+258    	; 0x25e4 <free+0x10c>
    24e2:	fc 01       	movw	r30, r24
    24e4:	32 97       	sbiw	r30, 0x02	; 2
    24e6:	13 82       	std	Z+3, r1	; 0x03
    24e8:	12 82       	std	Z+2, r1	; 0x02
    24ea:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <__flp>
    24ee:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <__flp+0x1>
    24f2:	10 97       	sbiw	r26, 0x00	; 0
    24f4:	81 f4       	brne	.+32     	; 0x2516 <free+0x3e>
    24f6:	20 81       	ld	r18, Z
    24f8:	31 81       	ldd	r19, Z+1	; 0x01
    24fa:	82 0f       	add	r24, r18
    24fc:	93 1f       	adc	r25, r19
    24fe:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    2502:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    2506:	28 17       	cp	r18, r24
    2508:	39 07       	cpc	r19, r25
    250a:	51 f5       	brne	.+84     	; 0x2560 <free+0x88>
    250c:	f0 93 98 03 	sts	0x0398, r31	; 0x800398 <__brkval+0x1>
    2510:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <__brkval>
    2514:	67 c0       	rjmp	.+206    	; 0x25e4 <free+0x10c>
    2516:	ed 01       	movw	r28, r26
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	ce 17       	cp	r28, r30
    251e:	df 07       	cpc	r29, r31
    2520:	40 f4       	brcc	.+16     	; 0x2532 <free+0x5a>
    2522:	4a 81       	ldd	r20, Y+2	; 0x02
    2524:	5b 81       	ldd	r21, Y+3	; 0x03
    2526:	9e 01       	movw	r18, r28
    2528:	41 15       	cp	r20, r1
    252a:	51 05       	cpc	r21, r1
    252c:	f1 f0       	breq	.+60     	; 0x256a <free+0x92>
    252e:	ea 01       	movw	r28, r20
    2530:	f5 cf       	rjmp	.-22     	; 0x251c <free+0x44>
    2532:	d3 83       	std	Z+3, r29	; 0x03
    2534:	c2 83       	std	Z+2, r28	; 0x02
    2536:	40 81       	ld	r20, Z
    2538:	51 81       	ldd	r21, Z+1	; 0x01
    253a:	84 0f       	add	r24, r20
    253c:	95 1f       	adc	r25, r21
    253e:	c8 17       	cp	r28, r24
    2540:	d9 07       	cpc	r29, r25
    2542:	59 f4       	brne	.+22     	; 0x255a <free+0x82>
    2544:	88 81       	ld	r24, Y
    2546:	99 81       	ldd	r25, Y+1	; 0x01
    2548:	84 0f       	add	r24, r20
    254a:	95 1f       	adc	r25, r21
    254c:	02 96       	adiw	r24, 0x02	; 2
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	93 83       	std	Z+3, r25	; 0x03
    2558:	82 83       	std	Z+2, r24	; 0x02
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	29 f4       	brne	.+10     	; 0x256a <free+0x92>
    2560:	f0 93 9a 03 	sts	0x039A, r31	; 0x80039a <__flp+0x1>
    2564:	e0 93 99 03 	sts	0x0399, r30	; 0x800399 <__flp>
    2568:	3d c0       	rjmp	.+122    	; 0x25e4 <free+0x10c>
    256a:	e9 01       	movw	r28, r18
    256c:	fb 83       	std	Y+3, r31	; 0x03
    256e:	ea 83       	std	Y+2, r30	; 0x02
    2570:	49 91       	ld	r20, Y+
    2572:	59 91       	ld	r21, Y+
    2574:	c4 0f       	add	r28, r20
    2576:	d5 1f       	adc	r29, r21
    2578:	ec 17       	cp	r30, r28
    257a:	fd 07       	cpc	r31, r29
    257c:	61 f4       	brne	.+24     	; 0x2596 <free+0xbe>
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	84 0f       	add	r24, r20
    2584:	95 1f       	adc	r25, r21
    2586:	02 96       	adiw	r24, 0x02	; 2
    2588:	e9 01       	movw	r28, r18
    258a:	99 83       	std	Y+1, r25	; 0x01
    258c:	88 83       	st	Y, r24
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	9b 83       	std	Y+3, r25	; 0x03
    2594:	8a 83       	std	Y+2, r24	; 0x02
    2596:	e0 e0       	ldi	r30, 0x00	; 0
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	12 96       	adiw	r26, 0x02	; 2
    259c:	8d 91       	ld	r24, X+
    259e:	9c 91       	ld	r25, X
    25a0:	13 97       	sbiw	r26, 0x03	; 3
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	19 f0       	breq	.+6      	; 0x25ac <free+0xd4>
    25a6:	fd 01       	movw	r30, r26
    25a8:	dc 01       	movw	r26, r24
    25aa:	f7 cf       	rjmp	.-18     	; 0x259a <free+0xc2>
    25ac:	8d 91       	ld	r24, X+
    25ae:	9c 91       	ld	r25, X
    25b0:	11 97       	sbiw	r26, 0x01	; 1
    25b2:	9d 01       	movw	r18, r26
    25b4:	2e 5f       	subi	r18, 0xFE	; 254
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	82 0f       	add	r24, r18
    25ba:	93 1f       	adc	r25, r19
    25bc:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    25c0:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    25c4:	28 17       	cp	r18, r24
    25c6:	39 07       	cpc	r19, r25
    25c8:	69 f4       	brne	.+26     	; 0x25e4 <free+0x10c>
    25ca:	30 97       	sbiw	r30, 0x00	; 0
    25cc:	29 f4       	brne	.+10     	; 0x25d8 <free+0x100>
    25ce:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <__flp+0x1>
    25d2:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <__flp>
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <free+0x104>
    25d8:	13 82       	std	Z+3, r1	; 0x03
    25da:	12 82       	std	Z+2, r1	; 0x02
    25dc:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <__brkval+0x1>
    25e0:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <__brkval>
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <realloc>:
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	eb ef       	ldi	r30, 0xFB	; 251
    25f0:	f2 e1       	ldi	r31, 0x12	; 18
    25f2:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x8>
    25f6:	ec 01       	movw	r28, r24
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	21 f4       	brne	.+8      	; 0x2604 <realloc+0x1a>
    25fc:	cb 01       	movw	r24, r22
    25fe:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <malloc>
    2602:	b4 c0       	rjmp	.+360    	; 0x276c <realloc+0x182>
    2604:	fc 01       	movw	r30, r24
    2606:	e6 0f       	add	r30, r22
    2608:	f7 1f       	adc	r31, r23
    260a:	9c 01       	movw	r18, r24
    260c:	22 50       	subi	r18, 0x02	; 2
    260e:	31 09       	sbc	r19, r1
    2610:	e2 17       	cp	r30, r18
    2612:	f3 07       	cpc	r31, r19
    2614:	08 f4       	brcc	.+2      	; 0x2618 <realloc+0x2e>
    2616:	a8 c0       	rjmp	.+336    	; 0x2768 <realloc+0x17e>
    2618:	d9 01       	movw	r26, r18
    261a:	0d 91       	ld	r16, X+
    261c:	1c 91       	ld	r17, X
    261e:	11 97       	sbiw	r26, 0x01	; 1
    2620:	06 17       	cp	r16, r22
    2622:	17 07       	cpc	r17, r23
    2624:	b0 f0       	brcs	.+44     	; 0x2652 <realloc+0x68>
    2626:	05 30       	cpi	r16, 0x05	; 5
    2628:	11 05       	cpc	r17, r1
    262a:	08 f4       	brcc	.+2      	; 0x262e <realloc+0x44>
    262c:	9b c0       	rjmp	.+310    	; 0x2764 <realloc+0x17a>
    262e:	c8 01       	movw	r24, r16
    2630:	04 97       	sbiw	r24, 0x04	; 4
    2632:	86 17       	cp	r24, r22
    2634:	97 07       	cpc	r25, r23
    2636:	08 f4       	brcc	.+2      	; 0x263a <realloc+0x50>
    2638:	95 c0       	rjmp	.+298    	; 0x2764 <realloc+0x17a>
    263a:	02 50       	subi	r16, 0x02	; 2
    263c:	11 09       	sbc	r17, r1
    263e:	06 1b       	sub	r16, r22
    2640:	17 0b       	sbc	r17, r23
    2642:	01 93       	st	Z+, r16
    2644:	11 93       	st	Z+, r17
    2646:	6d 93       	st	X+, r22
    2648:	7c 93       	st	X, r23
    264a:	cf 01       	movw	r24, r30
    264c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <free>
    2650:	89 c0       	rjmp	.+274    	; 0x2764 <realloc+0x17a>
    2652:	5b 01       	movw	r10, r22
    2654:	a0 1a       	sub	r10, r16
    2656:	b1 0a       	sbc	r11, r17
    2658:	4c 01       	movw	r8, r24
    265a:	80 0e       	add	r8, r16
    265c:	91 1e       	adc	r9, r17
    265e:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <__flp>
    2662:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <__flp+0x1>
    2666:	61 2c       	mov	r6, r1
    2668:	71 2c       	mov	r7, r1
    266a:	e1 2c       	mov	r14, r1
    266c:	f1 2c       	mov	r15, r1
    266e:	10 97       	sbiw	r26, 0x00	; 0
    2670:	09 f4       	brne	.+2      	; 0x2674 <realloc+0x8a>
    2672:	46 c0       	rjmp	.+140    	; 0x2700 <realloc+0x116>
    2674:	8d 91       	ld	r24, X+
    2676:	9c 91       	ld	r25, X
    2678:	11 97       	sbiw	r26, 0x01	; 1
    267a:	a8 15       	cp	r26, r8
    267c:	b9 05       	cpc	r27, r9
    267e:	b1 f5       	brne	.+108    	; 0x26ec <realloc+0x102>
    2680:	6c 01       	movw	r12, r24
    2682:	42 e0       	ldi	r20, 0x02	; 2
    2684:	c4 0e       	add	r12, r20
    2686:	d1 1c       	adc	r13, r1
    2688:	ca 14       	cp	r12, r10
    268a:	db 04       	cpc	r13, r11
    268c:	78 f1       	brcs	.+94     	; 0x26ec <realloc+0x102>
    268e:	4c 01       	movw	r8, r24
    2690:	8a 18       	sub	r8, r10
    2692:	9b 08       	sbc	r9, r11
    2694:	64 01       	movw	r12, r8
    2696:	42 e0       	ldi	r20, 0x02	; 2
    2698:	c4 0e       	add	r12, r20
    269a:	d1 1c       	adc	r13, r1
    269c:	12 96       	adiw	r26, 0x02	; 2
    269e:	bc 90       	ld	r11, X
    26a0:	12 97       	sbiw	r26, 0x02	; 2
    26a2:	13 96       	adiw	r26, 0x03	; 3
    26a4:	ac 91       	ld	r26, X
    26a6:	b5 e0       	ldi	r27, 0x05	; 5
    26a8:	cb 16       	cp	r12, r27
    26aa:	d1 04       	cpc	r13, r1
    26ac:	40 f0       	brcs	.+16     	; 0x26be <realloc+0xd4>
    26ae:	b2 82       	std	Z+2, r11	; 0x02
    26b0:	a3 83       	std	Z+3, r26	; 0x03
    26b2:	91 82       	std	Z+1, r9	; 0x01
    26b4:	80 82       	st	Z, r8
    26b6:	d9 01       	movw	r26, r18
    26b8:	6d 93       	st	X+, r22
    26ba:	7c 93       	st	X, r23
    26bc:	09 c0       	rjmp	.+18     	; 0x26d0 <realloc+0xe6>
    26be:	0e 5f       	subi	r16, 0xFE	; 254
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	80 0f       	add	r24, r16
    26c4:	91 1f       	adc	r25, r17
    26c6:	f9 01       	movw	r30, r18
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	eb 2d       	mov	r30, r11
    26ce:	fa 2f       	mov	r31, r26
    26d0:	e1 14       	cp	r14, r1
    26d2:	f1 04       	cpc	r15, r1
    26d4:	31 f0       	breq	.+12     	; 0x26e2 <realloc+0xf8>
    26d6:	d7 01       	movw	r26, r14
    26d8:	13 96       	adiw	r26, 0x03	; 3
    26da:	fc 93       	st	X, r31
    26dc:	ee 93       	st	-X, r30
    26de:	12 97       	sbiw	r26, 0x02	; 2
    26e0:	41 c0       	rjmp	.+130    	; 0x2764 <realloc+0x17a>
    26e2:	f0 93 9a 03 	sts	0x039A, r31	; 0x80039a <__flp+0x1>
    26e6:	e0 93 99 03 	sts	0x0399, r30	; 0x800399 <__flp>
    26ea:	3c c0       	rjmp	.+120    	; 0x2764 <realloc+0x17a>
    26ec:	68 16       	cp	r6, r24
    26ee:	79 06       	cpc	r7, r25
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <realloc+0x10a>
    26f2:	3c 01       	movw	r6, r24
    26f4:	7d 01       	movw	r14, r26
    26f6:	12 96       	adiw	r26, 0x02	; 2
    26f8:	0d 90       	ld	r0, X+
    26fa:	bc 91       	ld	r27, X
    26fc:	a0 2d       	mov	r26, r0
    26fe:	b7 cf       	rjmp	.-146    	; 0x266e <realloc+0x84>
    2700:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__brkval>
    2704:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <__brkval+0x1>
    2708:	88 16       	cp	r8, r24
    270a:	99 06       	cpc	r9, r25
    270c:	e1 f4       	brne	.+56     	; 0x2746 <realloc+0x15c>
    270e:	66 16       	cp	r6, r22
    2710:	77 06       	cpc	r7, r23
    2712:	c8 f4       	brcc	.+50     	; 0x2746 <realloc+0x15c>
    2714:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2718:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	41 f4       	brne	.+16     	; 0x2730 <realloc+0x146>
    2720:	8d b7       	in	r24, 0x3d	; 61
    2722:	9e b7       	in	r25, 0x3e	; 62
    2724:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2728:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    272c:	84 1b       	sub	r24, r20
    272e:	95 0b       	sbc	r25, r21
    2730:	e8 17       	cp	r30, r24
    2732:	f9 07       	cpc	r31, r25
    2734:	c8 f4       	brcc	.+50     	; 0x2768 <realloc+0x17e>
    2736:	f0 93 98 03 	sts	0x0398, r31	; 0x800398 <__brkval+0x1>
    273a:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <__brkval>
    273e:	f9 01       	movw	r30, r18
    2740:	71 83       	std	Z+1, r23	; 0x01
    2742:	60 83       	st	Z, r22
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <realloc+0x17a>
    2746:	cb 01       	movw	r24, r22
    2748:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <malloc>
    274c:	7c 01       	movw	r14, r24
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	59 f0       	breq	.+22     	; 0x2768 <realloc+0x17e>
    2752:	a8 01       	movw	r20, r16
    2754:	be 01       	movw	r22, r28
    2756:	0e 94 bb 13 	call	0x2776	; 0x2776 <memcpy>
    275a:	ce 01       	movw	r24, r28
    275c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <free>
    2760:	c7 01       	movw	r24, r14
    2762:	04 c0       	rjmp	.+8      	; 0x276c <realloc+0x182>
    2764:	ce 01       	movw	r24, r28
    2766:	02 c0       	rjmp	.+4      	; 0x276c <realloc+0x182>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	ee e0       	ldi	r30, 0x0E	; 14
    2772:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x8>

00002776 <memcpy>:
    2776:	fb 01       	movw	r30, r22
    2778:	dc 01       	movw	r26, r24
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <memcpy+0xa>
    277c:	01 90       	ld	r0, Z+
    277e:	0d 92       	st	X+, r0
    2780:	41 50       	subi	r20, 0x01	; 1
    2782:	50 40       	sbci	r21, 0x00	; 0
    2784:	d8 f7       	brcc	.-10     	; 0x277c <memcpy+0x6>
    2786:	08 95       	ret

00002788 <strcpy>:
    2788:	fb 01       	movw	r30, r22
    278a:	dc 01       	movw	r26, r24
    278c:	01 90       	ld	r0, Z+
    278e:	0d 92       	st	X+, r0
    2790:	00 20       	and	r0, r0
    2792:	e1 f7       	brne	.-8      	; 0x278c <strcpy+0x4>
    2794:	08 95       	ret

00002796 <sprintf>:
    2796:	ae e0       	ldi	r26, 0x0E	; 14
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e1 ed       	ldi	r30, 0xD1	; 209
    279c:	f3 e1       	ldi	r31, 0x13	; 19
    279e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x1c>
    27a2:	0d 89       	ldd	r16, Y+21	; 0x15
    27a4:	1e 89       	ldd	r17, Y+22	; 0x16
    27a6:	86 e0       	ldi	r24, 0x06	; 6
    27a8:	8c 83       	std	Y+4, r24	; 0x04
    27aa:	1a 83       	std	Y+2, r17	; 0x02
    27ac:	09 83       	std	Y+1, r16	; 0x01
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	9f e7       	ldi	r25, 0x7F	; 127
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	ae 01       	movw	r20, r28
    27b8:	47 5e       	subi	r20, 0xE7	; 231
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255
    27bc:	6f 89       	ldd	r22, Y+23	; 0x17
    27be:	78 8d       	ldd	r23, Y+24	; 0x18
    27c0:	ce 01       	movw	r24, r28
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	0e 94 ed 13 	call	0x27da	; 0x27da <vfprintf>
    27c8:	ef 81       	ldd	r30, Y+7	; 0x07
    27ca:	f8 85       	ldd	r31, Y+8	; 0x08
    27cc:	e0 0f       	add	r30, r16
    27ce:	f1 1f       	adc	r31, r17
    27d0:	10 82       	st	Z, r1
    27d2:	2e 96       	adiw	r28, 0x0e	; 14
    27d4:	e4 e0       	ldi	r30, 0x04	; 4
    27d6:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x1c>

000027da <vfprintf>:
    27da:	ab e0       	ldi	r26, 0x0B	; 11
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e3 ef       	ldi	r30, 0xF3	; 243
    27e0:	f3 e1       	ldi	r31, 0x13	; 19
    27e2:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__prologue_saves__>
    27e6:	6c 01       	movw	r12, r24
    27e8:	7b 01       	movw	r14, r22
    27ea:	8a 01       	movw	r16, r20
    27ec:	fc 01       	movw	r30, r24
    27ee:	17 82       	std	Z+7, r1	; 0x07
    27f0:	16 82       	std	Z+6, r1	; 0x06
    27f2:	83 81       	ldd	r24, Z+3	; 0x03
    27f4:	81 ff       	sbrs	r24, 1
    27f6:	cc c1       	rjmp	.+920    	; 0x2b90 <vfprintf+0x3b6>
    27f8:	ce 01       	movw	r24, r28
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	3c 01       	movw	r6, r24
    27fe:	f6 01       	movw	r30, r12
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	f7 01       	movw	r30, r14
    2804:	93 fd       	sbrc	r25, 3
    2806:	85 91       	lpm	r24, Z+
    2808:	93 ff       	sbrs	r25, 3
    280a:	81 91       	ld	r24, Z+
    280c:	7f 01       	movw	r14, r30
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <vfprintf+0x3a>
    2812:	ba c1       	rjmp	.+884    	; 0x2b88 <vfprintf+0x3ae>
    2814:	85 32       	cpi	r24, 0x25	; 37
    2816:	39 f4       	brne	.+14     	; 0x2826 <vfprintf+0x4c>
    2818:	93 fd       	sbrc	r25, 3
    281a:	85 91       	lpm	r24, Z+
    281c:	93 ff       	sbrs	r25, 3
    281e:	81 91       	ld	r24, Z+
    2820:	7f 01       	movw	r14, r30
    2822:	85 32       	cpi	r24, 0x25	; 37
    2824:	29 f4       	brne	.+10     	; 0x2830 <vfprintf+0x56>
    2826:	b6 01       	movw	r22, r12
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    282e:	e7 cf       	rjmp	.-50     	; 0x27fe <vfprintf+0x24>
    2830:	91 2c       	mov	r9, r1
    2832:	21 2c       	mov	r2, r1
    2834:	31 2c       	mov	r3, r1
    2836:	ff e1       	ldi	r31, 0x1F	; 31
    2838:	f3 15       	cp	r31, r3
    283a:	d8 f0       	brcs	.+54     	; 0x2872 <vfprintf+0x98>
    283c:	8b 32       	cpi	r24, 0x2B	; 43
    283e:	79 f0       	breq	.+30     	; 0x285e <vfprintf+0x84>
    2840:	38 f4       	brcc	.+14     	; 0x2850 <vfprintf+0x76>
    2842:	80 32       	cpi	r24, 0x20	; 32
    2844:	79 f0       	breq	.+30     	; 0x2864 <vfprintf+0x8a>
    2846:	83 32       	cpi	r24, 0x23	; 35
    2848:	a1 f4       	brne	.+40     	; 0x2872 <vfprintf+0x98>
    284a:	23 2d       	mov	r18, r3
    284c:	20 61       	ori	r18, 0x10	; 16
    284e:	1d c0       	rjmp	.+58     	; 0x288a <vfprintf+0xb0>
    2850:	8d 32       	cpi	r24, 0x2D	; 45
    2852:	61 f0       	breq	.+24     	; 0x286c <vfprintf+0x92>
    2854:	80 33       	cpi	r24, 0x30	; 48
    2856:	69 f4       	brne	.+26     	; 0x2872 <vfprintf+0x98>
    2858:	23 2d       	mov	r18, r3
    285a:	21 60       	ori	r18, 0x01	; 1
    285c:	16 c0       	rjmp	.+44     	; 0x288a <vfprintf+0xb0>
    285e:	83 2d       	mov	r24, r3
    2860:	82 60       	ori	r24, 0x02	; 2
    2862:	38 2e       	mov	r3, r24
    2864:	e3 2d       	mov	r30, r3
    2866:	e4 60       	ori	r30, 0x04	; 4
    2868:	3e 2e       	mov	r3, r30
    286a:	2a c0       	rjmp	.+84     	; 0x28c0 <vfprintf+0xe6>
    286c:	f3 2d       	mov	r31, r3
    286e:	f8 60       	ori	r31, 0x08	; 8
    2870:	1d c0       	rjmp	.+58     	; 0x28ac <vfprintf+0xd2>
    2872:	37 fc       	sbrc	r3, 7
    2874:	2d c0       	rjmp	.+90     	; 0x28d0 <vfprintf+0xf6>
    2876:	20 ed       	ldi	r18, 0xD0	; 208
    2878:	28 0f       	add	r18, r24
    287a:	2a 30       	cpi	r18, 0x0A	; 10
    287c:	40 f0       	brcs	.+16     	; 0x288e <vfprintf+0xb4>
    287e:	8e 32       	cpi	r24, 0x2E	; 46
    2880:	b9 f4       	brne	.+46     	; 0x28b0 <vfprintf+0xd6>
    2882:	36 fc       	sbrc	r3, 6
    2884:	81 c1       	rjmp	.+770    	; 0x2b88 <vfprintf+0x3ae>
    2886:	23 2d       	mov	r18, r3
    2888:	20 64       	ori	r18, 0x40	; 64
    288a:	32 2e       	mov	r3, r18
    288c:	19 c0       	rjmp	.+50     	; 0x28c0 <vfprintf+0xe6>
    288e:	36 fe       	sbrs	r3, 6
    2890:	06 c0       	rjmp	.+12     	; 0x289e <vfprintf+0xc4>
    2892:	8a e0       	ldi	r24, 0x0A	; 10
    2894:	98 9e       	mul	r9, r24
    2896:	20 0d       	add	r18, r0
    2898:	11 24       	eor	r1, r1
    289a:	92 2e       	mov	r9, r18
    289c:	11 c0       	rjmp	.+34     	; 0x28c0 <vfprintf+0xe6>
    289e:	ea e0       	ldi	r30, 0x0A	; 10
    28a0:	2e 9e       	mul	r2, r30
    28a2:	20 0d       	add	r18, r0
    28a4:	11 24       	eor	r1, r1
    28a6:	22 2e       	mov	r2, r18
    28a8:	f3 2d       	mov	r31, r3
    28aa:	f0 62       	ori	r31, 0x20	; 32
    28ac:	3f 2e       	mov	r3, r31
    28ae:	08 c0       	rjmp	.+16     	; 0x28c0 <vfprintf+0xe6>
    28b0:	8c 36       	cpi	r24, 0x6C	; 108
    28b2:	21 f4       	brne	.+8      	; 0x28bc <vfprintf+0xe2>
    28b4:	83 2d       	mov	r24, r3
    28b6:	80 68       	ori	r24, 0x80	; 128
    28b8:	38 2e       	mov	r3, r24
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <vfprintf+0xe6>
    28bc:	88 36       	cpi	r24, 0x68	; 104
    28be:	41 f4       	brne	.+16     	; 0x28d0 <vfprintf+0xf6>
    28c0:	f7 01       	movw	r30, r14
    28c2:	93 fd       	sbrc	r25, 3
    28c4:	85 91       	lpm	r24, Z+
    28c6:	93 ff       	sbrs	r25, 3
    28c8:	81 91       	ld	r24, Z+
    28ca:	7f 01       	movw	r14, r30
    28cc:	81 11       	cpse	r24, r1
    28ce:	b3 cf       	rjmp	.-154    	; 0x2836 <vfprintf+0x5c>
    28d0:	98 2f       	mov	r25, r24
    28d2:	9f 7d       	andi	r25, 0xDF	; 223
    28d4:	95 54       	subi	r25, 0x45	; 69
    28d6:	93 30       	cpi	r25, 0x03	; 3
    28d8:	28 f4       	brcc	.+10     	; 0x28e4 <vfprintf+0x10a>
    28da:	0c 5f       	subi	r16, 0xFC	; 252
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	9f e3       	ldi	r25, 0x3F	; 63
    28e0:	99 83       	std	Y+1, r25	; 0x01
    28e2:	0d c0       	rjmp	.+26     	; 0x28fe <vfprintf+0x124>
    28e4:	83 36       	cpi	r24, 0x63	; 99
    28e6:	31 f0       	breq	.+12     	; 0x28f4 <vfprintf+0x11a>
    28e8:	83 37       	cpi	r24, 0x73	; 115
    28ea:	71 f0       	breq	.+28     	; 0x2908 <vfprintf+0x12e>
    28ec:	83 35       	cpi	r24, 0x53	; 83
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <vfprintf+0x118>
    28f0:	59 c0       	rjmp	.+178    	; 0x29a4 <vfprintf+0x1ca>
    28f2:	21 c0       	rjmp	.+66     	; 0x2936 <vfprintf+0x15c>
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 81       	ld	r24, Z
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	0e 5f       	subi	r16, 0xFE	; 254
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	88 24       	eor	r8, r8
    2900:	83 94       	inc	r8
    2902:	91 2c       	mov	r9, r1
    2904:	53 01       	movw	r10, r6
    2906:	13 c0       	rjmp	.+38     	; 0x292e <vfprintf+0x154>
    2908:	28 01       	movw	r4, r16
    290a:	f2 e0       	ldi	r31, 0x02	; 2
    290c:	4f 0e       	add	r4, r31
    290e:	51 1c       	adc	r5, r1
    2910:	f8 01       	movw	r30, r16
    2912:	a0 80       	ld	r10, Z
    2914:	b1 80       	ldd	r11, Z+1	; 0x01
    2916:	36 fe       	sbrs	r3, 6
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <vfprintf+0x146>
    291a:	69 2d       	mov	r22, r9
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x14a>
    2920:	6f ef       	ldi	r22, 0xFF	; 255
    2922:	7f ef       	ldi	r23, 0xFF	; 255
    2924:	c5 01       	movw	r24, r10
    2926:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <strnlen>
    292a:	4c 01       	movw	r8, r24
    292c:	82 01       	movw	r16, r4
    292e:	f3 2d       	mov	r31, r3
    2930:	ff 77       	andi	r31, 0x7F	; 127
    2932:	3f 2e       	mov	r3, r31
    2934:	16 c0       	rjmp	.+44     	; 0x2962 <vfprintf+0x188>
    2936:	28 01       	movw	r4, r16
    2938:	22 e0       	ldi	r18, 0x02	; 2
    293a:	42 0e       	add	r4, r18
    293c:	51 1c       	adc	r5, r1
    293e:	f8 01       	movw	r30, r16
    2940:	a0 80       	ld	r10, Z
    2942:	b1 80       	ldd	r11, Z+1	; 0x01
    2944:	36 fe       	sbrs	r3, 6
    2946:	03 c0       	rjmp	.+6      	; 0x294e <vfprintf+0x174>
    2948:	69 2d       	mov	r22, r9
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <vfprintf+0x178>
    294e:	6f ef       	ldi	r22, 0xFF	; 255
    2950:	7f ef       	ldi	r23, 0xFF	; 255
    2952:	c5 01       	movw	r24, r10
    2954:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <strnlen_P>
    2958:	4c 01       	movw	r8, r24
    295a:	f3 2d       	mov	r31, r3
    295c:	f0 68       	ori	r31, 0x80	; 128
    295e:	3f 2e       	mov	r3, r31
    2960:	82 01       	movw	r16, r4
    2962:	33 fc       	sbrc	r3, 3
    2964:	1b c0       	rjmp	.+54     	; 0x299c <vfprintf+0x1c2>
    2966:	82 2d       	mov	r24, r2
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	88 16       	cp	r8, r24
    296c:	99 06       	cpc	r9, r25
    296e:	b0 f4       	brcc	.+44     	; 0x299c <vfprintf+0x1c2>
    2970:	b6 01       	movw	r22, r12
    2972:	80 e2       	ldi	r24, 0x20	; 32
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    297a:	2a 94       	dec	r2
    297c:	f4 cf       	rjmp	.-24     	; 0x2966 <vfprintf+0x18c>
    297e:	f5 01       	movw	r30, r10
    2980:	37 fc       	sbrc	r3, 7
    2982:	85 91       	lpm	r24, Z+
    2984:	37 fe       	sbrs	r3, 7
    2986:	81 91       	ld	r24, Z+
    2988:	5f 01       	movw	r10, r30
    298a:	b6 01       	movw	r22, r12
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2992:	21 10       	cpse	r2, r1
    2994:	2a 94       	dec	r2
    2996:	21 e0       	ldi	r18, 0x01	; 1
    2998:	82 1a       	sub	r8, r18
    299a:	91 08       	sbc	r9, r1
    299c:	81 14       	cp	r8, r1
    299e:	91 04       	cpc	r9, r1
    29a0:	71 f7       	brne	.-36     	; 0x297e <vfprintf+0x1a4>
    29a2:	e8 c0       	rjmp	.+464    	; 0x2b74 <vfprintf+0x39a>
    29a4:	84 36       	cpi	r24, 0x64	; 100
    29a6:	11 f0       	breq	.+4      	; 0x29ac <vfprintf+0x1d2>
    29a8:	89 36       	cpi	r24, 0x69	; 105
    29aa:	41 f5       	brne	.+80     	; 0x29fc <vfprintf+0x222>
    29ac:	f8 01       	movw	r30, r16
    29ae:	37 fe       	sbrs	r3, 7
    29b0:	07 c0       	rjmp	.+14     	; 0x29c0 <vfprintf+0x1e6>
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	0c 5f       	subi	r16, 0xFC	; 252
    29bc:	1f 4f       	sbci	r17, 0xFF	; 255
    29be:	08 c0       	rjmp	.+16     	; 0x29d0 <vfprintf+0x1f6>
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	07 2e       	mov	r0, r23
    29c6:	00 0c       	add	r0, r0
    29c8:	88 0b       	sbc	r24, r24
    29ca:	99 0b       	sbc	r25, r25
    29cc:	0e 5f       	subi	r16, 0xFE	; 254
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	f3 2d       	mov	r31, r3
    29d2:	ff 76       	andi	r31, 0x6F	; 111
    29d4:	3f 2e       	mov	r3, r31
    29d6:	97 ff       	sbrs	r25, 7
    29d8:	09 c0       	rjmp	.+18     	; 0x29ec <vfprintf+0x212>
    29da:	90 95       	com	r25
    29dc:	80 95       	com	r24
    29de:	70 95       	com	r23
    29e0:	61 95       	neg	r22
    29e2:	7f 4f       	sbci	r23, 0xFF	; 255
    29e4:	8f 4f       	sbci	r24, 0xFF	; 255
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	f0 68       	ori	r31, 0x80	; 128
    29ea:	3f 2e       	mov	r3, r31
    29ec:	2a e0       	ldi	r18, 0x0A	; 10
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	a3 01       	movw	r20, r6
    29f2:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__ultoa_invert>
    29f6:	88 2e       	mov	r8, r24
    29f8:	86 18       	sub	r8, r6
    29fa:	45 c0       	rjmp	.+138    	; 0x2a86 <vfprintf+0x2ac>
    29fc:	85 37       	cpi	r24, 0x75	; 117
    29fe:	31 f4       	brne	.+12     	; 0x2a0c <vfprintf+0x232>
    2a00:	23 2d       	mov	r18, r3
    2a02:	2f 7e       	andi	r18, 0xEF	; 239
    2a04:	b2 2e       	mov	r11, r18
    2a06:	2a e0       	ldi	r18, 0x0A	; 10
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	25 c0       	rjmp	.+74     	; 0x2a56 <vfprintf+0x27c>
    2a0c:	93 2d       	mov	r25, r3
    2a0e:	99 7f       	andi	r25, 0xF9	; 249
    2a10:	b9 2e       	mov	r11, r25
    2a12:	8f 36       	cpi	r24, 0x6F	; 111
    2a14:	c1 f0       	breq	.+48     	; 0x2a46 <vfprintf+0x26c>
    2a16:	18 f4       	brcc	.+6      	; 0x2a1e <vfprintf+0x244>
    2a18:	88 35       	cpi	r24, 0x58	; 88
    2a1a:	79 f0       	breq	.+30     	; 0x2a3a <vfprintf+0x260>
    2a1c:	b5 c0       	rjmp	.+362    	; 0x2b88 <vfprintf+0x3ae>
    2a1e:	80 37       	cpi	r24, 0x70	; 112
    2a20:	19 f0       	breq	.+6      	; 0x2a28 <vfprintf+0x24e>
    2a22:	88 37       	cpi	r24, 0x78	; 120
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <vfprintf+0x254>
    2a26:	b0 c0       	rjmp	.+352    	; 0x2b88 <vfprintf+0x3ae>
    2a28:	e9 2f       	mov	r30, r25
    2a2a:	e0 61       	ori	r30, 0x10	; 16
    2a2c:	be 2e       	mov	r11, r30
    2a2e:	b4 fe       	sbrs	r11, 4
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <vfprintf+0x272>
    2a32:	fb 2d       	mov	r31, r11
    2a34:	f4 60       	ori	r31, 0x04	; 4
    2a36:	bf 2e       	mov	r11, r31
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <vfprintf+0x272>
    2a3a:	34 fe       	sbrs	r3, 4
    2a3c:	0a c0       	rjmp	.+20     	; 0x2a52 <vfprintf+0x278>
    2a3e:	29 2f       	mov	r18, r25
    2a40:	26 60       	ori	r18, 0x06	; 6
    2a42:	b2 2e       	mov	r11, r18
    2a44:	06 c0       	rjmp	.+12     	; 0x2a52 <vfprintf+0x278>
    2a46:	28 e0       	ldi	r18, 0x08	; 8
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <vfprintf+0x27c>
    2a4c:	20 e1       	ldi	r18, 0x10	; 16
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <vfprintf+0x27c>
    2a52:	20 e1       	ldi	r18, 0x10	; 16
    2a54:	32 e0       	ldi	r19, 0x02	; 2
    2a56:	f8 01       	movw	r30, r16
    2a58:	b7 fe       	sbrs	r11, 7
    2a5a:	07 c0       	rjmp	.+14     	; 0x2a6a <vfprintf+0x290>
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	0c 5f       	subi	r16, 0xFC	; 252
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <vfprintf+0x29c>
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 5f       	subi	r16, 0xFE	; 254
    2a74:	1f 4f       	sbci	r17, 0xFF	; 255
    2a76:	a3 01       	movw	r20, r6
    2a78:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__ultoa_invert>
    2a7c:	88 2e       	mov	r8, r24
    2a7e:	86 18       	sub	r8, r6
    2a80:	fb 2d       	mov	r31, r11
    2a82:	ff 77       	andi	r31, 0x7F	; 127
    2a84:	3f 2e       	mov	r3, r31
    2a86:	36 fe       	sbrs	r3, 6
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <vfprintf+0x2ca>
    2a8a:	23 2d       	mov	r18, r3
    2a8c:	2e 7f       	andi	r18, 0xFE	; 254
    2a8e:	a2 2e       	mov	r10, r18
    2a90:	89 14       	cp	r8, r9
    2a92:	58 f4       	brcc	.+22     	; 0x2aaa <vfprintf+0x2d0>
    2a94:	34 fe       	sbrs	r3, 4
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <vfprintf+0x2d4>
    2a98:	32 fc       	sbrc	r3, 2
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <vfprintf+0x2d4>
    2a9c:	83 2d       	mov	r24, r3
    2a9e:	8e 7e       	andi	r24, 0xEE	; 238
    2aa0:	a8 2e       	mov	r10, r24
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <vfprintf+0x2d4>
    2aa4:	b8 2c       	mov	r11, r8
    2aa6:	a3 2c       	mov	r10, r3
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x2d6>
    2aaa:	b8 2c       	mov	r11, r8
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x2d6>
    2aae:	b9 2c       	mov	r11, r9
    2ab0:	a4 fe       	sbrs	r10, 4
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <vfprintf+0x2f8>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e8 0d       	add	r30, r8
    2ab8:	f1 1d       	adc	r31, r1
    2aba:	80 81       	ld	r24, Z
    2abc:	80 33       	cpi	r24, 0x30	; 48
    2abe:	21 f4       	brne	.+8      	; 0x2ac8 <vfprintf+0x2ee>
    2ac0:	9a 2d       	mov	r25, r10
    2ac2:	99 7e       	andi	r25, 0xE9	; 233
    2ac4:	a9 2e       	mov	r10, r25
    2ac6:	09 c0       	rjmp	.+18     	; 0x2ada <vfprintf+0x300>
    2ac8:	a2 fe       	sbrs	r10, 2
    2aca:	06 c0       	rjmp	.+12     	; 0x2ad8 <vfprintf+0x2fe>
    2acc:	b3 94       	inc	r11
    2ace:	b3 94       	inc	r11
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <vfprintf+0x300>
    2ad2:	8a 2d       	mov	r24, r10
    2ad4:	86 78       	andi	r24, 0x86	; 134
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <vfprintf+0x300>
    2ad8:	b3 94       	inc	r11
    2ada:	a3 fc       	sbrc	r10, 3
    2adc:	11 c0       	rjmp	.+34     	; 0x2b00 <vfprintf+0x326>
    2ade:	a0 fe       	sbrs	r10, 0
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <vfprintf+0x314>
    2ae2:	b2 14       	cp	r11, r2
    2ae4:	88 f4       	brcc	.+34     	; 0x2b08 <vfprintf+0x32e>
    2ae6:	28 0c       	add	r2, r8
    2ae8:	92 2c       	mov	r9, r2
    2aea:	9b 18       	sub	r9, r11
    2aec:	0e c0       	rjmp	.+28     	; 0x2b0a <vfprintf+0x330>
    2aee:	b2 14       	cp	r11, r2
    2af0:	60 f4       	brcc	.+24     	; 0x2b0a <vfprintf+0x330>
    2af2:	b6 01       	movw	r22, r12
    2af4:	80 e2       	ldi	r24, 0x20	; 32
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2afc:	b3 94       	inc	r11
    2afe:	f7 cf       	rjmp	.-18     	; 0x2aee <vfprintf+0x314>
    2b00:	b2 14       	cp	r11, r2
    2b02:	18 f4       	brcc	.+6      	; 0x2b0a <vfprintf+0x330>
    2b04:	2b 18       	sub	r2, r11
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <vfprintf+0x332>
    2b08:	98 2c       	mov	r9, r8
    2b0a:	21 2c       	mov	r2, r1
    2b0c:	a4 fe       	sbrs	r10, 4
    2b0e:	10 c0       	rjmp	.+32     	; 0x2b30 <vfprintf+0x356>
    2b10:	b6 01       	movw	r22, r12
    2b12:	80 e3       	ldi	r24, 0x30	; 48
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2b1a:	a2 fe       	sbrs	r10, 2
    2b1c:	17 c0       	rjmp	.+46     	; 0x2b4c <vfprintf+0x372>
    2b1e:	a1 fc       	sbrc	r10, 1
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <vfprintf+0x34e>
    2b22:	88 e7       	ldi	r24, 0x78	; 120
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <vfprintf+0x352>
    2b28:	88 e5       	ldi	r24, 0x58	; 88
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	b6 01       	movw	r22, r12
    2b2e:	0c c0       	rjmp	.+24     	; 0x2b48 <vfprintf+0x36e>
    2b30:	8a 2d       	mov	r24, r10
    2b32:	86 78       	andi	r24, 0x86	; 134
    2b34:	59 f0       	breq	.+22     	; 0x2b4c <vfprintf+0x372>
    2b36:	a1 fe       	sbrs	r10, 1
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <vfprintf+0x364>
    2b3a:	8b e2       	ldi	r24, 0x2B	; 43
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <vfprintf+0x366>
    2b3e:	80 e2       	ldi	r24, 0x20	; 32
    2b40:	a7 fc       	sbrc	r10, 7
    2b42:	8d e2       	ldi	r24, 0x2D	; 45
    2b44:	b6 01       	movw	r22, r12
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2b4c:	89 14       	cp	r8, r9
    2b4e:	38 f4       	brcc	.+14     	; 0x2b5e <vfprintf+0x384>
    2b50:	b6 01       	movw	r22, r12
    2b52:	80 e3       	ldi	r24, 0x30	; 48
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2b5a:	9a 94       	dec	r9
    2b5c:	f7 cf       	rjmp	.-18     	; 0x2b4c <vfprintf+0x372>
    2b5e:	8a 94       	dec	r8
    2b60:	f3 01       	movw	r30, r6
    2b62:	e8 0d       	add	r30, r8
    2b64:	f1 1d       	adc	r31, r1
    2b66:	80 81       	ld	r24, Z
    2b68:	b6 01       	movw	r22, r12
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2b70:	81 10       	cpse	r8, r1
    2b72:	f5 cf       	rjmp	.-22     	; 0x2b5e <vfprintf+0x384>
    2b74:	22 20       	and	r2, r2
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <vfprintf+0x3a0>
    2b78:	42 ce       	rjmp	.-892    	; 0x27fe <vfprintf+0x24>
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	80 e2       	ldi	r24, 0x20	; 32
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <fputc>
    2b84:	2a 94       	dec	r2
    2b86:	f6 cf       	rjmp	.-20     	; 0x2b74 <vfprintf+0x39a>
    2b88:	f6 01       	movw	r30, r12
    2b8a:	86 81       	ldd	r24, Z+6	; 0x06
    2b8c:	97 81       	ldd	r25, Z+7	; 0x07
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <vfprintf+0x3ba>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	2b 96       	adiw	r28, 0x0b	; 11
    2b96:	e2 e1       	ldi	r30, 0x12	; 18
    2b98:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__epilogue_restores__>

00002b9c <strnlen_P>:
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	05 90       	lpm	r0, Z+
    2ba0:	61 50       	subi	r22, 0x01	; 1
    2ba2:	70 40       	sbci	r23, 0x00	; 0
    2ba4:	01 10       	cpse	r0, r1
    2ba6:	d8 f7       	brcc	.-10     	; 0x2b9e <strnlen_P+0x2>
    2ba8:	80 95       	com	r24
    2baa:	90 95       	com	r25
    2bac:	8e 0f       	add	r24, r30
    2bae:	9f 1f       	adc	r25, r31
    2bb0:	08 95       	ret

00002bb2 <strnlen>:
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	61 50       	subi	r22, 0x01	; 1
    2bb6:	70 40       	sbci	r23, 0x00	; 0
    2bb8:	01 90       	ld	r0, Z+
    2bba:	01 10       	cpse	r0, r1
    2bbc:	d8 f7       	brcc	.-10     	; 0x2bb4 <strnlen+0x2>
    2bbe:	80 95       	com	r24
    2bc0:	90 95       	com	r25
    2bc2:	8e 0f       	add	r24, r30
    2bc4:	9f 1f       	adc	r25, r31
    2bc6:	08 95       	ret

00002bc8 <fputc>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	fb 01       	movw	r30, r22
    2bd2:	23 81       	ldd	r18, Z+3	; 0x03
    2bd4:	21 fd       	sbrc	r18, 1
    2bd6:	03 c0       	rjmp	.+6      	; 0x2bde <fputc+0x16>
    2bd8:	8f ef       	ldi	r24, 0xFF	; 255
    2bda:	9f ef       	ldi	r25, 0xFF	; 255
    2bdc:	2c c0       	rjmp	.+88     	; 0x2c36 <fputc+0x6e>
    2bde:	22 ff       	sbrs	r18, 2
    2be0:	16 c0       	rjmp	.+44     	; 0x2c0e <fputc+0x46>
    2be2:	46 81       	ldd	r20, Z+6	; 0x06
    2be4:	57 81       	ldd	r21, Z+7	; 0x07
    2be6:	24 81       	ldd	r18, Z+4	; 0x04
    2be8:	35 81       	ldd	r19, Z+5	; 0x05
    2bea:	42 17       	cp	r20, r18
    2bec:	53 07       	cpc	r21, r19
    2bee:	44 f4       	brge	.+16     	; 0x2c00 <fputc+0x38>
    2bf0:	a0 81       	ld	r26, Z
    2bf2:	b1 81       	ldd	r27, Z+1	; 0x01
    2bf4:	9d 01       	movw	r18, r26
    2bf6:	2f 5f       	subi	r18, 0xFF	; 255
    2bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfa:	31 83       	std	Z+1, r19	; 0x01
    2bfc:	20 83       	st	Z, r18
    2bfe:	8c 93       	st	X, r24
    2c00:	26 81       	ldd	r18, Z+6	; 0x06
    2c02:	37 81       	ldd	r19, Z+7	; 0x07
    2c04:	2f 5f       	subi	r18, 0xFF	; 255
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	37 83       	std	Z+7, r19	; 0x07
    2c0a:	26 83       	std	Z+6, r18	; 0x06
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <fputc+0x6e>
    2c0e:	8b 01       	movw	r16, r22
    2c10:	ec 01       	movw	r28, r24
    2c12:	fb 01       	movw	r30, r22
    2c14:	00 84       	ldd	r0, Z+8	; 0x08
    2c16:	f1 85       	ldd	r31, Z+9	; 0x09
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	09 95       	icall
    2c1c:	89 2b       	or	r24, r25
    2c1e:	e1 f6       	brne	.-72     	; 0x2bd8 <fputc+0x10>
    2c20:	d8 01       	movw	r26, r16
    2c22:	16 96       	adiw	r26, 0x06	; 6
    2c24:	8d 91       	ld	r24, X+
    2c26:	9c 91       	ld	r25, X
    2c28:	17 97       	sbiw	r26, 0x07	; 7
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	17 96       	adiw	r26, 0x07	; 7
    2c2e:	9c 93       	st	X, r25
    2c30:	8e 93       	st	-X, r24
    2c32:	16 97       	sbiw	r26, 0x06	; 6
    2c34:	ce 01       	movw	r24, r28
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <__ultoa_invert>:
    2c40:	fa 01       	movw	r30, r20
    2c42:	aa 27       	eor	r26, r26
    2c44:	28 30       	cpi	r18, 0x08	; 8
    2c46:	51 f1       	breq	.+84     	; 0x2c9c <__ultoa_invert+0x5c>
    2c48:	20 31       	cpi	r18, 0x10	; 16
    2c4a:	81 f1       	breq	.+96     	; 0x2cac <__ultoa_invert+0x6c>
    2c4c:	e8 94       	clt
    2c4e:	6f 93       	push	r22
    2c50:	6e 7f       	andi	r22, 0xFE	; 254
    2c52:	6e 5f       	subi	r22, 0xFE	; 254
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
    2c56:	8f 4f       	sbci	r24, 0xFF	; 255
    2c58:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5a:	af 4f       	sbci	r26, 0xFF	; 255
    2c5c:	b1 e0       	ldi	r27, 0x01	; 1
    2c5e:	3e d0       	rcall	.+124    	; 0x2cdc <__ultoa_invert+0x9c>
    2c60:	b4 e0       	ldi	r27, 0x04	; 4
    2c62:	3c d0       	rcall	.+120    	; 0x2cdc <__ultoa_invert+0x9c>
    2c64:	67 0f       	add	r22, r23
    2c66:	78 1f       	adc	r23, r24
    2c68:	89 1f       	adc	r24, r25
    2c6a:	9a 1f       	adc	r25, r26
    2c6c:	a1 1d       	adc	r26, r1
    2c6e:	68 0f       	add	r22, r24
    2c70:	79 1f       	adc	r23, r25
    2c72:	8a 1f       	adc	r24, r26
    2c74:	91 1d       	adc	r25, r1
    2c76:	a1 1d       	adc	r26, r1
    2c78:	6a 0f       	add	r22, r26
    2c7a:	71 1d       	adc	r23, r1
    2c7c:	81 1d       	adc	r24, r1
    2c7e:	91 1d       	adc	r25, r1
    2c80:	a1 1d       	adc	r26, r1
    2c82:	20 d0       	rcall	.+64     	; 0x2cc4 <__ultoa_invert+0x84>
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <__ultoa_invert+0x48>
    2c86:	68 94       	set
    2c88:	3f 91       	pop	r19
    2c8a:	2a e0       	ldi	r18, 0x0A	; 10
    2c8c:	26 9f       	mul	r18, r22
    2c8e:	11 24       	eor	r1, r1
    2c90:	30 19       	sub	r19, r0
    2c92:	30 5d       	subi	r19, 0xD0	; 208
    2c94:	31 93       	st	Z+, r19
    2c96:	de f6       	brtc	.-74     	; 0x2c4e <__ultoa_invert+0xe>
    2c98:	cf 01       	movw	r24, r30
    2c9a:	08 95       	ret
    2c9c:	46 2f       	mov	r20, r22
    2c9e:	47 70       	andi	r20, 0x07	; 7
    2ca0:	40 5d       	subi	r20, 0xD0	; 208
    2ca2:	41 93       	st	Z+, r20
    2ca4:	b3 e0       	ldi	r27, 0x03	; 3
    2ca6:	0f d0       	rcall	.+30     	; 0x2cc6 <__ultoa_invert+0x86>
    2ca8:	c9 f7       	brne	.-14     	; 0x2c9c <__ultoa_invert+0x5c>
    2caa:	f6 cf       	rjmp	.-20     	; 0x2c98 <__ultoa_invert+0x58>
    2cac:	46 2f       	mov	r20, r22
    2cae:	4f 70       	andi	r20, 0x0F	; 15
    2cb0:	40 5d       	subi	r20, 0xD0	; 208
    2cb2:	4a 33       	cpi	r20, 0x3A	; 58
    2cb4:	18 f0       	brcs	.+6      	; 0x2cbc <__ultoa_invert+0x7c>
    2cb6:	49 5d       	subi	r20, 0xD9	; 217
    2cb8:	31 fd       	sbrc	r19, 1
    2cba:	40 52       	subi	r20, 0x20	; 32
    2cbc:	41 93       	st	Z+, r20
    2cbe:	02 d0       	rcall	.+4      	; 0x2cc4 <__ultoa_invert+0x84>
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <__ultoa_invert+0x6c>
    2cc2:	ea cf       	rjmp	.-44     	; 0x2c98 <__ultoa_invert+0x58>
    2cc4:	b4 e0       	ldi	r27, 0x04	; 4
    2cc6:	a6 95       	lsr	r26
    2cc8:	97 95       	ror	r25
    2cca:	87 95       	ror	r24
    2ccc:	77 95       	ror	r23
    2cce:	67 95       	ror	r22
    2cd0:	ba 95       	dec	r27
    2cd2:	c9 f7       	brne	.-14     	; 0x2cc6 <__ultoa_invert+0x86>
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	61 05       	cpc	r22, r1
    2cd8:	71 05       	cpc	r23, r1
    2cda:	08 95       	ret
    2cdc:	9b 01       	movw	r18, r22
    2cde:	ac 01       	movw	r20, r24
    2ce0:	0a 2e       	mov	r0, r26
    2ce2:	06 94       	lsr	r0
    2ce4:	57 95       	ror	r21
    2ce6:	47 95       	ror	r20
    2ce8:	37 95       	ror	r19
    2cea:	27 95       	ror	r18
    2cec:	ba 95       	dec	r27
    2cee:	c9 f7       	brne	.-14     	; 0x2ce2 <__ultoa_invert+0xa2>
    2cf0:	62 0f       	add	r22, r18
    2cf2:	73 1f       	adc	r23, r19
    2cf4:	84 1f       	adc	r24, r20
    2cf6:	95 1f       	adc	r25, r21
    2cf8:	a0 1d       	adc	r26, r0
    2cfa:	08 95       	ret

00002cfc <__prologue_saves__>:
    2cfc:	2f 92       	push	r2
    2cfe:	3f 92       	push	r3
    2d00:	4f 92       	push	r4
    2d02:	5f 92       	push	r5
    2d04:	6f 92       	push	r6
    2d06:	7f 92       	push	r7
    2d08:	8f 92       	push	r8
    2d0a:	9f 92       	push	r9
    2d0c:	af 92       	push	r10
    2d0e:	bf 92       	push	r11
    2d10:	cf 92       	push	r12
    2d12:	df 92       	push	r13
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	ca 1b       	sub	r28, r26
    2d26:	db 0b       	sbc	r29, r27
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	09 94       	ijmp

00002d34 <__epilogue_restores__>:
    2d34:	2a 88       	ldd	r2, Y+18	; 0x12
    2d36:	39 88       	ldd	r3, Y+17	; 0x11
    2d38:	48 88       	ldd	r4, Y+16	; 0x10
    2d3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d40:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d42:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d44:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d46:	b9 84       	ldd	r11, Y+9	; 0x09
    2d48:	c8 84       	ldd	r12, Y+8	; 0x08
    2d4a:	df 80       	ldd	r13, Y+7	; 0x07
    2d4c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d50:	0c 81       	ldd	r16, Y+4	; 0x04
    2d52:	1b 81       	ldd	r17, Y+3	; 0x03
    2d54:	aa 81       	ldd	r26, Y+2	; 0x02
    2d56:	b9 81       	ldd	r27, Y+1	; 0x01
    2d58:	ce 0f       	add	r28, r30
    2d5a:	d1 1d       	adc	r29, r1
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	ed 01       	movw	r28, r26
    2d68:	08 95       	ret

00002d6a <__do_global_dtors>:
    2d6a:	10 e0       	ldi	r17, 0x00	; 0
    2d6c:	cf e5       	ldi	r28, 0x5F	; 95
    2d6e:	d0 e0       	ldi	r29, 0x00	; 0
    2d70:	04 c0       	rjmp	.+8      	; 0x2d7a <__do_global_dtors+0x10>
    2d72:	fe 01       	movw	r30, r28
    2d74:	0e 94 ce 11 	call	0x239c	; 0x239c <__tablejump2__>
    2d78:	21 96       	adiw	r28, 0x01	; 1
    2d7a:	c0 36       	cpi	r28, 0x60	; 96
    2d7c:	d1 07       	cpc	r29, r17
    2d7e:	c9 f7       	brne	.-14     	; 0x2d72 <__do_global_dtors+0x8>
    2d80:	f8 94       	cli

00002d82 <__stop_program>:
    2d82:	ff cf       	rjmp	.-2      	; 0x2d82 <__stop_program>
