
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00002d4a  00002dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  008001d8  008001d8  00002eb6  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d3d8  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000236d  00000000  00000000  00010b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e8a  00000000  00000000  00012e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018b8  00000000  00000000  00016d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f39  00000000  00000000  000185d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009208  00000000  00000000  0001b50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00024715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_1>
       8:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_2>
       c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_3>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_5>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_24>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	d7 05       	cpc	r29, r7
      c4:	81 0f       	add	r24, r17

000000c6 <__ctors_end>:
      c6:	e7 05       	cpc	r30, r7

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ea e4       	ldi	r30, 0x4A	; 74
      dc:	fd e2       	ldi	r31, 0x2D	; 45
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a8 3d       	cpi	r26, 0xD8	; 216
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	a8 ed       	ldi	r26, 0xD8	; 216
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	aa 3d       	cpi	r26, 0xDA	; 218
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 b1 11 	call	0x2362	; 0x2362 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <main>
     114:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN7Display8print2lnE6StringS0_>:
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
     12a:	7b 01       	movw	r14, r22
     12c:	8a 01       	movw	r16, r20
     12e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN21Adafruit_RGBLCDShield5clearEv>
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	ce 01       	movw	r24, r28
     138:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     13c:	b7 01       	movw	r22, r14
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print5printERK6String>
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	ce 01       	movw	r24, r28
     14a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     14e:	b8 01       	movw	r22, r16
     150:	ce 01       	movw	r24, r28
     152:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print5printERK6String>
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000016c <_ZN7Display11refreshLineEv>:
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	2c 97       	sbiw	r28, 0x0c	; 12
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	8c 01       	movw	r16, r24
     186:	64 e4       	ldi	r22, 0x44	; 68
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	ce 01       	movw	r24, r28
     18c:	07 96       	adiw	r24, 0x07	; 7
     18e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     192:	f8 01       	movw	r30, r16
     194:	82 a5       	ldd	r24, Z+42	; 0x2a
     196:	93 a5       	ldd	r25, Z+43	; 0x2b
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	19 f0       	breq	.+6      	; 0x1a2 <_ZN7Display11refreshLineEv+0x36>
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	41 f0       	breq	.+16     	; 0x1b0 <_ZN7Display11refreshLineEv+0x44>
     1a0:	0e c0       	rjmp	.+28     	; 0x1be <_ZN7Display11refreshLineEv+0x52>
     1a2:	b8 01       	movw	r22, r16
     1a4:	60 5d       	subi	r22, 0xD0	; 208
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	ce 01       	movw	r24, r28
     1aa:	07 96       	adiw	r24, 0x07	; 7
     1ac:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringaSERKS_>
     1b0:	b8 01       	movw	r22, r16
     1b2:	6a 5c       	subi	r22, 0xCA	; 202
     1b4:	7f 4f       	sbci	r23, 0xFF	; 255
     1b6:	ce 01       	movw	r24, r28
     1b8:	07 96       	adiw	r24, 0x07	; 7
     1ba:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringaSERKS_>
     1be:	f8 01       	movw	r30, r16
     1c0:	46 a5       	ldd	r20, Z+46	; 0x2e
     1c2:	57 a5       	ldd	r21, Z+47	; 0x2f
     1c4:	84 a5       	ldd	r24, Z+44	; 0x2c
     1c6:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c8:	48 17       	cp	r20, r24
     1ca:	59 07       	cpc	r21, r25
     1cc:	14 f4       	brge	.+4      	; 0x1d2 <_ZN7Display11refreshLineEv+0x66>
     1ce:	15 a6       	std	Z+45, r1	; 0x2d
     1d0:	14 a6       	std	Z+44, r1	; 0x2c
     1d2:	f8 01       	movw	r30, r16
     1d4:	24 a5       	ldd	r18, Z+44	; 0x2c
     1d6:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d8:	42 17       	cp	r20, r18
     1da:	53 07       	cpc	r21, r19
     1dc:	41 f4       	brne	.+16     	; 0x1ee <_ZN7Display11refreshLineEv+0x82>
     1de:	2b 85       	ldd	r18, Y+11	; 0x0b
     1e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	44 0f       	add	r20, r20
     1e6:	55 1f       	adc	r21, r21
     1e8:	9a 95       	dec	r25
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_ZN7Display11refreshLineEv+0x78>
     1ec:	0a c0       	rjmp	.+20     	; 0x202 <_ZN7Display11refreshLineEv+0x96>
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZN7Display11refreshLineEv+0x88>
     1fc:	a9 01       	movw	r20, r18
     1fe:	40 51       	subi	r20, 0x10	; 16
     200:	51 09       	sbc	r21, r1
     202:	be 01       	movw	r22, r28
     204:	69 5f       	subi	r22, 0xF9	; 249
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZNK6String9substringEjj>
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	ce 01       	movw	r24, r28
     218:	07 96       	adiw	r24, 0x07	; 7
     21a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN6StringaSEOS_>
     21e:	ce 01       	movw	r24, r28
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     226:	f8 01       	movw	r30, r16
     228:	42 a5       	ldd	r20, Z+42	; 0x2a
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	c8 01       	movw	r24, r16
     22e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     232:	be 01       	movw	r22, r28
     234:	69 5f       	subi	r22, 0xF9	; 249
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print5printERK6String>
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	c8 01       	movw	r24, r16
     244:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     248:	f8 01       	movw	r30, r16
     24a:	04 a5       	ldd	r16, Z+44	; 0x2c
     24c:	15 a5       	ldd	r17, Z+45	; 0x2d
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	ce 01       	movw	r24, r28
     254:	07 96       	adiw	r24, 0x07	; 7
     256:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     25a:	c8 01       	movw	r24, r16
     25c:	2c 96       	adiw	r28, 0x0c	; 12
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     272:	4f 92       	push	r4
     274:	5f 92       	push	r5
     276:	6f 92       	push	r6
     278:	7f 92       	push	r7
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	2c 97       	sbiw	r28, 0x0c	; 12
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	4c 01       	movw	r8, r24
     2a4:	3b 01       	movw	r6, r22
     2a6:	2a 01       	movw	r4, r20
     2a8:	b2 2e       	mov	r11, r18
     2aa:	c0 96       	adiw	r24, 0x30	; 48
     2ac:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringaSERKS_>
     2b0:	b2 01       	movw	r22, r4
     2b2:	c4 01       	movw	r24, r8
     2b4:	c6 96       	adiw	r24, 0x36	; 54
     2b6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringaSERKS_>
     2ba:	f4 01       	movw	r30, r8
     2bc:	f7 a6       	std	Z+47, r15	; 0x2f
     2be:	e6 a6       	std	Z+46, r14	; 0x2e
     2c0:	d3 a6       	std	Z+43, r13	; 0x2b
     2c2:	c2 a6       	std	Z+42, r12	; 0x2a
     2c4:	f8 01       	movw	r30, r16
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	f4 01       	movw	r30, r8
     2cc:	97 8f       	std	Z+31, r25	; 0x1f
     2ce:	86 8f       	std	Z+30, r24	; 0x1e
     2d0:	f8 01       	movw	r30, r16
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	93 81       	ldd	r25, Z+3	; 0x03
     2d6:	f4 01       	movw	r30, r8
     2d8:	91 a3       	std	Z+33, r25	; 0x21
     2da:	80 a3       	std	Z+32, r24	; 0x20
     2dc:	f8 01       	movw	r30, r16
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	95 81       	ldd	r25, Z+5	; 0x05
     2e2:	f4 01       	movw	r30, r8
     2e4:	93 a3       	std	Z+35, r25	; 0x23
     2e6:	82 a3       	std	Z+34, r24	; 0x22
     2e8:	f8 01       	movw	r30, r16
     2ea:	86 81       	ldd	r24, Z+6	; 0x06
     2ec:	97 81       	ldd	r25, Z+7	; 0x07
     2ee:	f4 01       	movw	r30, r8
     2f0:	95 a3       	std	Z+37, r25	; 0x25
     2f2:	84 a3       	std	Z+36, r24	; 0x24
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 85       	ldd	r24, Z+8	; 0x08
     2f8:	91 85       	ldd	r25, Z+9	; 0x09
     2fa:	f4 01       	movw	r30, r8
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	86 a3       	std	Z+38, r24	; 0x26
     300:	6b 2d       	mov	r22, r11
     302:	c4 01       	movw	r24, r8
     304:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     308:	f4 01       	movw	r30, r8
     30a:	a4 ae       	std	Z+60, r10	; 0x3c
     30c:	a1 10       	cpse	r10, r1
     30e:	1e c0       	rjmp	.+60     	; 0x34c <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     310:	15 a6       	std	Z+45, r1	; 0x2d
     312:	14 a6       	std	Z+44, r1	; 0x2c
     314:	b2 01       	movw	r22, r4
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN6StringC1ERKS_>
     31e:	b3 01       	movw	r22, r6
     320:	ce 01       	movw	r24, r28
     322:	07 96       	adiw	r24, 0x07	; 7
     324:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN6StringC1ERKS_>
     328:	ae 01       	movw	r20, r28
     32a:	4f 5f       	subi	r20, 0xFF	; 255
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	be 01       	movw	r22, r28
     330:	69 5f       	subi	r22, 0xF9	; 249
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	c4 01       	movw	r24, r8
     336:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7Display8print2lnE6StringS0_>
     33a:	ce 01       	movw	r24, r28
     33c:	07 96       	adiw	r24, 0x07	; 7
     33e:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     34a:	06 c0       	rjmp	.+12     	; 0x358 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     34c:	c4 01       	movw	r24, r8
     34e:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     352:	f4 01       	movw	r30, r8
     354:	95 a7       	std	Z+45, r25	; 0x2d
     356:	84 a7       	std	Z+44, r24	; 0x2c
     358:	2c 96       	adiw	r28, 0x0c	; 12
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	7f 90       	pop	r7
     37e:	6f 90       	pop	r6
     380:	5f 90       	pop	r5
     382:	4f 90       	pop	r4
     384:	08 95       	ret

00000386 <_ZN7Display13selectDisplayEibPcS0_>:
     386:	6f 92       	push	r6
     388:	7f 92       	push	r7
     38a:	8f 92       	push	r8
     38c:	9f 92       	push	r9
     38e:	af 92       	push	r10
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	e6 97       	sbiw	r28, 0x36	; 54
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	3c 01       	movw	r6, r24
     3b2:	44 23       	and	r20, r20
     3b4:	19 f0       	breq	.+6      	; 0x3bc <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3b6:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     3ba:	fa c0       	rjmp	.+500    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	4c 01       	movw	r8, r24
     3c2:	62 30       	cpi	r22, 0x02	; 2
     3c4:	71 05       	cpc	r23, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <_ZN7Display13selectDisplayEibPcS0_+0x44>
     3c8:	52 c0       	rjmp	.+164    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3ca:	dc f4       	brge	.+54     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3cc:	61 15       	cp	r22, r1
     3ce:	71 05       	cpc	r23, r1
     3d0:	39 f1       	breq	.+78     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3d2:	61 30       	cpi	r22, 0x01	; 1
     3d4:	71 05       	cpc	r23, r1
     3d6:	09 f0       	breq	.+2      	; 0x3da <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d8:	b2 c0       	rjmp	.+356    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     3da:	1a a2       	std	Y+34, r1	; 0x22
     3dc:	19 a2       	std	Y+33, r1	; 0x21
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	9c a3       	std	Y+36, r25	; 0x24
     3e4:	8b a3       	std	Y+35, r24	; 0x23
     3e6:	9e a3       	std	Y+38, r25	; 0x26
     3e8:	8d a3       	std	Y+37, r24	; 0x25
     3ea:	98 a7       	std	Y+40, r25	; 0x28
     3ec:	8f a3       	std	Y+39, r24	; 0x27
     3ee:	9a a7       	std	Y+42, r25	; 0x2a
     3f0:	89 a7       	std	Y+41, r24	; 0x29
     3f2:	6a e3       	ldi	r22, 0x3A	; 58
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	c4 01       	movw	r24, r8
     3f8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     3fc:	65 e4       	ldi	r22, 0x45	; 69
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	49 c0       	rjmp	.+146    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     402:	63 30       	cpi	r22, 0x03	; 3
     404:	71 05       	cpc	r23, r1
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	55 c0       	rjmp	.+170    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     40a:	64 30       	cpi	r22, 0x04	; 4
     40c:	71 05       	cpc	r23, r1
     40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	96 c0       	rjmp	.+300    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     412:	1f 93       	push	r17
     414:	0f 93       	push	r16
     416:	3f 93       	push	r19
     418:	2f 93       	push	r18
     41a:	8c e7       	ldi	r24, 0x7C	; 124
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	50 c0       	rjmp	.+160    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	9a a3       	std	Y+34, r25	; 0x22
     426:	89 a3       	std	Y+33, r24	; 0x21
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9c a3       	std	Y+36, r25	; 0x24
     42e:	8b a3       	std	Y+35, r24	; 0x23
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9e a3       	std	Y+38, r25	; 0x26
     436:	8d a3       	std	Y+37, r24	; 0x25
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	98 a7       	std	Y+40, r25	; 0x28
     43e:	8f a3       	std	Y+39, r24	; 0x27
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9a a7       	std	Y+42, r25	; 0x2a
     446:	89 a7       	std	Y+41, r24	; 0x29
     448:	6f e0       	ldi	r22, 0x0F	; 15
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	c4 01       	movw	r24, r8
     44e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     452:	60 e3       	ldi	r22, 0x30	; 48
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	ce 01       	movw	r24, r28
     458:	8b 96       	adiw	r24, 0x2b	; 43
     45a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     45e:	a1 2c       	mov	r10, r1
     460:	cc 24       	eor	r12, r12
     462:	c3 94       	inc	r12
     464:	d1 2c       	mov	r13, r1
     466:	52 e0       	ldi	r21, 0x02	; 2
     468:	e5 2e       	mov	r14, r21
     46a:	f1 2c       	mov	r15, r1
     46c:	8e c0       	rjmp	.+284    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     46e:	1a a2       	std	Y+34, r1	; 0x22
     470:	19 a2       	std	Y+33, r1	; 0x21
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	9c a3       	std	Y+36, r25	; 0x24
     478:	8b a3       	std	Y+35, r24	; 0x23
     47a:	9e a3       	std	Y+38, r25	; 0x26
     47c:	8d a3       	std	Y+37, r24	; 0x25
     47e:	98 a7       	std	Y+40, r25	; 0x28
     480:	8f a3       	std	Y+39, r24	; 0x27
     482:	9a a7       	std	Y+42, r25	; 0x2a
     484:	89 a7       	std	Y+41, r24	; 0x29
     486:	6a e3       	ldi	r22, 0x3A	; 58
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	c4 01       	movw	r24, r8
     48c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     490:	62 e5       	ldi	r22, 0x52	; 82
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	ce 01       	movw	r24, r28
     496:	8b 96       	adiw	r24, 0x2b	; 43
     498:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     49c:	a1 2c       	mov	r10, r1
     49e:	cc 24       	eor	r12, r12
     4a0:	ca 94       	dec	r12
     4a2:	dc 2c       	mov	r13, r12
     4a4:	e1 2c       	mov	r14, r1
     4a6:	f1 2c       	mov	r15, r1
     4a8:	8e 01       	movw	r16, r28
     4aa:	0f 5d       	subi	r16, 0xDF	; 223
     4ac:	1f 4f       	sbci	r17, 0xFF	; 255
     4ae:	23 e0       	ldi	r18, 0x03	; 3
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	70 c0       	rjmp	.+224    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     4b4:	1f 93       	push	r17
     4b6:	0f 93       	push	r16
     4b8:	3f 93       	push	r19
     4ba:	2f 93       	push	r18
     4bc:	8f e5       	ldi	r24, 0x5F	; 95
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	9f 92       	push	r9
     4c6:	8f 92       	push	r8
     4c8:	0e 94 ae 13 	call	0x275c	; 0x275c <sprintf>
     4cc:	1a a2       	std	Y+34, r1	; 0x22
     4ce:	19 a2       	std	Y+33, r1	; 0x21
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	9f ef       	ldi	r25, 0xFF	; 255
     4d4:	9c a3       	std	Y+36, r25	; 0x24
     4d6:	8b a3       	std	Y+35, r24	; 0x23
     4d8:	9e a3       	std	Y+38, r25	; 0x26
     4da:	8d a3       	std	Y+37, r24	; 0x25
     4dc:	98 a7       	std	Y+40, r25	; 0x28
     4de:	8f a3       	std	Y+39, r24	; 0x27
     4e0:	9a a7       	std	Y+42, r25	; 0x2a
     4e2:	89 a7       	std	Y+41, r24	; 0x29
     4e4:	6a e3       	ldi	r22, 0x3A	; 58
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	ce 01       	movw	r24, r28
     4ea:	8b 96       	adiw	r24, 0x2b	; 43
     4ec:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     4f0:	b4 01       	movw	r22, r8
     4f2:	ce 01       	movw	r24, r28
     4f4:	c1 96       	adiw	r24, 0x31	; 49
     4f6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     4fa:	a1 2c       	mov	r10, r1
     4fc:	c1 2c       	mov	r12, r1
     4fe:	d1 2c       	mov	r13, r1
     500:	ee 24       	eor	r14, r14
     502:	e3 94       	inc	r14
     504:	f1 2c       	mov	r15, r1
     506:	8e 01       	movw	r16, r28
     508:	0f 5d       	subi	r16, 0xDF	; 223
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	22 e0       	ldi	r18, 0x02	; 2
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	ae 01       	movw	r20, r28
     512:	45 5d       	subi	r20, 0xD5	; 213
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	be 01       	movw	r22, r28
     518:	6f 5c       	subi	r22, 0xCF	; 207
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	c3 01       	movw	r24, r6
     51e:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     522:	ce 01       	movw	r24, r28
     524:	c1 96       	adiw	r24, 0x31	; 49
     526:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     52a:	ce 01       	movw	r24, r28
     52c:	8b 96       	adiw	r24, 0x2b	; 43
     52e:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	39 c0       	rjmp	.+114    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	9a a3       	std	Y+34, r25	; 0x22
     544:	89 a3       	std	Y+33, r24	; 0x21
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9c a3       	std	Y+36, r25	; 0x24
     54c:	8b a3       	std	Y+35, r24	; 0x23
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9e a3       	std	Y+38, r25	; 0x26
     554:	8d a3       	std	Y+37, r24	; 0x25
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	98 a7       	std	Y+40, r25	; 0x28
     55c:	8f a3       	std	Y+39, r24	; 0x27
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a a7       	std	Y+42, r25	; 0x2a
     564:	89 a7       	std	Y+41, r24	; 0x29
     566:	69 e9       	ldi	r22, 0x99	; 153
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	c4 01       	movw	r24, r8
     56c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     570:	60 e3       	ldi	r22, 0x30	; 48
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	ce 01       	movw	r24, r28
     576:	8b 96       	adiw	r24, 0x2b	; 43
     578:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     57c:	a1 2c       	mov	r10, r1
     57e:	cc 24       	eor	r12, r12
     580:	c3 94       	inc	r12
     582:	d1 2c       	mov	r13, r1
     584:	ee 24       	eor	r14, r14
     586:	e3 94       	inc	r14
     588:	f1 2c       	mov	r15, r1
     58a:	8e 01       	movw	r16, r28
     58c:	0f 5d       	subi	r16, 0xDF	; 223
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	22 e0       	ldi	r18, 0x02	; 2
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a4 01       	movw	r20, r8
     596:	be 01       	movw	r22, r28
     598:	65 5d       	subi	r22, 0xD5	; 213
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	c3 01       	movw	r24, r6
     59e:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     5a2:	ce 01       	movw	r24, r28
     5a4:	8b 96       	adiw	r24, 0x2b	; 43
     5a6:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     5aa:	c4 01       	movw	r24, r8
     5ac:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     5b0:	e6 96       	adiw	r28, 0x36	; 54
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	7f 90       	pop	r7
     5d4:	6f 90       	pop	r6
     5d6:	08 95       	ret

000005d8 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
     5e2:	fb 01       	movw	r30, r22
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	9b 83       	std	Y+3, r25	; 0x03
     5ea:	8a 83       	std	Y+2, r24	; 0x02
     5ec:	8d eb       	ldi	r24, 0xBD	; 189
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	99 83       	std	Y+1, r25	; 0x01
     5f2:	88 83       	st	Y, r24
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	8c 83       	std	Y+4, r24	; 0x04
     5f8:	85 81       	ldd	r24, Z+5	; 0x05
     5fa:	8d 83       	std	Y+5, r24	; 0x05
     5fc:	86 81       	ldd	r24, Z+6	; 0x06
     5fe:	8e 83       	std	Y+6, r24	; 0x06
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	37 96       	adiw	r30, 0x07	; 7
     604:	de 01       	movw	r26, r28
     606:	17 96       	adiw	r26, 0x07	; 7
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	8a 95       	dec	r24
     60e:	e1 f7       	brne	.-8      	; 0x608 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	fb 01       	movw	r30, r22
     614:	3f 96       	adiw	r30, 0x0f	; 15
     616:	de 01       	movw	r26, r28
     618:	1f 96       	adiw	r26, 0x0f	; 15
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	8a 95       	dec	r24
     620:	e1 f7       	brne	.-8      	; 0x61a <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     622:	fb 01       	movw	r30, r22
     624:	84 89       	ldd	r24, Z+20	; 0x14
     626:	8c 8b       	std	Y+20, r24	; 0x14
     628:	85 89       	ldd	r24, Z+21	; 0x15
     62a:	8d 8b       	std	Y+21, r24	; 0x15
     62c:	86 89       	ldd	r24, Z+22	; 0x16
     62e:	8e 8b       	std	Y+22, r24	; 0x16
     630:	87 89       	ldd	r24, Z+23	; 0x17
     632:	8f 8b       	std	Y+23, r24	; 0x17
     634:	80 8d       	ldd	r24, Z+24	; 0x18
     636:	88 8f       	std	Y+24, r24	; 0x18
     638:	81 8d       	ldd	r24, Z+25	; 0x19
     63a:	89 8f       	std	Y+25, r24	; 0x19
     63c:	82 8d       	ldd	r24, Z+26	; 0x1a
     63e:	8a 8f       	std	Y+26, r24	; 0x1a
     640:	83 8d       	ldd	r24, Z+27	; 0x1b
     642:	8b 8f       	std	Y+27, r24	; 0x1b
     644:	64 e4       	ldi	r22, 0x44	; 68
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	ce 01       	movw	r24, r28
     64a:	c0 96       	adiw	r24, 0x30	; 48
     64c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     650:	64 e4       	ldi	r22, 0x44	; 68
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	ce 01       	movw	r24, r28
     656:	c6 96       	adiw	r24, 0x36	; 54
     658:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	42 e0       	ldi	r20, 0x02	; 2
     660:	60 e1       	ldi	r22, 0x10	; 16
     662:	ce 01       	movw	r24, r28
     664:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN21Adafruit_RGBLCDShield5clearEv>
     66e:	04 e4       	ldi	r16, 0x44	; 68
     670:	11 e0       	ldi	r17, 0x01	; 1
     672:	98 01       	movw	r18, r16
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	08 95       	ret

0000068a <_ZN7Display21UpdateMenuFromButtonsEm>:
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	6a 01       	movw	r12, r20
     69e:	7b 01       	movw	r14, r22
     6a0:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     6a4:	80 ff       	sbrs	r24, 0
     6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <_ZN7Display21UpdateMenuFromButtonsEm+0x2a>
     6a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     6aa:	7f 8d       	ldd	r23, Y+31	; 0x1f
     6ac:	6f 3f       	cpi	r22, 0xFF	; 255
     6ae:	2f ef       	ldi	r18, 0xFF	; 255
     6b0:	72 07       	cpc	r23, r18
     6b2:	01 f5       	brne	.+64     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6b4:	83 ff       	sbrs	r24, 3
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <_ZN7Display21UpdateMenuFromButtonsEm+0x3a>
     6b8:	68 a1       	ldd	r22, Y+32	; 0x20
     6ba:	79 a1       	ldd	r23, Y+33	; 0x21
     6bc:	6f 3f       	cpi	r22, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	79 07       	cpc	r23, r25
     6c2:	c1 f4       	brne	.+48     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6c4:	82 ff       	sbrs	r24, 2
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <_ZN7Display21UpdateMenuFromButtonsEm+0x4a>
     6c8:	6a a1       	ldd	r22, Y+34	; 0x22
     6ca:	7b a1       	ldd	r23, Y+35	; 0x23
     6cc:	6f 3f       	cpi	r22, 0xFF	; 255
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	72 07       	cpc	r23, r18
     6d2:	81 f4       	brne	.+32     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6d4:	84 ff       	sbrs	r24, 4
     6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <_ZN7Display21UpdateMenuFromButtonsEm+0x5a>
     6d8:	6c a1       	ldd	r22, Y+36	; 0x24
     6da:	7d a1       	ldd	r23, Y+37	; 0x25
     6dc:	6f 3f       	cpi	r22, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	79 07       	cpc	r23, r25
     6e2:	41 f4       	brne	.+16     	; 0x6f4 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     6e4:	81 ff       	sbrs	r24, 1
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     6e8:	6e a1       	ldd	r22, Y+38	; 0x26
     6ea:	7f a1       	ldd	r23, Y+39	; 0x27
     6ec:	6f 3f       	cpi	r22, 0xFF	; 255
     6ee:	2f ef       	ldi	r18, 0xFF	; 255
     6f0:	72 07       	cpc	r23, r18
     6f2:	41 f0       	breq	.+16     	; 0x704 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     6f4:	04 e4       	ldi	r16, 0x44	; 68
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	98 01       	movw	r18, r16
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     702:	10 c0       	rjmp	.+32     	; 0x724 <_ZN7Display21UpdateMenuFromButtonsEm+0x9a>
     704:	0e 94 87 06 	call	0xd0e	; 0xd0e <millis>
     708:	28 ee       	ldi	r18, 0xE8	; 232
     70a:	c2 0e       	add	r12, r18
     70c:	23 e0       	ldi	r18, 0x03	; 3
     70e:	d2 1e       	adc	r13, r18
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
     714:	c6 16       	cp	r12, r22
     716:	d7 06       	cpc	r13, r23
     718:	e8 06       	cpc	r14, r24
     71a:	f9 06       	cpc	r15, r25
     71c:	28 f0       	brcs	.+10     	; 0x728 <_ZN7Display21UpdateMenuFromButtonsEm+0x9e>
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <_ZN7Display21UpdateMenuFromButtonsEm+0xa0>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <_ZN6Safety12disableMotorEbi.part.0>:
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	89 e0       	ldi	r24, 0x09	; 9
     746:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	8a e0       	ldi	r24, 0x0A	; 10
     74e:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	89 e0       	ldi	r24, 0x09	; 9
     756:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	8a e0       	ldi	r24, 0x0A	; 10
     75e:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     762:	be 01       	movw	r22, r28
     764:	dd 0f       	add	r29, r29
     766:	88 0b       	sbc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <delay>

00000772 <_ZN6SafetyC1Ev>:
     772:	08 95       	ret

00000774 <_ZN6Safety12deviceStatusEi>:
     774:	62 30       	cpi	r22, 0x02	; 2
     776:	71 05       	cpc	r23, r1
     778:	b1 f0       	breq	.+44     	; 0x7a6 <_ZN6Safety12deviceStatusEi+0x32>
     77a:	44 f4       	brge	.+16     	; 0x78c <_ZN6Safety12deviceStatusEi+0x18>
     77c:	61 15       	cp	r22, r1
     77e:	71 05       	cpc	r23, r1
     780:	81 f0       	breq	.+32     	; 0x7a2 <_ZN6Safety12deviceStatusEi+0x2e>
     782:	61 30       	cpi	r22, 0x01	; 1
     784:	71 05       	cpc	r23, r1
     786:	b1 f4       	brne	.+44     	; 0x7b4 <_ZN6Safety12deviceStatusEi+0x40>
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	12 c0       	rjmp	.+36     	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     78c:	64 30       	cpi	r22, 0x04	; 4
     78e:	71 05       	cpc	r23, r1
     790:	71 f0       	breq	.+28     	; 0x7ae <_ZN6Safety12deviceStatusEi+0x3a>
     792:	5c f0       	brlt	.+22     	; 0x7aa <_ZN6Safety12deviceStatusEi+0x36>
     794:	65 30       	cpi	r22, 0x05	; 5
     796:	71 05       	cpc	r23, r1
     798:	69 f4       	brne	.+26     	; 0x7b4 <_ZN6Safety12deviceStatusEi+0x40>
     79a:	fc 01       	movw	r30, r24
     79c:	82 85       	ldd	r24, Z+10	; 0x0a
     79e:	93 85       	ldd	r25, Z+11	; 0x0b
     7a0:	08 95       	ret
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x3c>
     7ae:	8d e0       	ldi	r24, 0x0D	; 13
     7b0:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <digitalRead>
     7b4:	08 95       	ret

000007b6 <_ZN6Safety15setSafetyStatusEi>:
     7b6:	fc 01       	movw	r30, r24
     7b8:	77 87       	std	Z+15, r23	; 0x0f
     7ba:	66 87       	std	Z+14, r22	; 0x0e
     7bc:	08 95       	ret

000007be <_ZN6Safety12cntEventIncrEi>:
     7be:	fc 01       	movw	r30, r24
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	21 f0       	breq	.+8      	; 0x7ce <_ZN6Safety12cntEventIncrEi+0x10>
     7c6:	61 30       	cpi	r22, 0x01	; 1
     7c8:	71 05       	cpc	r23, r1
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <_ZN6Safety12cntEventIncrEi+0x16>
     7cc:	08 95       	ret
     7ce:	15 86       	std	Z+13, r1	; 0x0d
     7d0:	14 86       	std	Z+12, r1	; 0x0c
     7d2:	08 95       	ret
     7d4:	84 85       	ldd	r24, Z+12	; 0x0c
     7d6:	95 85       	ldd	r25, Z+13	; 0x0d
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	95 87       	std	Z+13, r25	; 0x0d
     7dc:	84 87       	std	Z+12, r24	; 0x0c
     7de:	08 95       	ret

000007e0 <_ZN6Safety12inEventCountEv>:
     7e0:	fc 01       	movw	r30, r24
     7e2:	84 85       	ldd	r24, Z+12	; 0x0c
     7e4:	95 85       	ldd	r25, Z+13	; 0x0d
     7e6:	08 95       	ret

000007e8 <_ZN6Safety12disableMotorEbi>:
     7e8:	ca 01       	movw	r24, r20
     7ea:	61 11       	cpse	r22, r1
     7ec:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	8a e0       	ldi	r24, 0x0A	; 10
     7f4:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	0c 94 66 07 	jmp	0xecc	; 0xecc <pinMode>

00000800 <_ZN6Safety8setRelayEi>:
     800:	61 15       	cp	r22, r1
     802:	71 05       	cpc	r23, r1
     804:	41 f0       	breq	.+16     	; 0x816 <_ZN6Safety8setRelayEi+0x16>
     806:	61 30       	cpi	r22, 0x01	; 1
     808:	71 05       	cpc	r23, r1
     80a:	59 f0       	breq	.+22     	; 0x822 <_ZN6Safety8setRelayEi+0x22>
     80c:	6f 3f       	cpi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	81 f4       	brne	.+32     	; 0x832 <_ZN6Safety8setRelayEi+0x32>
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	01 c0       	rjmp	.+2      	; 0x818 <_ZN6Safety8setRelayEi+0x18>
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	05 c0       	rjmp	.+10     	; 0x82c <_ZN6Safety8setRelayEi+0x2c>
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	89 e0       	ldi	r24, 0x09	; 9
     826:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <digitalWrite>
     832:	08 95       	ret

00000834 <_ZN6Safety9setDeviceEii.part.2>:
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	8b 01       	movw	r16, r22
     840:	7b 87       	std	Y+11, r23	; 0x0b
     842:	6a 87       	std	Y+10, r22	; 0x0a
     844:	67 2b       	or	r22, r23
     846:	29 f4       	brne	.+10     	; 0x852 <_ZN6Safety9setDeviceEii.part.2+0x1e>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN6Safety12disableMotorEbi.part.0>
     850:	05 c0       	rjmp	.+10     	; 0x85c <_ZN6Safety9setDeviceEii.part.2+0x28>
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_ZN6Safety12disableMotorEbi>
     85c:	b8 01       	movw	r22, r16
     85e:	ce 01       	movw	r24, r28
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	0c 94 00 04 	jmp	0x800	; 0x800 <_ZN6Safety8setRelayEi>

0000086c <_ZN6Safety9setDeviceEii>:
     86c:	fc 01       	movw	r30, r24
     86e:	62 30       	cpi	r22, 0x02	; 2
     870:	71 05       	cpc	r23, r1
     872:	b1 f0       	breq	.+44     	; 0x8a0 <_ZN6Safety9setDeviceEii+0x34>
     874:	3c f4       	brge	.+14     	; 0x884 <_ZN6Safety9setDeviceEii+0x18>
     876:	61 15       	cp	r22, r1
     878:	71 05       	cpc	r23, r1
     87a:	61 f0       	breq	.+24     	; 0x894 <_ZN6Safety9setDeviceEii+0x28>
     87c:	61 30       	cpi	r22, 0x01	; 1
     87e:	71 05       	cpc	r23, r1
     880:	61 f0       	breq	.+24     	; 0x89a <_ZN6Safety9setDeviceEii+0x2e>
     882:	08 95       	ret
     884:	64 30       	cpi	r22, 0x04	; 4
     886:	71 05       	cpc	r23, r1
     888:	89 f0       	breq	.+34     	; 0x8ac <_ZN6Safety9setDeviceEii+0x40>
     88a:	6c f0       	brlt	.+26     	; 0x8a6 <_ZN6Safety9setDeviceEii+0x3a>
     88c:	65 30       	cpi	r22, 0x05	; 5
     88e:	71 05       	cpc	r23, r1
     890:	81 f0       	breq	.+32     	; 0x8b2 <_ZN6Safety9setDeviceEii+0x46>
     892:	08 95       	ret
     894:	53 83       	std	Z+3, r21	; 0x03
     896:	42 83       	std	Z+2, r20	; 0x02
     898:	08 95       	ret
     89a:	55 83       	std	Z+5, r21	; 0x05
     89c:	44 83       	std	Z+4, r20	; 0x04
     89e:	08 95       	ret
     8a0:	51 83       	std	Z+1, r21	; 0x01
     8a2:	40 83       	st	Z, r20
     8a4:	08 95       	ret
     8a6:	57 83       	std	Z+7, r21	; 0x07
     8a8:	46 83       	std	Z+6, r20	; 0x06
     8aa:	08 95       	ret
     8ac:	51 87       	std	Z+9, r21	; 0x09
     8ae:	40 87       	std	Z+8, r20	; 0x08
     8b0:	08 95       	ret
     8b2:	ba 01       	movw	r22, r20
     8b4:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN6Safety9setDeviceEii.part.2>

000008b8 <setup>:
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	6c 97       	sbiw	r28, 0x1c	; 28
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	80 ee       	ldi	r24, 0xE0	; 224
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	fc 01       	movw	r30, r24
     8d6:	22 81       	ldd	r18, Z+2	; 0x02
     8d8:	33 81       	ldd	r19, Z+3	; 0x03
     8da:	3c 83       	std	Y+4, r19	; 0x04
     8dc:	2b 83       	std	Y+3, r18	; 0x03
     8de:	2d eb       	ldi	r18, 0xBD	; 189
     8e0:	31 e0       	ldi	r19, 0x01	; 1
     8e2:	3a 83       	std	Y+2, r19	; 0x02
     8e4:	29 83       	std	Y+1, r18	; 0x01
     8e6:	24 81       	ldd	r18, Z+4	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	25 81       	ldd	r18, Z+5	; 0x05
     8ec:	2e 83       	std	Y+6, r18	; 0x06
     8ee:	26 81       	ldd	r18, Z+6	; 0x06
     8f0:	2f 83       	std	Y+7, r18	; 0x07
     8f2:	28 e0       	ldi	r18, 0x08	; 8
     8f4:	e7 ee       	ldi	r30, 0xE7	; 231
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	de 01       	movw	r26, r28
     8fa:	18 96       	adiw	r26, 0x08	; 8
     8fc:	01 90       	ld	r0, Z+
     8fe:	0d 92       	st	X+, r0
     900:	2a 95       	dec	r18
     902:	e1 f7       	brne	.-8      	; 0x8fc <setup+0x44>
     904:	25 e0       	ldi	r18, 0x05	; 5
     906:	ef ee       	ldi	r30, 0xEF	; 239
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	de 01       	movw	r26, r28
     90c:	50 96       	adiw	r26, 0x10	; 16
     90e:	01 90       	ld	r0, Z+
     910:	0d 92       	st	X+, r0
     912:	2a 95       	dec	r18
     914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xf>
     916:	fc 01       	movw	r30, r24
     918:	24 89       	ldd	r18, Z+20	; 0x14
     91a:	2d 8b       	std	Y+21, r18	; 0x15
     91c:	25 89       	ldd	r18, Z+21	; 0x15
     91e:	2e 8b       	std	Y+22, r18	; 0x16
     920:	26 89       	ldd	r18, Z+22	; 0x16
     922:	2f 8b       	std	Y+23, r18	; 0x17
     924:	27 89       	ldd	r18, Z+23	; 0x17
     926:	28 8f       	std	Y+24, r18	; 0x18
     928:	20 8d       	ldd	r18, Z+24	; 0x18
     92a:	29 8f       	std	Y+25, r18	; 0x19
     92c:	21 8d       	ldd	r18, Z+25	; 0x19
     92e:	2a 8f       	std	Y+26, r18	; 0x1a
     930:	22 8d       	ldd	r18, Z+26	; 0x1a
     932:	2b 8f       	std	Y+27, r18	; 0x1b
     934:	83 8d       	ldd	r24, Z+27	; 0x1b
     936:	8c 8f       	std	Y+28, r24	; 0x1c
     938:	8d e3       	ldi	r24, 0x3D	; 61
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_Znwj>
     940:	8c 01       	movw	r16, r24
     942:	be 01       	movw	r22, r28
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     94c:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <ptrdspMainDoor+0x1>
     950:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <ptrdspMainDoor>
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_Znwj>
     95c:	8c 01       	movw	r16, r24
     95e:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN6SafetyC1Ev>
     962:	10 93 dd 01 	sts	0x01DD, r17	; 0x8001dd <ptrsftMainDoor+0x1>
     966:	00 93 dc 01 	sts	0x01DC, r16	; 0x8001dc <ptrsftMainDoor>
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	8a e0       	ldi	r24, 0x0A	; 10
     96e:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	89 e0       	ldi	r24, 0x09	; 9
     976:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 3a 07 	call	0xe74	; 0xe74 <analogReference>
     988:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <isClosing>
     98c:	e9 e6       	ldi	r30, 0x69	; 105
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8a 60       	ori	r24, 0x0A	; 10
     994:	80 83       	st	Z, r24
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	8d bb       	out	0x1d, r24	; 29
     99a:	e8 e6       	ldi	r30, 0x68	; 104
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	85 60       	ori	r24, 0x05	; 5
     9a2:	80 83       	st	Z, r24
     9a4:	78 94       	sei
     9a6:	0e 94 87 06 	call	0xd0e	; 0xd0e <millis>
     9aa:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <__data_end>
     9ae:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <__data_end+0x1>
     9b2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end+0x2>
     9b6:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x3>
     9ba:	6c 96       	adiw	r28, 0x1c	; 28
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <loop>:
     9d0:	40 91 d8 01 	lds	r20, 0x01D8	; 0x8001d8 <__data_end>
     9d4:	50 91 d9 01 	lds	r21, 0x01D9	; 0x8001d9 <__data_end+0x1>
     9d8:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <__data_end+0x2>
     9dc:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <__data_end+0x3>
     9e0:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <ptrdspMainDoor>
     9e4:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <ptrdspMainDoor+0x1>
     9e8:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN7Display21UpdateMenuFromButtonsEm>
     9ec:	88 23       	and	r24, r24
     9ee:	51 f0       	breq	.+20     	; 0xa04 <loop+0x34>
     9f0:	0e 94 87 06 	call	0xd0e	; 0xd0e <millis>
     9f4:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <__data_end>
     9f8:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <__data_end+0x1>
     9fc:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end+0x2>
     a00:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x3>
     a04:	08 95       	ret

00000a06 <__vector_2>:
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     a30:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     a34:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN6Safety12cntEventIncrEi>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     a40:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     a44:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6Safety15setSafetyStatusEi>
     a48:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     a4c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     a50:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN6Safety12inEventCountEv>
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	bf 91       	pop	r27
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	4f 91       	pop	r20
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <__vector_1>:
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
     a98:	0e 94 03 05 	call	0xa06	; 0xa06 <__vector_2>
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_5>:
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
     ae0:	65 e0       	ldi	r22, 0x05	; 5
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     ae8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     aec:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN6Safety12deviceStatusEi>
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	b1 f4       	brne	.+44     	; 0xb20 <__vector_5+0x62>
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     afc:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b00:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN6Safety12cntEventIncrEi>
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b0c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b10:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6Safety15setSafetyStatusEi>
     b14:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b18:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b1c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN6Safety12inEventCountEv>
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_3>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b70:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b74:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Safety9setDeviceEii>
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	65 e0       	ldi	r22, 0x05	; 5
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <ptrsftMainDoor>
     b84:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <ptrsftMainDoor+0x1>
     b88:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Safety9setDeviceEii>
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <_GLOBAL__sub_I_Temperature>:
     bae:	64 e4       	ldi	r22, 0x44	; 68
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     bba:	64 e4       	ldi	r22, 0x44	; 68
     bbc:	71 e0       	ldi	r23, 0x01	; 1
     bbe:	8d ef       	ldi	r24, 0xFD	; 253
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
     bc6:	80 ee       	ldi	r24, 0xE0	; 224
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0c 94 43 09 	jmp	0x1286	; 0x1286 <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000bce <_GLOBAL__sub_D_Temperature>:
     bce:	8d ef       	ldi	r24, 0xFD	; 253
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6StringD1Ev>
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <_ZN6StringD1Ev>

00000bde <initVariant>:
     bde:	08 95       	ret

00000be0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     be0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <init>

	initVariant();
     be4:	0e 94 ef 05 	call	0xbde	; 0xbde <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     be8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     bf0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <loop>
		if (serialEventRun) serialEventRun();
     bf4:	20 97       	sbiw	r28, 0x00	; 0
     bf6:	e1 f3       	breq	.-8      	; 0xbf0 <main+0x10>
     bf8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bfc:	f9 cf       	rjmp	.-14     	; 0xbf0 <main+0x10>

00000bfe <_Znwj>:
     bfe:	0c 94 b7 11 	jmp	0x236e	; 0x236e <malloc>

00000c02 <_ZN5Print17availableForWriteEv>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	08 95       	ret

00000c08 <_ZN5Print5flushEv>:
     c08:	08 95       	ret

00000c0a <_ZN5Print5writeEPKhj>:
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	6c 01       	movw	r12, r24
     c1c:	7a 01       	movw	r14, r20
     c1e:	8b 01       	movw	r16, r22
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	ce 15       	cp	r28, r14
     c26:	df 05       	cpc	r29, r15
     c28:	81 f0       	breq	.+32     	; 0xc4a <_ZN5Print5writeEPKhj+0x40>
     c2a:	d8 01       	movw	r26, r16
     c2c:	6d 91       	ld	r22, X+
     c2e:	8d 01       	movw	r16, r26
     c30:	d6 01       	movw	r26, r12
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	01 90       	ld	r0, Z+
     c38:	f0 81       	ld	r31, Z
     c3a:	e0 2d       	mov	r30, r0
     c3c:	c6 01       	movw	r24, r12
     c3e:	09 95       	icall
     c40:	89 2b       	or	r24, r25
     c42:	11 f0       	breq	.+4      	; 0xc48 <_ZN5Print5writeEPKhj+0x3e>
     c44:	21 96       	adiw	r28, 0x01	; 1
     c46:	ee cf       	rjmp	.-36     	; 0xc24 <_ZN5Print5writeEPKhj+0x1a>
     c48:	7e 01       	movw	r14, r28
     c4a:	c7 01       	movw	r24, r14
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	08 95       	ret

00000c5e <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     c5e:	db 01       	movw	r26, r22
     c60:	14 96       	adiw	r26, 0x04	; 4
     c62:	4d 91       	ld	r20, X+
     c64:	5c 91       	ld	r21, X
     c66:	15 97       	sbiw	r26, 0x05	; 5
     c68:	6d 91       	ld	r22, X+
     c6a:	7c 91       	ld	r23, X
     c6c:	dc 01       	movw	r26, r24
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	02 80       	ldd	r0, Z+2	; 0x02
     c74:	f3 81       	ldd	r31, Z+3	; 0x03
     c76:	e0 2d       	mov	r30, r0
     c78:	09 94       	ijmp

00000c7a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c90:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_millis>
     c94:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_millis+0x1>
     c98:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_millis+0x2>
     c9c:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     ca0:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     ca4:	23 e0       	ldi	r18, 0x03	; 3
     ca6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     ca8:	2d 37       	cpi	r18, 0x7D	; 125
     caa:	20 f4       	brcc	.+8      	; 0xcb4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	a1 1d       	adc	r26, r1
     cb0:	b1 1d       	adc	r27, r1
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     cb4:	26 e8       	ldi	r18, 0x86	; 134
     cb6:	23 0f       	add	r18, r19
		m += 1;
     cb8:	02 96       	adiw	r24, 0x02	; 2
     cba:	a1 1d       	adc	r26, r1
     cbc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     cbe:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <timer0_fract>
	timer0_millis = m;
     cc2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer0_millis>
     cc6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer0_millis+0x1>
     cca:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer0_millis+0x2>
     cce:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer0_millis+0x3>
	timer0_overflow_count++;
     cd2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
     cd6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
     cda:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
     cde:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timer0_overflow_count>
     cec:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timer0_overflow_count+0x1>
     cf0:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timer0_overflow_count+0x2>
     cf4:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timer0_overflow_count+0x3>
}
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     d0e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     d10:	f8 94       	cli
	m = timer0_millis;
     d12:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <timer0_millis>
     d16:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <timer0_millis+0x1>
     d1a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <timer0_millis+0x2>
     d1e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <timer0_millis+0x3>
	SREG = oldSREG;
     d22:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     d24:	08 95       	ret

00000d26 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d26:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d28:	f8 94       	cli
	m = timer0_overflow_count;
     d2a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
     d2e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
     d32:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
     d36:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d3a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d3c:	a8 9b       	sbis	0x15, 0	; 21
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <micros+0x24>
     d40:	2f 3f       	cpi	r18, 0xFF	; 255
     d42:	19 f0       	breq	.+6      	; 0xd4a <micros+0x24>
		m++;
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	a1 1d       	adc	r26, r1
     d48:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d4a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d4c:	ba 2f       	mov	r27, r26
     d4e:	a9 2f       	mov	r26, r25
     d50:	98 2f       	mov	r25, r24
     d52:	88 27       	eor	r24, r24
     d54:	82 0f       	add	r24, r18
     d56:	91 1d       	adc	r25, r1
     d58:	a1 1d       	adc	r26, r1
     d5a:	b1 1d       	adc	r27, r1
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	42 e0       	ldi	r20, 0x02	; 2
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	4a 95       	dec	r20
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <micros+0x3c>
}
     d6e:	08 95       	ret

00000d70 <delay>:

void delay(unsigned long ms)
{
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	6b 01       	movw	r12, r22
     d82:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     d84:	0e 94 93 06 	call	0xd26	; 0xd26 <micros>
     d88:	4b 01       	movw	r8, r22
     d8a:	5c 01       	movw	r10, r24

	while (ms > 0) {
     d8c:	c1 14       	cp	r12, r1
     d8e:	d1 04       	cpc	r13, r1
     d90:	e1 04       	cpc	r14, r1
     d92:	f1 04       	cpc	r15, r1
     d94:	01 f1       	breq	.+64     	; 0xdd6 <delay+0x66>
		yield();
     d96:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     d9a:	0e 94 93 06 	call	0xd26	; 0xd26 <micros>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	88 19       	sub	r24, r8
     da4:	99 09       	sbc	r25, r9
     da6:	aa 09       	sbc	r26, r10
     da8:	bb 09       	sbc	r27, r11
     daa:	88 3e       	cpi	r24, 0xE8	; 232
     dac:	93 40       	sbci	r25, 0x03	; 3
     dae:	a1 05       	cpc	r26, r1
     db0:	b1 05       	cpc	r27, r1
     db2:	60 f3       	brcs	.-40     	; 0xd8c <delay+0x1c>
			ms--;
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	c2 1a       	sub	r12, r18
     db8:	d1 08       	sbc	r13, r1
     dba:	e1 08       	sbc	r14, r1
     dbc:	f1 08       	sbc	r15, r1
			start += 1000;
     dbe:	88 ee       	ldi	r24, 0xE8	; 232
     dc0:	88 0e       	add	r8, r24
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	98 1e       	adc	r9, r24
     dc6:	a1 1c       	adc	r10, r1
     dc8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     dca:	c1 14       	cp	r12, r1
     dcc:	d1 04       	cpc	r13, r1
     dce:	e1 04       	cpc	r14, r1
     dd0:	f1 04       	cpc	r15, r1
     dd2:	19 f7       	brne	.-58     	; 0xd9a <delay+0x2a>
     dd4:	db cf       	rjmp	.-74     	; 0xd8c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	08 95       	ret

00000de8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	91 05       	cpc	r25, r1
     dec:	38 f0       	brcs	.+14     	; 0xdfc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     df6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <delayMicroseconds+0x10>
     dfc:	08 95       	ret

00000dfe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dfe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e00:	84 b5       	in	r24, 0x24	; 36
     e02:	82 60       	ori	r24, 0x02	; 2
     e04:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e06:	84 b5       	in	r24, 0x24	; 36
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e0c:	85 b5       	in	r24, 0x25	; 37
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e12:	85 b5       	in	r24, 0x25	; 37
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e18:	ee e6       	ldi	r30, 0x6E	; 110
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e22:	e1 e8       	ldi	r30, 0x81	; 129
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e28:	80 81       	ld	r24, Z
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e2e:	80 81       	ld	r24, Z
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e34:	e0 e8       	ldi	r30, 0x80	; 128
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e3e:	e1 eb       	ldi	r30, 0xB1	; 177
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e48:	e0 eb       	ldi	r30, 0xB0	; 176
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e52:	ea e7       	ldi	r30, 0x7A	; 122
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	84 60       	ori	r24, 0x04	; 4
     e5a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e62:	80 81       	ld	r24, Z
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e68:	80 81       	ld	r24, Z
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e6e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     e72:	08 95       	ret

00000e74 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     e74:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
     e78:	08 95       	ret

00000e7a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	81 f0       	breq	.+32     	; 0xe9e <turnOffPWM+0x24>
     e7e:	28 f4       	brcc	.+10     	; 0xe8a <turnOffPWM+0x10>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	99 f0       	breq	.+38     	; 0xeaa <turnOffPWM+0x30>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	a1 f0       	breq	.+40     	; 0xeb0 <turnOffPWM+0x36>
     e88:	08 95       	ret
     e8a:	87 30       	cpi	r24, 0x07	; 7
     e8c:	a9 f0       	breq	.+42     	; 0xeb8 <turnOffPWM+0x3e>
     e8e:	88 30       	cpi	r24, 0x08	; 8
     e90:	b9 f0       	breq	.+46     	; 0xec0 <turnOffPWM+0x46>
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	d1 f4       	brne	.+52     	; 0xeca <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ea2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ea4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ea8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     eaa:	84 b5       	in	r24, 0x24	; 36
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     eb0:	84 b5       	in	r24, 0x24	; 36
     eb2:	8f 7d       	andi	r24, 0xDF	; 223
     eb4:	84 bd       	out	0x24, r24	; 36
     eb6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     eb8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     ebc:	8f 77       	andi	r24, 0x7F	; 127
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ec0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     eca:	08 95       	ret

00000ecc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	e4 58       	subi	r30, 0x84	; 132
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     eda:	fc 01       	movw	r30, r24
     edc:	e0 57       	subi	r30, 0x70	; 112
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ee2:	88 23       	and	r24, r24
     ee4:	61 f1       	breq	.+88     	; 0xf3e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	fc 01       	movw	r30, r24
     eee:	e8 54       	subi	r30, 0x48	; 72
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	c5 91       	lpm	r28, Z+
     ef4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     ef6:	fc 01       	movw	r30, r24
     ef8:	e2 55       	subi	r30, 0x52	; 82
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	a5 91       	lpm	r26, Z+
     efe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f00:	61 11       	cpse	r22, r1
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f04:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f06:	f8 94       	cli
		*reg &= ~bit;
     f08:	88 81       	ld	r24, Y
     f0a:	20 95       	com	r18
     f0c:	82 23       	and	r24, r18
     f0e:	88 83       	st	Y, r24
		*out &= ~bit;
     f10:	ec 91       	ld	r30, X
     f12:	2e 23       	and	r18, r30
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f16:	62 30       	cpi	r22, 0x02	; 2
     f18:	61 f4       	brne	.+24     	; 0xf32 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f1a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f1c:	f8 94       	cli
		*reg &= ~bit;
     f1e:	88 81       	ld	r24, Y
     f20:	32 2f       	mov	r19, r18
     f22:	30 95       	com	r19
     f24:	83 23       	and	r24, r19
     f26:	88 83       	st	Y, r24
		*out |= bit;
     f28:	ec 91       	ld	r30, X
     f2a:	2e 2b       	or	r18, r30
     f2c:	2c 93       	st	X, r18
		SREG = oldSREG;
     f2e:	9f bf       	out	0x3f, r25	; 63
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f32:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f34:	f8 94       	cli
		*reg |= bit;
     f36:	e8 81       	ld	r30, Y
     f38:	2e 2b       	or	r18, r30
     f3a:	28 83       	st	Y, r18
		SREG = oldSREG;
     f3c:	8f bf       	out	0x3f, r24	; 63
	}
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	e8 59       	subi	r30, 0x98	; 152
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f56:	f9 01       	movw	r30, r18
     f58:	e4 58       	subi	r30, 0x84	; 132
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f5e:	f9 01       	movw	r30, r18
     f60:	e0 57       	subi	r30, 0x70	; 112
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f66:	cc 23       	and	r28, r28
     f68:	c1 f0       	breq	.+48     	; 0xf9a <digitalWrite+0x56>
     f6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f6c:	81 11       	cpse	r24, r1
     f6e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <turnOffPWM>

	out = portOutputRegister(port);
     f72:	ec 2f       	mov	r30, r28
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	e2 55       	subi	r30, 0x52	; 82
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	a5 91       	lpm	r26, Z+
     f80:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     f82:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f84:	f8 94       	cli

	if (val == LOW) {
     f86:	11 11       	cpse	r17, r1
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <digitalWrite+0x4e>
		*out &= ~bit;
     f8a:	8c 91       	ld	r24, X
     f8c:	d0 95       	com	r29
     f8e:	d8 23       	and	r29, r24
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <digitalWrite+0x52>
	} else {
		*out |= bit;
     f92:	ec 91       	ld	r30, X
     f94:	de 2b       	or	r29, r30
     f96:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     f98:	9f bf       	out	0x3f, r25	; 63
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	08 95       	ret

00000fa2 <digitalRead>:

int digitalRead(uint8_t pin)
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	f9 01       	movw	r30, r18
     fac:	e8 59       	subi	r30, 0x98	; 152
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fb2:	f9 01       	movw	r30, r18
     fb4:	e4 58       	subi	r30, 0x84	; 132
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fba:	f9 01       	movw	r30, r18
     fbc:	e0 57       	subi	r30, 0x70	; 112
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     fc2:	cc 23       	and	r28, r28
     fc4:	91 f0       	breq	.+36     	; 0xfea <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fc6:	81 11       	cpse	r24, r1
     fc8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     fcc:	ec 2f       	mov	r30, r28
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	ec 55       	subi	r30, 0x5C	; 92
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	a5 91       	lpm	r26, Z+
     fda:	b4 91       	lpm	r27, Z
     fdc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     fde:	ed 23       	and	r30, r29
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	21 f4       	brne	.+8      	; 0xfee <digitalRead+0x4c>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <digitalRead+0x4c>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
     ff4:	08 95       	ret

00000ff6 <_ZN6StringD1Ev>:
     ff6:	fc 01       	movw	r30, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	0c 94 4f 12 	jmp	0x249e	; 0x249e <free>

00001000 <_ZN6String10invalidateEv>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	88 81       	ld	r24, Y
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	11 f0       	breq	.+4      	; 0x1012 <_ZN6String10invalidateEv+0x12>
    100e:	0e 94 4f 12 	call	0x249e	; 0x249e <free>
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	18 82       	st	Y, r1
    1016:	1d 82       	std	Y+5, r1	; 0x05
    1018:	1c 82       	std	Y+4, r1	; 0x04
    101a:	1b 82       	std	Y+3, r1	; 0x03
    101c:	1a 82       	std	Y+2, r1	; 0x02
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_ZN6String12changeBufferEj>:
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
    102e:	8b 01       	movw	r16, r22
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	88 81       	ld	r24, Y
    1036:	99 81       	ldd	r25, Y+1	; 0x01
    1038:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <realloc>
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	31 f0       	breq	.+12     	; 0x104c <_ZN6String12changeBufferEj+0x28>
    1040:	99 83       	std	Y+1, r25	; 0x01
    1042:	88 83       	st	Y, r24
    1044:	1b 83       	std	Y+3, r17	; 0x03
    1046:	0a 83       	std	Y+2, r16	; 0x02
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	01 c0       	rjmp	.+2      	; 0x104e <_ZN6String12changeBufferEj+0x2a>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <_ZN6String7reserveEj>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	ec 01       	movw	r28, r24
    105e:	88 81       	ld	r24, Y
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	89 2b       	or	r24, r25
    1064:	29 f0       	breq	.+10     	; 0x1070 <_ZN6String7reserveEj+0x18>
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	86 17       	cp	r24, r22
    106c:	97 07       	cpc	r25, r23
    106e:	60 f4       	brcc	.+24     	; 0x1088 <_ZN6String7reserveEj+0x30>
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN6String12changeBufferEj>
    1076:	88 23       	and	r24, r24
    1078:	41 f0       	breq	.+16     	; 0x108a <_ZN6String7reserveEj+0x32>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	89 2b       	or	r24, r25
    1080:	19 f4       	brne	.+6      	; 0x1088 <_ZN6String7reserveEj+0x30>
    1082:	e8 81       	ld	r30, Y
    1084:	f9 81       	ldd	r31, Y+1	; 0x01
    1086:	10 82       	st	Z, r1
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <_ZN6String4copyEPKcj>:
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	7b 01       	movw	r14, r22
    10a0:	8a 01       	movw	r16, r20
    10a2:	ba 01       	movw	r22, r20
    10a4:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN6String7reserveEj>
    10a8:	81 11       	cpse	r24, r1
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <_ZN6String4copyEPKcj+0x24>
    10ac:	ce 01       	movw	r24, r28
    10ae:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN6String10invalidateEv>
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <_ZN6String4copyEPKcj+0x32>
    10b4:	1d 83       	std	Y+5, r17	; 0x05
    10b6:	0c 83       	std	Y+4, r16	; 0x04
    10b8:	b7 01       	movw	r22, r14
    10ba:	88 81       	ld	r24, Y
    10bc:	99 81       	ldd	r25, Y+1	; 0x01
    10be:	0e 94 a7 13 	call	0x274e	; 0x274e <strcpy>
    10c2:	ce 01       	movw	r24, r28
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	08 95       	ret

000010d2 <_ZN6StringC1EPKc>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1
    10d8:	13 82       	std	Z+3, r1	; 0x03
    10da:	12 82       	std	Z+2, r1	; 0x02
    10dc:	15 82       	std	Z+5, r1	; 0x05
    10de:	14 82       	std	Z+4, r1	; 0x04
    10e0:	61 15       	cp	r22, r1
    10e2:	71 05       	cpc	r23, r1
    10e4:	51 f0       	breq	.+20     	; 0x10fa <_ZN6StringC1EPKc+0x28>
    10e6:	fb 01       	movw	r30, r22
    10e8:	01 90       	ld	r0, Z+
    10ea:	00 20       	and	r0, r0
    10ec:	e9 f7       	brne	.-6      	; 0x10e8 <_ZN6StringC1EPKc+0x16>
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	af 01       	movw	r20, r30
    10f2:	46 1b       	sub	r20, r22
    10f4:	57 0b       	sbc	r21, r23
    10f6:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_ZN6String4copyEPKcj>
    10fa:	08 95       	ret

000010fc <_ZN6String4moveERS_>:
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	8c 01       	movw	r16, r24
    1106:	eb 01       	movw	r28, r22
    1108:	fc 01       	movw	r30, r24
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	d1 f0       	breq	.+52     	; 0x1146 <_ZN6String4moveERS_+0x4a>
    1112:	68 81       	ld	r22, Y
    1114:	79 81       	ldd	r23, Y+1	; 0x01
    1116:	61 15       	cp	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	99 f0       	breq	.+38     	; 0x1142 <_ZN6String4moveERS_+0x46>
    111c:	2a ef       	ldi	r18, 0xFA	; 250
    111e:	37 e0       	ldi	r19, 0x07	; 7
    1120:	23 2b       	or	r18, r19
    1122:	79 f0       	breq	.+30     	; 0x1142 <_ZN6String4moveERS_+0x46>
    1124:	42 81       	ldd	r20, Z+2	; 0x02
    1126:	53 81       	ldd	r21, Z+3	; 0x03
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	42 17       	cp	r20, r18
    112e:	53 07       	cpc	r21, r19
    1130:	40 f0       	brcs	.+16     	; 0x1142 <_ZN6String4moveERS_+0x46>
    1132:	0e 94 a7 13 	call	0x274e	; 0x274e <strcpy>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	f8 01       	movw	r30, r16
    113c:	95 83       	std	Z+5, r25	; 0x05
    113e:	84 83       	std	Z+4, r24	; 0x04
    1140:	13 c0       	rjmp	.+38     	; 0x1168 <_ZN6String4moveERS_+0x6c>
    1142:	0e 94 4f 12 	call	0x249e	; 0x249e <free>
    1146:	88 81       	ld	r24, Y
    1148:	99 81       	ldd	r25, Y+1	; 0x01
    114a:	f8 01       	movw	r30, r16
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	95 83       	std	Z+5, r25	; 0x05
    115e:	84 83       	std	Z+4, r24	; 0x04
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	18 82       	st	Y, r1
    1164:	1b 82       	std	Y+3, r1	; 0x03
    1166:	1a 82       	std	Y+2, r1	; 0x02
    1168:	1d 82       	std	Y+5, r1	; 0x05
    116a:	1c 82       	std	Y+4, r1	; 0x04
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <_ZN6StringaSERKS_>:
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	fb 01       	movw	r30, r22
    117e:	86 17       	cp	r24, r22
    1180:	97 07       	cpc	r25, r23
    1182:	61 f0       	breq	.+24     	; 0x119c <_ZN6StringaSERKS_+0x26>
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	61 15       	cp	r22, r1
    118a:	71 05       	cpc	r23, r1
    118c:	29 f0       	breq	.+10     	; 0x1198 <_ZN6StringaSERKS_+0x22>
    118e:	44 81       	ldd	r20, Z+4	; 0x04
    1190:	55 81       	ldd	r21, Z+5	; 0x05
    1192:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN6String4copyEPKcj>
    1196:	02 c0       	rjmp	.+4      	; 0x119c <_ZN6StringaSERKS_+0x26>
    1198:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN6String10invalidateEv>
    119c:	ce 01       	movw	r24, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <_ZN6StringC1ERKS_>:
    11a4:	fc 01       	movw	r30, r24
    11a6:	11 82       	std	Z+1, r1	; 0x01
    11a8:	10 82       	st	Z, r1
    11aa:	13 82       	std	Z+3, r1	; 0x03
    11ac:	12 82       	std	Z+2, r1	; 0x02
    11ae:	15 82       	std	Z+5, r1	; 0x05
    11b0:	14 82       	std	Z+4, r1	; 0x04
    11b2:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <_ZN6StringaSERKS_>

000011b6 <_ZN6StringaSEOS_>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	86 17       	cp	r24, r22
    11be:	97 07       	cpc	r25, r23
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <_ZN6StringaSEOS_+0x10>
    11c2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6String4moveERS_>
    11c6:	ce 01       	movw	r24, r28
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <_ZN6StringaSEPKc>:
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
    11d4:	61 15       	cp	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	59 f0       	breq	.+22     	; 0x11f0 <_ZN6StringaSEPKc+0x22>
    11da:	fb 01       	movw	r30, r22
    11dc:	01 90       	ld	r0, Z+
    11de:	00 20       	and	r0, r0
    11e0:	e9 f7       	brne	.-6      	; 0x11dc <_ZN6StringaSEPKc+0xe>
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	af 01       	movw	r20, r30
    11e6:	46 1b       	sub	r20, r22
    11e8:	57 0b       	sbc	r21, r23
    11ea:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN6String4copyEPKcj>
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <_ZN6StringaSEPKc+0x26>
    11f0:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN6String10invalidateEv>
    11f4:	ce 01       	movw	r24, r28
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	7c 01       	movw	r14, r24
    1210:	6b 01       	movw	r12, r22
    1212:	8a 01       	movw	r16, r20
    1214:	e9 01       	movw	r28, r18
	if (left > right) {
    1216:	24 17       	cp	r18, r20
    1218:	35 07       	cpc	r19, r21
    121a:	20 f4       	brcc	.+8      	; 0x1224 <_ZNK6String9substringEjj+0x28>
    121c:	81 2f       	mov	r24, r17
    121e:	89 01       	movw	r16, r18
    1220:	c4 2f       	mov	r28, r20
    1222:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1224:	64 e4       	ldi	r22, 0x44	; 68
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	c7 01       	movw	r24, r14
    122a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    122e:	d6 01       	movw	r26, r12
    1230:	14 96       	adiw	r26, 0x04	; 4
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	15 97       	sbiw	r26, 0x05	; 5
    1238:	08 17       	cp	r16, r24
    123a:	19 07       	cpc	r17, r25
    123c:	c8 f4       	brcc	.+50     	; 0x1270 <_ZNK6String9substringEjj+0x74>
    123e:	8c 17       	cp	r24, r28
    1240:	9d 07       	cpc	r25, r29
    1242:	08 f4       	brcc	.+2      	; 0x1246 <_ZNK6String9substringEjj+0x4a>
    1244:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1246:	d6 01       	movw	r26, r12
    1248:	ed 91       	ld	r30, X+
    124a:	fc 91       	ld	r31, X
    124c:	11 97       	sbiw	r26, 0x01	; 1
    124e:	ec 0f       	add	r30, r28
    1250:	fd 1f       	adc	r31, r29
    1252:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1254:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1256:	6d 91       	ld	r22, X+
    1258:	7c 91       	ld	r23, X
    125a:	60 0f       	add	r22, r16
    125c:	71 1f       	adc	r23, r17
    125e:	c7 01       	movw	r24, r14
    1260:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1264:	d6 01       	movw	r26, r12
    1266:	ed 91       	ld	r30, X+
    1268:	fc 91       	ld	r31, X
    126a:	ec 0f       	add	r30, r28
    126c:	fd 1f       	adc	r31, r29
    126e:	b0 82       	st	Z, r11
	return out;
}
    1270:	c7 01       	movw	r24, r14
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	bf 90       	pop	r11
    1284:	08 95       	ret

00001286 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1286:	fc 01       	movw	r30, r24
    1288:	13 82       	std	Z+3, r1	; 0x03
    128a:	12 82       	std	Z+2, r1	; 0x02
    128c:	8d eb       	ldi	r24, 0xBD	; 189
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
    1294:	12 8e       	std	Z+26, r1	; 0x1a
    1296:	14 8a       	std	Z+20, r1	; 0x14
    1298:	8f e0       	ldi	r24, 0x0F	; 15
    129a:	84 83       	std	Z+4, r24	; 0x04
    129c:	8e e0       	ldi	r24, 0x0E	; 14
    129e:	85 83       	std	Z+5, r24	; 0x05
    12a0:	8d e0       	ldi	r24, 0x0D	; 13
    12a2:	86 83       	std	Z+6, r24	; 0x06
    12a4:	8c e0       	ldi	r24, 0x0C	; 12
    12a6:	87 83       	std	Z+7, r24	; 0x07
    12a8:	8b e0       	ldi	r24, 0x0B	; 11
    12aa:	80 87       	std	Z+8, r24	; 0x08
    12ac:	8a e0       	ldi	r24, 0x0A	; 10
    12ae:	81 87       	std	Z+9, r24	; 0x09
    12b0:	89 e0       	ldi	r24, 0x09	; 9
    12b2:	82 87       	std	Z+10, r24	; 0x0a
    12b4:	17 86       	std	Z+15, r1	; 0x0f
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 8b       	std	Z+16, r24	; 0x10
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	81 8b       	std	Z+17, r24	; 0x11
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	82 8b       	std	Z+18, r24	; 0x12
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	83 8b       	std	Z+19, r24	; 0x13
    12c6:	08 95       	ret

000012c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    12c8:	fc 01       	movw	r30, r24
    12ca:	96 2f       	mov	r25, r22
    12cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ce:	8f 3f       	cpi	r24, 0xFF	; 255
    12d0:	21 f0       	breq	.+8      	; 0x12da <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    12d2:	cf 01       	movw	r24, r30
    12d4:	4b 96       	adiw	r24, 0x1b	; 27
    12d6:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12da:	64 2f       	mov	r22, r20
    12dc:	89 2f       	mov	r24, r25
    12de:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <digitalWrite>

000012e2 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	d6 2f       	mov	r29, r22
    12ec:	8c 01       	movw	r16, r24
    12ee:	05 5e       	subi	r16, 0xE5	; 229
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	c1 e0       	ldi	r28, 0x01	; 1
    12f4:	62 fb       	bst	r22, 2
    12f6:	44 27       	eor	r20, r20
    12f8:	40 f9       	bld	r20, 0
    12fa:	4c 27       	eor	r20, r28
    12fc:	68 e0       	ldi	r22, 0x08	; 8
    12fe:	c8 01       	movw	r24, r16
    1300:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1304:	d1 fb       	bst	r29, 1
    1306:	44 27       	eor	r20, r20
    1308:	40 f9       	bld	r20, 0
    130a:	4c 27       	eor	r20, r28
    130c:	67 e0       	ldi	r22, 0x07	; 7
    130e:	c8 01       	movw	r24, r16
    1310:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1314:	4d 2f       	mov	r20, r29
    1316:	41 70       	andi	r20, 0x01	; 1
    1318:	4c 27       	eor	r20, r28
    131a:	66 e0       	ldi	r22, 0x06	; 6
    131c:	c8 01       	movw	r24, r16
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_ZN17Adafruit_MCP2301712digitalWriteEhh>

0000132a <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    132a:	fc 01       	movw	r30, r24
    132c:	96 2f       	mov	r25, r22
    132e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1330:	8f 3f       	cpi	r24, 0xFF	; 255
    1332:	21 f0       	breq	.+8      	; 0x133c <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1334:	cf 01       	movw	r24, r30
    1336:	4b 96       	adiw	r24, 0x1b	; 27
    1338:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    133c:	64 2f       	mov	r22, r20
    133e:	89 2f       	mov	r24, r25
    1340:	0c 94 66 07 	jmp	0xecc	; 0xecc <pinMode>

00001344 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	6e 81       	ldd	r22, Y+6	; 0x06
    134e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	6e 81       	ldd	r22, Y+6	; 0x06
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	6e 81       	ldd	r22, Y+6	; 0x06
    1370:	ce 01       	movw	r24, r28
    1372:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1376:	84 e6       	ldi	r24, 0x64	; 100
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <delayMicroseconds>

00001382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	8c 01       	movw	r16, r24
    1398:	fc 01       	movw	r30, r24
    139a:	82 8d       	ldd	r24, Z+26	; 0x1a
    139c:	98 01       	movw	r18, r16
    139e:	29 5f       	subi	r18, 0xF9	; 249
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	79 01       	movw	r14, r18
    13a4:	c6 2f       	mov	r28, r22
    13a6:	d0 e0       	ldi	r29, 0x00	; 0
    13a8:	8f 3f       	cpi	r24, 0xFF	; 255
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    13ac:	73 c0       	rjmp	.+230    	; 0x1494 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    13ae:	68 01       	movw	r12, r16
    13b0:	3b e1       	ldi	r19, 0x1B	; 27
    13b2:	c3 0e       	add	r12, r19
    13b4:	d1 1c       	adc	r13, r1
    13b6:	c6 01       	movw	r24, r12
    13b8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    13bc:	f7 01       	movw	r30, r14
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	a1 e0       	ldi	r26, 0x01	; 1
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	b1 90       	ld	r11, Z+
    13c8:	ee 24       	eor	r14, r14
    13ca:	e3 94       	inc	r14
    13cc:	f1 2c       	mov	r15, r1
    13ce:	bd 01       	movw	r22, r26
    13d0:	0b 2c       	mov	r0, r11
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    13dc:	60 95       	com	r22
    13de:	70 95       	com	r23
    13e0:	86 23       	and	r24, r22
    13e2:	97 23       	and	r25, r23
    13e4:	9e 01       	movw	r18, r28
    13e6:	04 2e       	mov	r0, r20
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    13ea:	35 95       	asr	r19
    13ec:	27 95       	ror	r18
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    13f2:	21 70       	andi	r18, 0x01	; 1
    13f4:	33 27       	eor	r19, r19
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	ba 94       	dec	r11
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    1400:	82 2b       	or	r24, r18
    1402:	93 2b       	or	r25, r19
    1404:	4f 5f       	subi	r20, 0xFF	; 255
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
    1408:	44 30       	cpi	r20, 0x04	; 4
    140a:	51 05       	cpc	r21, r1
    140c:	e1 f6       	brne	.-72     	; 0x13c6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    140e:	e7 01       	movw	r28, r14
    1410:	f8 01       	movw	r30, r16
    1412:	06 80       	ldd	r0, Z+6	; 0x06
    1414:	02 c0       	rjmp	.+4      	; 0x141a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1416:	cc 0f       	add	r28, r28
    1418:	dd 1f       	adc	r29, r29
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    141e:	c0 95       	com	r28
    1420:	d0 95       	com	r29
    1422:	c8 23       	and	r28, r24
    1424:	d9 23       	and	r29, r25
    1426:	be 01       	movw	r22, r28
    1428:	c6 01       	movw	r24, r12
    142a:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    1436:	c7 01       	movw	r24, r14
    1438:	f8 01       	movw	r30, r16
    143a:	06 80       	ldd	r0, Z+6	; 0x06
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1446:	c8 2b       	or	r28, r24
    1448:	d9 2b       	or	r29, r25
    144a:	be 01       	movw	r22, r28
    144c:	c6 01       	movw	r24, r12
    144e:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    145a:	b7 01       	movw	r22, r14
    145c:	f8 01       	movw	r30, r16
    145e:	06 80       	ldd	r0, Z+6	; 0x06
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    146a:	60 95       	com	r22
    146c:	70 95       	com	r23
    146e:	6c 23       	and	r22, r28
    1470:	7d 23       	and	r23, r29
    1472:	c6 01       	movw	r24, r12
    1474:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1478:	84 e6       	ldi	r24, 0x64	; 100
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <delayMicroseconds>
    1494:	c1 2c       	mov	r12, r1
    1496:	d1 2c       	mov	r13, r1
    1498:	57 01       	movw	r10, r14
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	f7 01       	movw	r30, r14
    149e:	61 91       	ld	r22, Z+
    14a0:	7f 01       	movw	r14, r30
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    14a8:	ae 01       	movw	r20, r28
    14aa:	0c 2c       	mov	r0, r12
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    14ae:	55 95       	asr	r21
    14b0:	47 95       	ror	r20
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    14b6:	41 70       	andi	r20, 0x01	; 1
    14b8:	f5 01       	movw	r30, r10
    14ba:	60 81       	ld	r22, Z
    14bc:	c8 01       	movw	r24, r16
    14be:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    14c2:	ff ef       	ldi	r31, 0xFF	; 255
    14c4:	cf 1a       	sub	r12, r31
    14c6:	df 0a       	sbc	r13, r31
    14c8:	24 e0       	ldi	r18, 0x04	; 4
    14ca:	c2 16       	cp	r12, r18
    14cc:	d1 04       	cpc	r13, r1
    14ce:	21 f7       	brne	.-56     	; 0x1498 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    14d0:	c8 01       	movw	r24, r16
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000014ea <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	5c 01       	movw	r10, r24
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	a8 0e       	add	r10, r24
    1506:	b1 1c       	adc	r11, r1
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	e6 2e       	mov	r14, r22
    150e:	f1 2c       	mov	r15, r1
    1510:	65 01       	movw	r12, r10
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	f5 01       	movw	r30, r10
    1516:	61 91       	ld	r22, Z+
    1518:	5f 01       	movw	r10, r30
    151a:	ce 01       	movw	r24, r28
    151c:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1520:	a7 01       	movw	r20, r14
    1522:	00 2e       	mov	r0, r16
    1524:	02 c0       	rjmp	.+4      	; 0x152a <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    152e:	41 70       	andi	r20, 0x01	; 1
    1530:	f6 01       	movw	r30, r12
    1532:	60 81       	ld	r22, Z
    1534:	ce 01       	movw	r24, r28
    1536:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    153a:	0f 5f       	subi	r16, 0xFF	; 255
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	08 30       	cpi	r16, 0x08	; 8
    1540:	11 05       	cpc	r17, r1
    1542:	31 f7       	brne	.-52     	; 0x1510 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1544:	ce 01       	movw	r24, r28
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	bf 90       	pop	r11
    1558:	af 90       	pop	r10
    155a:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

0000155e <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
    1566:	16 2f       	mov	r17, r22
    1568:	6c 81       	ldd	r22, Y+4	; 0x04
    156a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    156e:	6d 81       	ldd	r22, Y+5	; 0x05
    1570:	6f 3f       	cpi	r22, 0xFF	; 255
    1572:	21 f0       	breq	.+8      	; 0x157c <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	ce 01       	movw	r24, r28
    1578:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    157c:	8c 89       	ldd	r24, Y+20	; 0x14
    157e:	61 2f       	mov	r22, r17
    1580:	84 ff       	sbrs	r24, 4
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1584:	ce 01       	movw	r24, r28
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	84 e0       	ldi	r24, 0x04	; 4
    1594:	75 95       	asr	r23
    1596:	67 95       	ror	r22
    1598:	8a 95       	dec	r24
    159a:	e1 f7       	brne	.-8      	; 0x1594 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    159c:	ce 01       	movw	r24, r28
    159e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    15a2:	61 2f       	mov	r22, r17
    15a4:	ce 01       	movw	r24, r28
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000015b0 <_ZN21Adafruit_RGBLCDShield7commandEh>:
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	0c 94 af 0a 	jmp	0x155e	; 0x155e <_ZN21Adafruit_RGBLCDShield4sendEhh>

000015b6 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>
    15bc:	80 ed       	ldi	r24, 0xD0	; 208
    15be:	97 e0       	ldi	r25, 0x07	; 7
    15c0:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <delayMicroseconds>

000015c4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	28 97       	sbiw	r28, 0x08	; 8
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	9c 01       	movw	r18, r24
    15da:	88 e0       	ldi	r24, 0x08	; 8
    15dc:	e7 e0       	ldi	r30, 0x07	; 7
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	de 01       	movw	r26, r28
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	8a 95       	dec	r24
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    15ec:	f9 01       	movw	r30, r18
    15ee:	80 8d       	ldd	r24, Z+24	; 0x18
    15f0:	84 17       	cp	r24, r20
    15f2:	10 f4       	brcc	.+4      	; 0x15f8 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    15f4:	4f ef       	ldi	r20, 0xFF	; 255
    15f6:	48 0f       	add	r20, r24
    15f8:	fe 01       	movw	r30, r28
    15fa:	31 96       	adiw	r30, 0x01	; 1
    15fc:	e4 0f       	add	r30, r20
    15fe:	f1 1d       	adc	r31, r1
    1600:	e4 0f       	add	r30, r20
    1602:	f1 1d       	adc	r31, r1
    1604:	90 81       	ld	r25, Z
    1606:	69 0f       	add	r22, r25
    1608:	60 68       	ori	r22, 0x80	; 128
    160a:	c9 01       	movw	r24, r18
    160c:	28 96       	adiw	r28, 0x08	; 8
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001620 <_ZN21Adafruit_RGBLCDShield7displayEv>:
    1620:	fc 01       	movw	r30, r24
    1622:	65 89       	ldd	r22, Z+21	; 0x15
    1624:	26 2f       	mov	r18, r22
    1626:	24 60       	ori	r18, 0x04	; 4
    1628:	25 8b       	std	Z+21, r18	; 0x15
    162a:	6c 60       	ori	r22, 0x0C	; 12
    162c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001630 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	af 92       	push	r10
    1636:	bf 92       	push	r11
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	d4 2e       	mov	r13, r20
    164c:	c2 2e       	mov	r12, r18
    164e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1650:	8f 3f       	cpi	r24, 0xFF	; 255
    1652:	41 f4       	brne	.+16     	; 0x1664 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	8d 15       	cp	r24, r13
    1658:	08 f0       	brcs	.+2      	; 0x165c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    165a:	5e c0       	rjmp	.+188    	; 0x1718 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    165c:	8c 89       	ldd	r24, Y+20	; 0x14
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	8c 8b       	std	Y+20, r24	; 0x14
    1662:	5a c0       	rjmp	.+180    	; 0x1718 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1664:	82 e1       	ldi	r24, 0x12	; 18
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN7TwoWire5beginEv>
    166c:	8e 01       	movw	r16, r28
    166e:	05 5e       	subi	r16, 0xE5	; 229
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
    1672:	c8 01       	movw	r24, r16
    1674:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN17Adafruit_MCP230175beginEv>
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	68 e0       	ldi	r22, 0x08	; 8
    167c:	c8 01       	movw	r24, r16
    167e:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	66 e0       	ldi	r22, 0x06	; 6
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	67 e0       	ldi	r22, 0x07	; 7
    1690:	c8 01       	movw	r24, r16
    1692:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    1696:	67 e0       	ldi	r22, 0x07	; 7
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    169e:	6d 81       	ldd	r22, Y+5	; 0x05
    16a0:	66 23       	and	r22, r22
    16a2:	21 f0       	breq	.+8      	; 0x16ac <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	6c 81       	ldd	r22, Y+4	; 0x04
    16b0:	c8 01       	movw	r24, r16
    16b2:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	6e 81       	ldd	r22, Y+6	; 0x06
    16ba:	c8 01       	movw	r24, r16
    16bc:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    16c0:	7e 01       	movw	r14, r28
    16c2:	e7 e0       	ldi	r30, 0x07	; 7
    16c4:	ee 0e       	add	r14, r30
    16c6:	f1 1c       	adc	r15, r1
    16c8:	5e 01       	movw	r10, r28
    16ca:	fb e0       	ldi	r31, 0x0B	; 11
    16cc:	af 0e       	add	r10, r31
    16ce:	b1 1c       	adc	r11, r1
    16d0:	f7 01       	movw	r30, r14
    16d2:	61 91       	ld	r22, Z+
    16d4:	7f 01       	movw	r14, r30
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	c8 01       	movw	r24, r16
    16da:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    16de:	ea 14       	cp	r14, r10
    16e0:	fb 04       	cpc	r15, r11
    16e2:	b1 f7       	brne	.-20     	; 0x16d0 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    16e4:	7e 01       	movw	r14, r28
    16e6:	ff e0       	ldi	r31, 0x0F	; 15
    16e8:	ef 0e       	add	r14, r31
    16ea:	f1 1c       	adc	r15, r1
    16ec:	5e 01       	movw	r10, r28
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	a8 0e       	add	r10, r24
    16f2:	b1 1c       	adc	r11, r1
    16f4:	47 01       	movw	r8, r14
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	f7 01       	movw	r30, r14
    16fa:	61 91       	ld	r22, Z+
    16fc:	7f 01       	movw	r14, r30
    16fe:	c8 01       	movw	r24, r16
    1700:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17Adafruit_MCP230177pinModeEhh>
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	f4 01       	movw	r30, r8
    1708:	60 81       	ld	r22, Z
    170a:	c8 01       	movw	r24, r16
    170c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN17Adafruit_MCP230176pullUpEhh>
    1710:	ea 14       	cp	r14, r10
    1712:	fb 04       	cpc	r15, r11
    1714:	79 f7       	brne	.-34     	; 0x16f4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    1716:	9e cf       	rjmp	.-196    	; 0x1654 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    1718:	d8 8e       	std	Y+24, r13	; 0x18
    171a:	19 8e       	std	Y+25, r1	; 0x19
    171c:	cc 20       	and	r12, r12
    171e:	31 f0       	breq	.+12     	; 0x172c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1720:	f1 e0       	ldi	r31, 0x01	; 1
    1722:	df 12       	cpse	r13, r31
    1724:	03 c0       	rjmp	.+6      	; 0x172c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1726:	8c 89       	ldd	r24, Y+20	; 0x14
    1728:	84 60       	ori	r24, 0x04	; 4
    172a:	8c 8b       	std	Y+20, r24	; 0x14
    172c:	80 e5       	ldi	r24, 0x50	; 80
    172e:	93 ec       	ldi	r25, 0xC3	; 195
    1730:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	6c 81       	ldd	r22, Y+4	; 0x04
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	6e 81       	ldd	r22, Y+6	; 0x06
    1742:	ce 01       	movw	r24, r28
    1744:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1748:	6d 81       	ldd	r22, Y+5	; 0x05
    174a:	6f 3f       	cpi	r22, 0xFF	; 255
    174c:	21 f0       	breq	.+8      	; 0x1756 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1756:	6c 89       	ldd	r22, Y+20	; 0x14
    1758:	64 fd       	sbrc	r22, 4
    175a:	1d c0       	rjmp	.+58     	; 0x1796 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    175c:	63 e0       	ldi	r22, 0x03	; 3
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1764:	84 e9       	ldi	r24, 0x94	; 148
    1766:	91 e1       	ldi	r25, 0x11	; 17
    1768:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    176c:	63 e0       	ldi	r22, 0x03	; 3
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1774:	84 e9       	ldi	r24, 0x94	; 148
    1776:	91 e1       	ldi	r25, 0x11	; 17
    1778:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    177c:	63 e0       	ldi	r22, 0x03	; 3
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1784:	86 e9       	ldi	r24, 0x96	; 150
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1794:	16 c0       	rjmp	.+44     	; 0x17c2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1796:	60 62       	ori	r22, 0x20	; 32
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>
    179e:	84 e9       	ldi	r24, 0x94	; 148
    17a0:	91 e1       	ldi	r25, 0x11	; 17
    17a2:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    17a6:	6c 89       	ldd	r22, Y+20	; 0x14
    17a8:	60 62       	ori	r22, 0x20	; 32
    17aa:	ce 01       	movw	r24, r28
    17ac:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17b0:	86 e9       	ldi	r24, 0x96	; 150
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 f4 06 	call	0xde8	; 0xde8 <delayMicroseconds>
    17b8:	6c 89       	ldd	r22, Y+20	; 0x14
    17ba:	60 62       	ori	r22, 0x20	; 32
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17c2:	6c 89       	ldd	r22, Y+20	; 0x14
    17c4:	60 62       	ori	r22, 0x20	; 32
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	8d 8b       	std	Y+21, r24	; 0x15
    17d0:	ce 01       	movw	r24, r28
    17d2:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN21Adafruit_RGBLCDShield7displayEv>
    17d6:	ce 01       	movw	r24, r28
    17d8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN21Adafruit_RGBLCDShield5clearEv>
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	8e 8b       	std	Y+22, r24	; 0x16
    17e0:	66 e0       	ldi	r22, 0x06	; 6
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001800 <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	08 95       	ret

0000180c <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	7c 01       	movw	r14, r24
    181c:	2f e0       	ldi	r18, 0x0F	; 15
    181e:	e2 0e       	add	r14, r18
    1820:	f1 1c       	adc	r15, r1
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    1826:	2f e1       	ldi	r18, 0x1F	; 31
    1828:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    182a:	8c 01       	movw	r16, r24
    182c:	05 5e       	subi	r16, 0xE5	; 229
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	f7 01       	movw	r30, r14
    1832:	61 91       	ld	r22, Z+
    1834:	7f 01       	movw	r14, r30
    1836:	c8 01       	movw	r24, r16
    1838:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN17Adafruit_MCP2301711digitalReadEh>
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	0c 2e       	mov	r0, r28
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    184c:	20 95       	com	r18
    184e:	30 95       	com	r19
    1850:	d2 22       	and	r13, r18
    1852:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    1854:	c5 30       	cpi	r28, 0x05	; 5
    1856:	d1 05       	cpc	r29, r1
    1858:	59 f7       	brne	.-42     	; 0x1830 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    185a:	8d 2d       	mov	r24, r13
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	08 95       	ret

0000186c <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    186c:	68 2f       	mov	r22, r24
    186e:	82 e1       	ldi	r24, 0x12	; 18
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <_ZN7TwoWire5writeEh>

00001876 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    187c:	68 30       	cpi	r22, 0x08	; 8
    187e:	08 f0       	brcs	.+2      	; 0x1882 <_ZN17Adafruit_MCP230175beginEh+0xc>
    1880:	67 e0       	ldi	r22, 0x07	; 7
    1882:	68 83       	st	Y, r22

  WIRE.begin();
    1884:	82 e1       	ldi	r24, 0x12	; 18
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    188c:	68 81       	ld	r22, Y
    188e:	60 62       	ori	r22, 0x20	; 32
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	82 e1       	ldi	r24, 0x12	; 18
    1894:	92 e0       	ldi	r25, 0x02	; 2
    1896:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    18a6:	82 e1       	ldi	r24, 0x12	; 18
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    18ae:	68 81       	ld	r22, Y
    18b0:	60 62       	ori	r22, 0x20	; 32
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	82 e1       	ldi	r24, 0x12	; 18
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    18c8:	82 e1       	ldi	r24, 0x12	; 18
    18ca:	92 e0       	ldi	r25, 0x02	; 2
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    18d0:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>

000018d4 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <_ZN17Adafruit_MCP230175beginEh>

000018da <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	d6 2f       	mov	r29, r22
    18e0:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    18e2:	fc 01       	movw	r30, r24
    18e4:	60 81       	ld	r22, Z
    18e6:	60 62       	ori	r22, 0x20	; 32
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	82 e1       	ldi	r24, 0x12	; 18
    18ec:	92 e0       	ldi	r25, 0x02	; 2
    18ee:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    18f2:	82 e1       	ldi	r24, 0x12	; 18
    18f4:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    18f8:	8d 2f       	mov	r24, r29
    18fa:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(ba >> 8);
    18fe:	8c 2f       	mov	r24, r28
    1900:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1904:	82 e1       	ldi	r24, 0x12	; 18
    1906:	92 e0       	ldi	r25, 0x02	; 2
}
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    190c:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>

00001910 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	8c 01       	movw	r16, r24
    191c:	c6 2f       	mov	r28, r22
    191e:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1920:	60 31       	cpi	r22, 0x10	; 16
    1922:	08 f0       	brcs	.+2      	; 0x1926 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    1924:	51 c0       	rjmp	.+162    	; 0x19c8 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    1926:	68 30       	cpi	r22, 0x08	; 8
    1928:	20 f0       	brcs	.+8      	; 0x1932 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    192a:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    192c:	ff 24       	eor	r15, r15
    192e:	f3 94       	inc	r15
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1932:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1934:	f8 01       	movw	r30, r16
    1936:	60 81       	ld	r22, Z
    1938:	60 62       	ori	r22, 0x20	; 32
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	82 e1       	ldi	r24, 0x12	; 18
    193e:	92 e0       	ldi	r25, 0x02	; 2
    1940:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1944:	8f 2d       	mov	r24, r15
    1946:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    194a:	82 e1       	ldi	r24, 0x12	; 18
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1952:	f8 01       	movw	r30, r16
    1954:	60 81       	ld	r22, Z
    1956:	60 62       	ori	r22, 0x20	; 32
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	82 e1       	ldi	r24, 0x12	; 18
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1966:	82 e1       	ldi	r24, 0x12	; 18
    1968:	92 e0       	ldi	r25, 0x02	; 2
    196a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    196e:	21 e0       	ldi	r18, 0x01	; 1
    1970:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1972:	d1 11       	cpse	r29, r1
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    197a:	44 0f       	add	r20, r20
    197c:	55 1f       	adc	r21, r21
    197e:	ca 95       	dec	r28
    1980:	e2 f7       	brpl	.-8      	; 0x197a <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1982:	ea 01       	movw	r28, r20
    1984:	c8 2b       	or	r28, r24
    1986:	09 c0       	rjmp	.+18     	; 0x199a <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1988:	f9 01       	movw	r30, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	ca 95       	dec	r28
    1992:	e2 f7       	brpl	.-8      	; 0x198c <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1994:	ef 01       	movw	r28, r30
    1996:	c0 95       	com	r28
    1998:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    199a:	f8 01       	movw	r30, r16
    199c:	60 81       	ld	r22, Z
    199e:	60 62       	ori	r22, 0x20	; 32
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	82 e1       	ldi	r24, 0x12	; 18
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    19aa:	8f 2d       	mov	r24, r15
    19ac:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(iodir);	
    19b0:	8c 2f       	mov	r24, r28
    19b2:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    19b6:	82 e1       	ldi	r24, 0x12	; 18
    19b8:	92 e0       	ldi	r25, 0x02	; 2
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    19c4:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	08 95       	ret

000019d4 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19da:	68 81       	ld	r22, Y
    19dc:	60 62       	ori	r22, 0x20	; 32
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	82 e1       	ldi	r24, 0x12	; 18
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    19e8:	82 e1       	ldi	r24, 0x12	; 18
    19ea:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    19ee:	82 e1       	ldi	r24, 0x12	; 18
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    19f6:	68 81       	ld	r22, Y
    19f8:	60 62       	ori	r22, 0x20	; 32
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	42 e0       	ldi	r20, 0x02	; 2
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	82 e1       	ldi	r24, 0x12	; 18
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a08:	82 e1       	ldi	r24, 0x12	; 18
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
    1a10:	c8 2f       	mov	r28, r24
    1a12:	82 e1       	ldi	r24, 0x12	; 18
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1a1e:	8c 2b       	or	r24, r28
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	8c 01       	movw	r16, r24
    1a30:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1a32:	60 31       	cpi	r22, 0x10	; 16
    1a34:	58 f5       	brcc	.+86     	; 0x1a8c <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1a36:	68 30       	cpi	r22, 0x08	; 8
    1a38:	18 f0       	brcs	.+6      	; 0x1a40 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1a3a:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1a3c:	d3 e1       	ldi	r29, 0x13	; 19
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1a40:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a42:	f8 01       	movw	r30, r16
    1a44:	60 81       	ld	r22, Z
    1a46:	60 62       	ori	r22, 0x20	; 32
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	82 e1       	ldi	r24, 0x12	; 18
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1a52:	8d 2f       	mov	r24, r29
    1a54:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1a58:	82 e1       	ldi	r24, 0x12	; 18
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1a60:	f8 01       	movw	r30, r16
    1a62:	60 81       	ld	r22, Z
    1a64:	60 62       	ori	r22, 0x20	; 32
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	82 e1       	ldi	r24, 0x12	; 18
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a74:	82 e1       	ldi	r24, 0x12	; 18
    1a76:	92 e0       	ldi	r25, 0x02	; 2
    1a78:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1a7c:	99 27       	eor	r25, r25
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1a80:	95 95       	asr	r25
    1a82:	87 95       	ror	r24
    1a84:	ca 95       	dec	r28
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	8c 01       	movw	r16, r24
    1aa4:	c6 2f       	mov	r28, r22
    1aa6:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1aa8:	60 31       	cpi	r22, 0x10	; 16
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1aac:	52 c0       	rjmp	.+164    	; 0x1b52 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1aae:	68 30       	cpi	r22, 0x08	; 8
    1ab0:	20 f0       	brcs	.+8      	; 0x1aba <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1ab2:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1ab4:	9d e0       	ldi	r25, 0x0D	; 13
    1ab6:	f9 2e       	mov	r15, r25
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1aba:	8c e0       	ldi	r24, 0x0C	; 12
    1abc:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1abe:	f8 01       	movw	r30, r16
    1ac0:	60 81       	ld	r22, Z
    1ac2:	60 62       	ori	r22, 0x20	; 32
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	82 e1       	ldi	r24, 0x12	; 18
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
    1aca:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1ace:	8f 2d       	mov	r24, r15
    1ad0:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1ad4:	82 e1       	ldi	r24, 0x12	; 18
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1adc:	f8 01       	movw	r30, r16
    1ade:	60 81       	ld	r22, Z
    1ae0:	60 62       	ori	r22, 0x20	; 32
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	82 e1       	ldi	r24, 0x12	; 18
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1af0:	82 e1       	ldi	r24, 0x12	; 18
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1af8:	21 e0       	ldi	r18, 0x01	; 1
    1afa:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1afc:	d1 30       	cpi	r29, 0x01	; 1
    1afe:	49 f4       	brne	.+18     	; 0x1b12 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1b04:	44 0f       	add	r20, r20
    1b06:	55 1f       	adc	r21, r21
    1b08:	ca 95       	dec	r28
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	c8 2b       	or	r28, r24
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1b12:	f9 01       	movw	r30, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	ca 95       	dec	r28
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1b1e:	ef 01       	movw	r28, r30
    1b20:	c0 95       	com	r28
    1b22:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b24:	f8 01       	movw	r30, r16
    1b26:	60 81       	ld	r22, Z
    1b28:	60 62       	ori	r22, 0x20	; 32
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	82 e1       	ldi	r24, 0x12	; 18
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1b34:	8f 2d       	mov	r24, r15
    1b36:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(gppu);	
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1b40:	82 e1       	ldi	r24, 0x12	; 18
    1b42:	92 e0       	ldi	r25, 0x02	; 2
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1b4e:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
}
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	08 95       	ret

00001b5e <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	8c 01       	movw	r16, r24
    1b6c:	c6 2f       	mov	r28, r22
    1b6e:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1b70:	60 31       	cpi	r22, 0x10	; 16
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1b74:	56 c0       	rjmp	.+172    	; 0x1c22 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1b76:	68 30       	cpi	r22, 0x08	; 8
    1b78:	28 f0       	brcs	.+10     	; 0x1b84 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1b7a:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1b7c:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1b7e:	93 e1       	ldi	r25, 0x13	; 19
    1b80:	f9 2e       	mov	r15, r25
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1b84:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1b86:	82 e1       	ldi	r24, 0x12	; 18
    1b88:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	60 81       	ld	r22, Z
    1b8e:	60 62       	ori	r22, 0x20	; 32
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	82 e1       	ldi	r24, 0x12	; 18
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1b9a:	8d 2f       	mov	r24, r29
    1b9c:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1ba0:	82 e1       	ldi	r24, 0x12	; 18
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1ba8:	f8 01       	movw	r30, r16
    1baa:	60 81       	ld	r22, Z
    1bac:	60 62       	ori	r22, 0x20	; 32
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	82 e1       	ldi	r24, 0x12	; 18
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1bbc:	82 e1       	ldi	r24, 0x12	; 18
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1bc4:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1bca:	ef 12       	cpse	r14, r31
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1bce:	a9 01       	movw	r20, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	ca 95       	dec	r28
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1bda:	ea 01       	movw	r28, r20
    1bdc:	c8 2b       	or	r28, r24
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1be0:	f9 01       	movw	r30, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ca 95       	dec	r28
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1bec:	ef 01       	movw	r28, r30
    1bee:	c0 95       	com	r28
    1bf0:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	60 81       	ld	r22, Z
    1bf6:	60 62       	ori	r22, 0x20	; 32
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	82 e1       	ldi	r24, 0x12	; 18
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1c02:	8f 2d       	mov	r24, r15
    1c04:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  wiresend(gpio);	
    1c08:	8c 2f       	mov	r24, r28
    1c0a:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZL8wiresendh>
  WIRE.endTransmission();
    1c0e:	82 e1       	ldi	r24, 0x12	; 18
    1c10:	92 e0       	ldi	r25, 0x02	; 2
}
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1c1e:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN7TwoWire15endTransmissionEv>
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	08 95       	ret

00001c30 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c30:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1c3a:	82 1b       	sub	r24, r18
    1c3c:	91 09       	sbc	r25, r1
    1c3e:	08 95       	ret

00001c40 <_ZN7TwoWire4readEv>:
    1c40:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1c44:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1c48:	98 17       	cp	r25, r24
    1c4a:	50 f4       	brcc	.+20     	; 0x1c60 <_ZN7TwoWire4readEv+0x20>
    1c4c:	e9 2f       	mov	r30, r25
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	e8 5b       	subi	r30, 0xB8	; 184
    1c52:	fd 4f       	sbci	r31, 0xFD	; 253
    1c54:	20 81       	ld	r18, Z
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	9f 5f       	subi	r25, 0xFF	; 255
    1c5a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <_ZN7TwoWire4readEv+0x24>
    1c60:	2f ef       	ldi	r18, 0xFF	; 255
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	c9 01       	movw	r24, r18
    1c66:	08 95       	ret

00001c68 <_ZN7TwoWire4peekEv>:
    1c68:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1c6c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1c70:	e8 17       	cp	r30, r24
    1c72:	30 f4       	brcc	.+12     	; 0x1c80 <_ZN7TwoWire4peekEv+0x18>
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	e8 5b       	subi	r30, 0xB8	; 184
    1c78:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7a:	80 81       	ld	r24, Z
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	08 95       	ret
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	9f ef       	ldi	r25, 0xFF	; 255
    1c84:	08 95       	ret

00001c86 <_ZN7TwoWire5flushEv>:
    1c86:	08 95       	ret

00001c88 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	ec 01       	movw	r28, r24
    1c8e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <_ZN7TwoWire14user_onReceiveE>
    1c92:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <_ZN7TwoWire14user_onReceiveE+0x1>
    1c96:	30 97       	sbiw	r30, 0x00	; 0
    1c98:	f1 f0       	breq	.+60     	; 0x1cd6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c9a:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1c9e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1ca2:	98 17       	cp	r25, r24
    1ca4:	c0 f0       	brcs	.+48     	; 0x1cd6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	29 2f       	mov	r18, r25
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	26 17       	cp	r18, r22
    1cae:	37 07       	cpc	r19, r23
    1cb0:	54 f4       	brge	.+20     	; 0x1cc6 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1cb2:	de 01       	movw	r26, r28
    1cb4:	a2 0f       	add	r26, r18
    1cb6:	b3 1f       	adc	r27, r19
    1cb8:	4c 91       	ld	r20, X
    1cba:	d9 01       	movw	r26, r18
    1cbc:	a8 5b       	subi	r26, 0xB8	; 184
    1cbe:	bd 4f       	sbci	r27, 0xFD	; 253
    1cc0:	4c 93       	st	X, r20
    1cc2:	9f 5f       	subi	r25, 0xFF	; 255
    1cc4:	f1 cf       	rjmp	.-30     	; 0x1ca8 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1cc6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1cca:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1cce:	cb 01       	movw	r24, r22
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	09 94       	ijmp
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <_ZN7TwoWire16onRequestServiceEv>:
    1cdc:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <_ZN7TwoWire14user_onRequestE>
    1ce0:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <_ZN7TwoWire14user_onRequestE+0x1>
    1ce4:	30 97       	sbiw	r30, 0x00	; 0
    1ce6:	29 f0       	breq	.+10     	; 0x1cf2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1ce8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1cec:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1cf0:	09 94       	ijmp
    1cf2:	08 95       	ret

00001cf4 <_ZN7TwoWire5writeEPKhj>:
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	7c 01       	movw	r14, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8a 01       	movw	r16, r20
    1d0a:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    1d0e:	22 23       	and	r18, r18
    1d10:	89 f0       	breq	.+34     	; 0x1d34 <_ZN7TwoWire5writeEPKhj+0x40>
    1d12:	eb 01       	movw	r28, r22
    1d14:	6b 01       	movw	r12, r22
    1d16:	c4 0e       	add	r12, r20
    1d18:	d5 1e       	adc	r13, r21
    1d1a:	cc 15       	cp	r28, r12
    1d1c:	dd 05       	cpc	r29, r13
    1d1e:	69 f0       	breq	.+26     	; 0x1d3a <_ZN7TwoWire5writeEPKhj+0x46>
    1d20:	69 91       	ld	r22, Y+
    1d22:	d7 01       	movw	r26, r14
    1d24:	ed 91       	ld	r30, X+
    1d26:	fc 91       	ld	r31, X
    1d28:	01 90       	ld	r0, Z+
    1d2a:	f0 81       	ld	r31, Z
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	c7 01       	movw	r24, r14
    1d30:	09 95       	icall
    1d32:	f3 cf       	rjmp	.-26     	; 0x1d1a <_ZN7TwoWire5writeEPKhj+0x26>
    1d34:	64 2f       	mov	r22, r20
    1d36:	0e 94 42 10 	call	0x2084	; 0x2084 <twi_transmit>
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	08 95       	ret

00001d4e <_ZN7TwoWire5writeEh>:
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	1f 92       	push	r1
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    1d5e:	22 23       	and	r18, r18
    1d60:	d1 f0       	breq	.+52     	; 0x1d96 <_ZN7TwoWire5writeEh+0x48>
    1d62:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1d66:	20 32       	cpi	r18, 0x20	; 32
    1d68:	40 f0       	brcs	.+16     	; 0x1d7a <_ZN7TwoWire5writeEh+0x2c>
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	fc 01       	movw	r30, r24
    1d70:	33 83       	std	Z+3, r19	; 0x03
    1d72:	22 83       	std	Z+2, r18	; 0x02
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	15 c0       	rjmp	.+42     	; 0x1da4 <_ZN7TwoWire5writeEh+0x56>
    1d7a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1d7e:	e8 2f       	mov	r30, r24
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	eb 5d       	subi	r30, 0xDB	; 219
    1d84:	fd 4f       	sbci	r31, 0xFD	; 253
    1d86:	99 81       	ldd	r25, Y+1	; 0x01
    1d88:	90 83       	st	Z, r25
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1d90:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <_ZN7TwoWire5writeEh+0x52>
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	ce 01       	movw	r24, r28
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	0e 94 42 10 	call	0x2084	; 0x2084 <twi_transmit>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0f 90       	pop	r0
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <_ZN7TwoWireC1Ev>:
    1dac:	fc 01       	movw	r30, r24
    1dae:	13 82       	std	Z+3, r1	; 0x03
    1db0:	12 82       	std	Z+2, r1	; 0x02
    1db2:	88 ee       	ldi	r24, 0xE8	; 232
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	84 83       	std	Z+4, r24	; 0x04
    1dbc:	95 83       	std	Z+5, r25	; 0x05
    1dbe:	a6 83       	std	Z+6, r26	; 0x06
    1dc0:	b7 83       	std	Z+7, r27	; 0x07
    1dc2:	89 ec       	ldi	r24, 0xC9	; 201
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
    1dca:	08 95       	ret

00001dcc <_ZN7TwoWire5beginEv>:
    1dcc:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1dd0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1dd4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1dd8:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1ddc:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <twi_init>
    1de0:	8e e6       	ldi	r24, 0x6E	; 110
    1de2:	9e e0       	ldi	r25, 0x0E	; 14
    1de4:	0e 94 6f 10 	call	0x20de	; 0x20de <twi_attachSlaveTxEvent>
    1de8:	84 e4       	ldi	r24, 0x44	; 68
    1dea:	9e e0       	ldi	r25, 0x0E	; 14
    1dec:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <twi_attachSlaveRxEvent>

00001df0 <_ZN7TwoWire17beginTransmissionEh>:
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZN7TwoWire12transmittingE>
    1df6:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <_ZN7TwoWire9txAddressE>
    1dfa:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1dfe:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e02:	08 95       	ret

00001e04 <_ZN7TwoWire17beginTransmissionEi>:
    1e04:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_ZN7TwoWire17beginTransmissionEh>

00001e08 <_ZN7TwoWire15endTransmissionEh>:
    1e08:	0f 93       	push	r16
    1e0a:	06 2f       	mov	r16, r22
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e12:	65 e2       	ldi	r22, 0x25	; 37
    1e14:	72 e0       	ldi	r23, 0x02	; 2
    1e16:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <_ZN7TwoWire9txAddressE>
    1e1a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <twi_writeTo>
    1e1e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1e22:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1e26:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <_ZN7TwoWire12transmittingE>
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret

00001e2e <_ZN7TwoWire11requestFromEhhmhh>:
    1e2e:	4f 92       	push	r4
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	5c 01       	movw	r10, r24
    1e4a:	f6 2e       	mov	r15, r22
    1e4c:	d4 2f       	mov	r29, r20
    1e4e:	28 01       	movw	r4, r16
    1e50:	39 01       	movw	r6, r18
    1e52:	ee 20       	and	r14, r14
    1e54:	21 f1       	breq	.+72     	; 0x1e9e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1e56:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN7TwoWire17beginTransmissionEh>
    1e5a:	ce 2d       	mov	r28, r14
    1e5c:	c4 30       	cpi	r28, 0x04	; 4
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e60:	c3 e0       	ldi	r28, 0x03	; 3
    1e62:	c1 50       	subi	r28, 0x01	; 1
    1e64:	c0 f0       	brcs	.+48     	; 0x1e96 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1e66:	28 e0       	ldi	r18, 0x08	; 8
    1e68:	c2 9f       	mul	r28, r18
    1e6a:	c0 01       	movw	r24, r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	a3 01       	movw	r20, r6
    1e70:	92 01       	movw	r18, r4
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1e74:	56 95       	lsr	r21
    1e76:	47 95       	ror	r20
    1e78:	37 95       	ror	r19
    1e7a:	27 95       	ror	r18
    1e7c:	8a 95       	dec	r24
    1e7e:	d2 f7       	brpl	.-12     	; 0x1e74 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1e80:	ca 01       	movw	r24, r20
    1e82:	b9 01       	movw	r22, r18
    1e84:	d5 01       	movw	r26, r10
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	01 90       	ld	r0, Z+
    1e8c:	f0 81       	ld	r31, Z
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	c5 01       	movw	r24, r10
    1e92:	09 95       	icall
    1e94:	e6 cf       	rjmp	.-52     	; 0x1e62 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	c5 01       	movw	r24, r10
    1e9a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_ZN7TwoWire15endTransmissionEh>
    1e9e:	4d 2f       	mov	r20, r29
    1ea0:	d1 32       	cpi	r29, 0x21	; 33
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	2c 2d       	mov	r18, r12
    1ea8:	68 e4       	ldi	r22, 0x48	; 72
    1eaa:	72 e0       	ldi	r23, 0x02	; 2
    1eac:	8f 2d       	mov	r24, r15
    1eae:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <twi_readFrom>
    1eb2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1eb6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	08 95       	ret

00001ed6 <_ZN7TwoWire11requestFromEhhh>:
    1ed6:	cf 92       	push	r12
    1ed8:	ef 92       	push	r14
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	c2 2e       	mov	r12, r18
    1ee0:	e1 2c       	mov	r14, r1
    1ee2:	00 e0       	ldi	r16, 0x00	; 0
    1ee4:	10 e0       	ldi	r17, 0x00	; 0
    1ee6:	98 01       	movw	r18, r16
    1ee8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN7TwoWire11requestFromEhhmhh>
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ef 90       	pop	r14
    1ef2:	cf 90       	pop	r12
    1ef4:	08 95       	ret

00001ef6 <_ZN7TwoWire11requestFromEii>:
    1ef6:	21 e0       	ldi	r18, 0x01	; 1
    1ef8:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_ZN7TwoWire11requestFromEhhh>

00001efc <_ZN7TwoWire15endTransmissionEv>:
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <_ZN7TwoWire15endTransmissionEh>

00001f02 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f02:	82 e1       	ldi	r24, 0x12	; 18
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_ZN7TwoWireC1Ev>

00001f0a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1f0a:	08 95       	ret

00001f0c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f0c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <twi_sendStop>
    1f16:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	82 e1       	ldi	r24, 0x12	; 18
    1f1e:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	83 e1       	ldi	r24, 0x13	; 19
    1f26:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
    1f2a:	e9 eb       	ldi	r30, 0xB9	; 185
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8e 7f       	andi	r24, 0xFE	; 254
    1f32:	80 83       	st	Z, r24
    1f34:	80 81       	ld	r24, Z
    1f36:	8d 7f       	andi	r24, 0xFD	; 253
    1f38:	80 83       	st	Z, r24
    1f3a:	88 e4       	ldi	r24, 0x48	; 72
    1f3c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1f40:	85 e4       	ldi	r24, 0x45	; 69
    1f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f46:	08 95       	ret

00001f48 <twi_readFrom>:
    1f48:	41 32       	cpi	r20, 0x21	; 33
    1f4a:	08 f0       	brcs	.+2      	; 0x1f4e <twi_readFrom+0x6>
    1f4c:	43 c0       	rjmp	.+134    	; 0x1fd4 <twi_readFrom+0x8c>
    1f4e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_state>
    1f52:	91 11       	cpse	r25, r1
    1f54:	fc cf       	rjmp	.-8      	; 0x1f4e <twi_readFrom+0x6>
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <twi_state>
    1f5c:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <twi_sendStop>
    1f60:	2f ef       	ldi	r18, 0xFF	; 255
    1f62:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <twi_error>
    1f66:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <twi_masterBufferIndex>
    1f6a:	24 0f       	add	r18, r20
    1f6c:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <twi_masterBufferLength>
    1f70:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <twi_slarw>
    1f74:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <twi_slarw>
    1f78:	88 0f       	add	r24, r24
    1f7a:	89 2b       	or	r24, r25
    1f7c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_slarw>
    1f80:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_inRepStart>
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	61 f4       	brne	.+24     	; 0x1fa0 <twi_readFrom+0x58>
    1f88:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    1f8c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    1f90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f94:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f98:	83 fd       	sbrc	r24, 3
    1f9a:	f8 cf       	rjmp	.-16     	; 0x1f8c <twi_readFrom+0x44>
    1f9c:	85 ec       	ldi	r24, 0xC5	; 197
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <twi_readFrom+0x5a>
    1fa0:	85 ee       	ldi	r24, 0xE5	; 229
    1fa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1fa6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_state>
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	e1 f3       	breq	.-8      	; 0x1fa6 <twi_readFrom+0x5e>
    1fae:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    1fb2:	84 17       	cp	r24, r20
    1fb4:	10 f4       	brcc	.+4      	; 0x1fba <twi_readFrom+0x72>
    1fb6:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    1fba:	ae ea       	ldi	r26, 0xAE	; 174
    1fbc:	b2 e0       	ldi	r27, 0x02	; 2
    1fbe:	96 2f       	mov	r25, r22
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	8e 2f       	mov	r24, r30
    1fc4:	89 1b       	sub	r24, r25
    1fc6:	84 17       	cp	r24, r20
    1fc8:	18 f4       	brcc	.+6      	; 0x1fd0 <twi_readFrom+0x88>
    1fca:	8d 91       	ld	r24, X+
    1fcc:	81 93       	st	Z+, r24
    1fce:	f9 cf       	rjmp	.-14     	; 0x1fc2 <twi_readFrom+0x7a>
    1fd0:	84 2f       	mov	r24, r20
    1fd2:	08 95       	ret
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	08 95       	ret

00001fd8 <twi_writeTo>:
    1fd8:	0f 93       	push	r16
    1fda:	41 32       	cpi	r20, 0x21	; 33
    1fdc:	08 f0       	brcs	.+2      	; 0x1fe0 <twi_writeTo+0x8>
    1fde:	4a c0       	rjmp	.+148    	; 0x2074 <twi_writeTo+0x9c>
    1fe0:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_state>
    1fe4:	91 11       	cpse	r25, r1
    1fe6:	fc cf       	rjmp	.-8      	; 0x1fe0 <twi_writeTo+0x8>
    1fe8:	32 e0       	ldi	r19, 0x02	; 2
    1fea:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <twi_state>
    1fee:	00 93 d3 02 	sts	0x02D3, r16	; 0x8002d3 <twi_sendStop>
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <twi_error>
    1ff8:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <twi_masterBufferIndex>
    1ffc:	40 93 ac 02 	sts	0x02AC, r20	; 0x8002ac <twi_masterBufferLength>
    2000:	56 2f       	mov	r21, r22
    2002:	ae ea       	ldi	r26, 0xAE	; 174
    2004:	b2 e0       	ldi	r27, 0x02	; 2
    2006:	fb 01       	movw	r30, r22
    2008:	3e 2f       	mov	r19, r30
    200a:	35 1b       	sub	r19, r21
    200c:	34 17       	cp	r19, r20
    200e:	18 f4       	brcc	.+6      	; 0x2016 <twi_writeTo+0x3e>
    2010:	31 91       	ld	r19, Z+
    2012:	3d 93       	st	X+, r19
    2014:	f9 cf       	rjmp	.-14     	; 0x2008 <twi_writeTo+0x30>
    2016:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_slarw>
    201a:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <twi_slarw>
    201e:	88 0f       	add	r24, r24
    2020:	83 2b       	or	r24, r19
    2022:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_slarw>
    2026:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_inRepStart>
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	61 f4       	brne	.+24     	; 0x2046 <twi_writeTo+0x6e>
    202e:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_inRepStart>
    2032:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    2036:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    203a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    203e:	83 fd       	sbrc	r24, 3
    2040:	f8 cf       	rjmp	.-16     	; 0x2032 <twi_writeTo+0x5a>
    2042:	85 ec       	ldi	r24, 0xC5	; 197
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <twi_writeTo+0x70>
    2046:	85 ee       	ldi	r24, 0xE5	; 229
    2048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    204c:	22 23       	and	r18, r18
    204e:	21 f0       	breq	.+8      	; 0x2058 <twi_writeTo+0x80>
    2050:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_state>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	d1 f3       	breq	.-12     	; 0x204c <twi_writeTo+0x74>
    2058:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    205c:	8f 3f       	cpi	r24, 0xFF	; 255
    205e:	79 f0       	breq	.+30     	; 0x207e <twi_writeTo+0xa6>
    2060:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    2064:	80 32       	cpi	r24, 0x20	; 32
    2066:	41 f0       	breq	.+16     	; 0x2078 <twi_writeTo+0xa0>
    2068:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_error>
    206c:	80 33       	cpi	r24, 0x30	; 48
    206e:	31 f0       	breq	.+12     	; 0x207c <twi_writeTo+0xa4>
    2070:	94 e0       	ldi	r25, 0x04	; 4
    2072:	05 c0       	rjmp	.+10     	; 0x207e <twi_writeTo+0xa6>
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	03 c0       	rjmp	.+6      	; 0x207e <twi_writeTo+0xa6>
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	01 c0       	rjmp	.+2      	; 0x207e <twi_writeTo+0xa6>
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	89 2f       	mov	r24, r25
    2080:	0f 91       	pop	r16
    2082:	08 95       	ret

00002084 <twi_transmit>:
    2084:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <twi_txBufferLength>
    2088:	26 2f       	mov	r18, r22
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	24 0f       	add	r18, r20
    208e:	31 1d       	adc	r19, r1
    2090:	21 32       	cpi	r18, 0x21	; 33
    2092:	31 05       	cpc	r19, r1
    2094:	dc f4       	brge	.+54     	; 0x20cc <twi_transmit+0x48>
    2096:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <twi_state>
    209a:	24 30       	cpi	r18, 0x04	; 4
    209c:	c9 f4       	brne	.+50     	; 0x20d0 <twi_transmit+0x4c>
    209e:	fc 01       	movw	r30, r24
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	86 17       	cp	r24, r22
    20a6:	58 f4       	brcc	.+22     	; 0x20be <twi_transmit+0x3a>
    20a8:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <twi_txBufferLength>
    20ac:	21 91       	ld	r18, Z+
    20ae:	dc 01       	movw	r26, r24
    20b0:	a4 57       	subi	r26, 0x74	; 116
    20b2:	bd 4f       	sbci	r27, 0xFD	; 253
    20b4:	a3 0f       	add	r26, r19
    20b6:	b1 1d       	adc	r27, r1
    20b8:	2c 93       	st	X, r18
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	f3 cf       	rjmp	.-26     	; 0x20a4 <twi_transmit+0x20>
    20be:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    20c2:	68 0f       	add	r22, r24
    20c4:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <twi_txBufferLength>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	08 95       	ret
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	08 95       	ret
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	08 95       	ret

000020d4 <twi_attachSlaveRxEvent>:
    20d4:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <twi_onSlaveReceive+0x1>
    20d8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <twi_onSlaveReceive>
    20dc:	08 95       	ret

000020de <twi_attachSlaveTxEvent>:
    20de:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <twi_onSlaveTransmit+0x1>
    20e2:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <twi_onSlaveTransmit>
    20e6:	08 95       	ret

000020e8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20e8:	85 ed       	ldi	r24, 0xD5	; 213
    20ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20f2:	84 fd       	sbrc	r24, 4
    20f4:	fc cf       	rjmp	.-8      	; 0x20ee <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20f6:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    20fa:	08 95       	ret

000020fc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20fc:	85 ec       	ldi	r24, 0xC5	; 197
    20fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2102:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
    2106:	08 95       	ret

00002108 <__vector_24>:
}

ISR(TWI_vect)
{
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	4f 93       	push	r20
    2118:	5f 93       	push	r21
    211a:	6f 93       	push	r22
    211c:	7f 93       	push	r23
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
    2126:	ef 93       	push	r30
    2128:	ff 93       	push	r31
  switch(TW_STATUS){
    212a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    212e:	88 7f       	andi	r24, 0xF8	; 248
    2130:	80 36       	cpi	r24, 0x60	; 96
    2132:	09 f4       	brne	.+2      	; 0x2136 <__vector_24+0x2e>
    2134:	9e c0       	rjmp	.+316    	; 0x2272 <__vector_24+0x16a>
    2136:	78 f5       	brcc	.+94     	; 0x2196 <__vector_24+0x8e>
    2138:	88 32       	cpi	r24, 0x28	; 40
    213a:	09 f4       	brne	.+2      	; 0x213e <__vector_24+0x36>
    213c:	5d c0       	rjmp	.+186    	; 0x21f8 <__vector_24+0xf0>
    213e:	90 f4       	brcc	.+36     	; 0x2164 <__vector_24+0x5c>
    2140:	80 31       	cpi	r24, 0x10	; 16
    2142:	09 f4       	brne	.+2      	; 0x2146 <__vector_24+0x3e>
    2144:	56 c0       	rjmp	.+172    	; 0x21f2 <__vector_24+0xea>
    2146:	38 f4       	brcc	.+14     	; 0x2156 <__vector_24+0x4e>
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <__vector_24+0x46>
    214c:	f5 c0       	rjmp	.+490    	; 0x2338 <__vector_24+0x230>
    214e:	88 30       	cpi	r24, 0x08	; 8
    2150:	09 f4       	brne	.+2      	; 0x2154 <__vector_24+0x4c>
    2152:	4f c0       	rjmp	.+158    	; 0x21f2 <__vector_24+0xea>
    2154:	f5 c0       	rjmp	.+490    	; 0x2340 <__vector_24+0x238>
    2156:	88 31       	cpi	r24, 0x18	; 24
    2158:	09 f4       	brne	.+2      	; 0x215c <__vector_24+0x54>
    215a:	4e c0       	rjmp	.+156    	; 0x21f8 <__vector_24+0xf0>
    215c:	80 32       	cpi	r24, 0x20	; 32
    215e:	09 f4       	brne	.+2      	; 0x2162 <__vector_24+0x5a>
    2160:	5f c0       	rjmp	.+190    	; 0x2220 <__vector_24+0x118>
    2162:	ee c0       	rjmp	.+476    	; 0x2340 <__vector_24+0x238>
    2164:	80 34       	cpi	r24, 0x40	; 64
    2166:	09 f4       	brne	.+2      	; 0x216a <__vector_24+0x62>
    2168:	6a c0       	rjmp	.+212    	; 0x223e <__vector_24+0x136>
    216a:	58 f4       	brcc	.+22     	; 0x2182 <__vector_24+0x7a>
    216c:	80 33       	cpi	r24, 0x30	; 48
    216e:	09 f4       	brne	.+2      	; 0x2172 <__vector_24+0x6a>
    2170:	57 c0       	rjmp	.+174    	; 0x2220 <__vector_24+0x118>
    2172:	88 33       	cpi	r24, 0x38	; 56
    2174:	09 f0       	breq	.+2      	; 0x2178 <__vector_24+0x70>
    2176:	e4 c0       	rjmp	.+456    	; 0x2340 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2178:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_error>
      twi_releaseBus();
    217c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <twi_releaseBus>
      break;
    2180:	df c0       	rjmp	.+446    	; 0x2340 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2182:	80 35       	cpi	r24, 0x50	; 80
    2184:	09 f4       	brne	.+2      	; 0x2188 <__vector_24+0x80>
    2186:	4f c0       	rjmp	.+158    	; 0x2226 <__vector_24+0x11e>
    2188:	88 35       	cpi	r24, 0x58	; 88
    218a:	09 f4       	brne	.+2      	; 0x218e <__vector_24+0x86>
    218c:	5d c0       	rjmp	.+186    	; 0x2248 <__vector_24+0x140>
    218e:	88 34       	cpi	r24, 0x48	; 72
    2190:	09 f0       	breq	.+2      	; 0x2194 <__vector_24+0x8c>
    2192:	d6 c0       	rjmp	.+428    	; 0x2340 <__vector_24+0x238>
    2194:	d3 c0       	rjmp	.+422    	; 0x233c <__vector_24+0x234>
    2196:	88 39       	cpi	r24, 0x98	; 152
    2198:	09 f4       	brne	.+2      	; 0x219c <__vector_24+0x94>
    219a:	c4 c0       	rjmp	.+392    	; 0x2324 <__vector_24+0x21c>
    219c:	a8 f4       	brcc	.+42     	; 0x21c8 <__vector_24+0xc0>
    219e:	88 37       	cpi	r24, 0x78	; 120
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <__vector_24+0x9c>
    21a2:	67 c0       	rjmp	.+206    	; 0x2272 <__vector_24+0x16a>
    21a4:	38 f4       	brcc	.+14     	; 0x21b4 <__vector_24+0xac>
    21a6:	88 36       	cpi	r24, 0x68	; 104
    21a8:	09 f4       	brne	.+2      	; 0x21ac <__vector_24+0xa4>
    21aa:	63 c0       	rjmp	.+198    	; 0x2272 <__vector_24+0x16a>
    21ac:	80 37       	cpi	r24, 0x70	; 112
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <__vector_24+0xaa>
    21b0:	60 c0       	rjmp	.+192    	; 0x2272 <__vector_24+0x16a>
    21b2:	c6 c0       	rjmp	.+396    	; 0x2340 <__vector_24+0x238>
    21b4:	88 38       	cpi	r24, 0x88	; 136
    21b6:	09 f4       	brne	.+2      	; 0x21ba <__vector_24+0xb2>
    21b8:	b5 c0       	rjmp	.+362    	; 0x2324 <__vector_24+0x21c>
    21ba:	80 39       	cpi	r24, 0x90	; 144
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <__vector_24+0xb8>
    21be:	5f c0       	rjmp	.+190    	; 0x227e <__vector_24+0x176>
    21c0:	80 38       	cpi	r24, 0x80	; 128
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <__vector_24+0xbe>
    21c4:	bd c0       	rjmp	.+378    	; 0x2340 <__vector_24+0x238>
    21c6:	5b c0       	rjmp	.+182    	; 0x227e <__vector_24+0x176>
    21c8:	80 3b       	cpi	r24, 0xB0	; 176
    21ca:	09 f4       	brne	.+2      	; 0x21ce <__vector_24+0xc6>
    21cc:	83 c0       	rjmp	.+262    	; 0x22d4 <__vector_24+0x1cc>
    21ce:	38 f4       	brcc	.+14     	; 0x21de <__vector_24+0xd6>
    21d0:	80 3a       	cpi	r24, 0xA0	; 160
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__vector_24+0xce>
    21d4:	66 c0       	rjmp	.+204    	; 0x22a2 <__vector_24+0x19a>
    21d6:	88 3a       	cpi	r24, 0xA8	; 168
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__vector_24+0xd4>
    21da:	7c c0       	rjmp	.+248    	; 0x22d4 <__vector_24+0x1cc>
    21dc:	b1 c0       	rjmp	.+354    	; 0x2340 <__vector_24+0x238>
    21de:	80 3c       	cpi	r24, 0xC0	; 192
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <__vector_24+0xdc>
    21e2:	a4 c0       	rjmp	.+328    	; 0x232c <__vector_24+0x224>
    21e4:	88 3c       	cpi	r24, 0xC8	; 200
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_24+0xe2>
    21e8:	a1 c0       	rjmp	.+322    	; 0x232c <__vector_24+0x224>
    21ea:	88 3b       	cpi	r24, 0xB8	; 184
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_24+0xe8>
    21ee:	87 c0       	rjmp	.+270    	; 0x22fe <__vector_24+0x1f6>
    21f0:	a7 c0       	rjmp	.+334    	; 0x2340 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21f2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_slarw>
    21f6:	10 c0       	rjmp	.+32     	; 0x2218 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21f8:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    21fc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_masterBufferLength>
    2200:	98 17       	cp	r25, r24
    2202:	70 f5       	brcc	.+92     	; 0x2260 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2204:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8e 0f       	add	r24, r30
    220c:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e2 55       	subi	r30, 0x52	; 82
    2214:	fd 4f       	sbci	r31, 0xFD	; 253
    2216:	80 81       	ld	r24, Z
    2218:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    221c:	85 ec       	ldi	r24, 0xC5	; 197
    221e:	83 c0       	rjmp	.+262    	; 0x2326 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2220:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_error>
    2224:	8b c0       	rjmp	.+278    	; 0x233c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2226:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8e 0f       	add	r24, r30
    222e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    2232:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	e2 55       	subi	r30, 0x52	; 82
    223a:	fd 4f       	sbci	r31, 0xFD	; 253
    223c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    223e:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    2242:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_masterBufferLength>
    2246:	6b c0       	rjmp	.+214    	; 0x231e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2248:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <twi_masterBufferIndex>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	8e 0f       	add	r24, r30
    2250:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_masterBufferIndex>
    2254:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	e2 55       	subi	r30, 0x52	; 82
    225c:	fd 4f       	sbci	r31, 0xFD	; 253
    225e:	80 83       	st	Z, r24
	if (twi_sendStop)
    2260:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <twi_sendStop>
    2264:	81 11       	cpse	r24, r1
    2266:	6a c0       	rjmp	.+212    	; 0x233c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    226e:	84 ea       	ldi	r24, 0xA4	; 164
    2270:	5e c0       	rjmp	.+188    	; 0x232e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2278:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_rxBufferIndex>
    227c:	cf cf       	rjmp	.-98     	; 0x221c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    227e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_rxBufferIndex>
    2282:	80 32       	cpi	r24, 0x20	; 32
    2284:	08 f0       	brcs	.+2      	; 0x2288 <__vector_24+0x180>
    2286:	4e c0       	rjmp	.+156    	; 0x2324 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2288:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <twi_rxBufferIndex>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	8e 0f       	add	r24, r30
    2290:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <twi_rxBufferIndex>
    2294:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	e6 59       	subi	r30, 0x96	; 150
    229c:	fd 4f       	sbci	r31, 0xFD	; 253
    229e:	80 83       	st	Z, r24
    22a0:	bd cf       	rjmp	.-134    	; 0x221c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    22a2:	0e 94 7e 10 	call	0x20fc	; 0x20fc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22a6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_rxBufferIndex>
    22aa:	80 32       	cpi	r24, 0x20	; 32
    22ac:	30 f4       	brcc	.+12     	; 0x22ba <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22ae:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <twi_rxBufferIndex>
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	e6 59       	subi	r30, 0x96	; 150
    22b6:	fd 4f       	sbci	r31, 0xFD	; 253
    22b8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22ba:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <twi_rxBufferIndex>
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <twi_onSlaveReceive>
    22c4:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <twi_onSlaveReceive+0x1>
    22c8:	8a e6       	ldi	r24, 0x6A	; 106
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22ce:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_rxBufferIndex>
      break;
    22d2:	36 c0       	rjmp	.+108    	; 0x2340 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22d4:	84 e0       	ldi	r24, 0x04	; 4
    22d6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22da:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22de:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22e2:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <twi_onSlaveTransmit>
    22e6:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <twi_onSlaveTransmit+0x1>
    22ea:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22ec:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    22f0:	81 11       	cpse	r24, r1
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22fa:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22fe:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <twi_txBufferIndex>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	8e 0f       	add	r24, r30
    2306:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi_txBufferIndex>
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	e4 57       	subi	r30, 0x74	; 116
    230e:	fd 4f       	sbci	r31, 0xFD	; 253
    2310:	80 81       	ld	r24, Z
    2312:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2316:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi_txBufferIndex>
    231a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_txBufferLength>
    231e:	98 17       	cp	r25, r24
    2320:	08 f4       	brcc	.+2      	; 0x2324 <__vector_24+0x21c>
    2322:	7c cf       	rjmp	.-264    	; 0x221c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2324:	85 e8       	ldi	r24, 0x85	; 133
    2326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    232a:	0a c0       	rjmp	.+20     	; 0x2340 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    232c:	85 ec       	ldi	r24, 0xC5	; 197
    232e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2332:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_state>
      break;
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2338:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi_error>
      twi_stop();
    233c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <twi_stop>
      break;
  }
}
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <__tablejump2__>:
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	05 90       	lpm	r0, Z+
    2368:	f4 91       	lpm	r31, Z
    236a:	e0 2d       	mov	r30, r0
    236c:	09 94       	ijmp

0000236e <malloc>:
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	91 05       	cpc	r25, r1
    237a:	10 f4       	brcc	.+4      	; 0x2380 <malloc+0x12>
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__flp>
    2384:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__flp+0x1>
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	30 97       	sbiw	r30, 0x00	; 0
    2392:	19 f1       	breq	.+70     	; 0x23da <malloc+0x6c>
    2394:	40 81       	ld	r20, Z
    2396:	51 81       	ldd	r21, Z+1	; 0x01
    2398:	02 81       	ldd	r16, Z+2	; 0x02
    239a:	13 81       	ldd	r17, Z+3	; 0x03
    239c:	48 17       	cp	r20, r24
    239e:	59 07       	cpc	r21, r25
    23a0:	c8 f0       	brcs	.+50     	; 0x23d4 <malloc+0x66>
    23a2:	84 17       	cp	r24, r20
    23a4:	95 07       	cpc	r25, r21
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <malloc+0x54>
    23a8:	10 97       	sbiw	r26, 0x00	; 0
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <malloc+0x4a>
    23ac:	12 96       	adiw	r26, 0x02	; 2
    23ae:	0c 93       	st	X, r16
    23b0:	12 97       	sbiw	r26, 0x02	; 2
    23b2:	13 96       	adiw	r26, 0x03	; 3
    23b4:	1c 93       	st	X, r17
    23b6:	27 c0       	rjmp	.+78     	; 0x2406 <malloc+0x98>
    23b8:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <__flp>
    23bc:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <__flp+0x1>
    23c0:	22 c0       	rjmp	.+68     	; 0x2406 <malloc+0x98>
    23c2:	21 15       	cp	r18, r1
    23c4:	31 05       	cpc	r19, r1
    23c6:	19 f0       	breq	.+6      	; 0x23ce <malloc+0x60>
    23c8:	42 17       	cp	r20, r18
    23ca:	53 07       	cpc	r21, r19
    23cc:	18 f4       	brcc	.+6      	; 0x23d4 <malloc+0x66>
    23ce:	9a 01       	movw	r18, r20
    23d0:	bd 01       	movw	r22, r26
    23d2:	ef 01       	movw	r28, r30
    23d4:	df 01       	movw	r26, r30
    23d6:	f8 01       	movw	r30, r16
    23d8:	db cf       	rjmp	.-74     	; 0x2390 <malloc+0x22>
    23da:	21 15       	cp	r18, r1
    23dc:	31 05       	cpc	r19, r1
    23de:	f9 f0       	breq	.+62     	; 0x241e <malloc+0xb0>
    23e0:	28 1b       	sub	r18, r24
    23e2:	39 0b       	sbc	r19, r25
    23e4:	24 30       	cpi	r18, 0x04	; 4
    23e6:	31 05       	cpc	r19, r1
    23e8:	80 f4       	brcc	.+32     	; 0x240a <malloc+0x9c>
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	9b 81       	ldd	r25, Y+3	; 0x03
    23ee:	61 15       	cp	r22, r1
    23f0:	71 05       	cpc	r23, r1
    23f2:	21 f0       	breq	.+8      	; 0x23fc <malloc+0x8e>
    23f4:	fb 01       	movw	r30, r22
    23f6:	93 83       	std	Z+3, r25	; 0x03
    23f8:	82 83       	std	Z+2, r24	; 0x02
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <malloc+0x96>
    23fc:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__flp+0x1>
    2400:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__flp>
    2404:	fe 01       	movw	r30, r28
    2406:	32 96       	adiw	r30, 0x02	; 2
    2408:	44 c0       	rjmp	.+136    	; 0x2492 <malloc+0x124>
    240a:	fe 01       	movw	r30, r28
    240c:	e2 0f       	add	r30, r18
    240e:	f3 1f       	adc	r31, r19
    2410:	81 93       	st	Z+, r24
    2412:	91 93       	st	Z+, r25
    2414:	22 50       	subi	r18, 0x02	; 2
    2416:	31 09       	sbc	r19, r1
    2418:	39 83       	std	Y+1, r19	; 0x01
    241a:	28 83       	st	Y, r18
    241c:	3a c0       	rjmp	.+116    	; 0x2492 <malloc+0x124>
    241e:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    2422:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    2426:	23 2b       	or	r18, r19
    2428:	41 f4       	brne	.+16     	; 0x243a <malloc+0xcc>
    242a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    242e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2432:	30 93 d7 02 	sts	0x02D7, r19	; 0x8002d7 <__brkval+0x1>
    2436:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <__brkval>
    243a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    243e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2442:	21 15       	cp	r18, r1
    2444:	31 05       	cpc	r19, r1
    2446:	41 f4       	brne	.+16     	; 0x2458 <malloc+0xea>
    2448:	2d b7       	in	r18, 0x3d	; 61
    244a:	3e b7       	in	r19, 0x3e	; 62
    244c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2450:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2454:	24 1b       	sub	r18, r20
    2456:	35 0b       	sbc	r19, r21
    2458:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__brkval>
    245c:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__brkval+0x1>
    2460:	e2 17       	cp	r30, r18
    2462:	f3 07       	cpc	r31, r19
    2464:	a0 f4       	brcc	.+40     	; 0x248e <malloc+0x120>
    2466:	2e 1b       	sub	r18, r30
    2468:	3f 0b       	sbc	r19, r31
    246a:	28 17       	cp	r18, r24
    246c:	39 07       	cpc	r19, r25
    246e:	78 f0       	brcs	.+30     	; 0x248e <malloc+0x120>
    2470:	ac 01       	movw	r20, r24
    2472:	4e 5f       	subi	r20, 0xFE	; 254
    2474:	5f 4f       	sbci	r21, 0xFF	; 255
    2476:	24 17       	cp	r18, r20
    2478:	35 07       	cpc	r19, r21
    247a:	48 f0       	brcs	.+18     	; 0x248e <malloc+0x120>
    247c:	4e 0f       	add	r20, r30
    247e:	5f 1f       	adc	r21, r31
    2480:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <__brkval+0x1>
    2484:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <__brkval>
    2488:	81 93       	st	Z+, r24
    248a:	91 93       	st	Z+, r25
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <malloc+0x124>
    248e:	e0 e0       	ldi	r30, 0x00	; 0
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	cf 01       	movw	r24, r30
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <free>:
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <free+0xa>
    24a6:	81 c0       	rjmp	.+258    	; 0x25aa <free+0x10c>
    24a8:	fc 01       	movw	r30, r24
    24aa:	32 97       	sbiw	r30, 0x02	; 2
    24ac:	13 82       	std	Z+3, r1	; 0x03
    24ae:	12 82       	std	Z+2, r1	; 0x02
    24b0:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
    24b4:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
    24b8:	10 97       	sbiw	r26, 0x00	; 0
    24ba:	81 f4       	brne	.+32     	; 0x24dc <free+0x3e>
    24bc:	20 81       	ld	r18, Z
    24be:	31 81       	ldd	r19, Z+1	; 0x01
    24c0:	82 0f       	add	r24, r18
    24c2:	93 1f       	adc	r25, r19
    24c4:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    24c8:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    24cc:	28 17       	cp	r18, r24
    24ce:	39 07       	cpc	r19, r25
    24d0:	51 f5       	brne	.+84     	; 0x2526 <free+0x88>
    24d2:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
    24d6:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
    24da:	67 c0       	rjmp	.+206    	; 0x25aa <free+0x10c>
    24dc:	ed 01       	movw	r28, r26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	ce 17       	cp	r28, r30
    24e4:	df 07       	cpc	r29, r31
    24e6:	40 f4       	brcc	.+16     	; 0x24f8 <free+0x5a>
    24e8:	4a 81       	ldd	r20, Y+2	; 0x02
    24ea:	5b 81       	ldd	r21, Y+3	; 0x03
    24ec:	9e 01       	movw	r18, r28
    24ee:	41 15       	cp	r20, r1
    24f0:	51 05       	cpc	r21, r1
    24f2:	f1 f0       	breq	.+60     	; 0x2530 <free+0x92>
    24f4:	ea 01       	movw	r28, r20
    24f6:	f5 cf       	rjmp	.-22     	; 0x24e2 <free+0x44>
    24f8:	d3 83       	std	Z+3, r29	; 0x03
    24fa:	c2 83       	std	Z+2, r28	; 0x02
    24fc:	40 81       	ld	r20, Z
    24fe:	51 81       	ldd	r21, Z+1	; 0x01
    2500:	84 0f       	add	r24, r20
    2502:	95 1f       	adc	r25, r21
    2504:	c8 17       	cp	r28, r24
    2506:	d9 07       	cpc	r29, r25
    2508:	59 f4       	brne	.+22     	; 0x2520 <free+0x82>
    250a:	88 81       	ld	r24, Y
    250c:	99 81       	ldd	r25, Y+1	; 0x01
    250e:	84 0f       	add	r24, r20
    2510:	95 1f       	adc	r25, r21
    2512:	02 96       	adiw	r24, 0x02	; 2
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	93 83       	std	Z+3, r25	; 0x03
    251e:	82 83       	std	Z+2, r24	; 0x02
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	29 f4       	brne	.+10     	; 0x2530 <free+0x92>
    2526:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
    252a:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
    252e:	3d c0       	rjmp	.+122    	; 0x25aa <free+0x10c>
    2530:	e9 01       	movw	r28, r18
    2532:	fb 83       	std	Y+3, r31	; 0x03
    2534:	ea 83       	std	Y+2, r30	; 0x02
    2536:	49 91       	ld	r20, Y+
    2538:	59 91       	ld	r21, Y+
    253a:	c4 0f       	add	r28, r20
    253c:	d5 1f       	adc	r29, r21
    253e:	ec 17       	cp	r30, r28
    2540:	fd 07       	cpc	r31, r29
    2542:	61 f4       	brne	.+24     	; 0x255c <free+0xbe>
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	84 0f       	add	r24, r20
    254a:	95 1f       	adc	r25, r21
    254c:	02 96       	adiw	r24, 0x02	; 2
    254e:	e9 01       	movw	r28, r18
    2550:	99 83       	std	Y+1, r25	; 0x01
    2552:	88 83       	st	Y, r24
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	e0 e0       	ldi	r30, 0x00	; 0
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	12 96       	adiw	r26, 0x02	; 2
    2562:	8d 91       	ld	r24, X+
    2564:	9c 91       	ld	r25, X
    2566:	13 97       	sbiw	r26, 0x03	; 3
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	19 f0       	breq	.+6      	; 0x2572 <free+0xd4>
    256c:	fd 01       	movw	r30, r26
    256e:	dc 01       	movw	r26, r24
    2570:	f7 cf       	rjmp	.-18     	; 0x2560 <free+0xc2>
    2572:	8d 91       	ld	r24, X+
    2574:	9c 91       	ld	r25, X
    2576:	11 97       	sbiw	r26, 0x01	; 1
    2578:	9d 01       	movw	r18, r26
    257a:	2e 5f       	subi	r18, 0xFE	; 254
    257c:	3f 4f       	sbci	r19, 0xFF	; 255
    257e:	82 0f       	add	r24, r18
    2580:	93 1f       	adc	r25, r19
    2582:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    2586:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    258a:	28 17       	cp	r18, r24
    258c:	39 07       	cpc	r19, r25
    258e:	69 f4       	brne	.+26     	; 0x25aa <free+0x10c>
    2590:	30 97       	sbiw	r30, 0x00	; 0
    2592:	29 f4       	brne	.+10     	; 0x259e <free+0x100>
    2594:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__flp+0x1>
    2598:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__flp>
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <free+0x104>
    259e:	13 82       	std	Z+3, r1	; 0x03
    25a0:	12 82       	std	Z+2, r1	; 0x02
    25a2:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <__brkval+0x1>
    25a6:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <__brkval>
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <realloc>:
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	ee ed       	ldi	r30, 0xDE	; 222
    25b6:	f2 e1       	ldi	r31, 0x12	; 18
    25b8:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x8>
    25bc:	ec 01       	movw	r28, r24
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	21 f4       	brne	.+8      	; 0x25ca <realloc+0x1a>
    25c2:	cb 01       	movw	r24, r22
    25c4:	0e 94 b7 11 	call	0x236e	; 0x236e <malloc>
    25c8:	b4 c0       	rjmp	.+360    	; 0x2732 <realloc+0x182>
    25ca:	fc 01       	movw	r30, r24
    25cc:	e6 0f       	add	r30, r22
    25ce:	f7 1f       	adc	r31, r23
    25d0:	9c 01       	movw	r18, r24
    25d2:	22 50       	subi	r18, 0x02	; 2
    25d4:	31 09       	sbc	r19, r1
    25d6:	e2 17       	cp	r30, r18
    25d8:	f3 07       	cpc	r31, r19
    25da:	08 f4       	brcc	.+2      	; 0x25de <realloc+0x2e>
    25dc:	a8 c0       	rjmp	.+336    	; 0x272e <realloc+0x17e>
    25de:	d9 01       	movw	r26, r18
    25e0:	0d 91       	ld	r16, X+
    25e2:	1c 91       	ld	r17, X
    25e4:	11 97       	sbiw	r26, 0x01	; 1
    25e6:	06 17       	cp	r16, r22
    25e8:	17 07       	cpc	r17, r23
    25ea:	b0 f0       	brcs	.+44     	; 0x2618 <realloc+0x68>
    25ec:	05 30       	cpi	r16, 0x05	; 5
    25ee:	11 05       	cpc	r17, r1
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <realloc+0x44>
    25f2:	9b c0       	rjmp	.+310    	; 0x272a <realloc+0x17a>
    25f4:	c8 01       	movw	r24, r16
    25f6:	04 97       	sbiw	r24, 0x04	; 4
    25f8:	86 17       	cp	r24, r22
    25fa:	97 07       	cpc	r25, r23
    25fc:	08 f4       	brcc	.+2      	; 0x2600 <realloc+0x50>
    25fe:	95 c0       	rjmp	.+298    	; 0x272a <realloc+0x17a>
    2600:	02 50       	subi	r16, 0x02	; 2
    2602:	11 09       	sbc	r17, r1
    2604:	06 1b       	sub	r16, r22
    2606:	17 0b       	sbc	r17, r23
    2608:	01 93       	st	Z+, r16
    260a:	11 93       	st	Z+, r17
    260c:	6d 93       	st	X+, r22
    260e:	7c 93       	st	X, r23
    2610:	cf 01       	movw	r24, r30
    2612:	0e 94 4f 12 	call	0x249e	; 0x249e <free>
    2616:	89 c0       	rjmp	.+274    	; 0x272a <realloc+0x17a>
    2618:	5b 01       	movw	r10, r22
    261a:	a0 1a       	sub	r10, r16
    261c:	b1 0a       	sbc	r11, r17
    261e:	4c 01       	movw	r8, r24
    2620:	80 0e       	add	r8, r16
    2622:	91 1e       	adc	r9, r17
    2624:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
    2628:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
    262c:	61 2c       	mov	r6, r1
    262e:	71 2c       	mov	r7, r1
    2630:	e1 2c       	mov	r14, r1
    2632:	f1 2c       	mov	r15, r1
    2634:	10 97       	sbiw	r26, 0x00	; 0
    2636:	09 f4       	brne	.+2      	; 0x263a <realloc+0x8a>
    2638:	46 c0       	rjmp	.+140    	; 0x26c6 <realloc+0x116>
    263a:	8d 91       	ld	r24, X+
    263c:	9c 91       	ld	r25, X
    263e:	11 97       	sbiw	r26, 0x01	; 1
    2640:	a8 15       	cp	r26, r8
    2642:	b9 05       	cpc	r27, r9
    2644:	b1 f5       	brne	.+108    	; 0x26b2 <realloc+0x102>
    2646:	6c 01       	movw	r12, r24
    2648:	42 e0       	ldi	r20, 0x02	; 2
    264a:	c4 0e       	add	r12, r20
    264c:	d1 1c       	adc	r13, r1
    264e:	ca 14       	cp	r12, r10
    2650:	db 04       	cpc	r13, r11
    2652:	78 f1       	brcs	.+94     	; 0x26b2 <realloc+0x102>
    2654:	4c 01       	movw	r8, r24
    2656:	8a 18       	sub	r8, r10
    2658:	9b 08       	sbc	r9, r11
    265a:	64 01       	movw	r12, r8
    265c:	42 e0       	ldi	r20, 0x02	; 2
    265e:	c4 0e       	add	r12, r20
    2660:	d1 1c       	adc	r13, r1
    2662:	12 96       	adiw	r26, 0x02	; 2
    2664:	bc 90       	ld	r11, X
    2666:	12 97       	sbiw	r26, 0x02	; 2
    2668:	13 96       	adiw	r26, 0x03	; 3
    266a:	ac 91       	ld	r26, X
    266c:	b5 e0       	ldi	r27, 0x05	; 5
    266e:	cb 16       	cp	r12, r27
    2670:	d1 04       	cpc	r13, r1
    2672:	40 f0       	brcs	.+16     	; 0x2684 <realloc+0xd4>
    2674:	b2 82       	std	Z+2, r11	; 0x02
    2676:	a3 83       	std	Z+3, r26	; 0x03
    2678:	91 82       	std	Z+1, r9	; 0x01
    267a:	80 82       	st	Z, r8
    267c:	d9 01       	movw	r26, r18
    267e:	6d 93       	st	X+, r22
    2680:	7c 93       	st	X, r23
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <realloc+0xe6>
    2684:	0e 5f       	subi	r16, 0xFE	; 254
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	80 0f       	add	r24, r16
    268a:	91 1f       	adc	r25, r17
    268c:	f9 01       	movw	r30, r18
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	eb 2d       	mov	r30, r11
    2694:	fa 2f       	mov	r31, r26
    2696:	e1 14       	cp	r14, r1
    2698:	f1 04       	cpc	r15, r1
    269a:	31 f0       	breq	.+12     	; 0x26a8 <realloc+0xf8>
    269c:	d7 01       	movw	r26, r14
    269e:	13 96       	adiw	r26, 0x03	; 3
    26a0:	fc 93       	st	X, r31
    26a2:	ee 93       	st	-X, r30
    26a4:	12 97       	sbiw	r26, 0x02	; 2
    26a6:	41 c0       	rjmp	.+130    	; 0x272a <realloc+0x17a>
    26a8:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
    26ac:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
    26b0:	3c c0       	rjmp	.+120    	; 0x272a <realloc+0x17a>
    26b2:	68 16       	cp	r6, r24
    26b4:	79 06       	cpc	r7, r25
    26b6:	08 f4       	brcc	.+2      	; 0x26ba <realloc+0x10a>
    26b8:	3c 01       	movw	r6, r24
    26ba:	7d 01       	movw	r14, r26
    26bc:	12 96       	adiw	r26, 0x02	; 2
    26be:	0d 90       	ld	r0, X+
    26c0:	bc 91       	ld	r27, X
    26c2:	a0 2d       	mov	r26, r0
    26c4:	b7 cf       	rjmp	.-146    	; 0x2634 <realloc+0x84>
    26c6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__brkval>
    26ca:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__brkval+0x1>
    26ce:	88 16       	cp	r8, r24
    26d0:	99 06       	cpc	r9, r25
    26d2:	e1 f4       	brne	.+56     	; 0x270c <realloc+0x15c>
    26d4:	66 16       	cp	r6, r22
    26d6:	77 06       	cpc	r7, r23
    26d8:	c8 f4       	brcc	.+50     	; 0x270c <realloc+0x15c>
    26da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    26de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	41 f4       	brne	.+16     	; 0x26f6 <realloc+0x146>
    26e6:	8d b7       	in	r24, 0x3d	; 61
    26e8:	9e b7       	in	r25, 0x3e	; 62
    26ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26f2:	84 1b       	sub	r24, r20
    26f4:	95 0b       	sbc	r25, r21
    26f6:	e8 17       	cp	r30, r24
    26f8:	f9 07       	cpc	r31, r25
    26fa:	c8 f4       	brcc	.+50     	; 0x272e <realloc+0x17e>
    26fc:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
    2700:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
    2704:	f9 01       	movw	r30, r18
    2706:	71 83       	std	Z+1, r23	; 0x01
    2708:	60 83       	st	Z, r22
    270a:	0f c0       	rjmp	.+30     	; 0x272a <realloc+0x17a>
    270c:	cb 01       	movw	r24, r22
    270e:	0e 94 b7 11 	call	0x236e	; 0x236e <malloc>
    2712:	7c 01       	movw	r14, r24
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	59 f0       	breq	.+22     	; 0x272e <realloc+0x17e>
    2718:	a8 01       	movw	r20, r16
    271a:	be 01       	movw	r22, r28
    271c:	0e 94 9e 13 	call	0x273c	; 0x273c <memcpy>
    2720:	ce 01       	movw	r24, r28
    2722:	0e 94 4f 12 	call	0x249e	; 0x249e <free>
    2726:	c7 01       	movw	r24, r14
    2728:	04 c0       	rjmp	.+8      	; 0x2732 <realloc+0x182>
    272a:	ce 01       	movw	r24, r28
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <realloc+0x182>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	ee e0       	ldi	r30, 0x0E	; 14
    2738:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x8>

0000273c <memcpy>:
    273c:	fb 01       	movw	r30, r22
    273e:	dc 01       	movw	r26, r24
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <memcpy+0xa>
    2742:	01 90       	ld	r0, Z+
    2744:	0d 92       	st	X+, r0
    2746:	41 50       	subi	r20, 0x01	; 1
    2748:	50 40       	sbci	r21, 0x00	; 0
    274a:	d8 f7       	brcc	.-10     	; 0x2742 <memcpy+0x6>
    274c:	08 95       	ret

0000274e <strcpy>:
    274e:	fb 01       	movw	r30, r22
    2750:	dc 01       	movw	r26, r24
    2752:	01 90       	ld	r0, Z+
    2754:	0d 92       	st	X+, r0
    2756:	00 20       	and	r0, r0
    2758:	e1 f7       	brne	.-8      	; 0x2752 <strcpy+0x4>
    275a:	08 95       	ret

0000275c <sprintf>:
    275c:	ae e0       	ldi	r26, 0x0E	; 14
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x1c>
    2768:	0d 89       	ldd	r16, Y+21	; 0x15
    276a:	1e 89       	ldd	r17, Y+22	; 0x16
    276c:	86 e0       	ldi	r24, 0x06	; 6
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	1a 83       	std	Y+2, r17	; 0x02
    2772:	09 83       	std	Y+1, r16	; 0x01
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	9f e7       	ldi	r25, 0x7F	; 127
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	ae 01       	movw	r20, r28
    277e:	47 5e       	subi	r20, 0xE7	; 231
    2780:	5f 4f       	sbci	r21, 0xFF	; 255
    2782:	6f 89       	ldd	r22, Y+23	; 0x17
    2784:	78 8d       	ldd	r23, Y+24	; 0x18
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <vfprintf>
    278e:	ef 81       	ldd	r30, Y+7	; 0x07
    2790:	f8 85       	ldd	r31, Y+8	; 0x08
    2792:	e0 0f       	add	r30, r16
    2794:	f1 1f       	adc	r31, r17
    2796:	10 82       	st	Z, r1
    2798:	2e 96       	adiw	r28, 0x0e	; 14
    279a:	e4 e0       	ldi	r30, 0x04	; 4
    279c:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x1c>

000027a0 <vfprintf>:
    27a0:	ab e0       	ldi	r26, 0x0B	; 11
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e6 ed       	ldi	r30, 0xD6	; 214
    27a6:	f3 e1       	ldi	r31, 0x13	; 19
    27a8:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__>
    27ac:	6c 01       	movw	r12, r24
    27ae:	7b 01       	movw	r14, r22
    27b0:	8a 01       	movw	r16, r20
    27b2:	fc 01       	movw	r30, r24
    27b4:	17 82       	std	Z+7, r1	; 0x07
    27b6:	16 82       	std	Z+6, r1	; 0x06
    27b8:	83 81       	ldd	r24, Z+3	; 0x03
    27ba:	81 ff       	sbrs	r24, 1
    27bc:	cc c1       	rjmp	.+920    	; 0x2b56 <vfprintf+0x3b6>
    27be:	ce 01       	movw	r24, r28
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	3c 01       	movw	r6, r24
    27c4:	f6 01       	movw	r30, r12
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	f7 01       	movw	r30, r14
    27ca:	93 fd       	sbrc	r25, 3
    27cc:	85 91       	lpm	r24, Z+
    27ce:	93 ff       	sbrs	r25, 3
    27d0:	81 91       	ld	r24, Z+
    27d2:	7f 01       	movw	r14, r30
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <vfprintf+0x3a>
    27d8:	ba c1       	rjmp	.+884    	; 0x2b4e <vfprintf+0x3ae>
    27da:	85 32       	cpi	r24, 0x25	; 37
    27dc:	39 f4       	brne	.+14     	; 0x27ec <vfprintf+0x4c>
    27de:	93 fd       	sbrc	r25, 3
    27e0:	85 91       	lpm	r24, Z+
    27e2:	93 ff       	sbrs	r25, 3
    27e4:	81 91       	ld	r24, Z+
    27e6:	7f 01       	movw	r14, r30
    27e8:	85 32       	cpi	r24, 0x25	; 37
    27ea:	29 f4       	brne	.+10     	; 0x27f6 <vfprintf+0x56>
    27ec:	b6 01       	movw	r22, r12
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    27f4:	e7 cf       	rjmp	.-50     	; 0x27c4 <vfprintf+0x24>
    27f6:	91 2c       	mov	r9, r1
    27f8:	21 2c       	mov	r2, r1
    27fa:	31 2c       	mov	r3, r1
    27fc:	ff e1       	ldi	r31, 0x1F	; 31
    27fe:	f3 15       	cp	r31, r3
    2800:	d8 f0       	brcs	.+54     	; 0x2838 <vfprintf+0x98>
    2802:	8b 32       	cpi	r24, 0x2B	; 43
    2804:	79 f0       	breq	.+30     	; 0x2824 <vfprintf+0x84>
    2806:	38 f4       	brcc	.+14     	; 0x2816 <vfprintf+0x76>
    2808:	80 32       	cpi	r24, 0x20	; 32
    280a:	79 f0       	breq	.+30     	; 0x282a <vfprintf+0x8a>
    280c:	83 32       	cpi	r24, 0x23	; 35
    280e:	a1 f4       	brne	.+40     	; 0x2838 <vfprintf+0x98>
    2810:	23 2d       	mov	r18, r3
    2812:	20 61       	ori	r18, 0x10	; 16
    2814:	1d c0       	rjmp	.+58     	; 0x2850 <vfprintf+0xb0>
    2816:	8d 32       	cpi	r24, 0x2D	; 45
    2818:	61 f0       	breq	.+24     	; 0x2832 <vfprintf+0x92>
    281a:	80 33       	cpi	r24, 0x30	; 48
    281c:	69 f4       	brne	.+26     	; 0x2838 <vfprintf+0x98>
    281e:	23 2d       	mov	r18, r3
    2820:	21 60       	ori	r18, 0x01	; 1
    2822:	16 c0       	rjmp	.+44     	; 0x2850 <vfprintf+0xb0>
    2824:	83 2d       	mov	r24, r3
    2826:	82 60       	ori	r24, 0x02	; 2
    2828:	38 2e       	mov	r3, r24
    282a:	e3 2d       	mov	r30, r3
    282c:	e4 60       	ori	r30, 0x04	; 4
    282e:	3e 2e       	mov	r3, r30
    2830:	2a c0       	rjmp	.+84     	; 0x2886 <vfprintf+0xe6>
    2832:	f3 2d       	mov	r31, r3
    2834:	f8 60       	ori	r31, 0x08	; 8
    2836:	1d c0       	rjmp	.+58     	; 0x2872 <vfprintf+0xd2>
    2838:	37 fc       	sbrc	r3, 7
    283a:	2d c0       	rjmp	.+90     	; 0x2896 <vfprintf+0xf6>
    283c:	20 ed       	ldi	r18, 0xD0	; 208
    283e:	28 0f       	add	r18, r24
    2840:	2a 30       	cpi	r18, 0x0A	; 10
    2842:	40 f0       	brcs	.+16     	; 0x2854 <vfprintf+0xb4>
    2844:	8e 32       	cpi	r24, 0x2E	; 46
    2846:	b9 f4       	brne	.+46     	; 0x2876 <vfprintf+0xd6>
    2848:	36 fc       	sbrc	r3, 6
    284a:	81 c1       	rjmp	.+770    	; 0x2b4e <vfprintf+0x3ae>
    284c:	23 2d       	mov	r18, r3
    284e:	20 64       	ori	r18, 0x40	; 64
    2850:	32 2e       	mov	r3, r18
    2852:	19 c0       	rjmp	.+50     	; 0x2886 <vfprintf+0xe6>
    2854:	36 fe       	sbrs	r3, 6
    2856:	06 c0       	rjmp	.+12     	; 0x2864 <vfprintf+0xc4>
    2858:	8a e0       	ldi	r24, 0x0A	; 10
    285a:	98 9e       	mul	r9, r24
    285c:	20 0d       	add	r18, r0
    285e:	11 24       	eor	r1, r1
    2860:	92 2e       	mov	r9, r18
    2862:	11 c0       	rjmp	.+34     	; 0x2886 <vfprintf+0xe6>
    2864:	ea e0       	ldi	r30, 0x0A	; 10
    2866:	2e 9e       	mul	r2, r30
    2868:	20 0d       	add	r18, r0
    286a:	11 24       	eor	r1, r1
    286c:	22 2e       	mov	r2, r18
    286e:	f3 2d       	mov	r31, r3
    2870:	f0 62       	ori	r31, 0x20	; 32
    2872:	3f 2e       	mov	r3, r31
    2874:	08 c0       	rjmp	.+16     	; 0x2886 <vfprintf+0xe6>
    2876:	8c 36       	cpi	r24, 0x6C	; 108
    2878:	21 f4       	brne	.+8      	; 0x2882 <vfprintf+0xe2>
    287a:	83 2d       	mov	r24, r3
    287c:	80 68       	ori	r24, 0x80	; 128
    287e:	38 2e       	mov	r3, r24
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <vfprintf+0xe6>
    2882:	88 36       	cpi	r24, 0x68	; 104
    2884:	41 f4       	brne	.+16     	; 0x2896 <vfprintf+0xf6>
    2886:	f7 01       	movw	r30, r14
    2888:	93 fd       	sbrc	r25, 3
    288a:	85 91       	lpm	r24, Z+
    288c:	93 ff       	sbrs	r25, 3
    288e:	81 91       	ld	r24, Z+
    2890:	7f 01       	movw	r14, r30
    2892:	81 11       	cpse	r24, r1
    2894:	b3 cf       	rjmp	.-154    	; 0x27fc <vfprintf+0x5c>
    2896:	98 2f       	mov	r25, r24
    2898:	9f 7d       	andi	r25, 0xDF	; 223
    289a:	95 54       	subi	r25, 0x45	; 69
    289c:	93 30       	cpi	r25, 0x03	; 3
    289e:	28 f4       	brcc	.+10     	; 0x28aa <vfprintf+0x10a>
    28a0:	0c 5f       	subi	r16, 0xFC	; 252
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	9f e3       	ldi	r25, 0x3F	; 63
    28a6:	99 83       	std	Y+1, r25	; 0x01
    28a8:	0d c0       	rjmp	.+26     	; 0x28c4 <vfprintf+0x124>
    28aa:	83 36       	cpi	r24, 0x63	; 99
    28ac:	31 f0       	breq	.+12     	; 0x28ba <vfprintf+0x11a>
    28ae:	83 37       	cpi	r24, 0x73	; 115
    28b0:	71 f0       	breq	.+28     	; 0x28ce <vfprintf+0x12e>
    28b2:	83 35       	cpi	r24, 0x53	; 83
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <vfprintf+0x118>
    28b6:	59 c0       	rjmp	.+178    	; 0x296a <vfprintf+0x1ca>
    28b8:	21 c0       	rjmp	.+66     	; 0x28fc <vfprintf+0x15c>
    28ba:	f8 01       	movw	r30, r16
    28bc:	80 81       	ld	r24, Z
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	0e 5f       	subi	r16, 0xFE	; 254
    28c2:	1f 4f       	sbci	r17, 0xFF	; 255
    28c4:	88 24       	eor	r8, r8
    28c6:	83 94       	inc	r8
    28c8:	91 2c       	mov	r9, r1
    28ca:	53 01       	movw	r10, r6
    28cc:	13 c0       	rjmp	.+38     	; 0x28f4 <vfprintf+0x154>
    28ce:	28 01       	movw	r4, r16
    28d0:	f2 e0       	ldi	r31, 0x02	; 2
    28d2:	4f 0e       	add	r4, r31
    28d4:	51 1c       	adc	r5, r1
    28d6:	f8 01       	movw	r30, r16
    28d8:	a0 80       	ld	r10, Z
    28da:	b1 80       	ldd	r11, Z+1	; 0x01
    28dc:	36 fe       	sbrs	r3, 6
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <vfprintf+0x146>
    28e0:	69 2d       	mov	r22, r9
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <vfprintf+0x14a>
    28e6:	6f ef       	ldi	r22, 0xFF	; 255
    28e8:	7f ef       	ldi	r23, 0xFF	; 255
    28ea:	c5 01       	movw	r24, r10
    28ec:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <strnlen>
    28f0:	4c 01       	movw	r8, r24
    28f2:	82 01       	movw	r16, r4
    28f4:	f3 2d       	mov	r31, r3
    28f6:	ff 77       	andi	r31, 0x7F	; 127
    28f8:	3f 2e       	mov	r3, r31
    28fa:	16 c0       	rjmp	.+44     	; 0x2928 <vfprintf+0x188>
    28fc:	28 01       	movw	r4, r16
    28fe:	22 e0       	ldi	r18, 0x02	; 2
    2900:	42 0e       	add	r4, r18
    2902:	51 1c       	adc	r5, r1
    2904:	f8 01       	movw	r30, r16
    2906:	a0 80       	ld	r10, Z
    2908:	b1 80       	ldd	r11, Z+1	; 0x01
    290a:	36 fe       	sbrs	r3, 6
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfprintf+0x174>
    290e:	69 2d       	mov	r22, r9
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <vfprintf+0x178>
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	7f ef       	ldi	r23, 0xFF	; 255
    2918:	c5 01       	movw	r24, r10
    291a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <strnlen_P>
    291e:	4c 01       	movw	r8, r24
    2920:	f3 2d       	mov	r31, r3
    2922:	f0 68       	ori	r31, 0x80	; 128
    2924:	3f 2e       	mov	r3, r31
    2926:	82 01       	movw	r16, r4
    2928:	33 fc       	sbrc	r3, 3
    292a:	1b c0       	rjmp	.+54     	; 0x2962 <vfprintf+0x1c2>
    292c:	82 2d       	mov	r24, r2
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 16       	cp	r8, r24
    2932:	99 06       	cpc	r9, r25
    2934:	b0 f4       	brcc	.+44     	; 0x2962 <vfprintf+0x1c2>
    2936:	b6 01       	movw	r22, r12
    2938:	80 e2       	ldi	r24, 0x20	; 32
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2940:	2a 94       	dec	r2
    2942:	f4 cf       	rjmp	.-24     	; 0x292c <vfprintf+0x18c>
    2944:	f5 01       	movw	r30, r10
    2946:	37 fc       	sbrc	r3, 7
    2948:	85 91       	lpm	r24, Z+
    294a:	37 fe       	sbrs	r3, 7
    294c:	81 91       	ld	r24, Z+
    294e:	5f 01       	movw	r10, r30
    2950:	b6 01       	movw	r22, r12
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2958:	21 10       	cpse	r2, r1
    295a:	2a 94       	dec	r2
    295c:	21 e0       	ldi	r18, 0x01	; 1
    295e:	82 1a       	sub	r8, r18
    2960:	91 08       	sbc	r9, r1
    2962:	81 14       	cp	r8, r1
    2964:	91 04       	cpc	r9, r1
    2966:	71 f7       	brne	.-36     	; 0x2944 <vfprintf+0x1a4>
    2968:	e8 c0       	rjmp	.+464    	; 0x2b3a <vfprintf+0x39a>
    296a:	84 36       	cpi	r24, 0x64	; 100
    296c:	11 f0       	breq	.+4      	; 0x2972 <vfprintf+0x1d2>
    296e:	89 36       	cpi	r24, 0x69	; 105
    2970:	41 f5       	brne	.+80     	; 0x29c2 <vfprintf+0x222>
    2972:	f8 01       	movw	r30, r16
    2974:	37 fe       	sbrs	r3, 7
    2976:	07 c0       	rjmp	.+14     	; 0x2986 <vfprintf+0x1e6>
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	0c 5f       	subi	r16, 0xFC	; 252
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	08 c0       	rjmp	.+16     	; 0x2996 <vfprintf+0x1f6>
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	07 2e       	mov	r0, r23
    298c:	00 0c       	add	r0, r0
    298e:	88 0b       	sbc	r24, r24
    2990:	99 0b       	sbc	r25, r25
    2992:	0e 5f       	subi	r16, 0xFE	; 254
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	f3 2d       	mov	r31, r3
    2998:	ff 76       	andi	r31, 0x6F	; 111
    299a:	3f 2e       	mov	r3, r31
    299c:	97 ff       	sbrs	r25, 7
    299e:	09 c0       	rjmp	.+18     	; 0x29b2 <vfprintf+0x212>
    29a0:	90 95       	com	r25
    29a2:	80 95       	com	r24
    29a4:	70 95       	com	r23
    29a6:	61 95       	neg	r22
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	8f 4f       	sbci	r24, 0xFF	; 255
    29ac:	9f 4f       	sbci	r25, 0xFF	; 255
    29ae:	f0 68       	ori	r31, 0x80	; 128
    29b0:	3f 2e       	mov	r3, r31
    29b2:	2a e0       	ldi	r18, 0x0A	; 10
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	a3 01       	movw	r20, r6
    29b8:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__ultoa_invert>
    29bc:	88 2e       	mov	r8, r24
    29be:	86 18       	sub	r8, r6
    29c0:	45 c0       	rjmp	.+138    	; 0x2a4c <vfprintf+0x2ac>
    29c2:	85 37       	cpi	r24, 0x75	; 117
    29c4:	31 f4       	brne	.+12     	; 0x29d2 <vfprintf+0x232>
    29c6:	23 2d       	mov	r18, r3
    29c8:	2f 7e       	andi	r18, 0xEF	; 239
    29ca:	b2 2e       	mov	r11, r18
    29cc:	2a e0       	ldi	r18, 0x0A	; 10
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	25 c0       	rjmp	.+74     	; 0x2a1c <vfprintf+0x27c>
    29d2:	93 2d       	mov	r25, r3
    29d4:	99 7f       	andi	r25, 0xF9	; 249
    29d6:	b9 2e       	mov	r11, r25
    29d8:	8f 36       	cpi	r24, 0x6F	; 111
    29da:	c1 f0       	breq	.+48     	; 0x2a0c <vfprintf+0x26c>
    29dc:	18 f4       	brcc	.+6      	; 0x29e4 <vfprintf+0x244>
    29de:	88 35       	cpi	r24, 0x58	; 88
    29e0:	79 f0       	breq	.+30     	; 0x2a00 <vfprintf+0x260>
    29e2:	b5 c0       	rjmp	.+362    	; 0x2b4e <vfprintf+0x3ae>
    29e4:	80 37       	cpi	r24, 0x70	; 112
    29e6:	19 f0       	breq	.+6      	; 0x29ee <vfprintf+0x24e>
    29e8:	88 37       	cpi	r24, 0x78	; 120
    29ea:	21 f0       	breq	.+8      	; 0x29f4 <vfprintf+0x254>
    29ec:	b0 c0       	rjmp	.+352    	; 0x2b4e <vfprintf+0x3ae>
    29ee:	e9 2f       	mov	r30, r25
    29f0:	e0 61       	ori	r30, 0x10	; 16
    29f2:	be 2e       	mov	r11, r30
    29f4:	b4 fe       	sbrs	r11, 4
    29f6:	0d c0       	rjmp	.+26     	; 0x2a12 <vfprintf+0x272>
    29f8:	fb 2d       	mov	r31, r11
    29fa:	f4 60       	ori	r31, 0x04	; 4
    29fc:	bf 2e       	mov	r11, r31
    29fe:	09 c0       	rjmp	.+18     	; 0x2a12 <vfprintf+0x272>
    2a00:	34 fe       	sbrs	r3, 4
    2a02:	0a c0       	rjmp	.+20     	; 0x2a18 <vfprintf+0x278>
    2a04:	29 2f       	mov	r18, r25
    2a06:	26 60       	ori	r18, 0x06	; 6
    2a08:	b2 2e       	mov	r11, r18
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <vfprintf+0x278>
    2a0c:	28 e0       	ldi	r18, 0x08	; 8
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	05 c0       	rjmp	.+10     	; 0x2a1c <vfprintf+0x27c>
    2a12:	20 e1       	ldi	r18, 0x10	; 16
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <vfprintf+0x27c>
    2a18:	20 e1       	ldi	r18, 0x10	; 16
    2a1a:	32 e0       	ldi	r19, 0x02	; 2
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	b7 fe       	sbrs	r11, 7
    2a20:	07 c0       	rjmp	.+14     	; 0x2a30 <vfprintf+0x290>
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	0c 5f       	subi	r16, 0xFC	; 252
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <vfprintf+0x29c>
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 5f       	subi	r16, 0xFE	; 254
    2a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3c:	a3 01       	movw	r20, r6
    2a3e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__ultoa_invert>
    2a42:	88 2e       	mov	r8, r24
    2a44:	86 18       	sub	r8, r6
    2a46:	fb 2d       	mov	r31, r11
    2a48:	ff 77       	andi	r31, 0x7F	; 127
    2a4a:	3f 2e       	mov	r3, r31
    2a4c:	36 fe       	sbrs	r3, 6
    2a4e:	0d c0       	rjmp	.+26     	; 0x2a6a <vfprintf+0x2ca>
    2a50:	23 2d       	mov	r18, r3
    2a52:	2e 7f       	andi	r18, 0xFE	; 254
    2a54:	a2 2e       	mov	r10, r18
    2a56:	89 14       	cp	r8, r9
    2a58:	58 f4       	brcc	.+22     	; 0x2a70 <vfprintf+0x2d0>
    2a5a:	34 fe       	sbrs	r3, 4
    2a5c:	0b c0       	rjmp	.+22     	; 0x2a74 <vfprintf+0x2d4>
    2a5e:	32 fc       	sbrc	r3, 2
    2a60:	09 c0       	rjmp	.+18     	; 0x2a74 <vfprintf+0x2d4>
    2a62:	83 2d       	mov	r24, r3
    2a64:	8e 7e       	andi	r24, 0xEE	; 238
    2a66:	a8 2e       	mov	r10, r24
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <vfprintf+0x2d4>
    2a6a:	b8 2c       	mov	r11, r8
    2a6c:	a3 2c       	mov	r10, r3
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <vfprintf+0x2d6>
    2a70:	b8 2c       	mov	r11, r8
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <vfprintf+0x2d6>
    2a74:	b9 2c       	mov	r11, r9
    2a76:	a4 fe       	sbrs	r10, 4
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <vfprintf+0x2f8>
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e8 0d       	add	r30, r8
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	80 81       	ld	r24, Z
    2a82:	80 33       	cpi	r24, 0x30	; 48
    2a84:	21 f4       	brne	.+8      	; 0x2a8e <vfprintf+0x2ee>
    2a86:	9a 2d       	mov	r25, r10
    2a88:	99 7e       	andi	r25, 0xE9	; 233
    2a8a:	a9 2e       	mov	r10, r25
    2a8c:	09 c0       	rjmp	.+18     	; 0x2aa0 <vfprintf+0x300>
    2a8e:	a2 fe       	sbrs	r10, 2
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x2fe>
    2a92:	b3 94       	inc	r11
    2a94:	b3 94       	inc	r11
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <vfprintf+0x300>
    2a98:	8a 2d       	mov	r24, r10
    2a9a:	86 78       	andi	r24, 0x86	; 134
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <vfprintf+0x300>
    2a9e:	b3 94       	inc	r11
    2aa0:	a3 fc       	sbrc	r10, 3
    2aa2:	11 c0       	rjmp	.+34     	; 0x2ac6 <vfprintf+0x326>
    2aa4:	a0 fe       	sbrs	r10, 0
    2aa6:	06 c0       	rjmp	.+12     	; 0x2ab4 <vfprintf+0x314>
    2aa8:	b2 14       	cp	r11, r2
    2aaa:	88 f4       	brcc	.+34     	; 0x2ace <vfprintf+0x32e>
    2aac:	28 0c       	add	r2, r8
    2aae:	92 2c       	mov	r9, r2
    2ab0:	9b 18       	sub	r9, r11
    2ab2:	0e c0       	rjmp	.+28     	; 0x2ad0 <vfprintf+0x330>
    2ab4:	b2 14       	cp	r11, r2
    2ab6:	60 f4       	brcc	.+24     	; 0x2ad0 <vfprintf+0x330>
    2ab8:	b6 01       	movw	r22, r12
    2aba:	80 e2       	ldi	r24, 0x20	; 32
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2ac2:	b3 94       	inc	r11
    2ac4:	f7 cf       	rjmp	.-18     	; 0x2ab4 <vfprintf+0x314>
    2ac6:	b2 14       	cp	r11, r2
    2ac8:	18 f4       	brcc	.+6      	; 0x2ad0 <vfprintf+0x330>
    2aca:	2b 18       	sub	r2, r11
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <vfprintf+0x332>
    2ace:	98 2c       	mov	r9, r8
    2ad0:	21 2c       	mov	r2, r1
    2ad2:	a4 fe       	sbrs	r10, 4
    2ad4:	10 c0       	rjmp	.+32     	; 0x2af6 <vfprintf+0x356>
    2ad6:	b6 01       	movw	r22, r12
    2ad8:	80 e3       	ldi	r24, 0x30	; 48
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2ae0:	a2 fe       	sbrs	r10, 2
    2ae2:	17 c0       	rjmp	.+46     	; 0x2b12 <vfprintf+0x372>
    2ae4:	a1 fc       	sbrc	r10, 1
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <vfprintf+0x34e>
    2ae8:	88 e7       	ldi	r24, 0x78	; 120
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0x352>
    2aee:	88 e5       	ldi	r24, 0x58	; 88
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	b6 01       	movw	r22, r12
    2af4:	0c c0       	rjmp	.+24     	; 0x2b0e <vfprintf+0x36e>
    2af6:	8a 2d       	mov	r24, r10
    2af8:	86 78       	andi	r24, 0x86	; 134
    2afa:	59 f0       	breq	.+22     	; 0x2b12 <vfprintf+0x372>
    2afc:	a1 fe       	sbrs	r10, 1
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <vfprintf+0x364>
    2b00:	8b e2       	ldi	r24, 0x2B	; 43
    2b02:	01 c0       	rjmp	.+2      	; 0x2b06 <vfprintf+0x366>
    2b04:	80 e2       	ldi	r24, 0x20	; 32
    2b06:	a7 fc       	sbrc	r10, 7
    2b08:	8d e2       	ldi	r24, 0x2D	; 45
    2b0a:	b6 01       	movw	r22, r12
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2b12:	89 14       	cp	r8, r9
    2b14:	38 f4       	brcc	.+14     	; 0x2b24 <vfprintf+0x384>
    2b16:	b6 01       	movw	r22, r12
    2b18:	80 e3       	ldi	r24, 0x30	; 48
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2b20:	9a 94       	dec	r9
    2b22:	f7 cf       	rjmp	.-18     	; 0x2b12 <vfprintf+0x372>
    2b24:	8a 94       	dec	r8
    2b26:	f3 01       	movw	r30, r6
    2b28:	e8 0d       	add	r30, r8
    2b2a:	f1 1d       	adc	r31, r1
    2b2c:	80 81       	ld	r24, Z
    2b2e:	b6 01       	movw	r22, r12
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2b36:	81 10       	cpse	r8, r1
    2b38:	f5 cf       	rjmp	.-22     	; 0x2b24 <vfprintf+0x384>
    2b3a:	22 20       	and	r2, r2
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <vfprintf+0x3a0>
    2b3e:	42 ce       	rjmp	.-892    	; 0x27c4 <vfprintf+0x24>
    2b40:	b6 01       	movw	r22, r12
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <fputc>
    2b4a:	2a 94       	dec	r2
    2b4c:	f6 cf       	rjmp	.-20     	; 0x2b3a <vfprintf+0x39a>
    2b4e:	f6 01       	movw	r30, r12
    2b50:	86 81       	ldd	r24, Z+6	; 0x06
    2b52:	97 81       	ldd	r25, Z+7	; 0x07
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <vfprintf+0x3ba>
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	9f ef       	ldi	r25, 0xFF	; 255
    2b5a:	2b 96       	adiw	r28, 0x0b	; 11
    2b5c:	e2 e1       	ldi	r30, 0x12	; 18
    2b5e:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__>

00002b62 <strnlen_P>:
    2b62:	fc 01       	movw	r30, r24
    2b64:	05 90       	lpm	r0, Z+
    2b66:	61 50       	subi	r22, 0x01	; 1
    2b68:	70 40       	sbci	r23, 0x00	; 0
    2b6a:	01 10       	cpse	r0, r1
    2b6c:	d8 f7       	brcc	.-10     	; 0x2b64 <strnlen_P+0x2>
    2b6e:	80 95       	com	r24
    2b70:	90 95       	com	r25
    2b72:	8e 0f       	add	r24, r30
    2b74:	9f 1f       	adc	r25, r31
    2b76:	08 95       	ret

00002b78 <strnlen>:
    2b78:	fc 01       	movw	r30, r24
    2b7a:	61 50       	subi	r22, 0x01	; 1
    2b7c:	70 40       	sbci	r23, 0x00	; 0
    2b7e:	01 90       	ld	r0, Z+
    2b80:	01 10       	cpse	r0, r1
    2b82:	d8 f7       	brcc	.-10     	; 0x2b7a <strnlen+0x2>
    2b84:	80 95       	com	r24
    2b86:	90 95       	com	r25
    2b88:	8e 0f       	add	r24, r30
    2b8a:	9f 1f       	adc	r25, r31
    2b8c:	08 95       	ret

00002b8e <fputc>:
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	fb 01       	movw	r30, r22
    2b98:	23 81       	ldd	r18, Z+3	; 0x03
    2b9a:	21 fd       	sbrc	r18, 1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <fputc+0x16>
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	9f ef       	ldi	r25, 0xFF	; 255
    2ba2:	2c c0       	rjmp	.+88     	; 0x2bfc <fputc+0x6e>
    2ba4:	22 ff       	sbrs	r18, 2
    2ba6:	16 c0       	rjmp	.+44     	; 0x2bd4 <fputc+0x46>
    2ba8:	46 81       	ldd	r20, Z+6	; 0x06
    2baa:	57 81       	ldd	r21, Z+7	; 0x07
    2bac:	24 81       	ldd	r18, Z+4	; 0x04
    2bae:	35 81       	ldd	r19, Z+5	; 0x05
    2bb0:	42 17       	cp	r20, r18
    2bb2:	53 07       	cpc	r21, r19
    2bb4:	44 f4       	brge	.+16     	; 0x2bc6 <fputc+0x38>
    2bb6:	a0 81       	ld	r26, Z
    2bb8:	b1 81       	ldd	r27, Z+1	; 0x01
    2bba:	9d 01       	movw	r18, r26
    2bbc:	2f 5f       	subi	r18, 0xFF	; 255
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	31 83       	std	Z+1, r19	; 0x01
    2bc2:	20 83       	st	Z, r18
    2bc4:	8c 93       	st	X, r24
    2bc6:	26 81       	ldd	r18, Z+6	; 0x06
    2bc8:	37 81       	ldd	r19, Z+7	; 0x07
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	37 83       	std	Z+7, r19	; 0x07
    2bd0:	26 83       	std	Z+6, r18	; 0x06
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <fputc+0x6e>
    2bd4:	8b 01       	movw	r16, r22
    2bd6:	ec 01       	movw	r28, r24
    2bd8:	fb 01       	movw	r30, r22
    2bda:	00 84       	ldd	r0, Z+8	; 0x08
    2bdc:	f1 85       	ldd	r31, Z+9	; 0x09
    2bde:	e0 2d       	mov	r30, r0
    2be0:	09 95       	icall
    2be2:	89 2b       	or	r24, r25
    2be4:	e1 f6       	brne	.-72     	; 0x2b9e <fputc+0x10>
    2be6:	d8 01       	movw	r26, r16
    2be8:	16 96       	adiw	r26, 0x06	; 6
    2bea:	8d 91       	ld	r24, X+
    2bec:	9c 91       	ld	r25, X
    2bee:	17 97       	sbiw	r26, 0x07	; 7
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	17 96       	adiw	r26, 0x07	; 7
    2bf4:	9c 93       	st	X, r25
    2bf6:	8e 93       	st	-X, r24
    2bf8:	16 97       	sbiw	r26, 0x06	; 6
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <__ultoa_invert>:
    2c06:	fa 01       	movw	r30, r20
    2c08:	aa 27       	eor	r26, r26
    2c0a:	28 30       	cpi	r18, 0x08	; 8
    2c0c:	51 f1       	breq	.+84     	; 0x2c62 <__ultoa_invert+0x5c>
    2c0e:	20 31       	cpi	r18, 0x10	; 16
    2c10:	81 f1       	breq	.+96     	; 0x2c72 <__ultoa_invert+0x6c>
    2c12:	e8 94       	clt
    2c14:	6f 93       	push	r22
    2c16:	6e 7f       	andi	r22, 0xFE	; 254
    2c18:	6e 5f       	subi	r22, 0xFE	; 254
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	af 4f       	sbci	r26, 0xFF	; 255
    2c22:	b1 e0       	ldi	r27, 0x01	; 1
    2c24:	3e d0       	rcall	.+124    	; 0x2ca2 <__ultoa_invert+0x9c>
    2c26:	b4 e0       	ldi	r27, 0x04	; 4
    2c28:	3c d0       	rcall	.+120    	; 0x2ca2 <__ultoa_invert+0x9c>
    2c2a:	67 0f       	add	r22, r23
    2c2c:	78 1f       	adc	r23, r24
    2c2e:	89 1f       	adc	r24, r25
    2c30:	9a 1f       	adc	r25, r26
    2c32:	a1 1d       	adc	r26, r1
    2c34:	68 0f       	add	r22, r24
    2c36:	79 1f       	adc	r23, r25
    2c38:	8a 1f       	adc	r24, r26
    2c3a:	91 1d       	adc	r25, r1
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	6a 0f       	add	r22, r26
    2c40:	71 1d       	adc	r23, r1
    2c42:	81 1d       	adc	r24, r1
    2c44:	91 1d       	adc	r25, r1
    2c46:	a1 1d       	adc	r26, r1
    2c48:	20 d0       	rcall	.+64     	; 0x2c8a <__ultoa_invert+0x84>
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <__ultoa_invert+0x48>
    2c4c:	68 94       	set
    2c4e:	3f 91       	pop	r19
    2c50:	2a e0       	ldi	r18, 0x0A	; 10
    2c52:	26 9f       	mul	r18, r22
    2c54:	11 24       	eor	r1, r1
    2c56:	30 19       	sub	r19, r0
    2c58:	30 5d       	subi	r19, 0xD0	; 208
    2c5a:	31 93       	st	Z+, r19
    2c5c:	de f6       	brtc	.-74     	; 0x2c14 <__ultoa_invert+0xe>
    2c5e:	cf 01       	movw	r24, r30
    2c60:	08 95       	ret
    2c62:	46 2f       	mov	r20, r22
    2c64:	47 70       	andi	r20, 0x07	; 7
    2c66:	40 5d       	subi	r20, 0xD0	; 208
    2c68:	41 93       	st	Z+, r20
    2c6a:	b3 e0       	ldi	r27, 0x03	; 3
    2c6c:	0f d0       	rcall	.+30     	; 0x2c8c <__ultoa_invert+0x86>
    2c6e:	c9 f7       	brne	.-14     	; 0x2c62 <__ultoa_invert+0x5c>
    2c70:	f6 cf       	rjmp	.-20     	; 0x2c5e <__ultoa_invert+0x58>
    2c72:	46 2f       	mov	r20, r22
    2c74:	4f 70       	andi	r20, 0x0F	; 15
    2c76:	40 5d       	subi	r20, 0xD0	; 208
    2c78:	4a 33       	cpi	r20, 0x3A	; 58
    2c7a:	18 f0       	brcs	.+6      	; 0x2c82 <__ultoa_invert+0x7c>
    2c7c:	49 5d       	subi	r20, 0xD9	; 217
    2c7e:	31 fd       	sbrc	r19, 1
    2c80:	40 52       	subi	r20, 0x20	; 32
    2c82:	41 93       	st	Z+, r20
    2c84:	02 d0       	rcall	.+4      	; 0x2c8a <__ultoa_invert+0x84>
    2c86:	a9 f7       	brne	.-22     	; 0x2c72 <__ultoa_invert+0x6c>
    2c88:	ea cf       	rjmp	.-44     	; 0x2c5e <__ultoa_invert+0x58>
    2c8a:	b4 e0       	ldi	r27, 0x04	; 4
    2c8c:	a6 95       	lsr	r26
    2c8e:	97 95       	ror	r25
    2c90:	87 95       	ror	r24
    2c92:	77 95       	ror	r23
    2c94:	67 95       	ror	r22
    2c96:	ba 95       	dec	r27
    2c98:	c9 f7       	brne	.-14     	; 0x2c8c <__ultoa_invert+0x86>
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	61 05       	cpc	r22, r1
    2c9e:	71 05       	cpc	r23, r1
    2ca0:	08 95       	ret
    2ca2:	9b 01       	movw	r18, r22
    2ca4:	ac 01       	movw	r20, r24
    2ca6:	0a 2e       	mov	r0, r26
    2ca8:	06 94       	lsr	r0
    2caa:	57 95       	ror	r21
    2cac:	47 95       	ror	r20
    2cae:	37 95       	ror	r19
    2cb0:	27 95       	ror	r18
    2cb2:	ba 95       	dec	r27
    2cb4:	c9 f7       	brne	.-14     	; 0x2ca8 <__ultoa_invert+0xa2>
    2cb6:	62 0f       	add	r22, r18
    2cb8:	73 1f       	adc	r23, r19
    2cba:	84 1f       	adc	r24, r20
    2cbc:	95 1f       	adc	r25, r21
    2cbe:	a0 1d       	adc	r26, r0
    2cc0:	08 95       	ret

00002cc2 <__prologue_saves__>:
    2cc2:	2f 92       	push	r2
    2cc4:	3f 92       	push	r3
    2cc6:	4f 92       	push	r4
    2cc8:	5f 92       	push	r5
    2cca:	6f 92       	push	r6
    2ccc:	7f 92       	push	r7
    2cce:	8f 92       	push	r8
    2cd0:	9f 92       	push	r9
    2cd2:	af 92       	push	r10
    2cd4:	bf 92       	push	r11
    2cd6:	cf 92       	push	r12
    2cd8:	df 92       	push	r13
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	ca 1b       	sub	r28, r26
    2cec:	db 0b       	sbc	r29, r27
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	09 94       	ijmp

00002cfa <__epilogue_restores__>:
    2cfa:	2a 88       	ldd	r2, Y+18	; 0x12
    2cfc:	39 88       	ldd	r3, Y+17	; 0x11
    2cfe:	48 88       	ldd	r4, Y+16	; 0x10
    2d00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d10:	df 80       	ldd	r13, Y+7	; 0x07
    2d12:	ee 80       	ldd	r14, Y+6	; 0x06
    2d14:	fd 80       	ldd	r15, Y+5	; 0x05
    2d16:	0c 81       	ldd	r16, Y+4	; 0x04
    2d18:	1b 81       	ldd	r17, Y+3	; 0x03
    2d1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1e:	ce 0f       	add	r28, r30
    2d20:	d1 1d       	adc	r29, r1
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	ed 01       	movw	r28, r26
    2d2e:	08 95       	ret

00002d30 <__do_global_dtors>:
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	c3 e6       	ldi	r28, 0x63	; 99
    2d34:	d0 e0       	ldi	r29, 0x00	; 0
    2d36:	04 c0       	rjmp	.+8      	; 0x2d40 <__do_global_dtors+0x10>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	0e 94 b1 11 	call	0x2362	; 0x2362 <__tablejump2__>
    2d3e:	21 96       	adiw	r28, 0x01	; 1
    2d40:	c4 36       	cpi	r28, 0x64	; 100
    2d42:	d1 07       	cpc	r29, r17
    2d44:	c9 f7       	brne	.-14     	; 0x2d38 <__do_global_dtors+0x8>
    2d46:	f8 94       	cli

00002d48 <__stop_program>:
    2d48:	ff cf       	rjmp	.-2      	; 0x2d48 <__stop_program>
