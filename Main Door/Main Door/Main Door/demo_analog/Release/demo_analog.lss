
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00002d1c  00002db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  008001b8  008001b8  00002e68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d3d8  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000236d  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e8a  00000000  00000000  00012e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018b8  00000000  00000000  00016c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f39  00000000  00000000  00018554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009208  00000000  00000000  0001b48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00024695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_1>
       8:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_2>
       c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__vector_3>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_5>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__vector_24>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	c0 05       	cpc	r28, r0
      c4:	6a 0f       	add	r22, r26

000000c6 <__ctors_end>:
      c6:	d0 05       	cpc	r29, r0

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ec e1       	ldi	r30, 0x1C	; 28
      dc:	fd e2       	ldi	r31, 0x2D	; 45
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a8 3b       	cpi	r26, 0xB8	; 184
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	a8 eb       	ldi	r26, 0xB8	; 184
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	aa 3b       	cpi	r26, 0xBA	; 186
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 9a 11 	call	0x2334	; 0x2334 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <main>
     114:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN7Display8print2lnE6StringS0_>:
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
     12a:	7b 01       	movw	r14, r22
     12c:	8a 01       	movw	r16, r20
     12e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN21Adafruit_RGBLCDShield5clearEv>
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	ce 01       	movw	r24, r28
     138:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     13c:	b7 01       	movw	r22, r14
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN5Print5printERK6String>
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	ce 01       	movw	r24, r28
     14a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     14e:	b8 01       	movw	r22, r16
     150:	ce 01       	movw	r24, r28
     152:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN5Print5printERK6String>
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000016c <_ZN7Display11refreshLineEv>:
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	2c 97       	sbiw	r28, 0x0c	; 12
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	8c 01       	movw	r16, r24
     186:	63 e4       	ldi	r22, 0x43	; 67
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	ce 01       	movw	r24, r28
     18c:	07 96       	adiw	r24, 0x07	; 7
     18e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     192:	f8 01       	movw	r30, r16
     194:	82 a5       	ldd	r24, Z+42	; 0x2a
     196:	93 a5       	ldd	r25, Z+43	; 0x2b
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	19 f0       	breq	.+6      	; 0x1a2 <_ZN7Display11refreshLineEv+0x36>
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	41 f0       	breq	.+16     	; 0x1b0 <_ZN7Display11refreshLineEv+0x44>
     1a0:	0e c0       	rjmp	.+28     	; 0x1be <_ZN7Display11refreshLineEv+0x52>
     1a2:	b8 01       	movw	r22, r16
     1a4:	60 5d       	subi	r22, 0xD0	; 208
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	ce 01       	movw	r24, r28
     1aa:	07 96       	adiw	r24, 0x07	; 7
     1ac:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN6StringaSERKS_>
     1b0:	b8 01       	movw	r22, r16
     1b2:	6a 5c       	subi	r22, 0xCA	; 202
     1b4:	7f 4f       	sbci	r23, 0xFF	; 255
     1b6:	ce 01       	movw	r24, r28
     1b8:	07 96       	adiw	r24, 0x07	; 7
     1ba:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN6StringaSERKS_>
     1be:	f8 01       	movw	r30, r16
     1c0:	46 a5       	ldd	r20, Z+46	; 0x2e
     1c2:	57 a5       	ldd	r21, Z+47	; 0x2f
     1c4:	84 a5       	ldd	r24, Z+44	; 0x2c
     1c6:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c8:	48 17       	cp	r20, r24
     1ca:	59 07       	cpc	r21, r25
     1cc:	14 f4       	brge	.+4      	; 0x1d2 <_ZN7Display11refreshLineEv+0x66>
     1ce:	15 a6       	std	Z+45, r1	; 0x2d
     1d0:	14 a6       	std	Z+44, r1	; 0x2c
     1d2:	f8 01       	movw	r30, r16
     1d4:	24 a5       	ldd	r18, Z+44	; 0x2c
     1d6:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d8:	42 17       	cp	r20, r18
     1da:	53 07       	cpc	r21, r19
     1dc:	41 f4       	brne	.+16     	; 0x1ee <_ZN7Display11refreshLineEv+0x82>
     1de:	2b 85       	ldd	r18, Y+11	; 0x0b
     1e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	44 0f       	add	r20, r20
     1e6:	55 1f       	adc	r21, r21
     1e8:	9a 95       	dec	r25
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_ZN7Display11refreshLineEv+0x78>
     1ec:	0a c0       	rjmp	.+20     	; 0x202 <_ZN7Display11refreshLineEv+0x96>
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZN7Display11refreshLineEv+0x88>
     1fc:	a9 01       	movw	r20, r18
     1fe:	40 51       	subi	r20, 0x10	; 16
     200:	51 09       	sbc	r21, r1
     202:	be 01       	movw	r22, r28
     204:	69 5f       	subi	r22, 0xF9	; 249
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZNK6String9substringEjj>
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	ce 01       	movw	r24, r28
     218:	07 96       	adiw	r24, 0x07	; 7
     21a:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN6StringaSEOS_>
     21e:	ce 01       	movw	r24, r28
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     226:	f8 01       	movw	r30, r16
     228:	42 a5       	ldd	r20, Z+42	; 0x2a
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	c8 01       	movw	r24, r16
     22e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     232:	be 01       	movw	r22, r28
     234:	69 5f       	subi	r22, 0xF9	; 249
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN5Print5printERK6String>
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	c8 01       	movw	r24, r16
     244:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     248:	f8 01       	movw	r30, r16
     24a:	04 a5       	ldd	r16, Z+44	; 0x2c
     24c:	15 a5       	ldd	r17, Z+45	; 0x2d
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	ce 01       	movw	r24, r28
     254:	07 96       	adiw	r24, 0x07	; 7
     256:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     25a:	c8 01       	movw	r24, r16
     25c:	2c 96       	adiw	r28, 0x0c	; 12
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     272:	4f 92       	push	r4
     274:	5f 92       	push	r5
     276:	6f 92       	push	r6
     278:	7f 92       	push	r7
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	2c 97       	sbiw	r28, 0x0c	; 12
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	4c 01       	movw	r8, r24
     2a4:	3b 01       	movw	r6, r22
     2a6:	2a 01       	movw	r4, r20
     2a8:	b2 2e       	mov	r11, r18
     2aa:	c0 96       	adiw	r24, 0x30	; 48
     2ac:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN6StringaSERKS_>
     2b0:	b2 01       	movw	r22, r4
     2b2:	c4 01       	movw	r24, r8
     2b4:	c6 96       	adiw	r24, 0x36	; 54
     2b6:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN6StringaSERKS_>
     2ba:	f4 01       	movw	r30, r8
     2bc:	f7 a6       	std	Z+47, r15	; 0x2f
     2be:	e6 a6       	std	Z+46, r14	; 0x2e
     2c0:	d3 a6       	std	Z+43, r13	; 0x2b
     2c2:	c2 a6       	std	Z+42, r12	; 0x2a
     2c4:	f8 01       	movw	r30, r16
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	f4 01       	movw	r30, r8
     2cc:	97 8f       	std	Z+31, r25	; 0x1f
     2ce:	86 8f       	std	Z+30, r24	; 0x1e
     2d0:	f8 01       	movw	r30, r16
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	93 81       	ldd	r25, Z+3	; 0x03
     2d6:	f4 01       	movw	r30, r8
     2d8:	91 a3       	std	Z+33, r25	; 0x21
     2da:	80 a3       	std	Z+32, r24	; 0x20
     2dc:	f8 01       	movw	r30, r16
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	95 81       	ldd	r25, Z+5	; 0x05
     2e2:	f4 01       	movw	r30, r8
     2e4:	93 a3       	std	Z+35, r25	; 0x23
     2e6:	82 a3       	std	Z+34, r24	; 0x22
     2e8:	f8 01       	movw	r30, r16
     2ea:	86 81       	ldd	r24, Z+6	; 0x06
     2ec:	97 81       	ldd	r25, Z+7	; 0x07
     2ee:	f4 01       	movw	r30, r8
     2f0:	95 a3       	std	Z+37, r25	; 0x25
     2f2:	84 a3       	std	Z+36, r24	; 0x24
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 85       	ldd	r24, Z+8	; 0x08
     2f8:	91 85       	ldd	r25, Z+9	; 0x09
     2fa:	f4 01       	movw	r30, r8
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	86 a3       	std	Z+38, r24	; 0x26
     300:	6b 2d       	mov	r22, r11
     302:	c4 01       	movw	r24, r8
     304:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     308:	f4 01       	movw	r30, r8
     30a:	a4 ae       	std	Z+60, r10	; 0x3c
     30c:	a1 10       	cpse	r10, r1
     30e:	1e c0       	rjmp	.+60     	; 0x34c <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     310:	15 a6       	std	Z+45, r1	; 0x2d
     312:	14 a6       	std	Z+44, r1	; 0x2c
     314:	b2 01       	movw	r22, r4
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1ERKS_>
     31e:	b3 01       	movw	r22, r6
     320:	ce 01       	movw	r24, r28
     322:	07 96       	adiw	r24, 0x07	; 7
     324:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1ERKS_>
     328:	ae 01       	movw	r20, r28
     32a:	4f 5f       	subi	r20, 0xFF	; 255
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	be 01       	movw	r22, r28
     330:	69 5f       	subi	r22, 0xF9	; 249
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	c4 01       	movw	r24, r8
     336:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7Display8print2lnE6StringS0_>
     33a:	ce 01       	movw	r24, r28
     33c:	07 96       	adiw	r24, 0x07	; 7
     33e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     34a:	06 c0       	rjmp	.+12     	; 0x358 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     34c:	c4 01       	movw	r24, r8
     34e:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     352:	f4 01       	movw	r30, r8
     354:	95 a7       	std	Z+45, r25	; 0x2d
     356:	84 a7       	std	Z+44, r24	; 0x2c
     358:	2c 96       	adiw	r28, 0x0c	; 12
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	7f 90       	pop	r7
     37e:	6f 90       	pop	r6
     380:	5f 90       	pop	r5
     382:	4f 90       	pop	r4
     384:	08 95       	ret

00000386 <_ZN7Display13selectDisplayEibPcS0_>:
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	ac 97       	sbiw	r28, 0x2c	; 44
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	4c 01       	movw	r8, r24
     3ae:	c8 01       	movw	r24, r16
     3b0:	44 23       	and	r20, r20
     3b2:	21 f0       	breq	.+8      	; 0x3bc <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3b4:	c4 01       	movw	r24, r8
     3b6:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     3ba:	9e c0       	rjmp	.+316    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5f       	subi	r16, 0xFF	; 255
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	62 30       	cpi	r22, 0x02	; 2
     3c4:	71 05       	cpc	r23, r1
     3c6:	59 f1       	breq	.+86     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3c8:	ec f4       	brge	.+58     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ca:	61 15       	cp	r22, r1
     3cc:	71 05       	cpc	r23, r1
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <_ZN7Display13selectDisplayEibPcS0_+0x4c>
     3d0:	59 c0       	rjmp	.+178    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     3d2:	61 30       	cpi	r22, 0x01	; 1
     3d4:	71 05       	cpc	r23, r1
     3d6:	09 f0       	breq	.+2      	; 0x3da <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d8:	55 c0       	rjmp	.+170    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     3da:	1a 82       	std	Y+2, r1	; 0x02
     3dc:	19 82       	std	Y+1, r1	; 0x01
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9e 83       	std	Y+6, r25	; 0x06
     3e8:	8d 83       	std	Y+5, r24	; 0x05
     3ea:	98 87       	std	Y+8, r25	; 0x08
     3ec:	8f 83       	std	Y+7, r24	; 0x07
     3ee:	9a 87       	std	Y+10, r25	; 0x0a
     3f0:	89 87       	std	Y+9, r24	; 0x09
     3f2:	69 e3       	ldi	r22, 0x39	; 57
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	ce 01       	movw	r24, r28
     3f8:	81 96       	adiw	r24, 0x21	; 33
     3fa:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     3fe:	64 e4       	ldi	r22, 0x44	; 68
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	21 c0       	rjmp	.+66     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     404:	63 30       	cpi	r22, 0x03	; 3
     406:	71 05       	cpc	r23, r1
     408:	59 f1       	breq	.+86     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     40a:	64 30       	cpi	r22, 0x04	; 4
     40c:	71 05       	cpc	r23, r1
     40e:	d1 f5       	brne	.+116    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	3f 93       	push	r19
     416:	2f 93       	push	r18
     418:	8c e7       	ldi	r24, 0x7C	; 124
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	27 c0       	rjmp	.+78     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     41e:	1a 82       	std	Y+2, r1	; 0x02
     420:	19 82       	std	Y+1, r1	; 0x01
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	9f ef       	ldi	r25, 0xFF	; 255
     426:	9c 83       	std	Y+4, r25	; 0x04
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	8d 83       	std	Y+5, r24	; 0x05
     42e:	98 87       	std	Y+8, r25	; 0x08
     430:	8f 83       	std	Y+7, r24	; 0x07
     432:	9a 87       	std	Y+10, r25	; 0x0a
     434:	89 87       	std	Y+9, r24	; 0x09
     436:	69 e3       	ldi	r22, 0x39	; 57
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	ce 01       	movw	r24, r28
     43c:	81 96       	adiw	r24, 0x21	; 33
     43e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     442:	61 e5       	ldi	r22, 0x51	; 81
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	ce 01       	movw	r24, r28
     448:	87 96       	adiw	r24, 0x27	; 39
     44a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     44e:	a1 2c       	mov	r10, r1
     450:	cc 24       	eor	r12, r12
     452:	ca 94       	dec	r12
     454:	dc 2c       	mov	r13, r12
     456:	e1 2c       	mov	r14, r1
     458:	f1 2c       	mov	r15, r1
     45a:	23 e0       	ldi	r18, 0x03	; 3
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	3b c0       	rjmp	.+118    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	3f 93       	push	r19
     466:	2f 93       	push	r18
     468:	8e e5       	ldi	r24, 0x5E	; 94
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	1f 93       	push	r17
     472:	0f 93       	push	r16
     474:	0e 94 97 13 	call	0x272e	; 0x272e <sprintf>
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	3a c0       	rjmp	.+116    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	9f ef       	ldi	r25, 0xFF	; 255
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9c 83       	std	Y+4, r25	; 0x04
     492:	8b 83       	std	Y+3, r24	; 0x03
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9e 83       	std	Y+6, r25	; 0x06
     49a:	8d 83       	std	Y+5, r24	; 0x05
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	98 87       	std	Y+8, r25	; 0x08
     4a2:	8f 83       	std	Y+7, r24	; 0x07
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9a 87       	std	Y+10, r25	; 0x0a
     4aa:	89 87       	std	Y+9, r24	; 0x09
     4ac:	6f e0       	ldi	r22, 0x0F	; 15
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	ce 01       	movw	r24, r28
     4b2:	81 96       	adiw	r24, 0x21	; 33
     4b4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     4b8:	6f e2       	ldi	r22, 0x2F	; 47
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	ce 01       	movw	r24, r28
     4be:	87 96       	adiw	r24, 0x27	; 39
     4c0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     4c4:	a1 2c       	mov	r10, r1
     4c6:	cc 24       	eor	r12, r12
     4c8:	c3 94       	inc	r12
     4ca:	d1 2c       	mov	r13, r1
     4cc:	ee 24       	eor	r14, r14
     4ce:	e3 94       	inc	r14
     4d0:	f1 2c       	mov	r15, r1
     4d2:	22 e0       	ldi	r18, 0x02	; 2
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	ae 01       	movw	r20, r28
     4d8:	4f 5d       	subi	r20, 0xDF	; 223
     4da:	5f 4f       	sbci	r21, 0xFF	; 255
     4dc:	be 01       	movw	r22, r28
     4de:	69 5d       	subi	r22, 0xD9	; 217
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	c4 01       	movw	r24, r8
     4e4:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     4e8:	ce 01       	movw	r24, r28
     4ea:	87 96       	adiw	r24, 0x27	; 39
     4ec:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     4f0:	ce 01       	movw	r24, r28
     4f2:	81 96       	adiw	r24, 0x21	; 33
     4f4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     4f8:	ac 96       	adiw	r28, 0x2c	; 44
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	08 95       	ret

0000051c <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	fb 01       	movw	r30, r22
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	93 81       	ldd	r25, Z+3	; 0x03
     52c:	9b 83       	std	Y+3, r25	; 0x03
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	8e e9       	ldi	r24, 0x9E	; 158
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	99 83       	std	Y+1, r25	; 0x01
     536:	88 83       	st	Y, r24
     538:	84 81       	ldd	r24, Z+4	; 0x04
     53a:	8c 83       	std	Y+4, r24	; 0x04
     53c:	85 81       	ldd	r24, Z+5	; 0x05
     53e:	8d 83       	std	Y+5, r24	; 0x05
     540:	86 81       	ldd	r24, Z+6	; 0x06
     542:	8e 83       	std	Y+6, r24	; 0x06
     544:	88 e0       	ldi	r24, 0x08	; 8
     546:	37 96       	adiw	r30, 0x07	; 7
     548:	de 01       	movw	r26, r28
     54a:	17 96       	adiw	r26, 0x07	; 7
     54c:	01 90       	ld	r0, Z+
     54e:	0d 92       	st	X+, r0
     550:	8a 95       	dec	r24
     552:	e1 f7       	brne	.-8      	; 0x54c <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	fb 01       	movw	r30, r22
     558:	3f 96       	adiw	r30, 0x0f	; 15
     55a:	de 01       	movw	r26, r28
     55c:	1f 96       	adiw	r26, 0x0f	; 15
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     566:	fb 01       	movw	r30, r22
     568:	84 89       	ldd	r24, Z+20	; 0x14
     56a:	8c 8b       	std	Y+20, r24	; 0x14
     56c:	85 89       	ldd	r24, Z+21	; 0x15
     56e:	8d 8b       	std	Y+21, r24	; 0x15
     570:	86 89       	ldd	r24, Z+22	; 0x16
     572:	8e 8b       	std	Y+22, r24	; 0x16
     574:	87 89       	ldd	r24, Z+23	; 0x17
     576:	8f 8b       	std	Y+23, r24	; 0x17
     578:	80 8d       	ldd	r24, Z+24	; 0x18
     57a:	88 8f       	std	Y+24, r24	; 0x18
     57c:	81 8d       	ldd	r24, Z+25	; 0x19
     57e:	89 8f       	std	Y+25, r24	; 0x19
     580:	82 8d       	ldd	r24, Z+26	; 0x1a
     582:	8a 8f       	std	Y+26, r24	; 0x1a
     584:	83 8d       	ldd	r24, Z+27	; 0x1b
     586:	8b 8f       	std	Y+27, r24	; 0x1b
     588:	63 e4       	ldi	r22, 0x43	; 67
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	ce 01       	movw	r24, r28
     58e:	c0 96       	adiw	r24, 0x30	; 48
     590:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     594:	63 e4       	ldi	r22, 0x43	; 67
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	ce 01       	movw	r24, r28
     59a:	c6 96       	adiw	r24, 0x36	; 54
     59c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	42 e0       	ldi	r20, 0x02	; 2
     5a4:	60 e1       	ldi	r22, 0x10	; 16
     5a6:	ce 01       	movw	r24, r28
     5a8:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN21Adafruit_RGBLCDShield5clearEv>
     5b2:	03 e4       	ldi	r16, 0x43	; 67
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	98 01       	movw	r18, r16
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	ce 01       	movw	r24, r28
     5c0:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <_ZN7Display21UpdateMenuFromButtonsEm>:
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	6a 01       	movw	r12, r20
     5e2:	7b 01       	movw	r14, r22
     5e4:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     5e8:	80 ff       	sbrs	r24, 0
     5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <_ZN7Display21UpdateMenuFromButtonsEm+0x2a>
     5ec:	6e 8d       	ldd	r22, Y+30	; 0x1e
     5ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
     5f0:	6f 3f       	cpi	r22, 0xFF	; 255
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	72 07       	cpc	r23, r18
     5f6:	01 f5       	brne	.+64     	; 0x638 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     5f8:	83 ff       	sbrs	r24, 3
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <_ZN7Display21UpdateMenuFromButtonsEm+0x3a>
     5fc:	68 a1       	ldd	r22, Y+32	; 0x20
     5fe:	79 a1       	ldd	r23, Y+33	; 0x21
     600:	6f 3f       	cpi	r22, 0xFF	; 255
     602:	9f ef       	ldi	r25, 0xFF	; 255
     604:	79 07       	cpc	r23, r25
     606:	c1 f4       	brne	.+48     	; 0x638 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     608:	82 ff       	sbrs	r24, 2
     60a:	06 c0       	rjmp	.+12     	; 0x618 <_ZN7Display21UpdateMenuFromButtonsEm+0x4a>
     60c:	6a a1       	ldd	r22, Y+34	; 0x22
     60e:	7b a1       	ldd	r23, Y+35	; 0x23
     610:	6f 3f       	cpi	r22, 0xFF	; 255
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	72 07       	cpc	r23, r18
     616:	81 f4       	brne	.+32     	; 0x638 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     618:	84 ff       	sbrs	r24, 4
     61a:	06 c0       	rjmp	.+12     	; 0x628 <_ZN7Display21UpdateMenuFromButtonsEm+0x5a>
     61c:	6c a1       	ldd	r22, Y+36	; 0x24
     61e:	7d a1       	ldd	r23, Y+37	; 0x25
     620:	6f 3f       	cpi	r22, 0xFF	; 255
     622:	9f ef       	ldi	r25, 0xFF	; 255
     624:	79 07       	cpc	r23, r25
     626:	41 f4       	brne	.+16     	; 0x638 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     628:	81 ff       	sbrs	r24, 1
     62a:	0e c0       	rjmp	.+28     	; 0x648 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     62c:	6e a1       	ldd	r22, Y+38	; 0x26
     62e:	7f a1       	ldd	r23, Y+39	; 0x27
     630:	6f 3f       	cpi	r22, 0xFF	; 255
     632:	2f ef       	ldi	r18, 0xFF	; 255
     634:	72 07       	cpc	r23, r18
     636:	41 f0       	breq	.+16     	; 0x648 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     638:	03 e4       	ldi	r16, 0x43	; 67
     63a:	11 e0       	ldi	r17, 0x01	; 1
     63c:	98 01       	movw	r18, r16
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	ce 01       	movw	r24, r28
     642:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN7Display13selectDisplayEibPcS0_>
     646:	10 c0       	rjmp	.+32     	; 0x668 <_ZN7Display21UpdateMenuFromButtonsEm+0x9a>
     648:	0e 94 70 06 	call	0xce0	; 0xce0 <millis>
     64c:	28 eb       	ldi	r18, 0xB8	; 184
     64e:	c2 0e       	add	r12, r18
     650:	2b e0       	ldi	r18, 0x0B	; 11
     652:	d2 1e       	adc	r13, r18
     654:	e1 1c       	adc	r14, r1
     656:	f1 1c       	adc	r15, r1
     658:	c6 16       	cp	r12, r22
     65a:	d7 06       	cpc	r13, r23
     65c:	e8 06       	cpc	r14, r24
     65e:	f9 06       	cpc	r15, r25
     660:	28 f0       	brcs	.+10     	; 0x66c <_ZN7Display21UpdateMenuFromButtonsEm+0x9e>
     662:	ce 01       	movw	r24, r28
     664:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7Display11refreshLineEv>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	01 c0       	rjmp	.+2      	; 0x66e <_ZN7Display21UpdateMenuFromButtonsEm+0xa0>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

00000680 <_ZN6Safety12disableMotorEbi.part.0>:
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	8a e0       	ldi	r24, 0x0A	; 10
     692:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	8a e0       	ldi	r24, 0x0A	; 10
     6a2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     6a6:	be 01       	movw	r22, r28
     6a8:	dd 0f       	add	r29, r29
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <delay>

000006b6 <_ZN6SafetyC1Ev>:
     6b6:	08 95       	ret

000006b8 <_ZN6Safety12deviceStatusEi>:
     6b8:	62 30       	cpi	r22, 0x02	; 2
     6ba:	71 05       	cpc	r23, r1
     6bc:	b1 f0       	breq	.+44     	; 0x6ea <_ZN6Safety12deviceStatusEi+0x32>
     6be:	44 f4       	brge	.+16     	; 0x6d0 <_ZN6Safety12deviceStatusEi+0x18>
     6c0:	61 15       	cp	r22, r1
     6c2:	71 05       	cpc	r23, r1
     6c4:	81 f0       	breq	.+32     	; 0x6e6 <_ZN6Safety12deviceStatusEi+0x2e>
     6c6:	61 30       	cpi	r22, 0x01	; 1
     6c8:	71 05       	cpc	r23, r1
     6ca:	b1 f4       	brne	.+44     	; 0x6f8 <_ZN6Safety12deviceStatusEi+0x40>
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	12 c0       	rjmp	.+36     	; 0x6f4 <_ZN6Safety12deviceStatusEi+0x3c>
     6d0:	64 30       	cpi	r22, 0x04	; 4
     6d2:	71 05       	cpc	r23, r1
     6d4:	71 f0       	breq	.+28     	; 0x6f2 <_ZN6Safety12deviceStatusEi+0x3a>
     6d6:	5c f0       	brlt	.+22     	; 0x6ee <_ZN6Safety12deviceStatusEi+0x36>
     6d8:	65 30       	cpi	r22, 0x05	; 5
     6da:	71 05       	cpc	r23, r1
     6dc:	69 f4       	brne	.+26     	; 0x6f8 <_ZN6Safety12deviceStatusEi+0x40>
     6de:	fc 01       	movw	r30, r24
     6e0:	82 85       	ldd	r24, Z+10	; 0x0a
     6e2:	93 85       	ldd	r25, Z+11	; 0x0b
     6e4:	08 95       	ret
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <_ZN6Safety12deviceStatusEi+0x3c>
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <_ZN6Safety12deviceStatusEi+0x3c>
     6ee:	8c e0       	ldi	r24, 0x0C	; 12
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <_ZN6Safety12deviceStatusEi+0x3c>
     6f2:	8d e0       	ldi	r24, 0x0D	; 13
     6f4:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <digitalRead>
     6f8:	08 95       	ret

000006fa <_ZN6Safety12cntEventIncrEi>:
     6fa:	fc 01       	movw	r30, r24
     6fc:	61 15       	cp	r22, r1
     6fe:	71 05       	cpc	r23, r1
     700:	21 f0       	breq	.+8      	; 0x70a <_ZN6Safety12cntEventIncrEi+0x10>
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	71 05       	cpc	r23, r1
     706:	21 f0       	breq	.+8      	; 0x710 <_ZN6Safety12cntEventIncrEi+0x16>
     708:	08 95       	ret
     70a:	15 86       	std	Z+13, r1	; 0x0d
     70c:	14 86       	std	Z+12, r1	; 0x0c
     70e:	08 95       	ret
     710:	84 85       	ldd	r24, Z+12	; 0x0c
     712:	95 85       	ldd	r25, Z+13	; 0x0d
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	95 87       	std	Z+13, r25	; 0x0d
     718:	84 87       	std	Z+12, r24	; 0x0c
     71a:	08 95       	ret

0000071c <_ZN6Safety12inEventCountEv>:
     71c:	fc 01       	movw	r30, r24
     71e:	84 85       	ldd	r24, Z+12	; 0x0c
     720:	95 85       	ldd	r25, Z+13	; 0x0d
     722:	08 95       	ret

00000724 <_ZN6Safety14emergencyStallEv>:
     724:	88 ee       	ldi	r24, 0xE8	; 232
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	0e 94 40 03 	call	0x680	; 0x680 <_ZN6Safety12disableMotorEbi.part.0>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0c 94 40 03 	jmp	0x680	; 0x680 <_ZN6Safety12disableMotorEbi.part.0>

00000734 <_ZN6Safety12disableMotorEbi>:
     734:	ca 01       	movw	r24, r20
     736:	61 11       	cpse	r22, r1
     738:	0c 94 40 03 	jmp	0x680	; 0x680 <_ZN6Safety12disableMotorEbi.part.0>
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	89 e0       	ldi	r24, 0x09	; 9
     748:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <pinMode>

0000074c <_ZN6Safety8setRelayEi>:
     74c:	61 15       	cp	r22, r1
     74e:	71 05       	cpc	r23, r1
     750:	71 f0       	breq	.+28     	; 0x76e <_ZN6Safety8setRelayEi+0x22>
     752:	61 30       	cpi	r22, 0x01	; 1
     754:	71 05       	cpc	r23, r1
     756:	99 f0       	breq	.+38     	; 0x77e <_ZN6Safety8setRelayEi+0x32>
     758:	6f 3f       	cpi	r22, 0xFF	; 255
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	c1 f4       	brne	.+48     	; 0x78e <_ZN6Safety8setRelayEi+0x42>
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	89 e0       	ldi	r24, 0x09	; 9
     762:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	8a e0       	ldi	r24, 0x0A	; 10
     76a:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	89 e0       	ldi	r24, 0x09	; 9
     772:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	8a e0       	ldi	r24, 0x0A	; 10
     78a:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <digitalWrite>
     78e:	08 95       	ret

00000790 <_ZN6Safety9setDeviceEii.part.1>:
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
     79a:	8b 01       	movw	r16, r22
     79c:	7b 87       	std	Y+11, r23	; 0x0b
     79e:	6a 87       	std	Y+10, r22	; 0x0a
     7a0:	67 2b       	or	r22, r23
     7a2:	29 f4       	brne	.+10     	; 0x7ae <_ZN6Safety9setDeviceEii.part.1+0x1e>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 40 03 	call	0x680	; 0x680 <_ZN6Safety12disableMotorEbi.part.0>
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <_ZN6Safety9setDeviceEii.part.1+0x28>
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN6Safety12disableMotorEbi>
     7b8:	b8 01       	movw	r22, r16
     7ba:	ce 01       	movw	r24, r28
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_ZN6Safety8setRelayEi>

000007c8 <_ZN6Safety9setDeviceEii>:
     7c8:	fc 01       	movw	r30, r24
     7ca:	62 30       	cpi	r22, 0x02	; 2
     7cc:	71 05       	cpc	r23, r1
     7ce:	b1 f0       	breq	.+44     	; 0x7fc <_ZN6Safety9setDeviceEii+0x34>
     7d0:	3c f4       	brge	.+14     	; 0x7e0 <_ZN6Safety9setDeviceEii+0x18>
     7d2:	61 15       	cp	r22, r1
     7d4:	71 05       	cpc	r23, r1
     7d6:	61 f0       	breq	.+24     	; 0x7f0 <_ZN6Safety9setDeviceEii+0x28>
     7d8:	61 30       	cpi	r22, 0x01	; 1
     7da:	71 05       	cpc	r23, r1
     7dc:	61 f0       	breq	.+24     	; 0x7f6 <_ZN6Safety9setDeviceEii+0x2e>
     7de:	08 95       	ret
     7e0:	64 30       	cpi	r22, 0x04	; 4
     7e2:	71 05       	cpc	r23, r1
     7e4:	89 f0       	breq	.+34     	; 0x808 <_ZN6Safety9setDeviceEii+0x40>
     7e6:	6c f0       	brlt	.+26     	; 0x802 <_ZN6Safety9setDeviceEii+0x3a>
     7e8:	65 30       	cpi	r22, 0x05	; 5
     7ea:	71 05       	cpc	r23, r1
     7ec:	81 f0       	breq	.+32     	; 0x80e <_ZN6Safety9setDeviceEii+0x46>
     7ee:	08 95       	ret
     7f0:	53 83       	std	Z+3, r21	; 0x03
     7f2:	42 83       	std	Z+2, r20	; 0x02
     7f4:	08 95       	ret
     7f6:	55 83       	std	Z+5, r21	; 0x05
     7f8:	44 83       	std	Z+4, r20	; 0x04
     7fa:	08 95       	ret
     7fc:	51 83       	std	Z+1, r21	; 0x01
     7fe:	40 83       	st	Z, r20
     800:	08 95       	ret
     802:	57 83       	std	Z+7, r21	; 0x07
     804:	46 83       	std	Z+6, r20	; 0x06
     806:	08 95       	ret
     808:	51 87       	std	Z+9, r21	; 0x09
     80a:	40 87       	std	Z+8, r20	; 0x08
     80c:	08 95       	ret
     80e:	ba 01       	movw	r22, r20
     810:	0c 94 c8 03 	jmp	0x790	; 0x790 <_ZN6Safety9setDeviceEii.part.1>

00000814 <_ZN6Safety13emergencyOpenEv>:
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN6Safety9setDeviceEii.part.1>
     824:	0e 94 70 06 	call	0xce0	; 0xce0 <millis>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalRead>
     832:	89 2b       	or	r24, r25
     834:	39 f4       	brne	.+14     	; 0x844 <_ZN6Safety13emergencyOpenEv+0x30>
     836:	62 e3       	ldi	r22, 0x32	; 50
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 a1 06 	call	0xd42	; 0xd42 <delay>
     842:	f4 cf       	rjmp	.-24     	; 0x82c <_ZN6Safety13emergencyOpenEv+0x18>
     844:	0e 94 70 06 	call	0xce0	; 0xce0 <millis>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	8c 19       	sub	r24, r12
     84e:	9d 09       	sbc	r25, r13
     850:	ae 09       	sbc	r26, r14
     852:	bf 09       	sbc	r27, r15
     854:	88 38       	cpi	r24, 0x88	; 136
     856:	93 41       	sbci	r25, 0x13	; 19
     858:	a1 05       	cpc	r26, r1
     85a:	b1 05       	cpc	r27, r1
     85c:	60 f3       	brcs	.-40     	; 0x836 <_ZN6Safety13emergencyOpenEv+0x22>
     85e:	88 eb       	ldi	r24, 0xB8	; 184
     860:	9b e0       	ldi	r25, 0x0B	; 11
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	0c 94 40 03 	jmp	0x680	; 0x680 <_ZN6Safety12disableMotorEbi.part.0>

0000086e <setup>:
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	6c 97       	sbiw	r28, 0x1c	; 28
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	80 ec       	ldi	r24, 0xC0	; 192
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	fc 01       	movw	r30, r24
     88c:	22 81       	ldd	r18, Z+2	; 0x02
     88e:	33 81       	ldd	r19, Z+3	; 0x03
     890:	3c 83       	std	Y+4, r19	; 0x04
     892:	2b 83       	std	Y+3, r18	; 0x03
     894:	2e e9       	ldi	r18, 0x9E	; 158
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	3a 83       	std	Y+2, r19	; 0x02
     89a:	29 83       	std	Y+1, r18	; 0x01
     89c:	24 81       	ldd	r18, Z+4	; 0x04
     89e:	2d 83       	std	Y+5, r18	; 0x05
     8a0:	25 81       	ldd	r18, Z+5	; 0x05
     8a2:	2e 83       	std	Y+6, r18	; 0x06
     8a4:	26 81       	ldd	r18, Z+6	; 0x06
     8a6:	2f 83       	std	Y+7, r18	; 0x07
     8a8:	28 e0       	ldi	r18, 0x08	; 8
     8aa:	e7 ec       	ldi	r30, 0xC7	; 199
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
     8ae:	de 01       	movw	r26, r28
     8b0:	18 96       	adiw	r26, 0x08	; 8
     8b2:	01 90       	ld	r0, Z+
     8b4:	0d 92       	st	X+, r0
     8b6:	2a 95       	dec	r18
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <setup+0x44>
     8ba:	25 e0       	ldi	r18, 0x05	; 5
     8bc:	ef ec       	ldi	r30, 0xCF	; 207
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	de 01       	movw	r26, r28
     8c2:	50 96       	adiw	r26, 0x10	; 16
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	2a 95       	dec	r18
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <setup+0x56>
     8cc:	fc 01       	movw	r30, r24
     8ce:	24 89       	ldd	r18, Z+20	; 0x14
     8d0:	2d 8b       	std	Y+21, r18	; 0x15
     8d2:	25 89       	ldd	r18, Z+21	; 0x15
     8d4:	2e 8b       	std	Y+22, r18	; 0x16
     8d6:	26 89       	ldd	r18, Z+22	; 0x16
     8d8:	2f 8b       	std	Y+23, r18	; 0x17
     8da:	27 89       	ldd	r18, Z+23	; 0x17
     8dc:	28 8f       	std	Y+24, r18	; 0x18
     8de:	20 8d       	ldd	r18, Z+24	; 0x18
     8e0:	29 8f       	std	Y+25, r18	; 0x19
     8e2:	21 8d       	ldd	r18, Z+25	; 0x19
     8e4:	2a 8f       	std	Y+26, r18	; 0x1a
     8e6:	22 8d       	ldd	r18, Z+26	; 0x1a
     8e8:	2b 8f       	std	Y+27, r18	; 0x1b
     8ea:	83 8d       	ldd	r24, Z+27	; 0x1b
     8ec:	8c 8f       	std	Y+28, r24	; 0x1c
     8ee:	8d e3       	ldi	r24, 0x3D	; 61
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_Znwj>
     8f6:	8c 01       	movw	r16, r24
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     902:	10 93 bf 01 	sts	0x01BF, r17	; 0x8001bf <ptrdspMainDoor+0x1>
     906:	00 93 be 01 	sts	0x01BE, r16	; 0x8001be <ptrdspMainDoor>
     90a:	8f e0       	ldi	r24, 0x0F	; 15
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_Znwj>
     912:	8c 01       	movw	r16, r24
     914:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN6SafetyC1Ev>
     918:	10 93 bd 01 	sts	0x01BD, r17	; 0x8001bd <ptrsftMainDoor+0x1>
     91c:	00 93 bc 01 	sts	0x01BC, r16	; 0x8001bc <ptrsftMainDoor>
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	8a e0       	ldi	r24, 0x0A	; 10
     924:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pinMode>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 23 07 	call	0xe46	; 0xe46 <analogReference>
     93e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <isClosing>
     942:	e9 e6       	ldi	r30, 0x69	; 105
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8a 60       	ori	r24, 0x0A	; 10
     94a:	80 83       	st	Z, r24
     94c:	83 e0       	ldi	r24, 0x03	; 3
     94e:	8d bb       	out	0x1d, r24	; 29
     950:	e8 e6       	ldi	r30, 0x68	; 104
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	85 60       	ori	r24, 0x05	; 5
     958:	80 83       	st	Z, r24
     95a:	78 94       	sei
     95c:	0e 94 70 06 	call	0xce0	; 0xce0 <millis>
     960:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <__data_end>
     964:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <__data_end+0x1>
     968:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end+0x2>
     96c:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x3>
     970:	6c 96       	adiw	r28, 0x1c	; 28
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <loop>:
     986:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <__data_end>
     98a:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <__data_end+0x1>
     98e:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end+0x2>
     992:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <__data_end+0x3>
     996:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ptrdspMainDoor>
     99a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <ptrdspMainDoor+0x1>
     99e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN7Display21UpdateMenuFromButtonsEm>
     9a2:	88 23       	and	r24, r24
     9a4:	51 f0       	breq	.+20     	; 0x9ba <loop+0x34>
     9a6:	0e 94 70 06 	call	0xce0	; 0xce0 <millis>
     9aa:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <__data_end>
     9ae:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <__data_end+0x1>
     9b2:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end+0x2>
     9b6:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x3>
     9ba:	08 95       	ret

000009bc <__vector_1>:
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     9e6:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     9ea:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Safety12cntEventIncrEi>
     9ee:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     9f2:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     9f6:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN6Safety13emergencyOpenEv>
     9fa:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     9fe:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     a02:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN6Safety12inEventCountEv>
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_2>:
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     a52:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     a56:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Safety12cntEventIncrEi>
     a5a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     a5e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     a62:	0e 94 92 03 	call	0x724	; 0x724 <_ZN6Safety14emergencyStallEv>
     a66:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     a6a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     a6e:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN6Safety12inEventCountEv>
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_5>:
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
     ab6:	65 e0       	ldi	r22, 0x05	; 5
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     abe:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     ac2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Safety12deviceStatusEi>
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	a1 f4       	brne	.+40     	; 0xaf2 <__vector_5+0x5e>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     ad2:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     ad6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Safety12cntEventIncrEi>
     ada:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     ade:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     ae2:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN6Safety13emergencyOpenEv>
     ae6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     aea:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     aee:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN6Safety12inEventCountEv>
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <__vector_3>:
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	63 e0       	ldi	r22, 0x03	; 3
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     b42:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     b46:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN6Safety9setDeviceEii>
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ptrsftMainDoor>
     b56:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ptrsftMainDoor+0x1>
     b5a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN6Safety9setDeviceEii>
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <_GLOBAL__sub_I_Temperature>:
     b80:	63 e4       	ldi	r22, 0x43	; 67
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	83 ee       	ldi	r24, 0xE3	; 227
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     b8c:	63 e4       	ldi	r22, 0x43	; 67
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	8d ed       	ldi	r24, 0xDD	; 221
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
     b98:	80 ec       	ldi	r24, 0xC0	; 192
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000ba0 <_GLOBAL__sub_D_Temperature>:
     ba0:	8d ed       	ldi	r24, 0xDD	; 221
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN6StringD1Ev>
     ba8:	83 ee       	ldi	r24, 0xE3	; 227
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <_ZN6StringD1Ev>

00000bb0 <initVariant>:
     bb0:	08 95       	ret

00000bb2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bb2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <init>

	initVariant();
     bb6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     bba:	0e 94 37 04 	call	0x86e	; 0x86e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bbe:	c0 e0       	ldi	r28, 0x00	; 0
     bc0:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     bc2:	0e 94 c3 04 	call	0x986	; 0x986 <loop>
		if (serialEventRun) serialEventRun();
     bc6:	20 97       	sbiw	r28, 0x00	; 0
     bc8:	e1 f3       	breq	.-8      	; 0xbc2 <main+0x10>
     bca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bce:	f9 cf       	rjmp	.-14     	; 0xbc2 <main+0x10>

00000bd0 <_Znwj>:
     bd0:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <malloc>

00000bd4 <_ZN5Print17availableForWriteEv>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <_ZN5Print5flushEv>:
     bda:	08 95       	ret

00000bdc <_ZN5Print5writeEPKhj>:
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	6c 01       	movw	r12, r24
     bee:	7a 01       	movw	r14, r20
     bf0:	8b 01       	movw	r16, r22
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	ce 15       	cp	r28, r14
     bf8:	df 05       	cpc	r29, r15
     bfa:	81 f0       	breq	.+32     	; 0xc1c <_ZN5Print5writeEPKhj+0x40>
     bfc:	d8 01       	movw	r26, r16
     bfe:	6d 91       	ld	r22, X+
     c00:	8d 01       	movw	r16, r26
     c02:	d6 01       	movw	r26, r12
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	c6 01       	movw	r24, r12
     c10:	09 95       	icall
     c12:	89 2b       	or	r24, r25
     c14:	11 f0       	breq	.+4      	; 0xc1a <_ZN5Print5writeEPKhj+0x3e>
     c16:	21 96       	adiw	r28, 0x01	; 1
     c18:	ee cf       	rjmp	.-36     	; 0xbf6 <_ZN5Print5writeEPKhj+0x1a>
     c1a:	7e 01       	movw	r14, r28
     c1c:	c7 01       	movw	r24, r14
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	08 95       	ret

00000c30 <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     c30:	db 01       	movw	r26, r22
     c32:	14 96       	adiw	r26, 0x04	; 4
     c34:	4d 91       	ld	r20, X+
     c36:	5c 91       	ld	r21, X
     c38:	15 97       	sbiw	r26, 0x05	; 5
     c3a:	6d 91       	ld	r22, X+
     c3c:	7c 91       	ld	r23, X
     c3e:	dc 01       	movw	r26, r24
     c40:	ed 91       	ld	r30, X+
     c42:	fc 91       	ld	r31, X
     c44:	02 80       	ldd	r0, Z+2	; 0x02
     c46:	f3 81       	ldd	r31, Z+3	; 0x03
     c48:	e0 2d       	mov	r30, r0
     c4a:	09 94       	ijmp

00000c4c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c62:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer0_millis>
     c66:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer0_millis+0x1>
     c6a:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <timer0_millis+0x2>
     c6e:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     c72:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     c76:	23 e0       	ldi	r18, 0x03	; 3
     c78:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     c7a:	2d 37       	cpi	r18, 0x7D	; 125
     c7c:	20 f4       	brcc	.+8      	; 0xc86 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	a1 1d       	adc	r26, r1
     c82:	b1 1d       	adc	r27, r1
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     c86:	26 e8       	ldi	r18, 0x86	; 134
     c88:	23 0f       	add	r18, r19
		m += 1;
     c8a:	02 96       	adiw	r24, 0x02	; 2
     c8c:	a1 1d       	adc	r26, r1
     c8e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     c90:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <timer0_fract>
	timer0_millis = m;
     c94:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer0_millis>
     c98:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer0_millis+0x1>
     c9c:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <timer0_millis+0x2>
     ca0:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <timer0_millis+0x3>
	timer0_overflow_count++;
     ca4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <timer0_overflow_count>
     ca8:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <timer0_overflow_count+0x1>
     cac:	a0 91 f0 01 	lds	r26, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x2>
     cb0:	b0 91 f1 01 	lds	r27, 0x01F1	; 0x8001f1 <timer0_overflow_count+0x3>
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <timer0_overflow_count>
     cbe:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <timer0_overflow_count+0x1>
     cc2:	a0 93 f0 01 	sts	0x01F0, r26	; 0x8001f0 <timer0_overflow_count+0x2>
     cc6:	b0 93 f1 01 	sts	0x01F1, r27	; 0x8001f1 <timer0_overflow_count+0x3>
}
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     ce0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     ce2:	f8 94       	cli
	m = timer0_millis;
     ce4:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <timer0_millis>
     ce8:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <timer0_millis+0x1>
     cec:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <timer0_millis+0x2>
     cf0:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <timer0_millis+0x3>
	SREG = oldSREG;
     cf4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     cf6:	08 95       	ret

00000cf8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     cf8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     cfa:	f8 94       	cli
	m = timer0_overflow_count;
     cfc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <timer0_overflow_count>
     d00:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <timer0_overflow_count+0x1>
     d04:	a0 91 f0 01 	lds	r26, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x2>
     d08:	b0 91 f1 01 	lds	r27, 0x01F1	; 0x8001f1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d0c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d0e:	a8 9b       	sbis	0x15, 0	; 21
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <micros+0x24>
     d12:	2f 3f       	cpi	r18, 0xFF	; 255
     d14:	19 f0       	breq	.+6      	; 0xd1c <micros+0x24>
		m++;
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	a1 1d       	adc	r26, r1
     d1a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d1c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d1e:	ba 2f       	mov	r27, r26
     d20:	a9 2f       	mov	r26, r25
     d22:	98 2f       	mov	r25, r24
     d24:	88 27       	eor	r24, r24
     d26:	82 0f       	add	r24, r18
     d28:	91 1d       	adc	r25, r1
     d2a:	a1 1d       	adc	r26, r1
     d2c:	b1 1d       	adc	r27, r1
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	42 e0       	ldi	r20, 0x02	; 2
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	4a 95       	dec	r20
     d3e:	d1 f7       	brne	.-12     	; 0xd34 <micros+0x3c>
}
     d40:	08 95       	ret

00000d42 <delay>:

void delay(unsigned long ms)
{
     d42:	8f 92       	push	r8
     d44:	9f 92       	push	r9
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	6b 01       	movw	r12, r22
     d54:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     d56:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <micros>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24

	while (ms > 0) {
     d5e:	c1 14       	cp	r12, r1
     d60:	d1 04       	cpc	r13, r1
     d62:	e1 04       	cpc	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	01 f1       	breq	.+64     	; 0xda8 <delay+0x66>
		yield();
     d68:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     d6c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <micros>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	88 19       	sub	r24, r8
     d76:	99 09       	sbc	r25, r9
     d78:	aa 09       	sbc	r26, r10
     d7a:	bb 09       	sbc	r27, r11
     d7c:	88 3e       	cpi	r24, 0xE8	; 232
     d7e:	93 40       	sbci	r25, 0x03	; 3
     d80:	a1 05       	cpc	r26, r1
     d82:	b1 05       	cpc	r27, r1
     d84:	60 f3       	brcs	.-40     	; 0xd5e <delay+0x1c>
			ms--;
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	c2 1a       	sub	r12, r18
     d8a:	d1 08       	sbc	r13, r1
     d8c:	e1 08       	sbc	r14, r1
     d8e:	f1 08       	sbc	r15, r1
			start += 1000;
     d90:	88 ee       	ldi	r24, 0xE8	; 232
     d92:	88 0e       	add	r8, r24
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	98 1e       	adc	r9, r24
     d98:	a1 1c       	adc	r10, r1
     d9a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     d9c:	c1 14       	cp	r12, r1
     d9e:	d1 04       	cpc	r13, r1
     da0:	e1 04       	cpc	r14, r1
     da2:	f1 04       	cpc	r15, r1
     da4:	19 f7       	brne	.-58     	; 0xd6c <delay+0x2a>
     da6:	db cf       	rjmp	.-74     	; 0xd5e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	9f 90       	pop	r9
     db6:	8f 90       	pop	r8
     db8:	08 95       	ret

00000dba <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	91 05       	cpc	r25, r1
     dbe:	38 f0       	brcs	.+14     	; 0xdce <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     dc8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <delayMicroseconds+0x10>
     dce:	08 95       	ret

00000dd0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dd0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     dd2:	84 b5       	in	r24, 0x24	; 36
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     dd8:	84 b5       	in	r24, 0x24	; 36
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     dde:	85 b5       	in	r24, 0x25	; 37
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     de4:	85 b5       	in	r24, 0x25	; 37
     de6:	81 60       	ori	r24, 0x01	; 1
     de8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     dea:	ee e6       	ldi	r30, 0x6E	; 110
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     df4:	e1 e8       	ldi	r30, 0x81	; 129
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     dfa:	80 81       	ld	r24, Z
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e00:	80 81       	ld	r24, Z
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e06:	e0 e8       	ldi	r30, 0x80	; 128
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	81 60       	ori	r24, 0x01	; 1
     e0e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e10:	e1 eb       	ldi	r30, 0xB1	; 177
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e1a:	e0 eb       	ldi	r30, 0xB0	; 176
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e24:	ea e7       	ldi	r30, 0x7A	; 122
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e2e:	80 81       	ld	r24, Z
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e34:	80 81       	ld	r24, Z
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e3a:	80 81       	ld	r24, Z
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e40:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e44:	08 95       	ret

00000e46 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     e46:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
     e4a:	08 95       	ret

00000e4c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	81 f0       	breq	.+32     	; 0xe70 <turnOffPWM+0x24>
     e50:	28 f4       	brcc	.+10     	; 0xe5c <turnOffPWM+0x10>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	99 f0       	breq	.+38     	; 0xe7c <turnOffPWM+0x30>
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	a1 f0       	breq	.+40     	; 0xe82 <turnOffPWM+0x36>
     e5a:	08 95       	ret
     e5c:	87 30       	cpi	r24, 0x07	; 7
     e5e:	a9 f0       	breq	.+42     	; 0xe8a <turnOffPWM+0x3e>
     e60:	88 30       	cpi	r24, 0x08	; 8
     e62:	b9 f0       	breq	.+46     	; 0xe92 <turnOffPWM+0x46>
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	d1 f4       	brne	.+52     	; 0xe9c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e74:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e76:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e7a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     e7c:	84 b5       	in	r24, 0x24	; 36
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e82:	84 b5       	in	r24, 0x24	; 36
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	84 bd       	out	0x24, r24	; 36
     e88:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e8a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e96:	8f 7d       	andi	r24, 0xDF	; 223
     e98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e9c:	08 95       	ret

00000e9e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	fc 01       	movw	r30, r24
     ea6:	e4 58       	subi	r30, 0x84	; 132
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     eac:	fc 01       	movw	r30, r24
     eae:	e0 57       	subi	r30, 0x70	; 112
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     eb4:	88 23       	and	r24, r24
     eb6:	61 f1       	breq	.+88     	; 0xf10 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	fc 01       	movw	r30, r24
     ec0:	e8 54       	subi	r30, 0x48	; 72
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	c5 91       	lpm	r28, Z+
     ec6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     ec8:	fc 01       	movw	r30, r24
     eca:	e2 55       	subi	r30, 0x52	; 82
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	a5 91       	lpm	r26, Z+
     ed0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ed2:	61 11       	cpse	r22, r1
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ed6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ed8:	f8 94       	cli
		*reg &= ~bit;
     eda:	88 81       	ld	r24, Y
     edc:	20 95       	com	r18
     ede:	82 23       	and	r24, r18
     ee0:	88 83       	st	Y, r24
		*out &= ~bit;
     ee2:	ec 91       	ld	r30, X
     ee4:	2e 23       	and	r18, r30
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     ee8:	62 30       	cpi	r22, 0x02	; 2
     eea:	61 f4       	brne	.+24     	; 0xf04 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     eec:	9f b7       	in	r25, 0x3f	; 63
                cli();
     eee:	f8 94       	cli
		*reg &= ~bit;
     ef0:	88 81       	ld	r24, Y
     ef2:	32 2f       	mov	r19, r18
     ef4:	30 95       	com	r19
     ef6:	83 23       	and	r24, r19
     ef8:	88 83       	st	Y, r24
		*out |= bit;
     efa:	ec 91       	ld	r30, X
     efc:	2e 2b       	or	r18, r30
     efe:	2c 93       	st	X, r18
		SREG = oldSREG;
     f00:	9f bf       	out	0x3f, r25	; 63
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f04:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f06:	f8 94       	cli
		*reg |= bit;
     f08:	e8 81       	ld	r30, Y
     f0a:	2e 2b       	or	r18, r30
     f0c:	28 83       	st	Y, r18
		SREG = oldSREG;
     f0e:	8f bf       	out	0x3f, r24	; 63
	}
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	f9 01       	movw	r30, r18
     f22:	e8 59       	subi	r30, 0x98	; 152
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f28:	f9 01       	movw	r30, r18
     f2a:	e4 58       	subi	r30, 0x84	; 132
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f30:	f9 01       	movw	r30, r18
     f32:	e0 57       	subi	r30, 0x70	; 112
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f38:	cc 23       	and	r28, r28
     f3a:	c1 f0       	breq	.+48     	; 0xf6c <digitalWrite+0x56>
     f3c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f3e:	81 11       	cpse	r24, r1
     f40:	0e 94 26 07 	call	0xe4c	; 0xe4c <turnOffPWM>

	out = portOutputRegister(port);
     f44:	ec 2f       	mov	r30, r28
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	e2 55       	subi	r30, 0x52	; 82
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	a5 91       	lpm	r26, Z+
     f52:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     f54:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f56:	f8 94       	cli

	if (val == LOW) {
     f58:	11 11       	cpse	r17, r1
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <digitalWrite+0x4e>
		*out &= ~bit;
     f5c:	8c 91       	ld	r24, X
     f5e:	d0 95       	com	r29
     f60:	d8 23       	and	r29, r24
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <digitalWrite+0x52>
	} else {
		*out |= bit;
     f64:	ec 91       	ld	r30, X
     f66:	de 2b       	or	r29, r30
     f68:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     f6a:	9f bf       	out	0x3f, r25	; 63
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	08 95       	ret

00000f74 <digitalRead>:

int digitalRead(uint8_t pin)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	e8 59       	subi	r30, 0x98	; 152
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f84:	f9 01       	movw	r30, r18
     f86:	e4 58       	subi	r30, 0x84	; 132
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f8c:	f9 01       	movw	r30, r18
     f8e:	e0 57       	subi	r30, 0x70	; 112
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     f94:	cc 23       	and	r28, r28
     f96:	91 f0       	breq	.+36     	; 0xfbc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f98:	81 11       	cpse	r24, r1
     f9a:	0e 94 26 07 	call	0xe4c	; 0xe4c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     f9e:	ec 2f       	mov	r30, r28
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ec 55       	subi	r30, 0x5C	; 92
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	a5 91       	lpm	r26, Z+
     fac:	b4 91       	lpm	r27, Z
     fae:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     fb0:	ed 23       	and	r30, r29
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <digitalRead+0x4c>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <digitalRead+0x4c>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
     fc6:	08 95       	ret

00000fc8 <_ZN6StringD1Ev>:
     fc8:	fc 01       	movw	r30, r24
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	0c 94 38 12 	jmp	0x2470	; 0x2470 <free>

00000fd2 <_ZN6String10invalidateEv>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	88 81       	ld	r24, Y
     fda:	99 81       	ldd	r25, Y+1	; 0x01
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	11 f0       	breq	.+4      	; 0xfe4 <_ZN6String10invalidateEv+0x12>
     fe0:	0e 94 38 12 	call	0x2470	; 0x2470 <free>
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	18 82       	st	Y, r1
     fe8:	1d 82       	std	Y+5, r1	; 0x05
     fea:	1c 82       	std	Y+4, r1	; 0x04
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	1a 82       	std	Y+2, r1	; 0x02
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <_ZN6String12changeBufferEj>:
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
    1000:	8b 01       	movw	r16, r22
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	88 81       	ld	r24, Y
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	0e 94 c1 12 	call	0x2582	; 0x2582 <realloc>
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	31 f0       	breq	.+12     	; 0x101e <_ZN6String12changeBufferEj+0x28>
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
    1016:	1b 83       	std	Y+3, r17	; 0x03
    1018:	0a 83       	std	Y+2, r16	; 0x02
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <_ZN6String12changeBufferEj+0x2a>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <_ZN6String7reserveEj>:
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	89 2b       	or	r24, r25
    1036:	29 f0       	breq	.+10     	; 0x1042 <_ZN6String7reserveEj+0x18>
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	86 17       	cp	r24, r22
    103e:	97 07       	cpc	r25, r23
    1040:	60 f4       	brcc	.+24     	; 0x105a <_ZN6String7reserveEj+0x30>
    1042:	ce 01       	movw	r24, r28
    1044:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN6String12changeBufferEj>
    1048:	88 23       	and	r24, r24
    104a:	41 f0       	breq	.+16     	; 0x105c <_ZN6String7reserveEj+0x32>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	89 2b       	or	r24, r25
    1052:	19 f4       	brne	.+6      	; 0x105a <_ZN6String7reserveEj+0x30>
    1054:	e8 81       	ld	r30, Y
    1056:	f9 81       	ldd	r31, Y+1	; 0x01
    1058:	10 82       	st	Z, r1
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <_ZN6String4copyEPKcj>:
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
    1070:	7b 01       	movw	r14, r22
    1072:	8a 01       	movw	r16, r20
    1074:	ba 01       	movw	r22, r20
    1076:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN6String7reserveEj>
    107a:	81 11       	cpse	r24, r1
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <_ZN6String4copyEPKcj+0x24>
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN6String10invalidateEv>
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <_ZN6String4copyEPKcj+0x32>
    1086:	1d 83       	std	Y+5, r17	; 0x05
    1088:	0c 83       	std	Y+4, r16	; 0x04
    108a:	b7 01       	movw	r22, r14
    108c:	88 81       	ld	r24, Y
    108e:	99 81       	ldd	r25, Y+1	; 0x01
    1090:	0e 94 90 13 	call	0x2720	; 0x2720 <strcpy>
    1094:	ce 01       	movw	r24, r28
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <_ZN6StringC1EPKc>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	11 82       	std	Z+1, r1	; 0x01
    10a8:	10 82       	st	Z, r1
    10aa:	13 82       	std	Z+3, r1	; 0x03
    10ac:	12 82       	std	Z+2, r1	; 0x02
    10ae:	15 82       	std	Z+5, r1	; 0x05
    10b0:	14 82       	std	Z+4, r1	; 0x04
    10b2:	61 15       	cp	r22, r1
    10b4:	71 05       	cpc	r23, r1
    10b6:	51 f0       	breq	.+20     	; 0x10cc <_ZN6StringC1EPKc+0x28>
    10b8:	fb 01       	movw	r30, r22
    10ba:	01 90       	ld	r0, Z+
    10bc:	00 20       	and	r0, r0
    10be:	e9 f7       	brne	.-6      	; 0x10ba <_ZN6StringC1EPKc+0x16>
    10c0:	31 97       	sbiw	r30, 0x01	; 1
    10c2:	af 01       	movw	r20, r30
    10c4:	46 1b       	sub	r20, r22
    10c6:	57 0b       	sbc	r21, r23
    10c8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <_ZN6String4copyEPKcj>
    10cc:	08 95       	ret

000010ce <_ZN6String4moveERS_>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	8c 01       	movw	r16, r24
    10d8:	eb 01       	movw	r28, r22
    10da:	fc 01       	movw	r30, r24
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	d1 f0       	breq	.+52     	; 0x1118 <_ZN6String4moveERS_+0x4a>
    10e4:	68 81       	ld	r22, Y
    10e6:	79 81       	ldd	r23, Y+1	; 0x01
    10e8:	61 15       	cp	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	99 f0       	breq	.+38     	; 0x1114 <_ZN6String4moveERS_+0x46>
    10ee:	23 ee       	ldi	r18, 0xE3	; 227
    10f0:	37 e0       	ldi	r19, 0x07	; 7
    10f2:	23 2b       	or	r18, r19
    10f4:	79 f0       	breq	.+30     	; 0x1114 <_ZN6String4moveERS_+0x46>
    10f6:	42 81       	ldd	r20, Z+2	; 0x02
    10f8:	53 81       	ldd	r21, Z+3	; 0x03
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	42 17       	cp	r20, r18
    1100:	53 07       	cpc	r21, r19
    1102:	40 f0       	brcs	.+16     	; 0x1114 <_ZN6String4moveERS_+0x46>
    1104:	0e 94 90 13 	call	0x2720	; 0x2720 <strcpy>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	f8 01       	movw	r30, r16
    110e:	95 83       	std	Z+5, r25	; 0x05
    1110:	84 83       	std	Z+4, r24	; 0x04
    1112:	13 c0       	rjmp	.+38     	; 0x113a <_ZN6String4moveERS_+0x6c>
    1114:	0e 94 38 12 	call	0x2470	; 0x2470 <free>
    1118:	88 81       	ld	r24, Y
    111a:	99 81       	ldd	r25, Y+1	; 0x01
    111c:	f8 01       	movw	r30, r16
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	93 83       	std	Z+3, r25	; 0x03
    1128:	82 83       	std	Z+2, r24	; 0x02
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	95 83       	std	Z+5, r25	; 0x05
    1130:	84 83       	std	Z+4, r24	; 0x04
    1132:	19 82       	std	Y+1, r1	; 0x01
    1134:	18 82       	st	Y, r1
    1136:	1b 82       	std	Y+3, r1	; 0x03
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	1c 82       	std	Y+4, r1	; 0x04
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <_ZN6StringaSERKS_>:
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	fb 01       	movw	r30, r22
    1150:	86 17       	cp	r24, r22
    1152:	97 07       	cpc	r25, r23
    1154:	61 f0       	breq	.+24     	; 0x116e <_ZN6StringaSERKS_+0x26>
    1156:	60 81       	ld	r22, Z
    1158:	71 81       	ldd	r23, Z+1	; 0x01
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	29 f0       	breq	.+10     	; 0x116a <_ZN6StringaSERKS_+0x22>
    1160:	44 81       	ldd	r20, Z+4	; 0x04
    1162:	55 81       	ldd	r21, Z+5	; 0x05
    1164:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN6String4copyEPKcj>
    1168:	02 c0       	rjmp	.+4      	; 0x116e <_ZN6StringaSERKS_+0x26>
    116a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN6String10invalidateEv>
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <_ZN6StringC1ERKS_>:
    1176:	fc 01       	movw	r30, r24
    1178:	11 82       	std	Z+1, r1	; 0x01
    117a:	10 82       	st	Z, r1
    117c:	13 82       	std	Z+3, r1	; 0x03
    117e:	12 82       	std	Z+2, r1	; 0x02
    1180:	15 82       	std	Z+5, r1	; 0x05
    1182:	14 82       	std	Z+4, r1	; 0x04
    1184:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_ZN6StringaSERKS_>

00001188 <_ZN6StringaSEOS_>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	86 17       	cp	r24, r22
    1190:	97 07       	cpc	r25, r23
    1192:	11 f0       	breq	.+4      	; 0x1198 <_ZN6StringaSEOS_+0x10>
    1194:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN6String4moveERS_>
    1198:	ce 01       	movw	r24, r28
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <_ZN6StringaSEPKc>:
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
    11a6:	61 15       	cp	r22, r1
    11a8:	71 05       	cpc	r23, r1
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <_ZN6StringaSEPKc+0x22>
    11ac:	fb 01       	movw	r30, r22
    11ae:	01 90       	ld	r0, Z+
    11b0:	00 20       	and	r0, r0
    11b2:	e9 f7       	brne	.-6      	; 0x11ae <_ZN6StringaSEPKc+0xe>
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	af 01       	movw	r20, r30
    11b8:	46 1b       	sub	r20, r22
    11ba:	57 0b       	sbc	r21, r23
    11bc:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN6String4copyEPKcj>
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <_ZN6StringaSEPKc+0x26>
    11c2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN6String10invalidateEv>
    11c6:	ce 01       	movw	r24, r28
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	7c 01       	movw	r14, r24
    11e2:	6b 01       	movw	r12, r22
    11e4:	8a 01       	movw	r16, r20
    11e6:	e9 01       	movw	r28, r18
	if (left > right) {
    11e8:	24 17       	cp	r18, r20
    11ea:	35 07       	cpc	r19, r21
    11ec:	20 f4       	brcc	.+8      	; 0x11f6 <_ZNK6String9substringEjj+0x28>
    11ee:	81 2f       	mov	r24, r17
    11f0:	89 01       	movw	r16, r18
    11f2:	c4 2f       	mov	r28, r20
    11f4:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    11f6:	63 e4       	ldi	r22, 0x43	; 67
    11f8:	71 e0       	ldi	r23, 0x01	; 1
    11fa:	c7 01       	movw	r24, r14
    11fc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    1200:	d6 01       	movw	r26, r12
    1202:	14 96       	adiw	r26, 0x04	; 4
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	15 97       	sbiw	r26, 0x05	; 5
    120a:	08 17       	cp	r16, r24
    120c:	19 07       	cpc	r17, r25
    120e:	c8 f4       	brcc	.+50     	; 0x1242 <_ZNK6String9substringEjj+0x74>
    1210:	8c 17       	cp	r24, r28
    1212:	9d 07       	cpc	r25, r29
    1214:	08 f4       	brcc	.+2      	; 0x1218 <_ZNK6String9substringEjj+0x4a>
    1216:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1218:	d6 01       	movw	r26, r12
    121a:	ed 91       	ld	r30, X+
    121c:	fc 91       	ld	r31, X
    121e:	11 97       	sbiw	r26, 0x01	; 1
    1220:	ec 0f       	add	r30, r28
    1222:	fd 1f       	adc	r31, r29
    1224:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1226:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1228:	6d 91       	ld	r22, X+
    122a:	7c 91       	ld	r23, X
    122c:	60 0f       	add	r22, r16
    122e:	71 1f       	adc	r23, r17
    1230:	c7 01       	movw	r24, r14
    1232:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1236:	d6 01       	movw	r26, r12
    1238:	ed 91       	ld	r30, X+
    123a:	fc 91       	ld	r31, X
    123c:	ec 0f       	add	r30, r28
    123e:	fd 1f       	adc	r31, r29
    1240:	b0 82       	st	Z, r11
	return out;
}
    1242:	c7 01       	movw	r24, r14
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	08 95       	ret

00001258 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1258:	fc 01       	movw	r30, r24
    125a:	13 82       	std	Z+3, r1	; 0x03
    125c:	12 82       	std	Z+2, r1	; 0x02
    125e:	8e e9       	ldi	r24, 0x9E	; 158
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
    1266:	12 8e       	std	Z+26, r1	; 0x1a
    1268:	14 8a       	std	Z+20, r1	; 0x14
    126a:	8f e0       	ldi	r24, 0x0F	; 15
    126c:	84 83       	std	Z+4, r24	; 0x04
    126e:	8e e0       	ldi	r24, 0x0E	; 14
    1270:	85 83       	std	Z+5, r24	; 0x05
    1272:	8d e0       	ldi	r24, 0x0D	; 13
    1274:	86 83       	std	Z+6, r24	; 0x06
    1276:	8c e0       	ldi	r24, 0x0C	; 12
    1278:	87 83       	std	Z+7, r24	; 0x07
    127a:	8b e0       	ldi	r24, 0x0B	; 11
    127c:	80 87       	std	Z+8, r24	; 0x08
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	81 87       	std	Z+9, r24	; 0x09
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	82 87       	std	Z+10, r24	; 0x0a
    1286:	17 86       	std	Z+15, r1	; 0x0f
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 8b       	std	Z+16, r24	; 0x10
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	81 8b       	std	Z+17, r24	; 0x11
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	82 8b       	std	Z+18, r24	; 0x12
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	83 8b       	std	Z+19, r24	; 0x13
    1298:	08 95       	ret

0000129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    129a:	fc 01       	movw	r30, r24
    129c:	96 2f       	mov	r25, r22
    129e:	82 8d       	ldd	r24, Z+26	; 0x1a
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	21 f0       	breq	.+8      	; 0x12ac <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    12a4:	cf 01       	movw	r24, r30
    12a6:	4b 96       	adiw	r24, 0x1b	; 27
    12a8:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12ac:	64 2f       	mov	r22, r20
    12ae:	89 2f       	mov	r24, r25
    12b0:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <digitalWrite>

000012b4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	d6 2f       	mov	r29, r22
    12be:	8c 01       	movw	r16, r24
    12c0:	05 5e       	subi	r16, 0xE5	; 229
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	c1 e0       	ldi	r28, 0x01	; 1
    12c6:	62 fb       	bst	r22, 2
    12c8:	44 27       	eor	r20, r20
    12ca:	40 f9       	bld	r20, 0
    12cc:	4c 27       	eor	r20, r28
    12ce:	68 e0       	ldi	r22, 0x08	; 8
    12d0:	c8 01       	movw	r24, r16
    12d2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12d6:	d1 fb       	bst	r29, 1
    12d8:	44 27       	eor	r20, r20
    12da:	40 f9       	bld	r20, 0
    12dc:	4c 27       	eor	r20, r28
    12de:	67 e0       	ldi	r22, 0x07	; 7
    12e0:	c8 01       	movw	r24, r16
    12e2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    12e6:	4d 2f       	mov	r20, r29
    12e8:	41 70       	andi	r20, 0x01	; 1
    12ea:	4c 27       	eor	r20, r28
    12ec:	66 e0       	ldi	r22, 0x06	; 6
    12ee:	c8 01       	movw	r24, r16
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <_ZN17Adafruit_MCP2301712digitalWriteEhh>

000012fc <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    12fc:	fc 01       	movw	r30, r24
    12fe:	96 2f       	mov	r25, r22
    1300:	82 8d       	ldd	r24, Z+26	; 0x1a
    1302:	8f 3f       	cpi	r24, 0xFF	; 255
    1304:	21 f0       	breq	.+8      	; 0x130e <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1306:	cf 01       	movw	r24, r30
    1308:	4b 96       	adiw	r24, 0x1b	; 27
    130a:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    130e:	64 2f       	mov	r22, r20
    1310:	89 2f       	mov	r24, r25
    1312:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <pinMode>

00001316 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	6e 81       	ldd	r22, Y+6	; 0x06
    1320:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	6e 81       	ldd	r22, Y+6	; 0x06
    1330:	ce 01       	movw	r24, r28
    1332:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	6e 81       	ldd	r22, Y+6	; 0x06
    1342:	ce 01       	movw	r24, r28
    1344:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1348:	84 e6       	ldi	r24, 0x64	; 100
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	0c 94 dd 06 	jmp	0xdba	; 0xdba <delayMicroseconds>

00001354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	8c 01       	movw	r16, r24
    136a:	fc 01       	movw	r30, r24
    136c:	82 8d       	ldd	r24, Z+26	; 0x1a
    136e:	98 01       	movw	r18, r16
    1370:	29 5f       	subi	r18, 0xF9	; 249
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	79 01       	movw	r14, r18
    1376:	c6 2f       	mov	r28, r22
    1378:	d0 e0       	ldi	r29, 0x00	; 0
    137a:	8f 3f       	cpi	r24, 0xFF	; 255
    137c:	09 f4       	brne	.+2      	; 0x1380 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    137e:	73 c0       	rjmp	.+230    	; 0x1466 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    1380:	68 01       	movw	r12, r16
    1382:	3b e1       	ldi	r19, 0x1B	; 27
    1384:	c3 0e       	add	r12, r19
    1386:	d1 1c       	adc	r13, r1
    1388:	c6 01       	movw	r24, r12
    138a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    138e:	f7 01       	movw	r30, r14
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	a1 e0       	ldi	r26, 0x01	; 1
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	b1 90       	ld	r11, Z+
    139a:	ee 24       	eor	r14, r14
    139c:	e3 94       	inc	r14
    139e:	f1 2c       	mov	r15, r1
    13a0:	bd 01       	movw	r22, r26
    13a2:	0b 2c       	mov	r0, r11
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    13ae:	60 95       	com	r22
    13b0:	70 95       	com	r23
    13b2:	86 23       	and	r24, r22
    13b4:	97 23       	and	r25, r23
    13b6:	9e 01       	movw	r18, r28
    13b8:	04 2e       	mov	r0, r20
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    13bc:	35 95       	asr	r19
    13be:	27 95       	ror	r18
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    13c4:	21 70       	andi	r18, 0x01	; 1
    13c6:	33 27       	eor	r19, r19
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	ba 94       	dec	r11
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    13d2:	82 2b       	or	r24, r18
    13d4:	93 2b       	or	r25, r19
    13d6:	4f 5f       	subi	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	44 30       	cpi	r20, 0x04	; 4
    13dc:	51 05       	cpc	r21, r1
    13de:	e1 f6       	brne	.-72     	; 0x1398 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    13e0:	e7 01       	movw	r28, r14
    13e2:	f8 01       	movw	r30, r16
    13e4:	06 80       	ldd	r0, Z+6	; 0x06
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    13e8:	cc 0f       	add	r28, r28
    13ea:	dd 1f       	adc	r29, r29
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    13f0:	c0 95       	com	r28
    13f2:	d0 95       	com	r29
    13f4:	c8 23       	and	r28, r24
    13f6:	d9 23       	and	r29, r25
    13f8:	be 01       	movw	r22, r28
    13fa:	c6 01       	movw	r24, r12
    13fc:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    1408:	c7 01       	movw	r24, r14
    140a:	f8 01       	movw	r30, r16
    140c:	06 80       	ldd	r0, Z+6	; 0x06
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1418:	c8 2b       	or	r28, r24
    141a:	d9 2b       	or	r29, r25
    141c:	be 01       	movw	r22, r28
    141e:	c6 01       	movw	r24, r12
    1420:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    142c:	b7 01       	movw	r22, r14
    142e:	f8 01       	movw	r30, r16
    1430:	06 80       	ldd	r0, Z+6	; 0x06
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1434:	66 0f       	add	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    143c:	60 95       	com	r22
    143e:	70 95       	com	r23
    1440:	6c 23       	and	r22, r28
    1442:	7d 23       	and	r23, r29
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    144a:	84 e6       	ldi	r24, 0x64	; 100
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	0c 94 dd 06 	jmp	0xdba	; 0xdba <delayMicroseconds>
    1466:	c1 2c       	mov	r12, r1
    1468:	d1 2c       	mov	r13, r1
    146a:	57 01       	movw	r10, r14
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	f7 01       	movw	r30, r14
    1470:	61 91       	ld	r22, Z+
    1472:	7f 01       	movw	r14, r30
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    147a:	ae 01       	movw	r20, r28
    147c:	0c 2c       	mov	r0, r12
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    1488:	41 70       	andi	r20, 0x01	; 1
    148a:	f5 01       	movw	r30, r10
    148c:	60 81       	ld	r22, Z
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1494:	ff ef       	ldi	r31, 0xFF	; 255
    1496:	cf 1a       	sub	r12, r31
    1498:	df 0a       	sbc	r13, r31
    149a:	24 e0       	ldi	r18, 0x04	; 4
    149c:	c2 16       	cp	r12, r18
    149e:	d1 04       	cpc	r13, r1
    14a0:	21 f7       	brne	.-56     	; 0x146a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    14a2:	c8 01       	movw	r24, r16
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000014bc <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	5c 01       	movw	r10, r24
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	a8 0e       	add	r10, r24
    14d8:	b1 1c       	adc	r11, r1
    14da:	00 e0       	ldi	r16, 0x00	; 0
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	e6 2e       	mov	r14, r22
    14e0:	f1 2c       	mov	r15, r1
    14e2:	65 01       	movw	r12, r10
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	f5 01       	movw	r30, r10
    14e8:	61 91       	ld	r22, Z+
    14ea:	5f 01       	movw	r10, r30
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    14f2:	a7 01       	movw	r20, r14
    14f4:	00 2e       	mov	r0, r16
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    1500:	41 70       	andi	r20, 0x01	; 1
    1502:	f6 01       	movw	r30, r12
    1504:	60 81       	ld	r22, Z
    1506:	ce 01       	movw	r24, r28
    1508:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    150c:	0f 5f       	subi	r16, 0xFF	; 255
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	08 30       	cpi	r16, 0x08	; 8
    1512:	11 05       	cpc	r17, r1
    1514:	31 f7       	brne	.-52     	; 0x14e2 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001530 <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ec 01       	movw	r28, r24
    1538:	16 2f       	mov	r17, r22
    153a:	6c 81       	ldd	r22, Y+4	; 0x04
    153c:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1540:	6d 81       	ldd	r22, Y+5	; 0x05
    1542:	6f 3f       	cpi	r22, 0xFF	; 255
    1544:	21 f0       	breq	.+8      	; 0x154e <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	ce 01       	movw	r24, r28
    154a:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    154e:	8c 89       	ldd	r24, Y+20	; 0x14
    1550:	61 2f       	mov	r22, r17
    1552:	84 ff       	sbrs	r24, 4
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1556:	ce 01       	movw	r24, r28
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	75 95       	asr	r23
    1568:	67 95       	ror	r22
    156a:	8a 95       	dec	r24
    156c:	e1 f7       	brne	.-8      	; 0x1566 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    156e:	ce 01       	movw	r24, r28
    1570:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1574:	61 2f       	mov	r22, r17
    1576:	ce 01       	movw	r24, r28
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

00001582 <_ZN21Adafruit_RGBLCDShield7commandEh>:
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <_ZN21Adafruit_RGBLCDShield4sendEhh>

00001588 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>
    158e:	80 ed       	ldi	r24, 0xD0	; 208
    1590:	97 e0       	ldi	r25, 0x07	; 7
    1592:	0c 94 dd 06 	jmp	0xdba	; 0xdba <delayMicroseconds>

00001596 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	28 97       	sbiw	r28, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	9c 01       	movw	r18, r24
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	e7 e0       	ldi	r30, 0x07	; 7
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	de 01       	movw	r26, r28
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	01 90       	ld	r0, Z+
    15b8:	0d 92       	st	X+, r0
    15ba:	8a 95       	dec	r24
    15bc:	e1 f7       	brne	.-8      	; 0x15b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    15be:	f9 01       	movw	r30, r18
    15c0:	80 8d       	ldd	r24, Z+24	; 0x18
    15c2:	84 17       	cp	r24, r20
    15c4:	10 f4       	brcc	.+4      	; 0x15ca <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    15c6:	4f ef       	ldi	r20, 0xFF	; 255
    15c8:	48 0f       	add	r20, r24
    15ca:	fe 01       	movw	r30, r28
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	e4 0f       	add	r30, r20
    15d0:	f1 1d       	adc	r31, r1
    15d2:	e4 0f       	add	r30, r20
    15d4:	f1 1d       	adc	r31, r1
    15d6:	90 81       	ld	r25, Z
    15d8:	69 0f       	add	r22, r25
    15da:	60 68       	ori	r22, 0x80	; 128
    15dc:	c9 01       	movw	r24, r18
    15de:	28 96       	adiw	r28, 0x08	; 8
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>

000015f2 <_ZN21Adafruit_RGBLCDShield7displayEv>:
    15f2:	fc 01       	movw	r30, r24
    15f4:	65 89       	ldd	r22, Z+21	; 0x15
    15f6:	26 2f       	mov	r18, r22
    15f8:	24 60       	ori	r18, 0x04	; 4
    15fa:	25 8b       	std	Z+21, r18	; 0x15
    15fc:	6c 60       	ori	r22, 0x0C	; 12
    15fe:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001602 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    161c:	d4 2e       	mov	r13, r20
    161e:	c2 2e       	mov	r12, r18
    1620:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1622:	8f 3f       	cpi	r24, 0xFF	; 255
    1624:	41 f4       	brne	.+16     	; 0x1636 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	8d 15       	cp	r24, r13
    162a:	08 f0       	brcs	.+2      	; 0x162e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    162c:	5e c0       	rjmp	.+188    	; 0x16ea <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    162e:	8c 89       	ldd	r24, Y+20	; 0x14
    1630:	88 60       	ori	r24, 0x08	; 8
    1632:	8c 8b       	std	Y+20, r24	; 0x14
    1634:	5a c0       	rjmp	.+180    	; 0x16ea <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1636:	82 ef       	ldi	r24, 0xF2	; 242
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7TwoWire5beginEv>
    163e:	8e 01       	movw	r16, r28
    1640:	05 5e       	subi	r16, 0xE5	; 229
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	c8 01       	movw	r24, r16
    1646:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN17Adafruit_MCP230175beginEv>
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	68 e0       	ldi	r22, 0x08	; 8
    164e:	c8 01       	movw	r24, r16
    1650:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	66 e0       	ldi	r22, 0x06	; 6
    1658:	c8 01       	movw	r24, r16
    165a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	67 e0       	ldi	r22, 0x07	; 7
    1662:	c8 01       	movw	r24, r16
    1664:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    1668:	67 e0       	ldi	r22, 0x07	; 7
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    1670:	6d 81       	ldd	r22, Y+5	; 0x05
    1672:	66 23       	and	r22, r22
    1674:	21 f0       	breq	.+8      	; 0x167e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	c8 01       	movw	r24, r16
    167a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	6c 81       	ldd	r22, Y+4	; 0x04
    1682:	c8 01       	movw	r24, r16
    1684:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	6e 81       	ldd	r22, Y+6	; 0x06
    168c:	c8 01       	movw	r24, r16
    168e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    1692:	7e 01       	movw	r14, r28
    1694:	e7 e0       	ldi	r30, 0x07	; 7
    1696:	ee 0e       	add	r14, r30
    1698:	f1 1c       	adc	r15, r1
    169a:	5e 01       	movw	r10, r28
    169c:	fb e0       	ldi	r31, 0x0B	; 11
    169e:	af 0e       	add	r10, r31
    16a0:	b1 1c       	adc	r11, r1
    16a2:	f7 01       	movw	r30, r14
    16a4:	61 91       	ld	r22, Z+
    16a6:	7f 01       	movw	r14, r30
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    16b0:	ea 14       	cp	r14, r10
    16b2:	fb 04       	cpc	r15, r11
    16b4:	b1 f7       	brne	.-20     	; 0x16a2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    16b6:	7e 01       	movw	r14, r28
    16b8:	ff e0       	ldi	r31, 0x0F	; 15
    16ba:	ef 0e       	add	r14, r31
    16bc:	f1 1c       	adc	r15, r1
    16be:	5e 01       	movw	r10, r28
    16c0:	84 e1       	ldi	r24, 0x14	; 20
    16c2:	a8 0e       	add	r10, r24
    16c4:	b1 1c       	adc	r11, r1
    16c6:	47 01       	movw	r8, r14
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	f7 01       	movw	r30, r14
    16cc:	61 91       	ld	r22, Z+
    16ce:	7f 01       	movw	r14, r30
    16d0:	c8 01       	movw	r24, r16
    16d2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN17Adafruit_MCP230177pinModeEhh>
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	f4 01       	movw	r30, r8
    16da:	60 81       	ld	r22, Z
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN17Adafruit_MCP230176pullUpEhh>
    16e2:	ea 14       	cp	r14, r10
    16e4:	fb 04       	cpc	r15, r11
    16e6:	79 f7       	brne	.-34     	; 0x16c6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    16e8:	9e cf       	rjmp	.-196    	; 0x1626 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    16ea:	d8 8e       	std	Y+24, r13	; 0x18
    16ec:	19 8e       	std	Y+25, r1	; 0x19
    16ee:	cc 20       	and	r12, r12
    16f0:	31 f0       	breq	.+12     	; 0x16fe <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    16f2:	f1 e0       	ldi	r31, 0x01	; 1
    16f4:	df 12       	cpse	r13, r31
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    16f8:	8c 89       	ldd	r24, Y+20	; 0x14
    16fa:	84 60       	ori	r24, 0x04	; 4
    16fc:	8c 8b       	std	Y+20, r24	; 0x14
    16fe:	80 e5       	ldi	r24, 0x50	; 80
    1700:	93 ec       	ldi	r25, 0xC3	; 195
    1702:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	6c 81       	ldd	r22, Y+4	; 0x04
    170a:	ce 01       	movw	r24, r28
    170c:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	6e 81       	ldd	r22, Y+6	; 0x06
    1714:	ce 01       	movw	r24, r28
    1716:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    171a:	6d 81       	ldd	r22, Y+5	; 0x05
    171c:	6f 3f       	cpi	r22, 0xFF	; 255
    171e:	21 f0       	breq	.+8      	; 0x1728 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1728:	6c 89       	ldd	r22, Y+20	; 0x14
    172a:	64 fd       	sbrc	r22, 4
    172c:	1d c0       	rjmp	.+58     	; 0x1768 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    172e:	63 e0       	ldi	r22, 0x03	; 3
    1730:	ce 01       	movw	r24, r28
    1732:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1736:	84 e9       	ldi	r24, 0x94	; 148
    1738:	91 e1       	ldi	r25, 0x11	; 17
    173a:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	ce 01       	movw	r24, r28
    1742:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1746:	84 e9       	ldi	r24, 0x94	; 148
    1748:	91 e1       	ldi	r25, 0x11	; 17
    174a:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    174e:	63 e0       	ldi	r22, 0x03	; 3
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1756:	86 e9       	ldi	r24, 0x96	; 150
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	ce 01       	movw	r24, r28
    1762:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1768:	60 62       	ori	r22, 0x20	; 32
    176a:	ce 01       	movw	r24, r28
    176c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>
    1770:	84 e9       	ldi	r24, 0x94	; 148
    1772:	91 e1       	ldi	r25, 0x11	; 17
    1774:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    1778:	6c 89       	ldd	r22, Y+20	; 0x14
    177a:	60 62       	ori	r22, 0x20	; 32
    177c:	ce 01       	movw	r24, r28
    177e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>
    1782:	86 e9       	ldi	r24, 0x96	; 150
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 dd 06 	call	0xdba	; 0xdba <delayMicroseconds>
    178a:	6c 89       	ldd	r22, Y+20	; 0x14
    178c:	60 62       	ori	r22, 0x20	; 32
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>
    1794:	6c 89       	ldd	r22, Y+20	; 0x14
    1796:	60 62       	ori	r22, 0x20	; 32
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	8d 8b       	std	Y+21, r24	; 0x15
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN21Adafruit_RGBLCDShield7displayEv>
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN21Adafruit_RGBLCDShield5clearEv>
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	8e 8b       	std	Y+22, r24	; 0x16
    17b2:	66 e0       	ldi	r22, 0x06	; 6
    17b4:	ce 01       	movw	r24, r28
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	9f 90       	pop	r9
    17cc:	8f 90       	pop	r8
    17ce:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <_ZN21Adafruit_RGBLCDShield7commandEh>

000017d2 <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 98 0a 	call	0x1530	; 0x1530 <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	08 95       	ret

000017de <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	7c 01       	movw	r14, r24
    17ee:	2f e0       	ldi	r18, 0x0F	; 15
    17f0:	e2 0e       	add	r14, r18
    17f2:	f1 1c       	adc	r15, r1
    17f4:	c0 e0       	ldi	r28, 0x00	; 0
    17f6:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    17f8:	2f e1       	ldi	r18, 0x1F	; 31
    17fa:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    17fc:	8c 01       	movw	r16, r24
    17fe:	05 5e       	subi	r16, 0xE5	; 229
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	f7 01       	movw	r30, r14
    1804:	61 91       	ld	r22, Z+
    1806:	7f 01       	movw	r14, r30
    1808:	c8 01       	movw	r24, r16
    180a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN17Adafruit_MCP2301711digitalReadEh>
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	0c 2e       	mov	r0, r28
    1814:	02 c0       	rjmp	.+4      	; 0x181a <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    181e:	20 95       	com	r18
    1820:	30 95       	com	r19
    1822:	d2 22       	and	r13, r18
    1824:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    1826:	c5 30       	cpi	r28, 0x05	; 5
    1828:	d1 05       	cpc	r29, r1
    182a:	59 f7       	brne	.-42     	; 0x1802 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    182c:	8d 2d       	mov	r24, r13
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	08 95       	ret

0000183e <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    183e:	68 2f       	mov	r22, r24
    1840:	82 ef       	ldi	r24, 0xF2	; 242
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <_ZN7TwoWire5writeEh>

00001848 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    184e:	68 30       	cpi	r22, 0x08	; 8
    1850:	08 f0       	brcs	.+2      	; 0x1854 <_ZN17Adafruit_MCP230175beginEh+0xc>
    1852:	67 e0       	ldi	r22, 0x07	; 7
    1854:	68 83       	st	Y, r22

  WIRE.begin();
    1856:	82 ef       	ldi	r24, 0xF2	; 242
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    185e:	68 81       	ld	r22, Y
    1860:	60 62       	ori	r22, 0x20	; 32
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	82 ef       	ldi	r24, 0xF2	; 242
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1878:	82 ef       	ldi	r24, 0xF2	; 242
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1880:	68 81       	ld	r22, Y
    1882:	60 62       	ori	r22, 0x20	; 32
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	82 ef       	ldi	r24, 0xF2	; 242
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    189a:	82 ef       	ldi	r24, 0xF2	; 242
    189c:	91 e0       	ldi	r25, 0x01	; 1
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    18a2:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>

000018a6 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <_ZN17Adafruit_MCP230175beginEh>

000018ac <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	d6 2f       	mov	r29, r22
    18b2:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    18b4:	fc 01       	movw	r30, r24
    18b6:	60 81       	ld	r22, Z
    18b8:	60 62       	ori	r22, 0x20	; 32
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	82 ef       	ldi	r24, 0xF2	; 242
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    18c4:	82 e1       	ldi	r24, 0x12	; 18
    18c6:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    18ca:	8d 2f       	mov	r24, r29
    18cc:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(ba >> 8);
    18d0:	8c 2f       	mov	r24, r28
    18d2:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    18d6:	82 ef       	ldi	r24, 0xF2	; 242
    18d8:	91 e0       	ldi	r25, 0x01	; 1
}
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    18de:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>

000018e2 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	8c 01       	movw	r16, r24
    18ee:	c6 2f       	mov	r28, r22
    18f0:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    18f2:	60 31       	cpi	r22, 0x10	; 16
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    18f6:	51 c0       	rjmp	.+162    	; 0x199a <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    18f8:	68 30       	cpi	r22, 0x08	; 8
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    18fc:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    18fe:	ff 24       	eor	r15, r15
    1900:	f3 94       	inc	r15
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1904:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1906:	f8 01       	movw	r30, r16
    1908:	60 81       	ld	r22, Z
    190a:	60 62       	ori	r22, 0x20	; 32
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	82 ef       	ldi	r24, 0xF2	; 242
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1916:	8f 2d       	mov	r24, r15
    1918:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    191c:	82 ef       	ldi	r24, 0xF2	; 242
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1924:	f8 01       	movw	r30, r16
    1926:	60 81       	ld	r22, Z
    1928:	60 62       	ori	r22, 0x20	; 32
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	82 ef       	ldi	r24, 0xF2	; 242
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1938:	82 ef       	ldi	r24, 0xF2	; 242
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1940:	21 e0       	ldi	r18, 0x01	; 1
    1942:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1944:	d1 11       	cpse	r29, r1
    1946:	09 c0       	rjmp	.+18     	; 0x195a <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1948:	a9 01       	movw	r20, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    194c:	44 0f       	add	r20, r20
    194e:	55 1f       	adc	r21, r21
    1950:	ca 95       	dec	r28
    1952:	e2 f7       	brpl	.-8      	; 0x194c <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1954:	ea 01       	movw	r28, r20
    1956:	c8 2b       	or	r28, r24
    1958:	09 c0       	rjmp	.+18     	; 0x196c <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    195a:	f9 01       	movw	r30, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	ca 95       	dec	r28
    1964:	e2 f7       	brpl	.-8      	; 0x195e <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1966:	ef 01       	movw	r28, r30
    1968:	c0 95       	com	r28
    196a:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    196c:	f8 01       	movw	r30, r16
    196e:	60 81       	ld	r22, Z
    1970:	60 62       	ori	r22, 0x20	; 32
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	82 ef       	ldi	r24, 0xF2	; 242
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    197c:	8f 2d       	mov	r24, r15
    197e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(iodir);	
    1982:	8c 2f       	mov	r24, r28
    1984:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1988:	82 ef       	ldi	r24, 0xF2	; 242
    198a:	91 e0       	ldi	r25, 0x01	; 1
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1996:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	08 95       	ret

000019a6 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19ac:	68 81       	ld	r22, Y
    19ae:	60 62       	ori	r22, 0x20	; 32
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	82 ef       	ldi	r24, 0xF2	; 242
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    19ba:	82 e1       	ldi	r24, 0x12	; 18
    19bc:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    19c0:	82 ef       	ldi	r24, 0xF2	; 242
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    19c8:	68 81       	ld	r22, Y
    19ca:	60 62       	ori	r22, 0x20	; 32
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	42 e0       	ldi	r20, 0x02	; 2
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	82 ef       	ldi	r24, 0xF2	; 242
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    19da:	82 ef       	ldi	r24, 0xF2	; 242
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
    19e2:	c8 2f       	mov	r28, r24
    19e4:	82 ef       	ldi	r24, 0xF2	; 242
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    19ec:	98 2f       	mov	r25, r24
    19ee:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    19f0:	8c 2b       	or	r24, r28
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	8c 01       	movw	r16, r24
    1a02:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1a04:	60 31       	cpi	r22, 0x10	; 16
    1a06:	58 f5       	brcc	.+86     	; 0x1a5e <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1a08:	68 30       	cpi	r22, 0x08	; 8
    1a0a:	18 f0       	brcs	.+6      	; 0x1a12 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1a0c:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1a0e:	d3 e1       	ldi	r29, 0x13	; 19
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1a12:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a14:	f8 01       	movw	r30, r16
    1a16:	60 81       	ld	r22, Z
    1a18:	60 62       	ori	r22, 0x20	; 32
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	82 ef       	ldi	r24, 0xF2	; 242
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1a24:	8d 2f       	mov	r24, r29
    1a26:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1a2a:	82 ef       	ldi	r24, 0xF2	; 242
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1a32:	f8 01       	movw	r30, r16
    1a34:	60 81       	ld	r22, Z
    1a36:	60 62       	ori	r22, 0x20	; 32
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	82 ef       	ldi	r24, 0xF2	; 242
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a46:	82 ef       	ldi	r24, 0xF2	; 242
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1a4e:	99 27       	eor	r25, r25
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1a52:	95 95       	asr	r25
    1a54:	87 95       	ror	r24
    1a56:	ca 95       	dec	r28
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	8c 01       	movw	r16, r24
    1a76:	c6 2f       	mov	r28, r22
    1a78:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1a7a:	60 31       	cpi	r22, 0x10	; 16
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1a7e:	52 c0       	rjmp	.+164    	; 0x1b24 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1a80:	68 30       	cpi	r22, 0x08	; 8
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1a84:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1a86:	9d e0       	ldi	r25, 0x0D	; 13
    1a88:	f9 2e       	mov	r15, r25
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1a8c:	8c e0       	ldi	r24, 0x0C	; 12
    1a8e:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a90:	f8 01       	movw	r30, r16
    1a92:	60 81       	ld	r22, Z
    1a94:	60 62       	ori	r22, 0x20	; 32
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	82 ef       	ldi	r24, 0xF2	; 242
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1aa0:	8f 2d       	mov	r24, r15
    1aa2:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1aa6:	82 ef       	ldi	r24, 0xF2	; 242
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1aae:	f8 01       	movw	r30, r16
    1ab0:	60 81       	ld	r22, Z
    1ab2:	60 62       	ori	r22, 0x20	; 32
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	82 ef       	ldi	r24, 0xF2	; 242
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1ac2:	82 ef       	ldi	r24, 0xF2	; 242
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1ace:	d1 30       	cpi	r29, 0x01	; 1
    1ad0:	49 f4       	brne	.+18     	; 0x1ae4 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1ad2:	a9 01       	movw	r20, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1ad6:	44 0f       	add	r20, r20
    1ad8:	55 1f       	adc	r21, r21
    1ada:	ca 95       	dec	r28
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1ade:	ea 01       	movw	r28, r20
    1ae0:	c8 2b       	or	r28, r24
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ca 95       	dec	r28
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1af0:	ef 01       	movw	r28, r30
    1af2:	c0 95       	com	r28
    1af4:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1af6:	f8 01       	movw	r30, r16
    1af8:	60 81       	ld	r22, Z
    1afa:	60 62       	ori	r22, 0x20	; 32
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	82 ef       	ldi	r24, 0xF2	; 242
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1b06:	8f 2d       	mov	r24, r15
    1b08:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(gppu);	
    1b0c:	8c 2f       	mov	r24, r28
    1b0e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1b12:	82 ef       	ldi	r24, 0xF2	; 242
    1b14:	91 e0       	ldi	r25, 0x01	; 1
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1b20:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	08 95       	ret

00001b30 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	c6 2f       	mov	r28, r22
    1b40:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1b42:	60 31       	cpi	r22, 0x10	; 16
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1b46:	56 c0       	rjmp	.+172    	; 0x1bf4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1b48:	68 30       	cpi	r22, 0x08	; 8
    1b4a:	28 f0       	brcs	.+10     	; 0x1b56 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1b4c:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1b4e:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1b50:	93 e1       	ldi	r25, 0x13	; 19
    1b52:	f9 2e       	mov	r15, r25
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1b56:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1b58:	82 e1       	ldi	r24, 0x12	; 18
    1b5a:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	60 81       	ld	r22, Z
    1b60:	60 62       	ori	r22, 0x20	; 32
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	82 ef       	ldi	r24, 0xF2	; 242
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1b6c:	8d 2f       	mov	r24, r29
    1b6e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1b72:	82 ef       	ldi	r24, 0xF2	; 242
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	60 81       	ld	r22, Z
    1b7e:	60 62       	ori	r22, 0x20	; 32
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	82 ef       	ldi	r24, 0xF2	; 242
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b8e:	82 ef       	ldi	r24, 0xF2	; 242
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1b96:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1b98:	21 e0       	ldi	r18, 0x01	; 1
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1b9c:	ef 12       	cpse	r14, r31
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	ca 95       	dec	r28
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1bac:	ea 01       	movw	r28, r20
    1bae:	c8 2b       	or	r28, r24
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1bb2:	f9 01       	movw	r30, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	ca 95       	dec	r28
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1bbe:	ef 01       	movw	r28, r30
    1bc0:	c0 95       	com	r28
    1bc2:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	60 81       	ld	r22, Z
    1bc8:	60 62       	ori	r22, 0x20	; 32
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	82 ef       	ldi	r24, 0xF2	; 242
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1bd4:	8f 2d       	mov	r24, r15
    1bd6:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  wiresend(gpio);	
    1bda:	8c 2f       	mov	r24, r28
    1bdc:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZL8wiresendh>
  WIRE.endTransmission();
    1be0:	82 ef       	ldi	r24, 0xF2	; 242
    1be2:	91 e0       	ldi	r25, 0x01	; 1
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1bf0:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_ZN7TwoWire15endTransmissionEv>
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	08 95       	ret

00001c02 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c02:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c0c:	82 1b       	sub	r24, r18
    1c0e:	91 09       	sbc	r25, r1
    1c10:	08 95       	ret

00001c12 <_ZN7TwoWire4readEv>:
    1c12:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c16:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1c1a:	98 17       	cp	r25, r24
    1c1c:	50 f4       	brcc	.+20     	; 0x1c32 <_ZN7TwoWire4readEv+0x20>
    1c1e:	e9 2f       	mov	r30, r25
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	e8 5d       	subi	r30, 0xD8	; 216
    1c24:	fd 4f       	sbci	r31, 0xFD	; 253
    1c26:	20 81       	ld	r18, Z
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	9f 5f       	subi	r25, 0xFF	; 255
    1c2c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <_ZN7TwoWire4readEv+0x24>
    1c32:	2f ef       	ldi	r18, 0xFF	; 255
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	c9 01       	movw	r24, r18
    1c38:	08 95       	ret

00001c3a <_ZN7TwoWire4peekEv>:
    1c3a:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c3e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1c42:	e8 17       	cp	r30, r24
    1c44:	30 f4       	brcc	.+12     	; 0x1c52 <_ZN7TwoWire4peekEv+0x18>
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	e8 5d       	subi	r30, 0xD8	; 216
    1c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4c:	80 81       	ld	r24, Z
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	08 95       	ret
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	08 95       	ret

00001c58 <_ZN7TwoWire5flushEv>:
    1c58:	08 95       	ret

00001c5a <_ZN7TwoWire16onReceiveServiceEPhi>:
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
    1c60:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <_ZN7TwoWire14user_onReceiveE>
    1c64:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <_ZN7TwoWire14user_onReceiveE+0x1>
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	f1 f0       	breq	.+60     	; 0x1ca8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c6c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c70:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1c74:	98 17       	cp	r25, r24
    1c76:	c0 f0       	brcs	.+48     	; 0x1ca8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	29 2f       	mov	r18, r25
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	26 17       	cp	r18, r22
    1c80:	37 07       	cpc	r19, r23
    1c82:	54 f4       	brge	.+20     	; 0x1c98 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1c84:	de 01       	movw	r26, r28
    1c86:	a2 0f       	add	r26, r18
    1c88:	b3 1f       	adc	r27, r19
    1c8a:	4c 91       	ld	r20, X
    1c8c:	d9 01       	movw	r26, r18
    1c8e:	a8 5d       	subi	r26, 0xD8	; 216
    1c90:	bd 4f       	sbci	r27, 0xFD	; 253
    1c92:	4c 93       	st	X, r20
    1c94:	9f 5f       	subi	r25, 0xFF	; 255
    1c96:	f1 cf       	rjmp	.-30     	; 0x1c7a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1c98:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1c9c:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	09 94       	ijmp
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <_ZN7TwoWire16onRequestServiceEv>:
    1cae:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN7TwoWire14user_onRequestE>
    1cb2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN7TwoWire14user_onRequestE+0x1>
    1cb6:	30 97       	sbiw	r30, 0x00	; 0
    1cb8:	29 f0       	breq	.+10     	; 0x1cc4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1cba:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1cbe:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1cc2:	09 94       	ijmp
    1cc4:	08 95       	ret

00001cc6 <_ZN7TwoWire5writeEPKhj>:
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	7c 01       	movw	r14, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8a 01       	movw	r16, r20
    1cdc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZN7TwoWire12transmittingE>
    1ce0:	22 23       	and	r18, r18
    1ce2:	89 f0       	breq	.+34     	; 0x1d06 <_ZN7TwoWire5writeEPKhj+0x40>
    1ce4:	eb 01       	movw	r28, r22
    1ce6:	6b 01       	movw	r12, r22
    1ce8:	c4 0e       	add	r12, r20
    1cea:	d5 1e       	adc	r13, r21
    1cec:	cc 15       	cp	r28, r12
    1cee:	dd 05       	cpc	r29, r13
    1cf0:	69 f0       	breq	.+26     	; 0x1d0c <_ZN7TwoWire5writeEPKhj+0x46>
    1cf2:	69 91       	ld	r22, Y+
    1cf4:	d7 01       	movw	r26, r14
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	f0 81       	ld	r31, Z
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	c7 01       	movw	r24, r14
    1d02:	09 95       	icall
    1d04:	f3 cf       	rjmp	.-26     	; 0x1cec <_ZN7TwoWire5writeEPKhj+0x26>
    1d06:	64 2f       	mov	r22, r20
    1d08:	0e 94 2b 10 	call	0x2056	; 0x2056 <twi_transmit>
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <_ZN7TwoWire5writeEh>:
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	1f 92       	push	r1
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	69 83       	std	Y+1, r22	; 0x01
    1d2c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZN7TwoWire12transmittingE>
    1d30:	22 23       	and	r18, r18
    1d32:	d1 f0       	breq	.+52     	; 0x1d68 <_ZN7TwoWire5writeEh+0x48>
    1d34:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1d38:	20 32       	cpi	r18, 0x20	; 32
    1d3a:	40 f0       	brcs	.+16     	; 0x1d4c <_ZN7TwoWire5writeEh+0x2c>
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	33 83       	std	Z+3, r19	; 0x03
    1d44:	22 83       	std	Z+2, r18	; 0x02
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	15 c0       	rjmp	.+42     	; 0x1d76 <_ZN7TwoWire5writeEh+0x56>
    1d4c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1d50:	e8 2f       	mov	r30, r24
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	eb 5f       	subi	r30, 0xFB	; 251
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	99 81       	ldd	r25, Y+1	; 0x01
    1d5a:	90 83       	st	Z, r25
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1d62:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <_ZN7TwoWire5writeEh+0x52>
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 2b 10 	call	0x2056	; 0x2056 <twi_transmit>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0f 90       	pop	r0
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <_ZN7TwoWireC1Ev>:
    1d7e:	fc 01       	movw	r30, r24
    1d80:	13 82       	std	Z+3, r1	; 0x03
    1d82:	12 82       	std	Z+2, r1	; 0x02
    1d84:	88 ee       	ldi	r24, 0xE8	; 232
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	84 83       	std	Z+4, r24	; 0x04
    1d8e:	95 83       	std	Z+5, r25	; 0x05
    1d90:	a6 83       	std	Z+6, r26	; 0x06
    1d92:	b7 83       	std	Z+7, r27	; 0x07
    1d94:	8a ea       	ldi	r24, 0xAA	; 170
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	08 95       	ret

00001d9e <_ZN7TwoWire5beginEv>:
    1d9e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1da2:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1da6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1daa:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1dae:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <twi_init>
    1db2:	87 e5       	ldi	r24, 0x57	; 87
    1db4:	9e e0       	ldi	r25, 0x0E	; 14
    1db6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <twi_attachSlaveTxEvent>
    1dba:	8d e2       	ldi	r24, 0x2D	; 45
    1dbc:	9e e0       	ldi	r25, 0x0E	; 14
    1dbe:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <twi_attachSlaveRxEvent>

00001dc2 <_ZN7TwoWire17beginTransmissionEh>:
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZN7TwoWire12transmittingE>
    1dc8:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <_ZN7TwoWire9txAddressE>
    1dcc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1dd0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1dd4:	08 95       	ret

00001dd6 <_ZN7TwoWire17beginTransmissionEi>:
    1dd6:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <_ZN7TwoWire17beginTransmissionEh>

00001dda <_ZN7TwoWire15endTransmissionEh>:
    1dda:	0f 93       	push	r16
    1ddc:	06 2f       	mov	r16, r22
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1de4:	65 e0       	ldi	r22, 0x05	; 5
    1de6:	72 e0       	ldi	r23, 0x02	; 2
    1de8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <_ZN7TwoWire9txAddressE>
    1dec:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <twi_writeTo>
    1df0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZN7TwoWire13txBufferIndexE>
    1df4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZN7TwoWire14txBufferLengthE>
    1df8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <_ZN7TwoWire12transmittingE>
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <_ZN7TwoWire11requestFromEhhmhh>:
    1e00:	4f 92       	push	r4
    1e02:	5f 92       	push	r5
    1e04:	6f 92       	push	r6
    1e06:	7f 92       	push	r7
    1e08:	af 92       	push	r10
    1e0a:	bf 92       	push	r11
    1e0c:	cf 92       	push	r12
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	5c 01       	movw	r10, r24
    1e1c:	f6 2e       	mov	r15, r22
    1e1e:	d4 2f       	mov	r29, r20
    1e20:	28 01       	movw	r4, r16
    1e22:	39 01       	movw	r6, r18
    1e24:	ee 20       	and	r14, r14
    1e26:	21 f1       	breq	.+72     	; 0x1e70 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1e28:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN7TwoWire17beginTransmissionEh>
    1e2c:	ce 2d       	mov	r28, r14
    1e2e:	c4 30       	cpi	r28, 0x04	; 4
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e32:	c3 e0       	ldi	r28, 0x03	; 3
    1e34:	c1 50       	subi	r28, 0x01	; 1
    1e36:	c0 f0       	brcs	.+48     	; 0x1e68 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1e38:	28 e0       	ldi	r18, 0x08	; 8
    1e3a:	c2 9f       	mul	r28, r18
    1e3c:	c0 01       	movw	r24, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	a3 01       	movw	r20, r6
    1e42:	92 01       	movw	r18, r4
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1e46:	56 95       	lsr	r21
    1e48:	47 95       	ror	r20
    1e4a:	37 95       	ror	r19
    1e4c:	27 95       	ror	r18
    1e4e:	8a 95       	dec	r24
    1e50:	d2 f7       	brpl	.-12     	; 0x1e46 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1e52:	ca 01       	movw	r24, r20
    1e54:	b9 01       	movw	r22, r18
    1e56:	d5 01       	movw	r26, r10
    1e58:	ed 91       	ld	r30, X+
    1e5a:	fc 91       	ld	r31, X
    1e5c:	01 90       	ld	r0, Z+
    1e5e:	f0 81       	ld	r31, Z
    1e60:	e0 2d       	mov	r30, r0
    1e62:	c5 01       	movw	r24, r10
    1e64:	09 95       	icall
    1e66:	e6 cf       	rjmp	.-52     	; 0x1e34 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	c5 01       	movw	r24, r10
    1e6c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN7TwoWire15endTransmissionEh>
    1e70:	4d 2f       	mov	r20, r29
    1e72:	d1 32       	cpi	r29, 0x21	; 33
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	2c 2d       	mov	r18, r12
    1e7a:	68 e2       	ldi	r22, 0x28	; 40
    1e7c:	72 e0       	ldi	r23, 0x02	; 2
    1e7e:	8f 2d       	mov	r24, r15
    1e80:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_readFrom>
    1e84:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <_ZN7TwoWire13rxBufferIndexE>
    1e88:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <_ZN7TwoWire14rxBufferLengthE>
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	cf 90       	pop	r12
    1e9a:	bf 90       	pop	r11
    1e9c:	af 90       	pop	r10
    1e9e:	7f 90       	pop	r7
    1ea0:	6f 90       	pop	r6
    1ea2:	5f 90       	pop	r5
    1ea4:	4f 90       	pop	r4
    1ea6:	08 95       	ret

00001ea8 <_ZN7TwoWire11requestFromEhhh>:
    1ea8:	cf 92       	push	r12
    1eaa:	ef 92       	push	r14
    1eac:	0f 93       	push	r16
    1eae:	1f 93       	push	r17
    1eb0:	c2 2e       	mov	r12, r18
    1eb2:	e1 2c       	mov	r14, r1
    1eb4:	00 e0       	ldi	r16, 0x00	; 0
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	98 01       	movw	r18, r16
    1eba:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire11requestFromEhhmhh>
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	ef 90       	pop	r14
    1ec4:	cf 90       	pop	r12
    1ec6:	08 95       	ret

00001ec8 <_ZN7TwoWire11requestFromEii>:
    1ec8:	21 e0       	ldi	r18, 0x01	; 1
    1eca:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <_ZN7TwoWire11requestFromEhhh>

00001ece <_ZN7TwoWire15endTransmissionEv>:
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <_ZN7TwoWire15endTransmissionEh>

00001ed4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1ed4:	82 ef       	ldi	r24, 0xF2	; 242
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_ZN7TwoWireC1Ev>

00001edc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1edc:	08 95       	ret

00001ede <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ede:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_sendStop>
    1ee8:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	82 e1       	ldi	r24, 0x12	; 18
    1ef0:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	83 e1       	ldi	r24, 0x13	; 19
    1ef8:	0e 94 8b 07 	call	0xf16	; 0xf16 <digitalWrite>
    1efc:	e9 eb       	ldi	r30, 0xB9	; 185
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8e 7f       	andi	r24, 0xFE	; 254
    1f04:	80 83       	st	Z, r24
    1f06:	80 81       	ld	r24, Z
    1f08:	8d 7f       	andi	r24, 0xFD	; 253
    1f0a:	80 83       	st	Z, r24
    1f0c:	88 e4       	ldi	r24, 0x48	; 72
    1f0e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1f12:	85 e4       	ldi	r24, 0x45	; 69
    1f14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f18:	08 95       	ret

00001f1a <twi_readFrom>:
    1f1a:	41 32       	cpi	r20, 0x21	; 33
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <twi_readFrom+0x6>
    1f1e:	43 c0       	rjmp	.+134    	; 0x1fa6 <twi_readFrom+0x8c>
    1f20:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <twi_state>
    1f24:	91 11       	cpse	r25, r1
    1f26:	fc cf       	rjmp	.-8      	; 0x1f20 <twi_readFrom+0x6>
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <twi_state>
    1f2e:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <twi_sendStop>
    1f32:	2f ef       	ldi	r18, 0xFF	; 255
    1f34:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <twi_error>
    1f38:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <twi_masterBufferIndex>
    1f3c:	24 0f       	add	r18, r20
    1f3e:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <twi_masterBufferLength>
    1f42:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <twi_slarw>
    1f46:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <twi_slarw>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	89 2b       	or	r24, r25
    1f4e:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_slarw>
    1f52:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_inRepStart>
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	61 f4       	brne	.+24     	; 0x1f72 <twi_readFrom+0x58>
    1f5a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    1f5e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    1f62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f6a:	83 fd       	sbrc	r24, 3
    1f6c:	f8 cf       	rjmp	.-16     	; 0x1f5e <twi_readFrom+0x44>
    1f6e:	85 ec       	ldi	r24, 0xC5	; 197
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <twi_readFrom+0x5a>
    1f72:	85 ee       	ldi	r24, 0xE5	; 229
    1f74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f78:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_state>
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	e1 f3       	breq	.-8      	; 0x1f78 <twi_readFrom+0x5e>
    1f80:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1f84:	84 17       	cp	r24, r20
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <twi_readFrom+0x72>
    1f88:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1f8c:	ae e8       	ldi	r26, 0x8E	; 142
    1f8e:	b2 e0       	ldi	r27, 0x02	; 2
    1f90:	96 2f       	mov	r25, r22
    1f92:	fb 01       	movw	r30, r22
    1f94:	8e 2f       	mov	r24, r30
    1f96:	89 1b       	sub	r24, r25
    1f98:	84 17       	cp	r24, r20
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <twi_readFrom+0x88>
    1f9c:	8d 91       	ld	r24, X+
    1f9e:	81 93       	st	Z+, r24
    1fa0:	f9 cf       	rjmp	.-14     	; 0x1f94 <twi_readFrom+0x7a>
    1fa2:	84 2f       	mov	r24, r20
    1fa4:	08 95       	ret
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	08 95       	ret

00001faa <twi_writeTo>:
    1faa:	0f 93       	push	r16
    1fac:	41 32       	cpi	r20, 0x21	; 33
    1fae:	08 f0       	brcs	.+2      	; 0x1fb2 <twi_writeTo+0x8>
    1fb0:	4a c0       	rjmp	.+148    	; 0x2046 <twi_writeTo+0x9c>
    1fb2:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <twi_state>
    1fb6:	91 11       	cpse	r25, r1
    1fb8:	fc cf       	rjmp	.-8      	; 0x1fb2 <twi_writeTo+0x8>
    1fba:	32 e0       	ldi	r19, 0x02	; 2
    1fbc:	30 93 b5 02 	sts	0x02B5, r19	; 0x8002b5 <twi_state>
    1fc0:	00 93 b3 02 	sts	0x02B3, r16	; 0x8002b3 <twi_sendStop>
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <twi_error>
    1fca:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <twi_masterBufferIndex>
    1fce:	40 93 8c 02 	sts	0x028C, r20	; 0x80028c <twi_masterBufferLength>
    1fd2:	56 2f       	mov	r21, r22
    1fd4:	ae e8       	ldi	r26, 0x8E	; 142
    1fd6:	b2 e0       	ldi	r27, 0x02	; 2
    1fd8:	fb 01       	movw	r30, r22
    1fda:	3e 2f       	mov	r19, r30
    1fdc:	35 1b       	sub	r19, r21
    1fde:	34 17       	cp	r19, r20
    1fe0:	18 f4       	brcc	.+6      	; 0x1fe8 <twi_writeTo+0x3e>
    1fe2:	31 91       	ld	r19, Z+
    1fe4:	3d 93       	st	X+, r19
    1fe6:	f9 cf       	rjmp	.-14     	; 0x1fda <twi_writeTo+0x30>
    1fe8:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <twi_slarw>
    1fec:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <twi_slarw>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	83 2b       	or	r24, r19
    1ff4:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_slarw>
    1ff8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_inRepStart>
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	61 f4       	brne	.+24     	; 0x2018 <twi_writeTo+0x6e>
    2000:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    2004:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    2008:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    200c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2010:	83 fd       	sbrc	r24, 3
    2012:	f8 cf       	rjmp	.-16     	; 0x2004 <twi_writeTo+0x5a>
    2014:	85 ec       	ldi	r24, 0xC5	; 197
    2016:	01 c0       	rjmp	.+2      	; 0x201a <twi_writeTo+0x70>
    2018:	85 ee       	ldi	r24, 0xE5	; 229
    201a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    201e:	22 23       	and	r18, r18
    2020:	21 f0       	breq	.+8      	; 0x202a <twi_writeTo+0x80>
    2022:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_state>
    2026:	82 30       	cpi	r24, 0x02	; 2
    2028:	d1 f3       	breq	.-12     	; 0x201e <twi_writeTo+0x74>
    202a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    202e:	8f 3f       	cpi	r24, 0xFF	; 255
    2030:	79 f0       	breq	.+30     	; 0x2050 <twi_writeTo+0xa6>
    2032:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    2036:	80 32       	cpi	r24, 0x20	; 32
    2038:	41 f0       	breq	.+16     	; 0x204a <twi_writeTo+0xa0>
    203a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    203e:	80 33       	cpi	r24, 0x30	; 48
    2040:	31 f0       	breq	.+12     	; 0x204e <twi_writeTo+0xa4>
    2042:	94 e0       	ldi	r25, 0x04	; 4
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <twi_writeTo+0xa6>
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <twi_writeTo+0xa6>
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <twi_writeTo+0xa6>
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	89 2f       	mov	r24, r25
    2052:	0f 91       	pop	r16
    2054:	08 95       	ret

00002056 <twi_transmit>:
    2056:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <twi_txBufferLength>
    205a:	26 2f       	mov	r18, r22
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	24 0f       	add	r18, r20
    2060:	31 1d       	adc	r19, r1
    2062:	21 32       	cpi	r18, 0x21	; 33
    2064:	31 05       	cpc	r19, r1
    2066:	dc f4       	brge	.+54     	; 0x209e <twi_transmit+0x48>
    2068:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <twi_state>
    206c:	24 30       	cpi	r18, 0x04	; 4
    206e:	c9 f4       	brne	.+50     	; 0x20a2 <twi_transmit+0x4c>
    2070:	fc 01       	movw	r30, r24
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	86 17       	cp	r24, r22
    2078:	58 f4       	brcc	.+22     	; 0x2090 <twi_transmit+0x3a>
    207a:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <twi_txBufferLength>
    207e:	21 91       	ld	r18, Z+
    2080:	dc 01       	movw	r26, r24
    2082:	a4 59       	subi	r26, 0x94	; 148
    2084:	bd 4f       	sbci	r27, 0xFD	; 253
    2086:	a3 0f       	add	r26, r19
    2088:	b1 1d       	adc	r27, r1
    208a:	2c 93       	st	X, r18
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	f3 cf       	rjmp	.-26     	; 0x2076 <twi_transmit+0x20>
    2090:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    2094:	68 0f       	add	r22, r24
    2096:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <twi_txBufferLength>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	08 95       	ret
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	08 95       	ret
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	08 95       	ret

000020a6 <twi_attachSlaveRxEvent>:
    20a6:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <twi_onSlaveReceive+0x1>
    20aa:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <twi_onSlaveReceive>
    20ae:	08 95       	ret

000020b0 <twi_attachSlaveTxEvent>:
    20b0:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <twi_onSlaveTransmit+0x1>
    20b4:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <twi_onSlaveTransmit>
    20b8:	08 95       	ret

000020ba <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20ba:	85 ed       	ldi	r24, 0xD5	; 213
    20bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20c4:	84 fd       	sbrc	r24, 4
    20c6:	fc cf       	rjmp	.-8      	; 0x20c0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20c8:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    20cc:	08 95       	ret

000020ce <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20ce:	85 ec       	ldi	r24, 0xC5	; 197
    20d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    20d4:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    20d8:	08 95       	ret

000020da <__vector_24>:
}

ISR(TWI_vect)
{
    20da:	1f 92       	push	r1
    20dc:	0f 92       	push	r0
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	0f 92       	push	r0
    20e2:	11 24       	eor	r1, r1
    20e4:	2f 93       	push	r18
    20e6:	3f 93       	push	r19
    20e8:	4f 93       	push	r20
    20ea:	5f 93       	push	r21
    20ec:	6f 93       	push	r22
    20ee:	7f 93       	push	r23
    20f0:	8f 93       	push	r24
    20f2:	9f 93       	push	r25
    20f4:	af 93       	push	r26
    20f6:	bf 93       	push	r27
    20f8:	ef 93       	push	r30
    20fa:	ff 93       	push	r31
  switch(TW_STATUS){
    20fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2100:	88 7f       	andi	r24, 0xF8	; 248
    2102:	80 36       	cpi	r24, 0x60	; 96
    2104:	09 f4       	brne	.+2      	; 0x2108 <__vector_24+0x2e>
    2106:	9e c0       	rjmp	.+316    	; 0x2244 <__vector_24+0x16a>
    2108:	78 f5       	brcc	.+94     	; 0x2168 <__vector_24+0x8e>
    210a:	88 32       	cpi	r24, 0x28	; 40
    210c:	09 f4       	brne	.+2      	; 0x2110 <__vector_24+0x36>
    210e:	5d c0       	rjmp	.+186    	; 0x21ca <__vector_24+0xf0>
    2110:	90 f4       	brcc	.+36     	; 0x2136 <__vector_24+0x5c>
    2112:	80 31       	cpi	r24, 0x10	; 16
    2114:	09 f4       	brne	.+2      	; 0x2118 <__vector_24+0x3e>
    2116:	56 c0       	rjmp	.+172    	; 0x21c4 <__vector_24+0xea>
    2118:	38 f4       	brcc	.+14     	; 0x2128 <__vector_24+0x4e>
    211a:	88 23       	and	r24, r24
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_24+0x46>
    211e:	f5 c0       	rjmp	.+490    	; 0x230a <__vector_24+0x230>
    2120:	88 30       	cpi	r24, 0x08	; 8
    2122:	09 f4       	brne	.+2      	; 0x2126 <__vector_24+0x4c>
    2124:	4f c0       	rjmp	.+158    	; 0x21c4 <__vector_24+0xea>
    2126:	f5 c0       	rjmp	.+490    	; 0x2312 <__vector_24+0x238>
    2128:	88 31       	cpi	r24, 0x18	; 24
    212a:	09 f4       	brne	.+2      	; 0x212e <__vector_24+0x54>
    212c:	4e c0       	rjmp	.+156    	; 0x21ca <__vector_24+0xf0>
    212e:	80 32       	cpi	r24, 0x20	; 32
    2130:	09 f4       	brne	.+2      	; 0x2134 <__vector_24+0x5a>
    2132:	5f c0       	rjmp	.+190    	; 0x21f2 <__vector_24+0x118>
    2134:	ee c0       	rjmp	.+476    	; 0x2312 <__vector_24+0x238>
    2136:	80 34       	cpi	r24, 0x40	; 64
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_24+0x62>
    213a:	6a c0       	rjmp	.+212    	; 0x2210 <__vector_24+0x136>
    213c:	58 f4       	brcc	.+22     	; 0x2154 <__vector_24+0x7a>
    213e:	80 33       	cpi	r24, 0x30	; 48
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_24+0x6a>
    2142:	57 c0       	rjmp	.+174    	; 0x21f2 <__vector_24+0x118>
    2144:	88 33       	cpi	r24, 0x38	; 56
    2146:	09 f0       	breq	.+2      	; 0x214a <__vector_24+0x70>
    2148:	e4 c0       	rjmp	.+456    	; 0x2312 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    214a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_error>
      twi_releaseBus();
    214e:	0e 94 67 10 	call	0x20ce	; 0x20ce <twi_releaseBus>
      break;
    2152:	df c0       	rjmp	.+446    	; 0x2312 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2154:	80 35       	cpi	r24, 0x50	; 80
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_24+0x80>
    2158:	4f c0       	rjmp	.+158    	; 0x21f8 <__vector_24+0x11e>
    215a:	88 35       	cpi	r24, 0x58	; 88
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_24+0x86>
    215e:	5d c0       	rjmp	.+186    	; 0x221a <__vector_24+0x140>
    2160:	88 34       	cpi	r24, 0x48	; 72
    2162:	09 f0       	breq	.+2      	; 0x2166 <__vector_24+0x8c>
    2164:	d6 c0       	rjmp	.+428    	; 0x2312 <__vector_24+0x238>
    2166:	d3 c0       	rjmp	.+422    	; 0x230e <__vector_24+0x234>
    2168:	88 39       	cpi	r24, 0x98	; 152
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_24+0x94>
    216c:	c4 c0       	rjmp	.+392    	; 0x22f6 <__vector_24+0x21c>
    216e:	a8 f4       	brcc	.+42     	; 0x219a <__vector_24+0xc0>
    2170:	88 37       	cpi	r24, 0x78	; 120
    2172:	09 f4       	brne	.+2      	; 0x2176 <__vector_24+0x9c>
    2174:	67 c0       	rjmp	.+206    	; 0x2244 <__vector_24+0x16a>
    2176:	38 f4       	brcc	.+14     	; 0x2186 <__vector_24+0xac>
    2178:	88 36       	cpi	r24, 0x68	; 104
    217a:	09 f4       	brne	.+2      	; 0x217e <__vector_24+0xa4>
    217c:	63 c0       	rjmp	.+198    	; 0x2244 <__vector_24+0x16a>
    217e:	80 37       	cpi	r24, 0x70	; 112
    2180:	09 f4       	brne	.+2      	; 0x2184 <__vector_24+0xaa>
    2182:	60 c0       	rjmp	.+192    	; 0x2244 <__vector_24+0x16a>
    2184:	c6 c0       	rjmp	.+396    	; 0x2312 <__vector_24+0x238>
    2186:	88 38       	cpi	r24, 0x88	; 136
    2188:	09 f4       	brne	.+2      	; 0x218c <__vector_24+0xb2>
    218a:	b5 c0       	rjmp	.+362    	; 0x22f6 <__vector_24+0x21c>
    218c:	80 39       	cpi	r24, 0x90	; 144
    218e:	09 f4       	brne	.+2      	; 0x2192 <__vector_24+0xb8>
    2190:	5f c0       	rjmp	.+190    	; 0x2250 <__vector_24+0x176>
    2192:	80 38       	cpi	r24, 0x80	; 128
    2194:	09 f0       	breq	.+2      	; 0x2198 <__vector_24+0xbe>
    2196:	bd c0       	rjmp	.+378    	; 0x2312 <__vector_24+0x238>
    2198:	5b c0       	rjmp	.+182    	; 0x2250 <__vector_24+0x176>
    219a:	80 3b       	cpi	r24, 0xB0	; 176
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__vector_24+0xc6>
    219e:	83 c0       	rjmp	.+262    	; 0x22a6 <__vector_24+0x1cc>
    21a0:	38 f4       	brcc	.+14     	; 0x21b0 <__vector_24+0xd6>
    21a2:	80 3a       	cpi	r24, 0xA0	; 160
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <__vector_24+0xce>
    21a6:	66 c0       	rjmp	.+204    	; 0x2274 <__vector_24+0x19a>
    21a8:	88 3a       	cpi	r24, 0xA8	; 168
    21aa:	09 f4       	brne	.+2      	; 0x21ae <__vector_24+0xd4>
    21ac:	7c c0       	rjmp	.+248    	; 0x22a6 <__vector_24+0x1cc>
    21ae:	b1 c0       	rjmp	.+354    	; 0x2312 <__vector_24+0x238>
    21b0:	80 3c       	cpi	r24, 0xC0	; 192
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <__vector_24+0xdc>
    21b4:	a4 c0       	rjmp	.+328    	; 0x22fe <__vector_24+0x224>
    21b6:	88 3c       	cpi	r24, 0xC8	; 200
    21b8:	09 f4       	brne	.+2      	; 0x21bc <__vector_24+0xe2>
    21ba:	a1 c0       	rjmp	.+322    	; 0x22fe <__vector_24+0x224>
    21bc:	88 3b       	cpi	r24, 0xB8	; 184
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__vector_24+0xe8>
    21c0:	87 c0       	rjmp	.+270    	; 0x22d0 <__vector_24+0x1f6>
    21c2:	a7 c0       	rjmp	.+334    	; 0x2312 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21c4:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    21c8:	10 c0       	rjmp	.+32     	; 0x21ea <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ca:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    21ce:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
    21d2:	98 17       	cp	r25, r24
    21d4:	70 f5       	brcc	.+92     	; 0x2232 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21d6:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	8e 0f       	add	r24, r30
    21de:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	e2 57       	subi	r30, 0x72	; 114
    21e6:	fd 4f       	sbci	r31, 0xFD	; 253
    21e8:	80 81       	ld	r24, Z
    21ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21ee:	85 ec       	ldi	r24, 0xC5	; 197
    21f0:	83 c0       	rjmp	.+262    	; 0x22f8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21f2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_error>
    21f6:	8b c0       	rjmp	.+278    	; 0x230e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21f8:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	8e 0f       	add	r24, r30
    2200:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    2204:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	e2 57       	subi	r30, 0x72	; 114
    220c:	fd 4f       	sbci	r31, 0xFD	; 253
    220e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2210:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    2214:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
    2218:	6b c0       	rjmp	.+214    	; 0x22f0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    221a:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	8e 0f       	add	r24, r30
    2222:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    2226:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	e2 57       	subi	r30, 0x72	; 114
    222e:	fd 4f       	sbci	r31, 0xFD	; 253
    2230:	80 83       	st	Z, r24
	if (twi_sendStop)
    2232:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_sendStop>
    2236:	81 11       	cpse	r24, r1
    2238:	6a c0       	rjmp	.+212    	; 0x230e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2240:	84 ea       	ldi	r24, 0xA4	; 164
    2242:	5e c0       	rjmp	.+188    	; 0x2300 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    224a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_rxBufferIndex>
    224e:	cf cf       	rjmp	.-98     	; 0x21ee <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2250:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <twi_rxBufferIndex>
    2254:	80 32       	cpi	r24, 0x20	; 32
    2256:	08 f0       	brcs	.+2      	; 0x225a <__vector_24+0x180>
    2258:	4e c0       	rjmp	.+156    	; 0x22f6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    225a:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <twi_rxBufferIndex>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	8e 0f       	add	r24, r30
    2262:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <twi_rxBufferIndex>
    2266:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	e6 5b       	subi	r30, 0xB6	; 182
    226e:	fd 4f       	sbci	r31, 0xFD	; 253
    2270:	80 83       	st	Z, r24
    2272:	bd cf       	rjmp	.-134    	; 0x21ee <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2274:	0e 94 67 10 	call	0x20ce	; 0x20ce <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2278:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <twi_rxBufferIndex>
    227c:	80 32       	cpi	r24, 0x20	; 32
    227e:	30 f4       	brcc	.+12     	; 0x228c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2280:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <twi_rxBufferIndex>
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	e6 5b       	subi	r30, 0xB6	; 182
    2288:	fd 4f       	sbci	r31, 0xFD	; 253
    228a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    228c:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <twi_rxBufferIndex>
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <twi_onSlaveReceive>
    2296:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <twi_onSlaveReceive+0x1>
    229a:	8a e4       	ldi	r24, 0x4A	; 74
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22a0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_rxBufferIndex>
      break;
    22a4:	36 c0       	rjmp	.+108    	; 0x2312 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22a6:	84 e0       	ldi	r24, 0x04	; 4
    22a8:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22ac:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22b0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22b4:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <twi_onSlaveTransmit>
    22b8:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <twi_onSlaveTransmit+0x1>
    22bc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22be:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    22c2:	81 11       	cpse	r24, r1
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22cc:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22d0:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <twi_txBufferIndex>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	8e 0f       	add	r24, r30
    22d8:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_txBufferIndex>
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	e4 59       	subi	r30, 0x94	; 148
    22e0:	fd 4f       	sbci	r31, 0xFD	; 253
    22e2:	80 81       	ld	r24, Z
    22e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22e8:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <twi_txBufferIndex>
    22ec:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    22f0:	98 17       	cp	r25, r24
    22f2:	08 f4       	brcc	.+2      	; 0x22f6 <__vector_24+0x21c>
    22f4:	7c cf       	rjmp	.-264    	; 0x21ee <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22f6:	85 e8       	ldi	r24, 0x85	; 133
    22f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22fc:	0a c0       	rjmp	.+20     	; 0x2312 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22fe:	85 ec       	ldi	r24, 0xC5	; 197
    2300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2304:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
      break;
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    230a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <twi_error>
      twi_stop();
    230e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <twi_stop>
      break;
  }
}
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <__tablejump2__>:
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	05 90       	lpm	r0, Z+
    233a:	f4 91       	lpm	r31, Z
    233c:	e0 2d       	mov	r30, r0
    233e:	09 94       	ijmp

00002340 <malloc>:
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	91 05       	cpc	r25, r1
    234c:	10 f4       	brcc	.+4      	; 0x2352 <malloc+0x12>
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <__flp>
    2356:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <__flp+0x1>
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	a0 e0       	ldi	r26, 0x00	; 0
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	30 97       	sbiw	r30, 0x00	; 0
    2364:	19 f1       	breq	.+70     	; 0x23ac <malloc+0x6c>
    2366:	40 81       	ld	r20, Z
    2368:	51 81       	ldd	r21, Z+1	; 0x01
    236a:	02 81       	ldd	r16, Z+2	; 0x02
    236c:	13 81       	ldd	r17, Z+3	; 0x03
    236e:	48 17       	cp	r20, r24
    2370:	59 07       	cpc	r21, r25
    2372:	c8 f0       	brcs	.+50     	; 0x23a6 <malloc+0x66>
    2374:	84 17       	cp	r24, r20
    2376:	95 07       	cpc	r25, r21
    2378:	69 f4       	brne	.+26     	; 0x2394 <malloc+0x54>
    237a:	10 97       	sbiw	r26, 0x00	; 0
    237c:	31 f0       	breq	.+12     	; 0x238a <malloc+0x4a>
    237e:	12 96       	adiw	r26, 0x02	; 2
    2380:	0c 93       	st	X, r16
    2382:	12 97       	sbiw	r26, 0x02	; 2
    2384:	13 96       	adiw	r26, 0x03	; 3
    2386:	1c 93       	st	X, r17
    2388:	27 c0       	rjmp	.+78     	; 0x23d8 <malloc+0x98>
    238a:	00 93 b8 02 	sts	0x02B8, r16	; 0x8002b8 <__flp>
    238e:	10 93 b9 02 	sts	0x02B9, r17	; 0x8002b9 <__flp+0x1>
    2392:	22 c0       	rjmp	.+68     	; 0x23d8 <malloc+0x98>
    2394:	21 15       	cp	r18, r1
    2396:	31 05       	cpc	r19, r1
    2398:	19 f0       	breq	.+6      	; 0x23a0 <malloc+0x60>
    239a:	42 17       	cp	r20, r18
    239c:	53 07       	cpc	r21, r19
    239e:	18 f4       	brcc	.+6      	; 0x23a6 <malloc+0x66>
    23a0:	9a 01       	movw	r18, r20
    23a2:	bd 01       	movw	r22, r26
    23a4:	ef 01       	movw	r28, r30
    23a6:	df 01       	movw	r26, r30
    23a8:	f8 01       	movw	r30, r16
    23aa:	db cf       	rjmp	.-74     	; 0x2362 <malloc+0x22>
    23ac:	21 15       	cp	r18, r1
    23ae:	31 05       	cpc	r19, r1
    23b0:	f9 f0       	breq	.+62     	; 0x23f0 <malloc+0xb0>
    23b2:	28 1b       	sub	r18, r24
    23b4:	39 0b       	sbc	r19, r25
    23b6:	24 30       	cpi	r18, 0x04	; 4
    23b8:	31 05       	cpc	r19, r1
    23ba:	80 f4       	brcc	.+32     	; 0x23dc <malloc+0x9c>
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	61 15       	cp	r22, r1
    23c2:	71 05       	cpc	r23, r1
    23c4:	21 f0       	breq	.+8      	; 0x23ce <malloc+0x8e>
    23c6:	fb 01       	movw	r30, r22
    23c8:	93 83       	std	Z+3, r25	; 0x03
    23ca:	82 83       	std	Z+2, r24	; 0x02
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <malloc+0x96>
    23ce:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__flp+0x1>
    23d2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__flp>
    23d6:	fe 01       	movw	r30, r28
    23d8:	32 96       	adiw	r30, 0x02	; 2
    23da:	44 c0       	rjmp	.+136    	; 0x2464 <malloc+0x124>
    23dc:	fe 01       	movw	r30, r28
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	81 93       	st	Z+, r24
    23e4:	91 93       	st	Z+, r25
    23e6:	22 50       	subi	r18, 0x02	; 2
    23e8:	31 09       	sbc	r19, r1
    23ea:	39 83       	std	Y+1, r19	; 0x01
    23ec:	28 83       	st	Y, r18
    23ee:	3a c0       	rjmp	.+116    	; 0x2464 <malloc+0x124>
    23f0:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
    23f4:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
    23f8:	23 2b       	or	r18, r19
    23fa:	41 f4       	brne	.+16     	; 0x240c <malloc+0xcc>
    23fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2400:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2404:	30 93 b7 02 	sts	0x02B7, r19	; 0x8002b7 <__brkval+0x1>
    2408:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <__brkval>
    240c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2410:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2414:	21 15       	cp	r18, r1
    2416:	31 05       	cpc	r19, r1
    2418:	41 f4       	brne	.+16     	; 0x242a <malloc+0xea>
    241a:	2d b7       	in	r18, 0x3d	; 61
    241c:	3e b7       	in	r19, 0x3e	; 62
    241e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2422:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2426:	24 1b       	sub	r18, r20
    2428:	35 0b       	sbc	r19, r21
    242a:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <__brkval>
    242e:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <__brkval+0x1>
    2432:	e2 17       	cp	r30, r18
    2434:	f3 07       	cpc	r31, r19
    2436:	a0 f4       	brcc	.+40     	; 0x2460 <malloc+0x120>
    2438:	2e 1b       	sub	r18, r30
    243a:	3f 0b       	sbc	r19, r31
    243c:	28 17       	cp	r18, r24
    243e:	39 07       	cpc	r19, r25
    2440:	78 f0       	brcs	.+30     	; 0x2460 <malloc+0x120>
    2442:	ac 01       	movw	r20, r24
    2444:	4e 5f       	subi	r20, 0xFE	; 254
    2446:	5f 4f       	sbci	r21, 0xFF	; 255
    2448:	24 17       	cp	r18, r20
    244a:	35 07       	cpc	r19, r21
    244c:	48 f0       	brcs	.+18     	; 0x2460 <malloc+0x120>
    244e:	4e 0f       	add	r20, r30
    2450:	5f 1f       	adc	r21, r31
    2452:	50 93 b7 02 	sts	0x02B7, r21	; 0x8002b7 <__brkval+0x1>
    2456:	40 93 b6 02 	sts	0x02B6, r20	; 0x8002b6 <__brkval>
    245a:	81 93       	st	Z+, r24
    245c:	91 93       	st	Z+, r25
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <malloc+0x124>
    2460:	e0 e0       	ldi	r30, 0x00	; 0
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	cf 01       	movw	r24, r30
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	08 95       	ret

00002470 <free>:
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	09 f4       	brne	.+2      	; 0x247a <free+0xa>
    2478:	81 c0       	rjmp	.+258    	; 0x257c <free+0x10c>
    247a:	fc 01       	movw	r30, r24
    247c:	32 97       	sbiw	r30, 0x02	; 2
    247e:	13 82       	std	Z+3, r1	; 0x03
    2480:	12 82       	std	Z+2, r1	; 0x02
    2482:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <__flp>
    2486:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <__flp+0x1>
    248a:	10 97       	sbiw	r26, 0x00	; 0
    248c:	81 f4       	brne	.+32     	; 0x24ae <free+0x3e>
    248e:	20 81       	ld	r18, Z
    2490:	31 81       	ldd	r19, Z+1	; 0x01
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
    249a:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
    249e:	28 17       	cp	r18, r24
    24a0:	39 07       	cpc	r19, r25
    24a2:	51 f5       	brne	.+84     	; 0x24f8 <free+0x88>
    24a4:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__brkval+0x1>
    24a8:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__brkval>
    24ac:	67 c0       	rjmp	.+206    	; 0x257c <free+0x10c>
    24ae:	ed 01       	movw	r28, r26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	ce 17       	cp	r28, r30
    24b6:	df 07       	cpc	r29, r31
    24b8:	40 f4       	brcc	.+16     	; 0x24ca <free+0x5a>
    24ba:	4a 81       	ldd	r20, Y+2	; 0x02
    24bc:	5b 81       	ldd	r21, Y+3	; 0x03
    24be:	9e 01       	movw	r18, r28
    24c0:	41 15       	cp	r20, r1
    24c2:	51 05       	cpc	r21, r1
    24c4:	f1 f0       	breq	.+60     	; 0x2502 <free+0x92>
    24c6:	ea 01       	movw	r28, r20
    24c8:	f5 cf       	rjmp	.-22     	; 0x24b4 <free+0x44>
    24ca:	d3 83       	std	Z+3, r29	; 0x03
    24cc:	c2 83       	std	Z+2, r28	; 0x02
    24ce:	40 81       	ld	r20, Z
    24d0:	51 81       	ldd	r21, Z+1	; 0x01
    24d2:	84 0f       	add	r24, r20
    24d4:	95 1f       	adc	r25, r21
    24d6:	c8 17       	cp	r28, r24
    24d8:	d9 07       	cpc	r29, r25
    24da:	59 f4       	brne	.+22     	; 0x24f2 <free+0x82>
    24dc:	88 81       	ld	r24, Y
    24de:	99 81       	ldd	r25, Y+1	; 0x01
    24e0:	84 0f       	add	r24, r20
    24e2:	95 1f       	adc	r25, r21
    24e4:	02 96       	adiw	r24, 0x02	; 2
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	93 83       	std	Z+3, r25	; 0x03
    24f0:	82 83       	std	Z+2, r24	; 0x02
    24f2:	21 15       	cp	r18, r1
    24f4:	31 05       	cpc	r19, r1
    24f6:	29 f4       	brne	.+10     	; 0x2502 <free+0x92>
    24f8:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__flp+0x1>
    24fc:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__flp>
    2500:	3d c0       	rjmp	.+122    	; 0x257c <free+0x10c>
    2502:	e9 01       	movw	r28, r18
    2504:	fb 83       	std	Y+3, r31	; 0x03
    2506:	ea 83       	std	Y+2, r30	; 0x02
    2508:	49 91       	ld	r20, Y+
    250a:	59 91       	ld	r21, Y+
    250c:	c4 0f       	add	r28, r20
    250e:	d5 1f       	adc	r29, r21
    2510:	ec 17       	cp	r30, r28
    2512:	fd 07       	cpc	r31, r29
    2514:	61 f4       	brne	.+24     	; 0x252e <free+0xbe>
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	84 0f       	add	r24, r20
    251c:	95 1f       	adc	r25, r21
    251e:	02 96       	adiw	r24, 0x02	; 2
    2520:	e9 01       	movw	r28, r18
    2522:	99 83       	std	Y+1, r25	; 0x01
    2524:	88 83       	st	Y, r24
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	e0 e0       	ldi	r30, 0x00	; 0
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	12 96       	adiw	r26, 0x02	; 2
    2534:	8d 91       	ld	r24, X+
    2536:	9c 91       	ld	r25, X
    2538:	13 97       	sbiw	r26, 0x03	; 3
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	19 f0       	breq	.+6      	; 0x2544 <free+0xd4>
    253e:	fd 01       	movw	r30, r26
    2540:	dc 01       	movw	r26, r24
    2542:	f7 cf       	rjmp	.-18     	; 0x2532 <free+0xc2>
    2544:	8d 91       	ld	r24, X+
    2546:	9c 91       	ld	r25, X
    2548:	11 97       	sbiw	r26, 0x01	; 1
    254a:	9d 01       	movw	r18, r26
    254c:	2e 5f       	subi	r18, 0xFE	; 254
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
    2558:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	69 f4       	brne	.+26     	; 0x257c <free+0x10c>
    2562:	30 97       	sbiw	r30, 0x00	; 0
    2564:	29 f4       	brne	.+10     	; 0x2570 <free+0x100>
    2566:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <__flp+0x1>
    256a:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <__flp>
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <free+0x104>
    2570:	13 82       	std	Z+3, r1	; 0x03
    2572:	12 82       	std	Z+2, r1	; 0x02
    2574:	b0 93 b7 02 	sts	0x02B7, r27	; 0x8002b7 <__brkval+0x1>
    2578:	a0 93 b6 02 	sts	0x02B6, r26	; 0x8002b6 <__brkval>
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <realloc>:
    2582:	a0 e0       	ldi	r26, 0x00	; 0
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e7 ec       	ldi	r30, 0xC7	; 199
    2588:	f2 e1       	ldi	r31, 0x12	; 18
    258a:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x8>
    258e:	ec 01       	movw	r28, r24
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	21 f4       	brne	.+8      	; 0x259c <realloc+0x1a>
    2594:	cb 01       	movw	r24, r22
    2596:	0e 94 a0 11 	call	0x2340	; 0x2340 <malloc>
    259a:	b4 c0       	rjmp	.+360    	; 0x2704 <realloc+0x182>
    259c:	fc 01       	movw	r30, r24
    259e:	e6 0f       	add	r30, r22
    25a0:	f7 1f       	adc	r31, r23
    25a2:	9c 01       	movw	r18, r24
    25a4:	22 50       	subi	r18, 0x02	; 2
    25a6:	31 09       	sbc	r19, r1
    25a8:	e2 17       	cp	r30, r18
    25aa:	f3 07       	cpc	r31, r19
    25ac:	08 f4       	brcc	.+2      	; 0x25b0 <realloc+0x2e>
    25ae:	a8 c0       	rjmp	.+336    	; 0x2700 <realloc+0x17e>
    25b0:	d9 01       	movw	r26, r18
    25b2:	0d 91       	ld	r16, X+
    25b4:	1c 91       	ld	r17, X
    25b6:	11 97       	sbiw	r26, 0x01	; 1
    25b8:	06 17       	cp	r16, r22
    25ba:	17 07       	cpc	r17, r23
    25bc:	b0 f0       	brcs	.+44     	; 0x25ea <realloc+0x68>
    25be:	05 30       	cpi	r16, 0x05	; 5
    25c0:	11 05       	cpc	r17, r1
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <realloc+0x44>
    25c4:	9b c0       	rjmp	.+310    	; 0x26fc <realloc+0x17a>
    25c6:	c8 01       	movw	r24, r16
    25c8:	04 97       	sbiw	r24, 0x04	; 4
    25ca:	86 17       	cp	r24, r22
    25cc:	97 07       	cpc	r25, r23
    25ce:	08 f4       	brcc	.+2      	; 0x25d2 <realloc+0x50>
    25d0:	95 c0       	rjmp	.+298    	; 0x26fc <realloc+0x17a>
    25d2:	02 50       	subi	r16, 0x02	; 2
    25d4:	11 09       	sbc	r17, r1
    25d6:	06 1b       	sub	r16, r22
    25d8:	17 0b       	sbc	r17, r23
    25da:	01 93       	st	Z+, r16
    25dc:	11 93       	st	Z+, r17
    25de:	6d 93       	st	X+, r22
    25e0:	7c 93       	st	X, r23
    25e2:	cf 01       	movw	r24, r30
    25e4:	0e 94 38 12 	call	0x2470	; 0x2470 <free>
    25e8:	89 c0       	rjmp	.+274    	; 0x26fc <realloc+0x17a>
    25ea:	5b 01       	movw	r10, r22
    25ec:	a0 1a       	sub	r10, r16
    25ee:	b1 0a       	sbc	r11, r17
    25f0:	4c 01       	movw	r8, r24
    25f2:	80 0e       	add	r8, r16
    25f4:	91 1e       	adc	r9, r17
    25f6:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <__flp>
    25fa:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <__flp+0x1>
    25fe:	61 2c       	mov	r6, r1
    2600:	71 2c       	mov	r7, r1
    2602:	e1 2c       	mov	r14, r1
    2604:	f1 2c       	mov	r15, r1
    2606:	10 97       	sbiw	r26, 0x00	; 0
    2608:	09 f4       	brne	.+2      	; 0x260c <realloc+0x8a>
    260a:	46 c0       	rjmp	.+140    	; 0x2698 <realloc+0x116>
    260c:	8d 91       	ld	r24, X+
    260e:	9c 91       	ld	r25, X
    2610:	11 97       	sbiw	r26, 0x01	; 1
    2612:	a8 15       	cp	r26, r8
    2614:	b9 05       	cpc	r27, r9
    2616:	b1 f5       	brne	.+108    	; 0x2684 <realloc+0x102>
    2618:	6c 01       	movw	r12, r24
    261a:	42 e0       	ldi	r20, 0x02	; 2
    261c:	c4 0e       	add	r12, r20
    261e:	d1 1c       	adc	r13, r1
    2620:	ca 14       	cp	r12, r10
    2622:	db 04       	cpc	r13, r11
    2624:	78 f1       	brcs	.+94     	; 0x2684 <realloc+0x102>
    2626:	4c 01       	movw	r8, r24
    2628:	8a 18       	sub	r8, r10
    262a:	9b 08       	sbc	r9, r11
    262c:	64 01       	movw	r12, r8
    262e:	42 e0       	ldi	r20, 0x02	; 2
    2630:	c4 0e       	add	r12, r20
    2632:	d1 1c       	adc	r13, r1
    2634:	12 96       	adiw	r26, 0x02	; 2
    2636:	bc 90       	ld	r11, X
    2638:	12 97       	sbiw	r26, 0x02	; 2
    263a:	13 96       	adiw	r26, 0x03	; 3
    263c:	ac 91       	ld	r26, X
    263e:	b5 e0       	ldi	r27, 0x05	; 5
    2640:	cb 16       	cp	r12, r27
    2642:	d1 04       	cpc	r13, r1
    2644:	40 f0       	brcs	.+16     	; 0x2656 <realloc+0xd4>
    2646:	b2 82       	std	Z+2, r11	; 0x02
    2648:	a3 83       	std	Z+3, r26	; 0x03
    264a:	91 82       	std	Z+1, r9	; 0x01
    264c:	80 82       	st	Z, r8
    264e:	d9 01       	movw	r26, r18
    2650:	6d 93       	st	X+, r22
    2652:	7c 93       	st	X, r23
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <realloc+0xe6>
    2656:	0e 5f       	subi	r16, 0xFE	; 254
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	80 0f       	add	r24, r16
    265c:	91 1f       	adc	r25, r17
    265e:	f9 01       	movw	r30, r18
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	eb 2d       	mov	r30, r11
    2666:	fa 2f       	mov	r31, r26
    2668:	e1 14       	cp	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	31 f0       	breq	.+12     	; 0x267a <realloc+0xf8>
    266e:	d7 01       	movw	r26, r14
    2670:	13 96       	adiw	r26, 0x03	; 3
    2672:	fc 93       	st	X, r31
    2674:	ee 93       	st	-X, r30
    2676:	12 97       	sbiw	r26, 0x02	; 2
    2678:	41 c0       	rjmp	.+130    	; 0x26fc <realloc+0x17a>
    267a:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__flp+0x1>
    267e:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__flp>
    2682:	3c c0       	rjmp	.+120    	; 0x26fc <realloc+0x17a>
    2684:	68 16       	cp	r6, r24
    2686:	79 06       	cpc	r7, r25
    2688:	08 f4       	brcc	.+2      	; 0x268c <realloc+0x10a>
    268a:	3c 01       	movw	r6, r24
    268c:	7d 01       	movw	r14, r26
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	0d 90       	ld	r0, X+
    2692:	bc 91       	ld	r27, X
    2694:	a0 2d       	mov	r26, r0
    2696:	b7 cf       	rjmp	.-146    	; 0x2606 <realloc+0x84>
    2698:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__brkval>
    269c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__brkval+0x1>
    26a0:	88 16       	cp	r8, r24
    26a2:	99 06       	cpc	r9, r25
    26a4:	e1 f4       	brne	.+56     	; 0x26de <realloc+0x15c>
    26a6:	66 16       	cp	r6, r22
    26a8:	77 06       	cpc	r7, r23
    26aa:	c8 f4       	brcc	.+50     	; 0x26de <realloc+0x15c>
    26ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    26b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	41 f4       	brne	.+16     	; 0x26c8 <realloc+0x146>
    26b8:	8d b7       	in	r24, 0x3d	; 61
    26ba:	9e b7       	in	r25, 0x3e	; 62
    26bc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26c0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26c4:	84 1b       	sub	r24, r20
    26c6:	95 0b       	sbc	r25, r21
    26c8:	e8 17       	cp	r30, r24
    26ca:	f9 07       	cpc	r31, r25
    26cc:	c8 f4       	brcc	.+50     	; 0x2700 <realloc+0x17e>
    26ce:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__brkval+0x1>
    26d2:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__brkval>
    26d6:	f9 01       	movw	r30, r18
    26d8:	71 83       	std	Z+1, r23	; 0x01
    26da:	60 83       	st	Z, r22
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <realloc+0x17a>
    26de:	cb 01       	movw	r24, r22
    26e0:	0e 94 a0 11 	call	0x2340	; 0x2340 <malloc>
    26e4:	7c 01       	movw	r14, r24
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	59 f0       	breq	.+22     	; 0x2700 <realloc+0x17e>
    26ea:	a8 01       	movw	r20, r16
    26ec:	be 01       	movw	r22, r28
    26ee:	0e 94 87 13 	call	0x270e	; 0x270e <memcpy>
    26f2:	ce 01       	movw	r24, r28
    26f4:	0e 94 38 12 	call	0x2470	; 0x2470 <free>
    26f8:	c7 01       	movw	r24, r14
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <realloc+0x182>
    26fc:	ce 01       	movw	r24, r28
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <realloc+0x182>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	ee e0       	ldi	r30, 0x0E	; 14
    270a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x8>

0000270e <memcpy>:
    270e:	fb 01       	movw	r30, r22
    2710:	dc 01       	movw	r26, r24
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <memcpy+0xa>
    2714:	01 90       	ld	r0, Z+
    2716:	0d 92       	st	X+, r0
    2718:	41 50       	subi	r20, 0x01	; 1
    271a:	50 40       	sbci	r21, 0x00	; 0
    271c:	d8 f7       	brcc	.-10     	; 0x2714 <memcpy+0x6>
    271e:	08 95       	ret

00002720 <strcpy>:
    2720:	fb 01       	movw	r30, r22
    2722:	dc 01       	movw	r26, r24
    2724:	01 90       	ld	r0, Z+
    2726:	0d 92       	st	X+, r0
    2728:	00 20       	and	r0, r0
    272a:	e1 f7       	brne	.-8      	; 0x2724 <strcpy+0x4>
    272c:	08 95       	ret

0000272e <sprintf>:
    272e:	ae e0       	ldi	r26, 0x0E	; 14
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ed e9       	ldi	r30, 0x9D	; 157
    2734:	f3 e1       	ldi	r31, 0x13	; 19
    2736:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x1c>
    273a:	0d 89       	ldd	r16, Y+21	; 0x15
    273c:	1e 89       	ldd	r17, Y+22	; 0x16
    273e:	86 e0       	ldi	r24, 0x06	; 6
    2740:	8c 83       	std	Y+4, r24	; 0x04
    2742:	1a 83       	std	Y+2, r17	; 0x02
    2744:	09 83       	std	Y+1, r16	; 0x01
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	9f e7       	ldi	r25, 0x7F	; 127
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	ae 01       	movw	r20, r28
    2750:	47 5e       	subi	r20, 0xE7	; 231
    2752:	5f 4f       	sbci	r21, 0xFF	; 255
    2754:	6f 89       	ldd	r22, Y+23	; 0x17
    2756:	78 8d       	ldd	r23, Y+24	; 0x18
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	0e 94 b9 13 	call	0x2772	; 0x2772 <vfprintf>
    2760:	ef 81       	ldd	r30, Y+7	; 0x07
    2762:	f8 85       	ldd	r31, Y+8	; 0x08
    2764:	e0 0f       	add	r30, r16
    2766:	f1 1f       	adc	r31, r17
    2768:	10 82       	st	Z, r1
    276a:	2e 96       	adiw	r28, 0x0e	; 14
    276c:	e4 e0       	ldi	r30, 0x04	; 4
    276e:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x1c>

00002772 <vfprintf>:
    2772:	ab e0       	ldi	r26, 0x0B	; 11
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ef eb       	ldi	r30, 0xBF	; 191
    2778:	f3 e1       	ldi	r31, 0x13	; 19
    277a:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__prologue_saves__>
    277e:	6c 01       	movw	r12, r24
    2780:	7b 01       	movw	r14, r22
    2782:	8a 01       	movw	r16, r20
    2784:	fc 01       	movw	r30, r24
    2786:	17 82       	std	Z+7, r1	; 0x07
    2788:	16 82       	std	Z+6, r1	; 0x06
    278a:	83 81       	ldd	r24, Z+3	; 0x03
    278c:	81 ff       	sbrs	r24, 1
    278e:	cc c1       	rjmp	.+920    	; 0x2b28 <vfprintf+0x3b6>
    2790:	ce 01       	movw	r24, r28
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	3c 01       	movw	r6, r24
    2796:	f6 01       	movw	r30, r12
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	f7 01       	movw	r30, r14
    279c:	93 fd       	sbrc	r25, 3
    279e:	85 91       	lpm	r24, Z+
    27a0:	93 ff       	sbrs	r25, 3
    27a2:	81 91       	ld	r24, Z+
    27a4:	7f 01       	movw	r14, r30
    27a6:	88 23       	and	r24, r24
    27a8:	09 f4       	brne	.+2      	; 0x27ac <vfprintf+0x3a>
    27aa:	ba c1       	rjmp	.+884    	; 0x2b20 <vfprintf+0x3ae>
    27ac:	85 32       	cpi	r24, 0x25	; 37
    27ae:	39 f4       	brne	.+14     	; 0x27be <vfprintf+0x4c>
    27b0:	93 fd       	sbrc	r25, 3
    27b2:	85 91       	lpm	r24, Z+
    27b4:	93 ff       	sbrs	r25, 3
    27b6:	81 91       	ld	r24, Z+
    27b8:	7f 01       	movw	r14, r30
    27ba:	85 32       	cpi	r24, 0x25	; 37
    27bc:	29 f4       	brne	.+10     	; 0x27c8 <vfprintf+0x56>
    27be:	b6 01       	movw	r22, r12
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    27c6:	e7 cf       	rjmp	.-50     	; 0x2796 <vfprintf+0x24>
    27c8:	91 2c       	mov	r9, r1
    27ca:	21 2c       	mov	r2, r1
    27cc:	31 2c       	mov	r3, r1
    27ce:	ff e1       	ldi	r31, 0x1F	; 31
    27d0:	f3 15       	cp	r31, r3
    27d2:	d8 f0       	brcs	.+54     	; 0x280a <vfprintf+0x98>
    27d4:	8b 32       	cpi	r24, 0x2B	; 43
    27d6:	79 f0       	breq	.+30     	; 0x27f6 <vfprintf+0x84>
    27d8:	38 f4       	brcc	.+14     	; 0x27e8 <vfprintf+0x76>
    27da:	80 32       	cpi	r24, 0x20	; 32
    27dc:	79 f0       	breq	.+30     	; 0x27fc <vfprintf+0x8a>
    27de:	83 32       	cpi	r24, 0x23	; 35
    27e0:	a1 f4       	brne	.+40     	; 0x280a <vfprintf+0x98>
    27e2:	23 2d       	mov	r18, r3
    27e4:	20 61       	ori	r18, 0x10	; 16
    27e6:	1d c0       	rjmp	.+58     	; 0x2822 <vfprintf+0xb0>
    27e8:	8d 32       	cpi	r24, 0x2D	; 45
    27ea:	61 f0       	breq	.+24     	; 0x2804 <vfprintf+0x92>
    27ec:	80 33       	cpi	r24, 0x30	; 48
    27ee:	69 f4       	brne	.+26     	; 0x280a <vfprintf+0x98>
    27f0:	23 2d       	mov	r18, r3
    27f2:	21 60       	ori	r18, 0x01	; 1
    27f4:	16 c0       	rjmp	.+44     	; 0x2822 <vfprintf+0xb0>
    27f6:	83 2d       	mov	r24, r3
    27f8:	82 60       	ori	r24, 0x02	; 2
    27fa:	38 2e       	mov	r3, r24
    27fc:	e3 2d       	mov	r30, r3
    27fe:	e4 60       	ori	r30, 0x04	; 4
    2800:	3e 2e       	mov	r3, r30
    2802:	2a c0       	rjmp	.+84     	; 0x2858 <vfprintf+0xe6>
    2804:	f3 2d       	mov	r31, r3
    2806:	f8 60       	ori	r31, 0x08	; 8
    2808:	1d c0       	rjmp	.+58     	; 0x2844 <vfprintf+0xd2>
    280a:	37 fc       	sbrc	r3, 7
    280c:	2d c0       	rjmp	.+90     	; 0x2868 <vfprintf+0xf6>
    280e:	20 ed       	ldi	r18, 0xD0	; 208
    2810:	28 0f       	add	r18, r24
    2812:	2a 30       	cpi	r18, 0x0A	; 10
    2814:	40 f0       	brcs	.+16     	; 0x2826 <vfprintf+0xb4>
    2816:	8e 32       	cpi	r24, 0x2E	; 46
    2818:	b9 f4       	brne	.+46     	; 0x2848 <vfprintf+0xd6>
    281a:	36 fc       	sbrc	r3, 6
    281c:	81 c1       	rjmp	.+770    	; 0x2b20 <vfprintf+0x3ae>
    281e:	23 2d       	mov	r18, r3
    2820:	20 64       	ori	r18, 0x40	; 64
    2822:	32 2e       	mov	r3, r18
    2824:	19 c0       	rjmp	.+50     	; 0x2858 <vfprintf+0xe6>
    2826:	36 fe       	sbrs	r3, 6
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <vfprintf+0xc4>
    282a:	8a e0       	ldi	r24, 0x0A	; 10
    282c:	98 9e       	mul	r9, r24
    282e:	20 0d       	add	r18, r0
    2830:	11 24       	eor	r1, r1
    2832:	92 2e       	mov	r9, r18
    2834:	11 c0       	rjmp	.+34     	; 0x2858 <vfprintf+0xe6>
    2836:	ea e0       	ldi	r30, 0x0A	; 10
    2838:	2e 9e       	mul	r2, r30
    283a:	20 0d       	add	r18, r0
    283c:	11 24       	eor	r1, r1
    283e:	22 2e       	mov	r2, r18
    2840:	f3 2d       	mov	r31, r3
    2842:	f0 62       	ori	r31, 0x20	; 32
    2844:	3f 2e       	mov	r3, r31
    2846:	08 c0       	rjmp	.+16     	; 0x2858 <vfprintf+0xe6>
    2848:	8c 36       	cpi	r24, 0x6C	; 108
    284a:	21 f4       	brne	.+8      	; 0x2854 <vfprintf+0xe2>
    284c:	83 2d       	mov	r24, r3
    284e:	80 68       	ori	r24, 0x80	; 128
    2850:	38 2e       	mov	r3, r24
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <vfprintf+0xe6>
    2854:	88 36       	cpi	r24, 0x68	; 104
    2856:	41 f4       	brne	.+16     	; 0x2868 <vfprintf+0xf6>
    2858:	f7 01       	movw	r30, r14
    285a:	93 fd       	sbrc	r25, 3
    285c:	85 91       	lpm	r24, Z+
    285e:	93 ff       	sbrs	r25, 3
    2860:	81 91       	ld	r24, Z+
    2862:	7f 01       	movw	r14, r30
    2864:	81 11       	cpse	r24, r1
    2866:	b3 cf       	rjmp	.-154    	; 0x27ce <vfprintf+0x5c>
    2868:	98 2f       	mov	r25, r24
    286a:	9f 7d       	andi	r25, 0xDF	; 223
    286c:	95 54       	subi	r25, 0x45	; 69
    286e:	93 30       	cpi	r25, 0x03	; 3
    2870:	28 f4       	brcc	.+10     	; 0x287c <vfprintf+0x10a>
    2872:	0c 5f       	subi	r16, 0xFC	; 252
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	9f e3       	ldi	r25, 0x3F	; 63
    2878:	99 83       	std	Y+1, r25	; 0x01
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <vfprintf+0x124>
    287c:	83 36       	cpi	r24, 0x63	; 99
    287e:	31 f0       	breq	.+12     	; 0x288c <vfprintf+0x11a>
    2880:	83 37       	cpi	r24, 0x73	; 115
    2882:	71 f0       	breq	.+28     	; 0x28a0 <vfprintf+0x12e>
    2884:	83 35       	cpi	r24, 0x53	; 83
    2886:	09 f0       	breq	.+2      	; 0x288a <vfprintf+0x118>
    2888:	59 c0       	rjmp	.+178    	; 0x293c <vfprintf+0x1ca>
    288a:	21 c0       	rjmp	.+66     	; 0x28ce <vfprintf+0x15c>
    288c:	f8 01       	movw	r30, r16
    288e:	80 81       	ld	r24, Z
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	0e 5f       	subi	r16, 0xFE	; 254
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	88 24       	eor	r8, r8
    2898:	83 94       	inc	r8
    289a:	91 2c       	mov	r9, r1
    289c:	53 01       	movw	r10, r6
    289e:	13 c0       	rjmp	.+38     	; 0x28c6 <vfprintf+0x154>
    28a0:	28 01       	movw	r4, r16
    28a2:	f2 e0       	ldi	r31, 0x02	; 2
    28a4:	4f 0e       	add	r4, r31
    28a6:	51 1c       	adc	r5, r1
    28a8:	f8 01       	movw	r30, r16
    28aa:	a0 80       	ld	r10, Z
    28ac:	b1 80       	ldd	r11, Z+1	; 0x01
    28ae:	36 fe       	sbrs	r3, 6
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <vfprintf+0x146>
    28b2:	69 2d       	mov	r22, r9
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <vfprintf+0x14a>
    28b8:	6f ef       	ldi	r22, 0xFF	; 255
    28ba:	7f ef       	ldi	r23, 0xFF	; 255
    28bc:	c5 01       	movw	r24, r10
    28be:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <strnlen>
    28c2:	4c 01       	movw	r8, r24
    28c4:	82 01       	movw	r16, r4
    28c6:	f3 2d       	mov	r31, r3
    28c8:	ff 77       	andi	r31, 0x7F	; 127
    28ca:	3f 2e       	mov	r3, r31
    28cc:	16 c0       	rjmp	.+44     	; 0x28fa <vfprintf+0x188>
    28ce:	28 01       	movw	r4, r16
    28d0:	22 e0       	ldi	r18, 0x02	; 2
    28d2:	42 0e       	add	r4, r18
    28d4:	51 1c       	adc	r5, r1
    28d6:	f8 01       	movw	r30, r16
    28d8:	a0 80       	ld	r10, Z
    28da:	b1 80       	ldd	r11, Z+1	; 0x01
    28dc:	36 fe       	sbrs	r3, 6
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <vfprintf+0x174>
    28e0:	69 2d       	mov	r22, r9
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <vfprintf+0x178>
    28e6:	6f ef       	ldi	r22, 0xFF	; 255
    28e8:	7f ef       	ldi	r23, 0xFF	; 255
    28ea:	c5 01       	movw	r24, r10
    28ec:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <strnlen_P>
    28f0:	4c 01       	movw	r8, r24
    28f2:	f3 2d       	mov	r31, r3
    28f4:	f0 68       	ori	r31, 0x80	; 128
    28f6:	3f 2e       	mov	r3, r31
    28f8:	82 01       	movw	r16, r4
    28fa:	33 fc       	sbrc	r3, 3
    28fc:	1b c0       	rjmp	.+54     	; 0x2934 <vfprintf+0x1c2>
    28fe:	82 2d       	mov	r24, r2
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	88 16       	cp	r8, r24
    2904:	99 06       	cpc	r9, r25
    2906:	b0 f4       	brcc	.+44     	; 0x2934 <vfprintf+0x1c2>
    2908:	b6 01       	movw	r22, r12
    290a:	80 e2       	ldi	r24, 0x20	; 32
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2912:	2a 94       	dec	r2
    2914:	f4 cf       	rjmp	.-24     	; 0x28fe <vfprintf+0x18c>
    2916:	f5 01       	movw	r30, r10
    2918:	37 fc       	sbrc	r3, 7
    291a:	85 91       	lpm	r24, Z+
    291c:	37 fe       	sbrs	r3, 7
    291e:	81 91       	ld	r24, Z+
    2920:	5f 01       	movw	r10, r30
    2922:	b6 01       	movw	r22, r12
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    292a:	21 10       	cpse	r2, r1
    292c:	2a 94       	dec	r2
    292e:	21 e0       	ldi	r18, 0x01	; 1
    2930:	82 1a       	sub	r8, r18
    2932:	91 08       	sbc	r9, r1
    2934:	81 14       	cp	r8, r1
    2936:	91 04       	cpc	r9, r1
    2938:	71 f7       	brne	.-36     	; 0x2916 <vfprintf+0x1a4>
    293a:	e8 c0       	rjmp	.+464    	; 0x2b0c <vfprintf+0x39a>
    293c:	84 36       	cpi	r24, 0x64	; 100
    293e:	11 f0       	breq	.+4      	; 0x2944 <vfprintf+0x1d2>
    2940:	89 36       	cpi	r24, 0x69	; 105
    2942:	41 f5       	brne	.+80     	; 0x2994 <vfprintf+0x222>
    2944:	f8 01       	movw	r30, r16
    2946:	37 fe       	sbrs	r3, 7
    2948:	07 c0       	rjmp	.+14     	; 0x2958 <vfprintf+0x1e6>
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	0c 5f       	subi	r16, 0xFC	; 252
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	08 c0       	rjmp	.+16     	; 0x2968 <vfprintf+0x1f6>
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	07 2e       	mov	r0, r23
    295e:	00 0c       	add	r0, r0
    2960:	88 0b       	sbc	r24, r24
    2962:	99 0b       	sbc	r25, r25
    2964:	0e 5f       	subi	r16, 0xFE	; 254
    2966:	1f 4f       	sbci	r17, 0xFF	; 255
    2968:	f3 2d       	mov	r31, r3
    296a:	ff 76       	andi	r31, 0x6F	; 111
    296c:	3f 2e       	mov	r3, r31
    296e:	97 ff       	sbrs	r25, 7
    2970:	09 c0       	rjmp	.+18     	; 0x2984 <vfprintf+0x212>
    2972:	90 95       	com	r25
    2974:	80 95       	com	r24
    2976:	70 95       	com	r23
    2978:	61 95       	neg	r22
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	8f 4f       	sbci	r24, 0xFF	; 255
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	f0 68       	ori	r31, 0x80	; 128
    2982:	3f 2e       	mov	r3, r31
    2984:	2a e0       	ldi	r18, 0x0A	; 10
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	a3 01       	movw	r20, r6
    298a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__ultoa_invert>
    298e:	88 2e       	mov	r8, r24
    2990:	86 18       	sub	r8, r6
    2992:	45 c0       	rjmp	.+138    	; 0x2a1e <vfprintf+0x2ac>
    2994:	85 37       	cpi	r24, 0x75	; 117
    2996:	31 f4       	brne	.+12     	; 0x29a4 <vfprintf+0x232>
    2998:	23 2d       	mov	r18, r3
    299a:	2f 7e       	andi	r18, 0xEF	; 239
    299c:	b2 2e       	mov	r11, r18
    299e:	2a e0       	ldi	r18, 0x0A	; 10
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	25 c0       	rjmp	.+74     	; 0x29ee <vfprintf+0x27c>
    29a4:	93 2d       	mov	r25, r3
    29a6:	99 7f       	andi	r25, 0xF9	; 249
    29a8:	b9 2e       	mov	r11, r25
    29aa:	8f 36       	cpi	r24, 0x6F	; 111
    29ac:	c1 f0       	breq	.+48     	; 0x29de <vfprintf+0x26c>
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <vfprintf+0x244>
    29b0:	88 35       	cpi	r24, 0x58	; 88
    29b2:	79 f0       	breq	.+30     	; 0x29d2 <vfprintf+0x260>
    29b4:	b5 c0       	rjmp	.+362    	; 0x2b20 <vfprintf+0x3ae>
    29b6:	80 37       	cpi	r24, 0x70	; 112
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <vfprintf+0x24e>
    29ba:	88 37       	cpi	r24, 0x78	; 120
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <vfprintf+0x254>
    29be:	b0 c0       	rjmp	.+352    	; 0x2b20 <vfprintf+0x3ae>
    29c0:	e9 2f       	mov	r30, r25
    29c2:	e0 61       	ori	r30, 0x10	; 16
    29c4:	be 2e       	mov	r11, r30
    29c6:	b4 fe       	sbrs	r11, 4
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <vfprintf+0x272>
    29ca:	fb 2d       	mov	r31, r11
    29cc:	f4 60       	ori	r31, 0x04	; 4
    29ce:	bf 2e       	mov	r11, r31
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <vfprintf+0x272>
    29d2:	34 fe       	sbrs	r3, 4
    29d4:	0a c0       	rjmp	.+20     	; 0x29ea <vfprintf+0x278>
    29d6:	29 2f       	mov	r18, r25
    29d8:	26 60       	ori	r18, 0x06	; 6
    29da:	b2 2e       	mov	r11, r18
    29dc:	06 c0       	rjmp	.+12     	; 0x29ea <vfprintf+0x278>
    29de:	28 e0       	ldi	r18, 0x08	; 8
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <vfprintf+0x27c>
    29e4:	20 e1       	ldi	r18, 0x10	; 16
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <vfprintf+0x27c>
    29ea:	20 e1       	ldi	r18, 0x10	; 16
    29ec:	32 e0       	ldi	r19, 0x02	; 2
    29ee:	f8 01       	movw	r30, r16
    29f0:	b7 fe       	sbrs	r11, 7
    29f2:	07 c0       	rjmp	.+14     	; 0x2a02 <vfprintf+0x290>
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	0c 5f       	subi	r16, 0xFC	; 252
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	06 c0       	rjmp	.+12     	; 0x2a0e <vfprintf+0x29c>
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 5f       	subi	r16, 0xFE	; 254
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	a3 01       	movw	r20, r6
    2a10:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__ultoa_invert>
    2a14:	88 2e       	mov	r8, r24
    2a16:	86 18       	sub	r8, r6
    2a18:	fb 2d       	mov	r31, r11
    2a1a:	ff 77       	andi	r31, 0x7F	; 127
    2a1c:	3f 2e       	mov	r3, r31
    2a1e:	36 fe       	sbrs	r3, 6
    2a20:	0d c0       	rjmp	.+26     	; 0x2a3c <vfprintf+0x2ca>
    2a22:	23 2d       	mov	r18, r3
    2a24:	2e 7f       	andi	r18, 0xFE	; 254
    2a26:	a2 2e       	mov	r10, r18
    2a28:	89 14       	cp	r8, r9
    2a2a:	58 f4       	brcc	.+22     	; 0x2a42 <vfprintf+0x2d0>
    2a2c:	34 fe       	sbrs	r3, 4
    2a2e:	0b c0       	rjmp	.+22     	; 0x2a46 <vfprintf+0x2d4>
    2a30:	32 fc       	sbrc	r3, 2
    2a32:	09 c0       	rjmp	.+18     	; 0x2a46 <vfprintf+0x2d4>
    2a34:	83 2d       	mov	r24, r3
    2a36:	8e 7e       	andi	r24, 0xEE	; 238
    2a38:	a8 2e       	mov	r10, r24
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <vfprintf+0x2d4>
    2a3c:	b8 2c       	mov	r11, r8
    2a3e:	a3 2c       	mov	r10, r3
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <vfprintf+0x2d6>
    2a42:	b8 2c       	mov	r11, r8
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <vfprintf+0x2d6>
    2a46:	b9 2c       	mov	r11, r9
    2a48:	a4 fe       	sbrs	r10, 4
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <vfprintf+0x2f8>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e8 0d       	add	r30, r8
    2a50:	f1 1d       	adc	r31, r1
    2a52:	80 81       	ld	r24, Z
    2a54:	80 33       	cpi	r24, 0x30	; 48
    2a56:	21 f4       	brne	.+8      	; 0x2a60 <vfprintf+0x2ee>
    2a58:	9a 2d       	mov	r25, r10
    2a5a:	99 7e       	andi	r25, 0xE9	; 233
    2a5c:	a9 2e       	mov	r10, r25
    2a5e:	09 c0       	rjmp	.+18     	; 0x2a72 <vfprintf+0x300>
    2a60:	a2 fe       	sbrs	r10, 2
    2a62:	06 c0       	rjmp	.+12     	; 0x2a70 <vfprintf+0x2fe>
    2a64:	b3 94       	inc	r11
    2a66:	b3 94       	inc	r11
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <vfprintf+0x300>
    2a6a:	8a 2d       	mov	r24, r10
    2a6c:	86 78       	andi	r24, 0x86	; 134
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <vfprintf+0x300>
    2a70:	b3 94       	inc	r11
    2a72:	a3 fc       	sbrc	r10, 3
    2a74:	11 c0       	rjmp	.+34     	; 0x2a98 <vfprintf+0x326>
    2a76:	a0 fe       	sbrs	r10, 0
    2a78:	06 c0       	rjmp	.+12     	; 0x2a86 <vfprintf+0x314>
    2a7a:	b2 14       	cp	r11, r2
    2a7c:	88 f4       	brcc	.+34     	; 0x2aa0 <vfprintf+0x32e>
    2a7e:	28 0c       	add	r2, r8
    2a80:	92 2c       	mov	r9, r2
    2a82:	9b 18       	sub	r9, r11
    2a84:	0e c0       	rjmp	.+28     	; 0x2aa2 <vfprintf+0x330>
    2a86:	b2 14       	cp	r11, r2
    2a88:	60 f4       	brcc	.+24     	; 0x2aa2 <vfprintf+0x330>
    2a8a:	b6 01       	movw	r22, r12
    2a8c:	80 e2       	ldi	r24, 0x20	; 32
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2a94:	b3 94       	inc	r11
    2a96:	f7 cf       	rjmp	.-18     	; 0x2a86 <vfprintf+0x314>
    2a98:	b2 14       	cp	r11, r2
    2a9a:	18 f4       	brcc	.+6      	; 0x2aa2 <vfprintf+0x330>
    2a9c:	2b 18       	sub	r2, r11
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <vfprintf+0x332>
    2aa0:	98 2c       	mov	r9, r8
    2aa2:	21 2c       	mov	r2, r1
    2aa4:	a4 fe       	sbrs	r10, 4
    2aa6:	10 c0       	rjmp	.+32     	; 0x2ac8 <vfprintf+0x356>
    2aa8:	b6 01       	movw	r22, r12
    2aaa:	80 e3       	ldi	r24, 0x30	; 48
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2ab2:	a2 fe       	sbrs	r10, 2
    2ab4:	17 c0       	rjmp	.+46     	; 0x2ae4 <vfprintf+0x372>
    2ab6:	a1 fc       	sbrc	r10, 1
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <vfprintf+0x34e>
    2aba:	88 e7       	ldi	r24, 0x78	; 120
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <vfprintf+0x352>
    2ac0:	88 e5       	ldi	r24, 0x58	; 88
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	b6 01       	movw	r22, r12
    2ac6:	0c c0       	rjmp	.+24     	; 0x2ae0 <vfprintf+0x36e>
    2ac8:	8a 2d       	mov	r24, r10
    2aca:	86 78       	andi	r24, 0x86	; 134
    2acc:	59 f0       	breq	.+22     	; 0x2ae4 <vfprintf+0x372>
    2ace:	a1 fe       	sbrs	r10, 1
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <vfprintf+0x364>
    2ad2:	8b e2       	ldi	r24, 0x2B	; 43
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <vfprintf+0x366>
    2ad6:	80 e2       	ldi	r24, 0x20	; 32
    2ad8:	a7 fc       	sbrc	r10, 7
    2ada:	8d e2       	ldi	r24, 0x2D	; 45
    2adc:	b6 01       	movw	r22, r12
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2ae4:	89 14       	cp	r8, r9
    2ae6:	38 f4       	brcc	.+14     	; 0x2af6 <vfprintf+0x384>
    2ae8:	b6 01       	movw	r22, r12
    2aea:	80 e3       	ldi	r24, 0x30	; 48
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2af2:	9a 94       	dec	r9
    2af4:	f7 cf       	rjmp	.-18     	; 0x2ae4 <vfprintf+0x372>
    2af6:	8a 94       	dec	r8
    2af8:	f3 01       	movw	r30, r6
    2afa:	e8 0d       	add	r30, r8
    2afc:	f1 1d       	adc	r31, r1
    2afe:	80 81       	ld	r24, Z
    2b00:	b6 01       	movw	r22, r12
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2b08:	81 10       	cpse	r8, r1
    2b0a:	f5 cf       	rjmp	.-22     	; 0x2af6 <vfprintf+0x384>
    2b0c:	22 20       	and	r2, r2
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <vfprintf+0x3a0>
    2b10:	42 ce       	rjmp	.-892    	; 0x2796 <vfprintf+0x24>
    2b12:	b6 01       	movw	r22, r12
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <fputc>
    2b1c:	2a 94       	dec	r2
    2b1e:	f6 cf       	rjmp	.-20     	; 0x2b0c <vfprintf+0x39a>
    2b20:	f6 01       	movw	r30, r12
    2b22:	86 81       	ldd	r24, Z+6	; 0x06
    2b24:	97 81       	ldd	r25, Z+7	; 0x07
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <vfprintf+0x3ba>
    2b28:	8f ef       	ldi	r24, 0xFF	; 255
    2b2a:	9f ef       	ldi	r25, 0xFF	; 255
    2b2c:	2b 96       	adiw	r28, 0x0b	; 11
    2b2e:	e2 e1       	ldi	r30, 0x12	; 18
    2b30:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__epilogue_restores__>

00002b34 <strnlen_P>:
    2b34:	fc 01       	movw	r30, r24
    2b36:	05 90       	lpm	r0, Z+
    2b38:	61 50       	subi	r22, 0x01	; 1
    2b3a:	70 40       	sbci	r23, 0x00	; 0
    2b3c:	01 10       	cpse	r0, r1
    2b3e:	d8 f7       	brcc	.-10     	; 0x2b36 <strnlen_P+0x2>
    2b40:	80 95       	com	r24
    2b42:	90 95       	com	r25
    2b44:	8e 0f       	add	r24, r30
    2b46:	9f 1f       	adc	r25, r31
    2b48:	08 95       	ret

00002b4a <strnlen>:
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	61 50       	subi	r22, 0x01	; 1
    2b4e:	70 40       	sbci	r23, 0x00	; 0
    2b50:	01 90       	ld	r0, Z+
    2b52:	01 10       	cpse	r0, r1
    2b54:	d8 f7       	brcc	.-10     	; 0x2b4c <strnlen+0x2>
    2b56:	80 95       	com	r24
    2b58:	90 95       	com	r25
    2b5a:	8e 0f       	add	r24, r30
    2b5c:	9f 1f       	adc	r25, r31
    2b5e:	08 95       	ret

00002b60 <fputc>:
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	fb 01       	movw	r30, r22
    2b6a:	23 81       	ldd	r18, Z+3	; 0x03
    2b6c:	21 fd       	sbrc	r18, 1
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <fputc+0x16>
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	9f ef       	ldi	r25, 0xFF	; 255
    2b74:	2c c0       	rjmp	.+88     	; 0x2bce <fputc+0x6e>
    2b76:	22 ff       	sbrs	r18, 2
    2b78:	16 c0       	rjmp	.+44     	; 0x2ba6 <fputc+0x46>
    2b7a:	46 81       	ldd	r20, Z+6	; 0x06
    2b7c:	57 81       	ldd	r21, Z+7	; 0x07
    2b7e:	24 81       	ldd	r18, Z+4	; 0x04
    2b80:	35 81       	ldd	r19, Z+5	; 0x05
    2b82:	42 17       	cp	r20, r18
    2b84:	53 07       	cpc	r21, r19
    2b86:	44 f4       	brge	.+16     	; 0x2b98 <fputc+0x38>
    2b88:	a0 81       	ld	r26, Z
    2b8a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b8c:	9d 01       	movw	r18, r26
    2b8e:	2f 5f       	subi	r18, 0xFF	; 255
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	31 83       	std	Z+1, r19	; 0x01
    2b94:	20 83       	st	Z, r18
    2b96:	8c 93       	st	X, r24
    2b98:	26 81       	ldd	r18, Z+6	; 0x06
    2b9a:	37 81       	ldd	r19, Z+7	; 0x07
    2b9c:	2f 5f       	subi	r18, 0xFF	; 255
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	37 83       	std	Z+7, r19	; 0x07
    2ba2:	26 83       	std	Z+6, r18	; 0x06
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <fputc+0x6e>
    2ba6:	8b 01       	movw	r16, r22
    2ba8:	ec 01       	movw	r28, r24
    2baa:	fb 01       	movw	r30, r22
    2bac:	00 84       	ldd	r0, Z+8	; 0x08
    2bae:	f1 85       	ldd	r31, Z+9	; 0x09
    2bb0:	e0 2d       	mov	r30, r0
    2bb2:	09 95       	icall
    2bb4:	89 2b       	or	r24, r25
    2bb6:	e1 f6       	brne	.-72     	; 0x2b70 <fputc+0x10>
    2bb8:	d8 01       	movw	r26, r16
    2bba:	16 96       	adiw	r26, 0x06	; 6
    2bbc:	8d 91       	ld	r24, X+
    2bbe:	9c 91       	ld	r25, X
    2bc0:	17 97       	sbiw	r26, 0x07	; 7
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	17 96       	adiw	r26, 0x07	; 7
    2bc6:	9c 93       	st	X, r25
    2bc8:	8e 93       	st	-X, r24
    2bca:	16 97       	sbiw	r26, 0x06	; 6
    2bcc:	ce 01       	movw	r24, r28
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <__ultoa_invert>:
    2bd8:	fa 01       	movw	r30, r20
    2bda:	aa 27       	eor	r26, r26
    2bdc:	28 30       	cpi	r18, 0x08	; 8
    2bde:	51 f1       	breq	.+84     	; 0x2c34 <__ultoa_invert+0x5c>
    2be0:	20 31       	cpi	r18, 0x10	; 16
    2be2:	81 f1       	breq	.+96     	; 0x2c44 <__ultoa_invert+0x6c>
    2be4:	e8 94       	clt
    2be6:	6f 93       	push	r22
    2be8:	6e 7f       	andi	r22, 0xFE	; 254
    2bea:	6e 5f       	subi	r22, 0xFE	; 254
    2bec:	7f 4f       	sbci	r23, 0xFF	; 255
    2bee:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf2:	af 4f       	sbci	r26, 0xFF	; 255
    2bf4:	b1 e0       	ldi	r27, 0x01	; 1
    2bf6:	3e d0       	rcall	.+124    	; 0x2c74 <__ultoa_invert+0x9c>
    2bf8:	b4 e0       	ldi	r27, 0x04	; 4
    2bfa:	3c d0       	rcall	.+120    	; 0x2c74 <__ultoa_invert+0x9c>
    2bfc:	67 0f       	add	r22, r23
    2bfe:	78 1f       	adc	r23, r24
    2c00:	89 1f       	adc	r24, r25
    2c02:	9a 1f       	adc	r25, r26
    2c04:	a1 1d       	adc	r26, r1
    2c06:	68 0f       	add	r22, r24
    2c08:	79 1f       	adc	r23, r25
    2c0a:	8a 1f       	adc	r24, r26
    2c0c:	91 1d       	adc	r25, r1
    2c0e:	a1 1d       	adc	r26, r1
    2c10:	6a 0f       	add	r22, r26
    2c12:	71 1d       	adc	r23, r1
    2c14:	81 1d       	adc	r24, r1
    2c16:	91 1d       	adc	r25, r1
    2c18:	a1 1d       	adc	r26, r1
    2c1a:	20 d0       	rcall	.+64     	; 0x2c5c <__ultoa_invert+0x84>
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <__ultoa_invert+0x48>
    2c1e:	68 94       	set
    2c20:	3f 91       	pop	r19
    2c22:	2a e0       	ldi	r18, 0x0A	; 10
    2c24:	26 9f       	mul	r18, r22
    2c26:	11 24       	eor	r1, r1
    2c28:	30 19       	sub	r19, r0
    2c2a:	30 5d       	subi	r19, 0xD0	; 208
    2c2c:	31 93       	st	Z+, r19
    2c2e:	de f6       	brtc	.-74     	; 0x2be6 <__ultoa_invert+0xe>
    2c30:	cf 01       	movw	r24, r30
    2c32:	08 95       	ret
    2c34:	46 2f       	mov	r20, r22
    2c36:	47 70       	andi	r20, 0x07	; 7
    2c38:	40 5d       	subi	r20, 0xD0	; 208
    2c3a:	41 93       	st	Z+, r20
    2c3c:	b3 e0       	ldi	r27, 0x03	; 3
    2c3e:	0f d0       	rcall	.+30     	; 0x2c5e <__ultoa_invert+0x86>
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <__ultoa_invert+0x5c>
    2c42:	f6 cf       	rjmp	.-20     	; 0x2c30 <__ultoa_invert+0x58>
    2c44:	46 2f       	mov	r20, r22
    2c46:	4f 70       	andi	r20, 0x0F	; 15
    2c48:	40 5d       	subi	r20, 0xD0	; 208
    2c4a:	4a 33       	cpi	r20, 0x3A	; 58
    2c4c:	18 f0       	brcs	.+6      	; 0x2c54 <__ultoa_invert+0x7c>
    2c4e:	49 5d       	subi	r20, 0xD9	; 217
    2c50:	31 fd       	sbrc	r19, 1
    2c52:	40 52       	subi	r20, 0x20	; 32
    2c54:	41 93       	st	Z+, r20
    2c56:	02 d0       	rcall	.+4      	; 0x2c5c <__ultoa_invert+0x84>
    2c58:	a9 f7       	brne	.-22     	; 0x2c44 <__ultoa_invert+0x6c>
    2c5a:	ea cf       	rjmp	.-44     	; 0x2c30 <__ultoa_invert+0x58>
    2c5c:	b4 e0       	ldi	r27, 0x04	; 4
    2c5e:	a6 95       	lsr	r26
    2c60:	97 95       	ror	r25
    2c62:	87 95       	ror	r24
    2c64:	77 95       	ror	r23
    2c66:	67 95       	ror	r22
    2c68:	ba 95       	dec	r27
    2c6a:	c9 f7       	brne	.-14     	; 0x2c5e <__ultoa_invert+0x86>
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	61 05       	cpc	r22, r1
    2c70:	71 05       	cpc	r23, r1
    2c72:	08 95       	ret
    2c74:	9b 01       	movw	r18, r22
    2c76:	ac 01       	movw	r20, r24
    2c78:	0a 2e       	mov	r0, r26
    2c7a:	06 94       	lsr	r0
    2c7c:	57 95       	ror	r21
    2c7e:	47 95       	ror	r20
    2c80:	37 95       	ror	r19
    2c82:	27 95       	ror	r18
    2c84:	ba 95       	dec	r27
    2c86:	c9 f7       	brne	.-14     	; 0x2c7a <__ultoa_invert+0xa2>
    2c88:	62 0f       	add	r22, r18
    2c8a:	73 1f       	adc	r23, r19
    2c8c:	84 1f       	adc	r24, r20
    2c8e:	95 1f       	adc	r25, r21
    2c90:	a0 1d       	adc	r26, r0
    2c92:	08 95       	ret

00002c94 <__prologue_saves__>:
    2c94:	2f 92       	push	r2
    2c96:	3f 92       	push	r3
    2c98:	4f 92       	push	r4
    2c9a:	5f 92       	push	r5
    2c9c:	6f 92       	push	r6
    2c9e:	7f 92       	push	r7
    2ca0:	8f 92       	push	r8
    2ca2:	9f 92       	push	r9
    2ca4:	af 92       	push	r10
    2ca6:	bf 92       	push	r11
    2ca8:	cf 92       	push	r12
    2caa:	df 92       	push	r13
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	1f 93       	push	r17
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	ca 1b       	sub	r28, r26
    2cbe:	db 0b       	sbc	r29, r27
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	09 94       	ijmp

00002ccc <__epilogue_restores__>:
    2ccc:	2a 88       	ldd	r2, Y+18	; 0x12
    2cce:	39 88       	ldd	r3, Y+17	; 0x11
    2cd0:	48 88       	ldd	r4, Y+16	; 0x10
    2cd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cde:	b9 84       	ldd	r11, Y+9	; 0x09
    2ce0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ce2:	df 80       	ldd	r13, Y+7	; 0x07
    2ce4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ce6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ce8:	0c 81       	ldd	r16, Y+4	; 0x04
    2cea:	1b 81       	ldd	r17, Y+3	; 0x03
    2cec:	aa 81       	ldd	r26, Y+2	; 0x02
    2cee:	b9 81       	ldd	r27, Y+1	; 0x01
    2cf0:	ce 0f       	add	r28, r30
    2cf2:	d1 1d       	adc	r29, r1
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	ed 01       	movw	r28, r26
    2d00:	08 95       	ret

00002d02 <__do_global_dtors>:
    2d02:	10 e0       	ldi	r17, 0x00	; 0
    2d04:	c3 e6       	ldi	r28, 0x63	; 99
    2d06:	d0 e0       	ldi	r29, 0x00	; 0
    2d08:	04 c0       	rjmp	.+8      	; 0x2d12 <__do_global_dtors+0x10>
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	0e 94 9a 11 	call	0x2334	; 0x2334 <__tablejump2__>
    2d10:	21 96       	adiw	r28, 0x01	; 1
    2d12:	c4 36       	cpi	r28, 0x64	; 100
    2d14:	d1 07       	cpc	r29, r17
    2d16:	c9 f7       	brne	.-14     	; 0x2d0a <__do_global_dtors+0x8>
    2d18:	f8 94       	cli

00002d1a <__stop_program>:
    2d1a:	ff cf       	rjmp	.-2      	; 0x2d1a <__stop_program>
