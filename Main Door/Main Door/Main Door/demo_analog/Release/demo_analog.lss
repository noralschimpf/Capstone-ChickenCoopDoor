
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00002e80  00002f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  008001f8  008001f8  0000300c  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d3d8  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000236d  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e8a  00000000  00000000  00012fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018b8  00000000  00000000  00016e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f39  00000000  00000000  00018728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009208  00000000  00000000  0001b661  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00024869  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__vector_1>
       8:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_2>
       c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_3>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__vector_24>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	91 06       	cpc	r9, r17
      c4:	27 10       	cpse	r2, r7

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e0 e8       	ldi	r30, 0x80	; 128
      da:	fe e2       	ldi	r31, 0x2E	; 46
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a8 3f       	cpi	r26, 0xF8	; 248
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	a8 ef       	ldi	r26, 0xF8	; 248
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	af 3e       	cpi	r26, 0xEF	; 239
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 57 12 	call	0x24ae	; 0x24ae <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 96 06 	call	0xd2c	; 0xd2c <main>
     112:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN7Display8print2lnE6StringS0_>:
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	ec 01       	movw	r28, r24
     128:	7b 01       	movw	r14, r22
     12a:	8a 01       	movw	r16, r20
     12c:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN21Adafruit_RGBLCDShield5clearEv>
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	ce 01       	movw	r24, r28
     136:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     13a:	b7 01       	movw	r22, r14
     13c:	ce 01       	movw	r24, r28
     13e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN5Print5printERK6String>
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	ce 01       	movw	r24, r28
     148:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     14c:	b8 01       	movw	r22, r16
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN5Print5printERK6String>
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	ce 01       	movw	r24, r28
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000016a <_ZN7Display11refreshLineEv>:
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	2c 97       	sbiw	r28, 0x0c	; 12
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	cd bf       	out	0x3d, r28	; 61
     182:	8c 01       	movw	r16, r24
     184:	69 eb       	ldi	r22, 0xB9	; 185
     186:	71 e0       	ldi	r23, 0x01	; 1
     188:	ce 01       	movw	r24, r28
     18a:	07 96       	adiw	r24, 0x07	; 7
     18c:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     190:	f8 01       	movw	r30, r16
     192:	82 a5       	ldd	r24, Z+42	; 0x2a
     194:	93 a5       	ldd	r25, Z+43	; 0x2b
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	19 f0       	breq	.+6      	; 0x1a0 <_ZN7Display11refreshLineEv+0x36>
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	41 f0       	breq	.+16     	; 0x1ae <_ZN7Display11refreshLineEv+0x44>
     19e:	0e c0       	rjmp	.+28     	; 0x1bc <_ZN7Display11refreshLineEv+0x52>
     1a0:	b8 01       	movw	r22, r16
     1a2:	60 5d       	subi	r22, 0xD0	; 208
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	ce 01       	movw	r24, r28
     1a8:	07 96       	adiw	r24, 0x07	; 7
     1aa:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringaSERKS_>
     1ae:	b8 01       	movw	r22, r16
     1b0:	6a 5c       	subi	r22, 0xCA	; 202
     1b2:	7f 4f       	sbci	r23, 0xFF	; 255
     1b4:	ce 01       	movw	r24, r28
     1b6:	07 96       	adiw	r24, 0x07	; 7
     1b8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringaSERKS_>
     1bc:	f8 01       	movw	r30, r16
     1be:	46 a5       	ldd	r20, Z+46	; 0x2e
     1c0:	57 a5       	ldd	r21, Z+47	; 0x2f
     1c2:	84 a5       	ldd	r24, Z+44	; 0x2c
     1c4:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	14 f4       	brge	.+4      	; 0x1d0 <_ZN7Display11refreshLineEv+0x66>
     1cc:	15 a6       	std	Z+45, r1	; 0x2d
     1ce:	14 a6       	std	Z+44, r1	; 0x2c
     1d0:	f8 01       	movw	r30, r16
     1d2:	24 a5       	ldd	r18, Z+44	; 0x2c
     1d4:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d6:	42 17       	cp	r20, r18
     1d8:	53 07       	cpc	r21, r19
     1da:	41 f4       	brne	.+16     	; 0x1ec <_ZN7Display11refreshLineEv+0x82>
     1dc:	2b 85       	ldd	r18, Y+11	; 0x0b
     1de:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e0:	94 e0       	ldi	r25, 0x04	; 4
     1e2:	44 0f       	add	r20, r20
     1e4:	55 1f       	adc	r21, r21
     1e6:	9a 95       	dec	r25
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <_ZN7Display11refreshLineEv+0x78>
     1ea:	0a c0       	rjmp	.+20     	; 0x200 <_ZN7Display11refreshLineEv+0x96>
     1ec:	2f 5f       	subi	r18, 0xFF	; 255
     1ee:	3f 4f       	sbci	r19, 0xFF	; 255
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <_ZN7Display11refreshLineEv+0x88>
     1fa:	a9 01       	movw	r20, r18
     1fc:	40 51       	subi	r20, 0x10	; 16
     1fe:	51 09       	sbc	r21, r1
     200:	be 01       	movw	r22, r28
     202:	69 5f       	subi	r22, 0xF9	; 249
     204:	7f 4f       	sbci	r23, 0xFF	; 255
     206:	ce 01       	movw	r24, r28
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZNK6String9substringEjj>
     20e:	be 01       	movw	r22, r28
     210:	6f 5f       	subi	r22, 0xFF	; 255
     212:	7f 4f       	sbci	r23, 0xFF	; 255
     214:	ce 01       	movw	r24, r28
     216:	07 96       	adiw	r24, 0x07	; 7
     218:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN6StringaSEOS_>
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     224:	f8 01       	movw	r30, r16
     226:	42 a5       	ldd	r20, Z+42	; 0x2a
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	c8 01       	movw	r24, r16
     22c:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     230:	be 01       	movw	r22, r28
     232:	69 5f       	subi	r22, 0xF9	; 249
     234:	7f 4f       	sbci	r23, 0xFF	; 255
     236:	c8 01       	movw	r24, r16
     238:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN5Print5printERK6String>
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	c8 01       	movw	r24, r16
     242:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     246:	f8 01       	movw	r30, r16
     248:	04 a5       	ldd	r16, Z+44	; 0x2c
     24a:	15 a5       	ldd	r17, Z+45	; 0x2d
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	ce 01       	movw	r24, r28
     252:	07 96       	adiw	r24, 0x07	; 7
     254:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     258:	c8 01       	movw	r24, r16
     25a:	2c 96       	adiw	r28, 0x0c	; 12
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	08 95       	ret

00000270 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     270:	4f 92       	push	r4
     272:	5f 92       	push	r5
     274:	6f 92       	push	r6
     276:	7f 92       	push	r7
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	2c 97       	sbiw	r28, 0x0c	; 12
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	4c 01       	movw	r8, r24
     2a2:	3b 01       	movw	r6, r22
     2a4:	2a 01       	movw	r4, r20
     2a6:	b2 2e       	mov	r11, r18
     2a8:	c0 96       	adiw	r24, 0x30	; 48
     2aa:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringaSERKS_>
     2ae:	b2 01       	movw	r22, r4
     2b0:	c4 01       	movw	r24, r8
     2b2:	c6 96       	adiw	r24, 0x36	; 54
     2b4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringaSERKS_>
     2b8:	f4 01       	movw	r30, r8
     2ba:	f7 a6       	std	Z+47, r15	; 0x2f
     2bc:	e6 a6       	std	Z+46, r14	; 0x2e
     2be:	d3 a6       	std	Z+43, r13	; 0x2b
     2c0:	c2 a6       	std	Z+42, r12	; 0x2a
     2c2:	f8 01       	movw	r30, r16
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	f4 01       	movw	r30, r8
     2ca:	97 8f       	std	Z+31, r25	; 0x1f
     2cc:	86 8f       	std	Z+30, r24	; 0x1e
     2ce:	f8 01       	movw	r30, r16
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	93 81       	ldd	r25, Z+3	; 0x03
     2d4:	f4 01       	movw	r30, r8
     2d6:	91 a3       	std	Z+33, r25	; 0x21
     2d8:	80 a3       	std	Z+32, r24	; 0x20
     2da:	f8 01       	movw	r30, r16
     2dc:	84 81       	ldd	r24, Z+4	; 0x04
     2de:	95 81       	ldd	r25, Z+5	; 0x05
     2e0:	f4 01       	movw	r30, r8
     2e2:	93 a3       	std	Z+35, r25	; 0x23
     2e4:	82 a3       	std	Z+34, r24	; 0x22
     2e6:	f8 01       	movw	r30, r16
     2e8:	86 81       	ldd	r24, Z+6	; 0x06
     2ea:	97 81       	ldd	r25, Z+7	; 0x07
     2ec:	f4 01       	movw	r30, r8
     2ee:	95 a3       	std	Z+37, r25	; 0x25
     2f0:	84 a3       	std	Z+36, r24	; 0x24
     2f2:	f8 01       	movw	r30, r16
     2f4:	80 85       	ldd	r24, Z+8	; 0x08
     2f6:	91 85       	ldd	r25, Z+9	; 0x09
     2f8:	f4 01       	movw	r30, r8
     2fa:	97 a3       	std	Z+39, r25	; 0x27
     2fc:	86 a3       	std	Z+38, r24	; 0x26
     2fe:	6b 2d       	mov	r22, r11
     300:	c4 01       	movw	r24, r8
     302:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     306:	f4 01       	movw	r30, r8
     308:	a4 ae       	std	Z+60, r10	; 0x3c
     30a:	a1 10       	cpse	r10, r1
     30c:	1e c0       	rjmp	.+60     	; 0x34a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     30e:	15 a6       	std	Z+45, r1	; 0x2d
     310:	14 a6       	std	Z+44, r1	; 0x2c
     312:	b2 01       	movw	r22, r4
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1ERKS_>
     31c:	b3 01       	movw	r22, r6
     31e:	ce 01       	movw	r24, r28
     320:	07 96       	adiw	r24, 0x07	; 7
     322:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6StringC1ERKS_>
     326:	ae 01       	movw	r20, r28
     328:	4f 5f       	subi	r20, 0xFF	; 255
     32a:	5f 4f       	sbci	r21, 0xFF	; 255
     32c:	be 01       	movw	r22, r28
     32e:	69 5f       	subi	r22, 0xF9	; 249
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	c4 01       	movw	r24, r8
     334:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7Display8print2lnE6StringS0_>
     338:	ce 01       	movw	r24, r28
     33a:	07 96       	adiw	r24, 0x07	; 7
     33c:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     348:	06 c0       	rjmp	.+12     	; 0x356 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     34a:	c4 01       	movw	r24, r8
     34c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN7Display11refreshLineEv>
     350:	f4 01       	movw	r30, r8
     352:	95 a7       	std	Z+45, r25	; 0x2d
     354:	84 a7       	std	Z+44, r24	; 0x2c
     356:	2c 96       	adiw	r28, 0x0c	; 12
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	bf 90       	pop	r11
     374:	af 90       	pop	r10
     376:	9f 90       	pop	r9
     378:	8f 90       	pop	r8
     37a:	7f 90       	pop	r7
     37c:	6f 90       	pop	r6
     37e:	5f 90       	pop	r5
     380:	4f 90       	pop	r4
     382:	08 95       	ret

00000384 <_ZN7Display13selectDisplayEibPcS0_>:
     384:	6f 92       	push	r6
     386:	7f 92       	push	r7
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	e6 97       	sbiw	r28, 0x36	; 54
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	3c 01       	movw	r6, r24
     3b0:	44 23       	and	r20, r20
     3b2:	19 f0       	breq	.+6      	; 0x3ba <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3b4:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN7Display11refreshLineEv>
     3b8:	31 c1       	rjmp	.+610    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     3ba:	fc 01       	movw	r30, r24
     3bc:	75 8f       	std	Z+29, r23	; 0x1d
     3be:	64 8f       	std	Z+28, r22	; 0x1c
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	4c 01       	movw	r8, r24
     3c6:	62 30       	cpi	r22, 0x02	; 2
     3c8:	71 05       	cpc	r23, r1
     3ca:	09 f4       	brne	.+2      	; 0x3ce <_ZN7Display13selectDisplayEibPcS0_+0x4a>
     3cc:	7f c0       	rjmp	.+254    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3ce:	e4 f4       	brge	.+56     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3d0:	61 15       	cp	r22, r1
     3d2:	71 05       	cpc	r23, r1
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d6:	53 c0       	rjmp	.+166    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     3d8:	61 30       	cpi	r22, 0x01	; 1
     3da:	71 05       	cpc	r23, r1
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <_ZN7Display13selectDisplayEibPcS0_+0x5c>
     3de:	e5 c0       	rjmp	.+458    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     3e0:	1a a2       	std	Y+34, r1	; 0x22
     3e2:	19 a2       	std	Y+33, r1	; 0x21
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	9c a3       	std	Y+36, r25	; 0x24
     3ea:	8b a3       	std	Y+35, r24	; 0x23
     3ec:	9e a3       	std	Y+38, r25	; 0x26
     3ee:	8d a3       	std	Y+37, r24	; 0x25
     3f0:	98 a7       	std	Y+40, r25	; 0x28
     3f2:	8f a3       	std	Y+39, r24	; 0x27
     3f4:	9a a7       	std	Y+42, r25	; 0x2a
     3f6:	89 a7       	std	Y+41, r24	; 0x29
     3f8:	6a e3       	ldi	r22, 0x3A	; 58
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	c4 01       	movw	r24, r8
     3fe:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     402:	65 e4       	ldi	r22, 0x45	; 69
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	75 c0       	rjmp	.+234    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     408:	64 30       	cpi	r22, 0x04	; 4
     40a:	71 05       	cpc	r23, r1
     40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	88 c0       	rjmp	.+272    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	7f c0       	rjmp	.+254    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     414:	65 30       	cpi	r22, 0x05	; 5
     416:	71 05       	cpc	r23, r1
     418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	c7 c0       	rjmp	.+398    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     41c:	1a a2       	std	Y+34, r1	; 0x22
     41e:	19 a2       	std	Y+33, r1	; 0x21
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	9c a3       	std	Y+36, r25	; 0x24
     426:	8b a3       	std	Y+35, r24	; 0x23
     428:	9e a3       	std	Y+38, r25	; 0x26
     42a:	8d a3       	std	Y+37, r24	; 0x25
     42c:	98 a7       	std	Y+40, r25	; 0x28
     42e:	8f a3       	std	Y+39, r24	; 0x27
     430:	9a a7       	std	Y+42, r25	; 0x2a
     432:	89 a7       	std	Y+41, r24	; 0x29
     434:	6a e3       	ldi	r22, 0x3A	; 58
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	c4 01       	movw	r24, r8
     43a:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     43e:	69 e9       	ldi	r22, 0x99	; 153
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	ce 01       	movw	r24, r28
     444:	8b 96       	adiw	r24, 0x2b	; 43
     446:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     44a:	a1 2c       	mov	r10, r1
     44c:	c1 2c       	mov	r12, r1
     44e:	d1 2c       	mov	r13, r1
     450:	ee 24       	eor	r14, r14
     452:	e3 94       	inc	r14
     454:	f1 2c       	mov	r15, r1
     456:	8e 01       	movw	r16, r28
     458:	0f 5d       	subi	r16, 0xDF	; 223
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	a4 01       	movw	r20, r8
     462:	be 01       	movw	r22, r28
     464:	65 5d       	subi	r22, 0xD5	; 213
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	c3 01       	movw	r24, r6
     46a:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     46e:	ce 01       	movw	r24, r28
     470:	8b 96       	adiw	r24, 0x2b	; 43
     472:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     476:	c4 01       	movw	r24, r8
     478:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     47c:	96 c0       	rjmp	.+300    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	9f ef       	ldi	r25, 0xFF	; 255
     482:	9a a3       	std	Y+34, r25	; 0x22
     484:	89 a3       	std	Y+33, r24	; 0x21
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9c a3       	std	Y+36, r25	; 0x24
     48c:	8b a3       	std	Y+35, r24	; 0x23
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	9e a3       	std	Y+38, r25	; 0x26
     494:	8d a3       	std	Y+37, r24	; 0x25
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	98 a7       	std	Y+40, r25	; 0x28
     49c:	8f a3       	std	Y+39, r24	; 0x27
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	9a a7       	std	Y+42, r25	; 0x2a
     4a4:	89 a7       	std	Y+41, r24	; 0x29
     4a6:	6f e0       	ldi	r22, 0x0F	; 15
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	c4 01       	movw	r24, r8
     4ac:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     4b0:	60 e3       	ldi	r22, 0x30	; 48
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	ce 01       	movw	r24, r28
     4b6:	8b 96       	adiw	r24, 0x2b	; 43
     4b8:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     4bc:	a1 2c       	mov	r10, r1
     4be:	cc 24       	eor	r12, r12
     4c0:	c3 94       	inc	r12
     4c2:	d1 2c       	mov	r13, r1
     4c4:	62 e0       	ldi	r22, 0x02	; 2
     4c6:	e6 2e       	mov	r14, r22
     4c8:	f1 2c       	mov	r15, r1
     4ca:	95 c0       	rjmp	.+298    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     4cc:	1a a2       	std	Y+34, r1	; 0x22
     4ce:	19 a2       	std	Y+33, r1	; 0x21
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	9f ef       	ldi	r25, 0xFF	; 255
     4d4:	9c a3       	std	Y+36, r25	; 0x24
     4d6:	8b a3       	std	Y+35, r24	; 0x23
     4d8:	9e a3       	std	Y+38, r25	; 0x26
     4da:	8d a3       	std	Y+37, r24	; 0x25
     4dc:	98 a7       	std	Y+40, r25	; 0x28
     4de:	8f a3       	std	Y+39, r24	; 0x27
     4e0:	9a a7       	std	Y+42, r25	; 0x2a
     4e2:	89 a7       	std	Y+41, r24	; 0x29
     4e4:	6a e3       	ldi	r22, 0x3A	; 58
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	c4 01       	movw	r24, r8
     4ea:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     4ee:	62 e5       	ldi	r22, 0x52	; 82
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	ce 01       	movw	r24, r28
     4f4:	8b 96       	adiw	r24, 0x2b	; 43
     4f6:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     4fa:	a1 2c       	mov	r10, r1
     4fc:	cc 24       	eor	r12, r12
     4fe:	ca 94       	dec	r12
     500:	dc 2c       	mov	r13, r12
     502:	e1 2c       	mov	r14, r1
     504:	f1 2c       	mov	r15, r1
     506:	8e 01       	movw	r16, r28
     508:	0f 5d       	subi	r16, 0xDF	; 223
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	23 e0       	ldi	r18, 0x03	; 3
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	77 c0       	rjmp	.+238    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     512:	1f 93       	push	r17
     514:	0f 93       	push	r16
     516:	3f 93       	push	r19
     518:	2f 93       	push	r18
     51a:	8f e5       	ldi	r24, 0x5F	; 95
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     520:	1f 93       	push	r17
     522:	0f 93       	push	r16
     524:	3f 93       	push	r19
     526:	2f 93       	push	r18
     528:	8c e7       	ldi	r24, 0x7C	; 124
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	9f 92       	push	r9
     532:	8f 92       	push	r8
     534:	0e 94 54 14 	call	0x28a8	; 0x28a8 <sprintf>
     538:	1a a2       	std	Y+34, r1	; 0x22
     53a:	19 a2       	std	Y+33, r1	; 0x21
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	9c a3       	std	Y+36, r25	; 0x24
     542:	8b a3       	std	Y+35, r24	; 0x23
     544:	9e a3       	std	Y+38, r25	; 0x26
     546:	8d a3       	std	Y+37, r24	; 0x25
     548:	98 a7       	std	Y+40, r25	; 0x28
     54a:	8f a3       	std	Y+39, r24	; 0x27
     54c:	9a a7       	std	Y+42, r25	; 0x2a
     54e:	89 a7       	std	Y+41, r24	; 0x29
     550:	6a e3       	ldi	r22, 0x3A	; 58
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	ce 01       	movw	r24, r28
     556:	8b 96       	adiw	r24, 0x2b	; 43
     558:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     55c:	b4 01       	movw	r22, r8
     55e:	ce 01       	movw	r24, r28
     560:	c1 96       	adiw	r24, 0x31	; 49
     562:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     566:	a1 2c       	mov	r10, r1
     568:	c1 2c       	mov	r12, r1
     56a:	d1 2c       	mov	r13, r1
     56c:	ee 24       	eor	r14, r14
     56e:	e3 94       	inc	r14
     570:	f1 2c       	mov	r15, r1
     572:	8e 01       	movw	r16, r28
     574:	0f 5d       	subi	r16, 0xDF	; 223
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	22 e0       	ldi	r18, 0x02	; 2
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	ae 01       	movw	r20, r28
     57e:	45 5d       	subi	r20, 0xD5	; 213
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	be 01       	movw	r22, r28
     584:	6f 5c       	subi	r22, 0xCF	; 207
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	c3 01       	movw	r24, r6
     58a:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     58e:	ce 01       	movw	r24, r28
     590:	c1 96       	adiw	r24, 0x31	; 49
     592:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     596:	ce 01       	movw	r24, r28
     598:	8b 96       	adiw	r24, 0x2b	; 43
     59a:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	39 c0       	rjmp	.+114    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
     5ae:	9a a3       	std	Y+34, r25	; 0x22
     5b0:	89 a3       	std	Y+33, r24	; 0x21
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9c a3       	std	Y+36, r25	; 0x24
     5b8:	8b a3       	std	Y+35, r24	; 0x23
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9e a3       	std	Y+38, r25	; 0x26
     5c0:	8d a3       	std	Y+37, r24	; 0x25
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	98 a7       	std	Y+40, r25	; 0x28
     5c8:	8f a3       	std	Y+39, r24	; 0x27
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9a a7       	std	Y+42, r25	; 0x2a
     5d0:	89 a7       	std	Y+41, r24	; 0x29
     5d2:	6a eb       	ldi	r22, 0xBA	; 186
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	c4 01       	movw	r24, r8
     5d8:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     5dc:	60 e3       	ldi	r22, 0x30	; 48
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	ce 01       	movw	r24, r28
     5e2:	8b 96       	adiw	r24, 0x2b	; 43
     5e4:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     5e8:	a1 2c       	mov	r10, r1
     5ea:	cc 24       	eor	r12, r12
     5ec:	c3 94       	inc	r12
     5ee:	d1 2c       	mov	r13, r1
     5f0:	ee 24       	eor	r14, r14
     5f2:	e3 94       	inc	r14
     5f4:	f1 2c       	mov	r15, r1
     5f6:	8e 01       	movw	r16, r28
     5f8:	0f 5d       	subi	r16, 0xDF	; 223
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a4 01       	movw	r20, r8
     602:	be 01       	movw	r22, r28
     604:	65 5d       	subi	r22, 0xD5	; 213
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	c3 01       	movw	r24, r6
     60a:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     60e:	ce 01       	movw	r24, r28
     610:	8b 96       	adiw	r24, 0x2b	; 43
     612:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     616:	c4 01       	movw	r24, r8
     618:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN6StringD1Ev>
     61c:	e6 96       	adiw	r28, 0x36	; 54
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	8f 90       	pop	r8
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
     642:	08 95       	ret

00000644 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
     64e:	fb 01       	movw	r30, r22
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	93 81       	ldd	r25, Z+3	; 0x03
     654:	9b 83       	std	Y+3, r25	; 0x03
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	8e ed       	ldi	r24, 0xDE	; 222
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	99 83       	std	Y+1, r25	; 0x01
     65e:	88 83       	st	Y, r24
     660:	84 81       	ldd	r24, Z+4	; 0x04
     662:	8c 83       	std	Y+4, r24	; 0x04
     664:	85 81       	ldd	r24, Z+5	; 0x05
     666:	8d 83       	std	Y+5, r24	; 0x05
     668:	86 81       	ldd	r24, Z+6	; 0x06
     66a:	8e 83       	std	Y+6, r24	; 0x06
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	37 96       	adiw	r30, 0x07	; 7
     670:	de 01       	movw	r26, r28
     672:	17 96       	adiw	r26, 0x07	; 7
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	8a 95       	dec	r24
     67a:	e1 f7       	brne	.-8      	; 0x674 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	fb 01       	movw	r30, r22
     680:	3f 96       	adiw	r30, 0x0f	; 15
     682:	de 01       	movw	r26, r28
     684:	1f 96       	adiw	r26, 0x0f	; 15
     686:	01 90       	ld	r0, Z+
     688:	0d 92       	st	X+, r0
     68a:	8a 95       	dec	r24
     68c:	e1 f7       	brne	.-8      	; 0x686 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     68e:	fb 01       	movw	r30, r22
     690:	84 89       	ldd	r24, Z+20	; 0x14
     692:	8c 8b       	std	Y+20, r24	; 0x14
     694:	85 89       	ldd	r24, Z+21	; 0x15
     696:	8d 8b       	std	Y+21, r24	; 0x15
     698:	86 89       	ldd	r24, Z+22	; 0x16
     69a:	8e 8b       	std	Y+22, r24	; 0x16
     69c:	87 89       	ldd	r24, Z+23	; 0x17
     69e:	8f 8b       	std	Y+23, r24	; 0x17
     6a0:	80 8d       	ldd	r24, Z+24	; 0x18
     6a2:	88 8f       	std	Y+24, r24	; 0x18
     6a4:	81 8d       	ldd	r24, Z+25	; 0x19
     6a6:	89 8f       	std	Y+25, r24	; 0x19
     6a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     6aa:	8a 8f       	std	Y+26, r24	; 0x1a
     6ac:	83 8d       	ldd	r24, Z+27	; 0x1b
     6ae:	8b 8f       	std	Y+27, r24	; 0x1b
     6b0:	69 eb       	ldi	r22, 0xB9	; 185
     6b2:	71 e0       	ldi	r23, 0x01	; 1
     6b4:	ce 01       	movw	r24, r28
     6b6:	c0 96       	adiw	r24, 0x30	; 48
     6b8:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     6bc:	69 eb       	ldi	r22, 0xB9	; 185
     6be:	71 e0       	ldi	r23, 0x01	; 1
     6c0:	ce 01       	movw	r24, r28
     6c2:	c6 96       	adiw	r24, 0x36	; 54
     6c4:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	42 e0       	ldi	r20, 0x02	; 2
     6cc:	60 e1       	ldi	r22, 0x10	; 16
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     6d4:	ce 01       	movw	r24, r28
     6d6:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN21Adafruit_RGBLCDShield5clearEv>
     6da:	09 eb       	ldi	r16, 0xB9	; 185
     6dc:	11 e0       	ldi	r17, 0x01	; 1
     6de:	98 01       	movw	r18, r16
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7Display13selectDisplayEibPcS0_>
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <_ZN7Display21UpdateMenuFromButtonsEm>:
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	6a 01       	movw	r12, r20
     70a:	7b 01       	movw	r14, r22
     70c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     710:	80 ff       	sbrs	r24, 0
     712:	06 c0       	rjmp	.+12     	; 0x720 <_ZN7Display21UpdateMenuFromButtonsEm+0x2a>
     714:	6e 8d       	ldd	r22, Y+30	; 0x1e
     716:	7f 8d       	ldd	r23, Y+31	; 0x1f
     718:	6f 3f       	cpi	r22, 0xFF	; 255
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	72 07       	cpc	r23, r18
     71e:	01 f5       	brne	.+64     	; 0x760 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     720:	83 ff       	sbrs	r24, 3
     722:	06 c0       	rjmp	.+12     	; 0x730 <_ZN7Display21UpdateMenuFromButtonsEm+0x3a>
     724:	68 a1       	ldd	r22, Y+32	; 0x20
     726:	79 a1       	ldd	r23, Y+33	; 0x21
     728:	6f 3f       	cpi	r22, 0xFF	; 255
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	79 07       	cpc	r23, r25
     72e:	c1 f4       	brne	.+48     	; 0x760 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     730:	82 ff       	sbrs	r24, 2
     732:	06 c0       	rjmp	.+12     	; 0x740 <_ZN7Display21UpdateMenuFromButtonsEm+0x4a>
     734:	6a a1       	ldd	r22, Y+34	; 0x22
     736:	7b a1       	ldd	r23, Y+35	; 0x23
     738:	6f 3f       	cpi	r22, 0xFF	; 255
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	72 07       	cpc	r23, r18
     73e:	81 f4       	brne	.+32     	; 0x760 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     740:	84 ff       	sbrs	r24, 4
     742:	06 c0       	rjmp	.+12     	; 0x750 <_ZN7Display21UpdateMenuFromButtonsEm+0x5a>
     744:	6c a1       	ldd	r22, Y+36	; 0x24
     746:	7d a1       	ldd	r23, Y+37	; 0x25
     748:	6f 3f       	cpi	r22, 0xFF	; 255
     74a:	9f ef       	ldi	r25, 0xFF	; 255
     74c:	79 07       	cpc	r23, r25
     74e:	41 f4       	brne	.+16     	; 0x760 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
     750:	81 ff       	sbrs	r24, 1
     752:	0e c0       	rjmp	.+28     	; 0x770 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     754:	6e a1       	ldd	r22, Y+38	; 0x26
     756:	7f a1       	ldd	r23, Y+39	; 0x27
     758:	6f 3f       	cpi	r22, 0xFF	; 255
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	72 07       	cpc	r23, r18
     75e:	41 f0       	breq	.+16     	; 0x770 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     760:	09 eb       	ldi	r16, 0xB9	; 185
     762:	11 e0       	ldi	r17, 0x01	; 1
     764:	98 01       	movw	r18, r16
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7Display13selectDisplayEibPcS0_>
     76e:	10 c0       	rjmp	.+32     	; 0x790 <_ZN7Display21UpdateMenuFromButtonsEm+0x9a>
     770:	0e 94 2d 07 	call	0xe5a	; 0xe5a <millis>
     774:	28 ee       	ldi	r18, 0xE8	; 232
     776:	c2 0e       	add	r12, r18
     778:	23 e0       	ldi	r18, 0x03	; 3
     77a:	d2 1e       	adc	r13, r18
     77c:	e1 1c       	adc	r14, r1
     77e:	f1 1c       	adc	r15, r1
     780:	c6 16       	cp	r12, r22
     782:	d7 06       	cpc	r13, r23
     784:	e8 06       	cpc	r14, r24
     786:	f9 06       	cpc	r15, r25
     788:	28 f0       	brcs	.+10     	; 0x794 <_ZN7Display21UpdateMenuFromButtonsEm+0x9e>
     78a:	ce 01       	movw	r24, r28
     78c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN7Display11refreshLineEv>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	01 c0       	rjmp	.+2      	; 0x796 <_ZN7Display21UpdateMenuFromButtonsEm+0xa0>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	08 95       	ret

000007a8 <_ZN7Display11CurrentMenuEv>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     7ac:	95 8d       	ldd	r25, Z+29	; 0x1d
     7ae:	08 95       	ret

000007b0 <_ZN6Safety12disableMotorEbi.part.0>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	89 e0       	ldi	r24, 0x09	; 9
     7ba:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	8a e0       	ldi	r24, 0x0A	; 10
     7c2:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	89 e0       	ldi	r24, 0x09	; 9
     7ca:	0e 94 0c 08 	call	0x1018	; 0x1018 <pinMode>
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	0e 94 0c 08 	call	0x1018	; 0x1018 <pinMode>
     7d6:	be 01       	movw	r22, r28
     7d8:	dd 0f       	add	r29, r29
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	0c 94 5e 07 	jmp	0xebc	; 0xebc <delay>

000007e6 <_ZN6Safety12deviceStatusEi>:
     7e6:	62 30       	cpi	r22, 0x02	; 2
     7e8:	71 05       	cpc	r23, r1
     7ea:	b1 f0       	breq	.+44     	; 0x818 <_ZN6Safety12deviceStatusEi+0x32>
     7ec:	44 f4       	brge	.+16     	; 0x7fe <_ZN6Safety12deviceStatusEi+0x18>
     7ee:	61 15       	cp	r22, r1
     7f0:	71 05       	cpc	r23, r1
     7f2:	81 f0       	breq	.+32     	; 0x814 <_ZN6Safety12deviceStatusEi+0x2e>
     7f4:	61 30       	cpi	r22, 0x01	; 1
     7f6:	71 05       	cpc	r23, r1
     7f8:	b1 f4       	brne	.+44     	; 0x826 <_ZN6Safety12deviceStatusEi+0x40>
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <_ZN6Safety12deviceStatusEi+0x3c>
     7fe:	64 30       	cpi	r22, 0x04	; 4
     800:	71 05       	cpc	r23, r1
     802:	71 f0       	breq	.+28     	; 0x820 <_ZN6Safety12deviceStatusEi+0x3a>
     804:	5c f0       	brlt	.+22     	; 0x81c <_ZN6Safety12deviceStatusEi+0x36>
     806:	65 30       	cpi	r22, 0x05	; 5
     808:	71 05       	cpc	r23, r1
     80a:	69 f4       	brne	.+26     	; 0x826 <_ZN6Safety12deviceStatusEi+0x40>
     80c:	fc 01       	movw	r30, r24
     80e:	82 85       	ldd	r24, Z+10	; 0x0a
     810:	93 85       	ldd	r25, Z+11	; 0x0b
     812:	08 95       	ret
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	05 c0       	rjmp	.+10     	; 0x822 <_ZN6Safety12deviceStatusEi+0x3c>
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	03 c0       	rjmp	.+6      	; 0x822 <_ZN6Safety12deviceStatusEi+0x3c>
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	01 c0       	rjmp	.+2      	; 0x822 <_ZN6Safety12deviceStatusEi+0x3c>
     820:	8d e0       	ldi	r24, 0x0D	; 13
     822:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <digitalRead>
     826:	08 95       	ret

00000828 <_ZN6Safety15setSafetyStatusEi>:
     828:	fc 01       	movw	r30, r24
     82a:	77 87       	std	Z+15, r23	; 0x0f
     82c:	66 87       	std	Z+14, r22	; 0x0e
     82e:	08 95       	ret

00000830 <_ZN6Safety12cntEventIncrEi>:
     830:	fc 01       	movw	r30, r24
     832:	61 15       	cp	r22, r1
     834:	71 05       	cpc	r23, r1
     836:	21 f0       	breq	.+8      	; 0x840 <_ZN6Safety12cntEventIncrEi+0x10>
     838:	61 30       	cpi	r22, 0x01	; 1
     83a:	71 05       	cpc	r23, r1
     83c:	21 f0       	breq	.+8      	; 0x846 <_ZN6Safety12cntEventIncrEi+0x16>
     83e:	08 95       	ret
     840:	15 86       	std	Z+13, r1	; 0x0d
     842:	14 86       	std	Z+12, r1	; 0x0c
     844:	08 95       	ret
     846:	84 85       	ldd	r24, Z+12	; 0x0c
     848:	95 85       	ldd	r25, Z+13	; 0x0d
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	95 87       	std	Z+13, r25	; 0x0d
     84e:	84 87       	std	Z+12, r24	; 0x0c
     850:	08 95       	ret

00000852 <_ZN6Safety12inEventCountEv>:
     852:	fc 01       	movw	r30, r24
     854:	84 85       	ldd	r24, Z+12	; 0x0c
     856:	95 85       	ldd	r25, Z+13	; 0x0d
     858:	08 95       	ret

0000085a <_ZN6Safety12disableMotorEbi>:
     85a:	ca 01       	movw	r24, r20
     85c:	61 11       	cpse	r22, r1
     85e:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <_ZN6Safety12disableMotorEbi.part.0>
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	0e 94 0c 08 	call	0x1018	; 0x1018 <pinMode>
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	89 e0       	ldi	r24, 0x09	; 9
     86e:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <pinMode>

00000872 <_ZN6Safety8setRelayEi>:
     872:	61 15       	cp	r22, r1
     874:	71 05       	cpc	r23, r1
     876:	41 f0       	breq	.+16     	; 0x888 <_ZN6Safety8setRelayEi+0x16>
     878:	61 30       	cpi	r22, 0x01	; 1
     87a:	71 05       	cpc	r23, r1
     87c:	59 f0       	breq	.+22     	; 0x894 <_ZN6Safety8setRelayEi+0x22>
     87e:	6f 3f       	cpi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	81 f4       	brne	.+32     	; 0x8a4 <_ZN6Safety8setRelayEi+0x32>
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	01 c0       	rjmp	.+2      	; 0x88a <_ZN6Safety8setRelayEi+0x18>
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	89 e0       	ldi	r24, 0x09	; 9
     88c:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	05 c0       	rjmp	.+10     	; 0x89e <_ZN6Safety8setRelayEi+0x2c>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	0c 94 48 08 	jmp	0x1090	; 0x1090 <digitalWrite>
     8a4:	08 95       	ret

000008a6 <_ZN6Safety9setDeviceEii.part.2>:
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24
     8b0:	8b 01       	movw	r16, r22
     8b2:	7b 87       	std	Y+11, r23	; 0x0b
     8b4:	6a 87       	std	Y+10, r22	; 0x0a
     8b6:	67 2b       	or	r22, r23
     8b8:	29 f4       	brne	.+10     	; 0x8c4 <_ZN6Safety9setDeviceEii.part.2+0x1e>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN6Safety12disableMotorEbi.part.0>
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <_ZN6Safety9setDeviceEii.part.2+0x28>
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN6Safety12disableMotorEbi>
     8ce:	b8 01       	movw	r22, r16
     8d0:	ce 01       	movw	r24, r28
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	0c 94 39 04 	jmp	0x872	; 0x872 <_ZN6Safety8setRelayEi>

000008de <_ZN6Safety9setDeviceEii>:
     8de:	fc 01       	movw	r30, r24
     8e0:	62 30       	cpi	r22, 0x02	; 2
     8e2:	71 05       	cpc	r23, r1
     8e4:	b1 f0       	breq	.+44     	; 0x912 <__stack+0x13>
     8e6:	3c f4       	brge	.+14     	; 0x8f6 <_ZN6Safety9setDeviceEii+0x18>
     8e8:	61 15       	cp	r22, r1
     8ea:	71 05       	cpc	r23, r1
     8ec:	61 f0       	breq	.+24     	; 0x906 <__stack+0x7>
     8ee:	61 30       	cpi	r22, 0x01	; 1
     8f0:	71 05       	cpc	r23, r1
     8f2:	61 f0       	breq	.+24     	; 0x90c <__stack+0xd>
     8f4:	08 95       	ret
     8f6:	64 30       	cpi	r22, 0x04	; 4
     8f8:	71 05       	cpc	r23, r1
     8fa:	89 f0       	breq	.+34     	; 0x91e <__stack+0x1f>
     8fc:	6c f0       	brlt	.+26     	; 0x918 <__stack+0x19>
     8fe:	65 30       	cpi	r22, 0x05	; 5
     900:	71 05       	cpc	r23, r1
     902:	81 f0       	breq	.+32     	; 0x924 <__stack+0x25>
     904:	08 95       	ret
     906:	53 83       	std	Z+3, r21	; 0x03
     908:	42 83       	std	Z+2, r20	; 0x02
     90a:	08 95       	ret
     90c:	55 83       	std	Z+5, r21	; 0x05
     90e:	44 83       	std	Z+4, r20	; 0x04
     910:	08 95       	ret
     912:	51 83       	std	Z+1, r21	; 0x01
     914:	40 83       	st	Z, r20
     916:	08 95       	ret
     918:	57 83       	std	Z+7, r21	; 0x07
     91a:	46 83       	std	Z+6, r20	; 0x06
     91c:	08 95       	ret
     91e:	51 87       	std	Z+9, r21	; 0x09
     920:	40 87       	std	Z+8, r20	; 0x08
     922:	08 95       	ret
     924:	ba 01       	movw	r22, r20
     926:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_ZN6Safety9setDeviceEii.part.2>

0000092a <_ZN6SafetyC1Ev>:
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9f 87       	std	Y+15, r25	; 0x0f
     93a:	8e 87       	std	Y+14, r24	; 0x0e
     93c:	1d 86       	std	Y+13, r1	; 0x0d
     93e:	1c 86       	std	Y+12, r1	; 0x0c
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	b8 01       	movw	r22, r16
     946:	ce 01       	movw	r24, r28
     948:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN6Safety12deviceStatusEi>
     94c:	ac 01       	movw	r20, r24
     94e:	b8 01       	movw	r22, r16
     950:	ce 01       	movw	r24, r28
     952:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN6Safety9setDeviceEii>
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	1f 4f       	sbci	r17, 0xFF	; 255
     95a:	05 30       	cpi	r16, 0x05	; 5
     95c:	11 05       	cpc	r17, r1
     95e:	91 f7       	brne	.-28     	; 0x944 <_ZN6SafetyC1Ev+0x1a>
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	ce 01       	movw	r24, r28
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_ZN6Safety9setDeviceEii.part.2>

00000972 <_ZN6SensorC1Ediimm>:
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	fc 01       	movw	r30, r24
     990:	46 83       	std	Z+6, r20	; 0x06
     992:	57 83       	std	Z+7, r21	; 0x07
     994:	60 87       	std	Z+8, r22	; 0x08
     996:	71 87       	std	Z+9, r23	; 0x09
     998:	33 87       	std	Z+11, r19	; 0x0b
     99a:	22 87       	std	Z+10, r18	; 0x0a
     99c:	15 87       	std	Z+13, r17	; 0x0d
     99e:	04 87       	std	Z+12, r16	; 0x0c
     9a0:	c2 8a       	std	Z+18, r12	; 0x12
     9a2:	d3 8a       	std	Z+19, r13	; 0x13
     9a4:	e4 8a       	std	Z+20, r14	; 0x14
     9a6:	f5 8a       	std	Z+21, r15	; 0x15
     9a8:	86 8a       	std	Z+22, r8	; 0x16
     9aa:	97 8a       	std	Z+23, r9	; 0x17
     9ac:	a0 8e       	std	Z+24, r10	; 0x18
     9ae:	b1 8e       	std	Z+25, r11	; 0x19
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	bf 90       	pop	r11
     9c2:	af 90       	pop	r10
     9c4:	9f 90       	pop	r9
     9c6:	8f 90       	pop	r8
     9c8:	08 95       	ret

000009ca <setup>:
     9ca:	6f 92       	push	r6
     9cc:	7f 92       	push	r7
     9ce:	8f 92       	push	r8
     9d0:	9f 92       	push	r9
     9d2:	af 92       	push	r10
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	6c 97       	sbiw	r28, 0x1c	; 28
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	fc 01       	movw	r30, r24
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	33 81       	ldd	r19, Z+3	; 0x03
     a00:	3c 83       	std	Y+4, r19	; 0x04
     a02:	2b 83       	std	Y+3, r18	; 0x03
     a04:	2e ed       	ldi	r18, 0xDE	; 222
     a06:	31 e0       	ldi	r19, 0x01	; 1
     a08:	3a 83       	std	Y+2, r19	; 0x02
     a0a:	29 83       	std	Y+1, r18	; 0x01
     a0c:	24 81       	ldd	r18, Z+4	; 0x04
     a0e:	2d 83       	std	Y+5, r18	; 0x05
     a10:	25 81       	ldd	r18, Z+5	; 0x05
     a12:	2e 83       	std	Y+6, r18	; 0x06
     a14:	26 81       	ldd	r18, Z+6	; 0x06
     a16:	2f 83       	std	Y+7, r18	; 0x07
     a18:	28 e0       	ldi	r18, 0x08	; 8
     a1a:	e9 e0       	ldi	r30, 0x09	; 9
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	de 01       	movw	r26, r28
     a20:	18 96       	adiw	r26, 0x08	; 8
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	2a 95       	dec	r18
     a28:	e1 f7       	brne	.-8      	; 0xa22 <setup+0x58>
     a2a:	25 e0       	ldi	r18, 0x05	; 5
     a2c:	e1 e1       	ldi	r30, 0x11	; 17
     a2e:	f2 e0       	ldi	r31, 0x02	; 2
     a30:	de 01       	movw	r26, r28
     a32:	50 96       	adiw	r26, 0x10	; 16
     a34:	01 90       	ld	r0, Z+
     a36:	0d 92       	st	X+, r0
     a38:	2a 95       	dec	r18
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <setup+0x6a>
     a3c:	fc 01       	movw	r30, r24
     a3e:	24 89       	ldd	r18, Z+20	; 0x14
     a40:	2d 8b       	std	Y+21, r18	; 0x15
     a42:	25 89       	ldd	r18, Z+21	; 0x15
     a44:	2e 8b       	std	Y+22, r18	; 0x16
     a46:	26 89       	ldd	r18, Z+22	; 0x16
     a48:	2f 8b       	std	Y+23, r18	; 0x17
     a4a:	27 89       	ldd	r18, Z+23	; 0x17
     a4c:	28 8f       	std	Y+24, r18	; 0x18
     a4e:	20 8d       	ldd	r18, Z+24	; 0x18
     a50:	29 8f       	std	Y+25, r18	; 0x19
     a52:	21 8d       	ldd	r18, Z+25	; 0x19
     a54:	2a 8f       	std	Y+26, r18	; 0x1a
     a56:	22 8d       	ldd	r18, Z+26	; 0x1a
     a58:	2b 8f       	std	Y+27, r18	; 0x1b
     a5a:	83 8d       	ldd	r24, Z+27	; 0x1b
     a5c:	8c 8f       	std	Y+28, r24	; 0x1c
     a5e:	8d e3       	ldi	r24, 0x3D	; 61
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_Znwj>
     a66:	3c 01       	movw	r6, r24
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	0e 94 22 03 	call	0x644	; 0x644 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     a72:	70 92 01 02 	sts	0x0201, r7	; 0x800201 <ptrdspMainDoor+0x1>
     a76:	60 92 00 02 	sts	0x0200, r6	; 0x800200 <ptrdspMainDoor>
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_Znwj>
     a82:	3c 01       	movw	r6, r24
     a84:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN6SafetyC1Ev>
     a88:	70 92 ff 01 	sts	0x01FF, r7	; 0x8001ff <ptrsftMainDoor+0x1>
     a8c:	60 92 fe 01 	sts	0x01FE, r6	; 0x8001fe <ptrsftMainDoor>
     a90:	8c e1       	ldi	r24, 0x1C	; 28
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_Znwj>
     a98:	3c 01       	movw	r6, r24
     a9a:	80 ea       	ldi	r24, 0xA0	; 160
     a9c:	88 2e       	mov	r8, r24
     a9e:	8b eb       	ldi	r24, 0xBB	; 187
     aa0:	98 2e       	mov	r9, r24
     aa2:	8d e0       	ldi	r24, 0x0D	; 13
     aa4:	a8 2e       	mov	r10, r24
     aa6:	b1 2c       	mov	r11, r1
     aa8:	90 ea       	ldi	r25, 0xA0	; 160
     aaa:	c9 2e       	mov	r12, r25
     aac:	9b eb       	ldi	r25, 0xBB	; 187
     aae:	d9 2e       	mov	r13, r25
     ab0:	9d e0       	ldi	r25, 0x0D	; 13
     ab2:	e9 2e       	mov	r14, r25
     ab4:	f1 2c       	mov	r15, r1
     ab6:	08 e2       	ldi	r16, 0x28	; 40
     ab8:	10 e0       	ldi	r17, 0x00	; 0
     aba:	24 e6       	ldi	r18, 0x64	; 100
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	6c ed       	ldi	r22, 0xDC	; 220
     ac4:	73 e4       	ldi	r23, 0x43	; 67
     ac6:	c3 01       	movw	r24, r6
     ac8:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6SensorC1Ediimm>
     acc:	70 92 fd 01 	sts	0x01FD, r7	; 0x8001fd <ptrsnsMainDoor+0x1>
     ad0:	60 92 fc 01 	sts	0x01FC, r6	; 0x8001fc <ptrsnsMainDoor>
     ad4:	62 e0       	ldi	r22, 0x02	; 2
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 0c 08 	call	0x1018	; 0x1018 <pinMode>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <analogReference>
     ae2:	e9 e6       	ldi	r30, 0x69	; 105
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8a 60       	ori	r24, 0x0A	; 10
     aea:	80 83       	st	Z, r24
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	8d bb       	out	0x1d, r24	; 29
     af0:	e8 e6       	ldi	r30, 0x68	; 104
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	85 60       	ori	r24, 0x05	; 5
     af8:	80 83       	st	Z, r24
     afa:	78 94       	sei
     afc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <millis>
     b00:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <__data_end>
     b04:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <__data_end+0x1>
     b08:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <__data_end+0x2>
     b0c:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <__data_end+0x3>
     b10:	6c 96       	adiw	r28, 0x1c	; 28
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	9f 90       	pop	r9
     b32:	8f 90       	pop	r8
     b34:	7f 90       	pop	r7
     b36:	6f 90       	pop	r6
     b38:	08 95       	ret

00000b3a <loop>:
     b3a:	40 91 f8 01 	lds	r20, 0x01F8	; 0x8001f8 <__data_end>
     b3e:	50 91 f9 01 	lds	r21, 0x01F9	; 0x8001f9 <__data_end+0x1>
     b42:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <__data_end+0x2>
     b46:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <__data_end+0x3>
     b4a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <ptrdspMainDoor>
     b4e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <ptrdspMainDoor+0x1>
     b52:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN7Display21UpdateMenuFromButtonsEm>
     b56:	88 23       	and	r24, r24
     b58:	51 f0       	breq	.+20     	; 0xb6e <loop+0x34>
     b5a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <millis>
     b5e:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <__data_end>
     b62:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <__data_end+0x1>
     b66:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <__data_end+0x2>
     b6a:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <__data_end+0x3>
     b6e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <ptrdspMainDoor>
     b72:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <ptrdspMainDoor+0x1>
     b76:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_ZN7Display11CurrentMenuEv>

00000b7a <__vector_2>:
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     ba4:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     ba8:	0e 94 18 04 	call	0x830	; 0x830 <_ZN6Safety12cntEventIncrEi>
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     bb4:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     bb8:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6Safety15setSafetyStatusEi>
     bbc:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     bc0:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     bc4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Safety12inEventCountEv>
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_1>:
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
     c0c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__vector_2>
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_5>:
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
     c54:	65 e0       	ldi	r22, 0x05	; 5
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     c5c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     c60:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN6Safety12deviceStatusEi>
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	b1 f4       	brne	.+44     	; 0xc94 <__vector_5+0x62>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     c70:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     c74:	0e 94 18 04 	call	0x830	; 0x830 <_ZN6Safety12cntEventIncrEi>
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     c80:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     c84:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6Safety15setSafetyStatusEi>
     c88:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     c8c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     c90:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Safety12inEventCountEv>
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__vector_3>:
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	63 e0       	ldi	r22, 0x03	; 3
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     ce4:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     ce8:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN6Safety9setDeviceEii>
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	65 e0       	ldi	r22, 0x05	; 5
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <ptrsftMainDoor>
     cf8:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <ptrsftMainDoor+0x1>
     cfc:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN6Safety9setDeviceEii>
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <_GLOBAL__sub_I_disp>:
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000d2a <initVariant>:
     d2a:	08 95       	ret

00000d2c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     d2c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <init>

	initVariant();
     d30:	0e 94 95 06 	call	0xd2a	; 0xd2a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d34:	0e 94 e5 04 	call	0x9ca	; 0x9ca <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d38:	c0 e0       	ldi	r28, 0x00	; 0
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     d3c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <loop>
		if (serialEventRun) serialEventRun();
     d40:	20 97       	sbiw	r28, 0x00	; 0
     d42:	e1 f3       	breq	.-8      	; 0xd3c <main+0x10>
     d44:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d48:	f9 cf       	rjmp	.-14     	; 0xd3c <main+0x10>

00000d4a <_Znwj>:
     d4a:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <malloc>

00000d4e <_ZN5Print17availableForWriteEv>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	08 95       	ret

00000d54 <_ZN5Print5flushEv>:
     d54:	08 95       	ret

00000d56 <_ZN5Print5writeEPKhj>:
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	6c 01       	movw	r12, r24
     d68:	7a 01       	movw	r14, r20
     d6a:	8b 01       	movw	r16, r22
     d6c:	c0 e0       	ldi	r28, 0x00	; 0
     d6e:	d0 e0       	ldi	r29, 0x00	; 0
     d70:	ce 15       	cp	r28, r14
     d72:	df 05       	cpc	r29, r15
     d74:	81 f0       	breq	.+32     	; 0xd96 <_ZN5Print5writeEPKhj+0x40>
     d76:	d8 01       	movw	r26, r16
     d78:	6d 91       	ld	r22, X+
     d7a:	8d 01       	movw	r16, r26
     d7c:	d6 01       	movw	r26, r12
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	01 90       	ld	r0, Z+
     d84:	f0 81       	ld	r31, Z
     d86:	e0 2d       	mov	r30, r0
     d88:	c6 01       	movw	r24, r12
     d8a:	09 95       	icall
     d8c:	89 2b       	or	r24, r25
     d8e:	11 f0       	breq	.+4      	; 0xd94 <_ZN5Print5writeEPKhj+0x3e>
     d90:	21 96       	adiw	r28, 0x01	; 1
     d92:	ee cf       	rjmp	.-36     	; 0xd70 <_ZN5Print5writeEPKhj+0x1a>
     d94:	7e 01       	movw	r14, r28
     d96:	c7 01       	movw	r24, r14
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     daa:	db 01       	movw	r26, r22
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	4d 91       	ld	r20, X+
     db0:	5c 91       	ld	r21, X
     db2:	15 97       	sbiw	r26, 0x05	; 5
     db4:	6d 91       	ld	r22, X+
     db6:	7c 91       	ld	r23, X
     db8:	dc 01       	movw	r26, r24
     dba:	ed 91       	ld	r30, X+
     dbc:	fc 91       	ld	r31, X
     dbe:	02 80       	ldd	r0, Z+2	; 0x02
     dc0:	f3 81       	ldd	r31, Z+3	; 0x03
     dc2:	e0 2d       	mov	r30, r0
     dc4:	09 94       	ijmp

00000dc6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     ddc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <timer0_millis>
     de0:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <timer0_millis+0x1>
     de4:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <timer0_millis+0x2>
     de8:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     dec:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     df0:	23 e0       	ldi	r18, 0x03	; 3
     df2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     df4:	2d 37       	cpi	r18, 0x7D	; 125
     df6:	20 f4       	brcc	.+8      	; 0xe00 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	a1 1d       	adc	r26, r1
     dfc:	b1 1d       	adc	r27, r1
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     e00:	26 e8       	ldi	r18, 0x86	; 134
     e02:	23 0f       	add	r18, r19
		m += 1;
     e04:	02 96       	adiw	r24, 0x02	; 2
     e06:	a1 1d       	adc	r26, r1
     e08:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e0a:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <timer0_fract>
	timer0_millis = m;
     e0e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <timer0_millis>
     e12:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <timer0_millis+0x1>
     e16:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <timer0_millis+0x2>
     e1a:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <timer0_millis+0x3>
	timer0_overflow_count++;
     e1e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <timer0_overflow_count>
     e22:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <timer0_overflow_count+0x1>
     e26:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <timer0_overflow_count+0x2>
     e2a:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <timer0_overflow_count+0x3>
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	a1 1d       	adc	r26, r1
     e32:	b1 1d       	adc	r27, r1
     e34:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <timer0_overflow_count>
     e38:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <timer0_overflow_count+0x1>
     e3c:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <timer0_overflow_count+0x2>
     e40:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <timer0_overflow_count+0x3>
}
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     e5a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     e5c:	f8 94       	cli
	m = timer0_millis;
     e5e:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <timer0_millis>
     e62:	70 91 20 02 	lds	r23, 0x0220	; 0x800220 <timer0_millis+0x1>
     e66:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <timer0_millis+0x2>
     e6a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <timer0_millis+0x3>
	SREG = oldSREG;
     e6e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     e70:	08 95       	ret

00000e72 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e72:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e74:	f8 94       	cli
	m = timer0_overflow_count;
     e76:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <timer0_overflow_count>
     e7a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <timer0_overflow_count+0x1>
     e7e:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <timer0_overflow_count+0x2>
     e82:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e86:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e88:	a8 9b       	sbis	0x15, 0	; 21
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <micros+0x24>
     e8c:	2f 3f       	cpi	r18, 0xFF	; 255
     e8e:	19 f0       	breq	.+6      	; 0xe96 <micros+0x24>
		m++;
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	a1 1d       	adc	r26, r1
     e94:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e96:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e98:	ba 2f       	mov	r27, r26
     e9a:	a9 2f       	mov	r26, r25
     e9c:	98 2f       	mov	r25, r24
     e9e:	88 27       	eor	r24, r24
     ea0:	82 0f       	add	r24, r18
     ea2:	91 1d       	adc	r25, r1
     ea4:	a1 1d       	adc	r26, r1
     ea6:	b1 1d       	adc	r27, r1
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	42 e0       	ldi	r20, 0x02	; 2
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	4a 95       	dec	r20
     eb8:	d1 f7       	brne	.-12     	; 0xeae <micros+0x3c>
}
     eba:	08 95       	ret

00000ebc <delay>:

void delay(unsigned long ms)
{
     ebc:	8f 92       	push	r8
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	6b 01       	movw	r12, r22
     ece:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     ed0:	0e 94 39 07 	call	0xe72	; 0xe72 <micros>
     ed4:	4b 01       	movw	r8, r22
     ed6:	5c 01       	movw	r10, r24

	while (ms > 0) {
     ed8:	c1 14       	cp	r12, r1
     eda:	d1 04       	cpc	r13, r1
     edc:	e1 04       	cpc	r14, r1
     ede:	f1 04       	cpc	r15, r1
     ee0:	01 f1       	breq	.+64     	; 0xf22 <delay+0x66>
		yield();
     ee2:	0e 94 2b 10 	call	0x2056	; 0x2056 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     ee6:	0e 94 39 07 	call	0xe72	; 0xe72 <micros>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	88 19       	sub	r24, r8
     ef0:	99 09       	sbc	r25, r9
     ef2:	aa 09       	sbc	r26, r10
     ef4:	bb 09       	sbc	r27, r11
     ef6:	88 3e       	cpi	r24, 0xE8	; 232
     ef8:	93 40       	sbci	r25, 0x03	; 3
     efa:	a1 05       	cpc	r26, r1
     efc:	b1 05       	cpc	r27, r1
     efe:	60 f3       	brcs	.-40     	; 0xed8 <delay+0x1c>
			ms--;
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	c2 1a       	sub	r12, r18
     f04:	d1 08       	sbc	r13, r1
     f06:	e1 08       	sbc	r14, r1
     f08:	f1 08       	sbc	r15, r1
			start += 1000;
     f0a:	88 ee       	ldi	r24, 0xE8	; 232
     f0c:	88 0e       	add	r8, r24
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	98 1e       	adc	r9, r24
     f12:	a1 1c       	adc	r10, r1
     f14:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     f16:	c1 14       	cp	r12, r1
     f18:	d1 04       	cpc	r13, r1
     f1a:	e1 04       	cpc	r14, r1
     f1c:	f1 04       	cpc	r15, r1
     f1e:	19 f7       	brne	.-58     	; 0xee6 <delay+0x2a>
     f20:	db cf       	rjmp	.-74     	; 0xed8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	df 90       	pop	r13
     f28:	cf 90       	pop	r12
     f2a:	bf 90       	pop	r11
     f2c:	af 90       	pop	r10
     f2e:	9f 90       	pop	r9
     f30:	8f 90       	pop	r8
     f32:	08 95       	ret

00000f34 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	91 05       	cpc	r25, r1
     f38:	38 f0       	brcs	.+14     	; 0xf48 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     f42:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <delayMicroseconds+0x10>
     f48:	08 95       	ret

00000f4a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f4a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f4c:	84 b5       	in	r24, 0x24	; 36
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f52:	84 b5       	in	r24, 0x24	; 36
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f58:	85 b5       	in	r24, 0x25	; 37
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f5e:	85 b5       	in	r24, 0x25	; 37
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f64:	ee e6       	ldi	r30, 0x6E	; 110
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f6e:	e1 e8       	ldi	r30, 0x81	; 129
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f74:	80 81       	ld	r24, Z
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f80:	e0 e8       	ldi	r30, 0x80	; 128
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f8a:	e1 eb       	ldi	r30, 0xB1	; 177
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f94:	e0 eb       	ldi	r30, 0xB0	; 176
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f9e:	ea e7       	ldi	r30, 0x7A	; 122
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     fa8:	80 81       	ld	r24, Z
     faa:	82 60       	ori	r24, 0x02	; 2
     fac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     fb4:	80 81       	ld	r24, Z
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     fba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     fbe:	08 95       	ret

00000fc0 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     fc0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
     fc4:	08 95       	ret

00000fc6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	81 f0       	breq	.+32     	; 0xfea <turnOffPWM+0x24>
     fca:	28 f4       	brcc	.+10     	; 0xfd6 <turnOffPWM+0x10>
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	99 f0       	breq	.+38     	; 0xff6 <turnOffPWM+0x30>
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	a1 f0       	breq	.+40     	; 0xffc <turnOffPWM+0x36>
     fd4:	08 95       	ret
     fd6:	87 30       	cpi	r24, 0x07	; 7
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <turnOffPWM+0x3e>
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	b9 f0       	breq	.+46     	; 0x100c <turnOffPWM+0x46>
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	d1 f4       	brne	.+52     	; 0x1016 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     fe2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     fea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     fee:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ff0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ff4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ff6:	84 b5       	in	r24, 0x24	; 36
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ffc:	84 b5       	in	r24, 0x24	; 36
     ffe:	8f 7d       	andi	r24, 0xDF	; 223
    1000:	84 bd       	out	0x24, r24	; 36
    1002:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1004:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1008:	8f 77       	andi	r24, 0x7F	; 127
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    100c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1010:	8f 7d       	andi	r24, 0xDF	; 223
    1012:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1016:	08 95       	ret

00001018 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	e4 58       	subi	r30, 0x84	; 132
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1026:	fc 01       	movw	r30, r24
    1028:	e0 57       	subi	r30, 0x70	; 112
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    102e:	88 23       	and	r24, r24
    1030:	61 f1       	breq	.+88     	; 0x108a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	fc 01       	movw	r30, r24
    103a:	e8 54       	subi	r30, 0x48	; 72
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	c5 91       	lpm	r28, Z+
    1040:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1042:	fc 01       	movw	r30, r24
    1044:	e2 55       	subi	r30, 0x52	; 82
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	a5 91       	lpm	r26, Z+
    104a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    104c:	61 11       	cpse	r22, r1
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1050:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1052:	f8 94       	cli
		*reg &= ~bit;
    1054:	88 81       	ld	r24, Y
    1056:	20 95       	com	r18
    1058:	82 23       	and	r24, r18
    105a:	88 83       	st	Y, r24
		*out &= ~bit;
    105c:	ec 91       	ld	r30, X
    105e:	2e 23       	and	r18, r30
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1062:	62 30       	cpi	r22, 0x02	; 2
    1064:	61 f4       	brne	.+24     	; 0x107e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1066:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1068:	f8 94       	cli
		*reg &= ~bit;
    106a:	88 81       	ld	r24, Y
    106c:	32 2f       	mov	r19, r18
    106e:	30 95       	com	r19
    1070:	83 23       	and	r24, r19
    1072:	88 83       	st	Y, r24
		*out |= bit;
    1074:	ec 91       	ld	r30, X
    1076:	2e 2b       	or	r18, r30
    1078:	2c 93       	st	X, r18
		SREG = oldSREG;
    107a:	9f bf       	out	0x3f, r25	; 63
    107c:	06 c0       	rjmp	.+12     	; 0x108a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    107e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1080:	f8 94       	cli
		*reg |= bit;
    1082:	e8 81       	ld	r30, Y
    1084:	2e 2b       	or	r18, r30
    1086:	28 83       	st	Y, r18
		SREG = oldSREG;
    1088:	8f bf       	out	0x3f, r24	; 63
	}
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	e8 59       	subi	r30, 0x98	; 152
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    10a2:	f9 01       	movw	r30, r18
    10a4:	e4 58       	subi	r30, 0x84	; 132
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    10aa:	f9 01       	movw	r30, r18
    10ac:	e0 57       	subi	r30, 0x70	; 112
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10b2:	cc 23       	and	r28, r28
    10b4:	c1 f0       	breq	.+48     	; 0x10e6 <digitalWrite+0x56>
    10b6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10b8:	81 11       	cpse	r24, r1
    10ba:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <turnOffPWM>

	out = portOutputRegister(port);
    10be:	ec 2f       	mov	r30, r28
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	e2 55       	subi	r30, 0x52	; 82
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	a5 91       	lpm	r26, Z+
    10cc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    10ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10d0:	f8 94       	cli

	if (val == LOW) {
    10d2:	11 11       	cpse	r17, r1
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <digitalWrite+0x4e>
		*out &= ~bit;
    10d6:	8c 91       	ld	r24, X
    10d8:	d0 95       	com	r29
    10da:	d8 23       	and	r29, r24
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    10de:	ec 91       	ld	r30, X
    10e0:	de 2b       	or	r29, r30
    10e2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    10e4:	9f bf       	out	0x3f, r25	; 63
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	08 95       	ret

000010ee <digitalRead>:

int digitalRead(uint8_t pin)
{
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	f9 01       	movw	r30, r18
    10f8:	e8 59       	subi	r30, 0x98	; 152
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    10fe:	f9 01       	movw	r30, r18
    1100:	e4 58       	subi	r30, 0x84	; 132
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1106:	f9 01       	movw	r30, r18
    1108:	e0 57       	subi	r30, 0x70	; 112
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    110e:	cc 23       	and	r28, r28
    1110:	91 f0       	breq	.+36     	; 0x1136 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1112:	81 11       	cpse	r24, r1
    1114:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1118:	ec 2f       	mov	r30, r28
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ec 55       	subi	r30, 0x5C	; 92
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	a5 91       	lpm	r26, Z+
    1126:	b4 91       	lpm	r27, Z
    1128:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    112a:	ed 23       	and	r30, r29
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	21 f4       	brne	.+8      	; 0x113a <digitalRead+0x4c>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <digitalRead+0x4c>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    1140:	08 95       	ret

00001142 <_ZN6StringD1Ev>:
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <free>

0000114c <_ZN6String10invalidateEv>:
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	88 81       	ld	r24, Y
    1154:	99 81       	ldd	r25, Y+1	; 0x01
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	11 f0       	breq	.+4      	; 0x115e <_ZN6String10invalidateEv+0x12>
    115a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <free>
    115e:	19 82       	std	Y+1, r1	; 0x01
    1160:	18 82       	st	Y, r1
    1162:	1d 82       	std	Y+5, r1	; 0x05
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	1b 82       	std	Y+3, r1	; 0x03
    1168:	1a 82       	std	Y+2, r1	; 0x02
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <_ZN6String12changeBufferEj>:
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	8b 01       	movw	r16, r22
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	88 81       	ld	r24, Y
    1182:	99 81       	ldd	r25, Y+1	; 0x01
    1184:	0e 94 7e 13 	call	0x26fc	; 0x26fc <realloc>
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	31 f0       	breq	.+12     	; 0x1198 <_ZN6String12changeBufferEj+0x28>
    118c:	99 83       	std	Y+1, r25	; 0x01
    118e:	88 83       	st	Y, r24
    1190:	1b 83       	std	Y+3, r17	; 0x03
    1192:	0a 83       	std	Y+2, r16	; 0x02
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	01 c0       	rjmp	.+2      	; 0x119a <_ZN6String12changeBufferEj+0x2a>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	08 95       	ret

000011a4 <_ZN6String7reserveEj>:
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	ec 01       	movw	r28, r24
    11aa:	88 81       	ld	r24, Y
    11ac:	99 81       	ldd	r25, Y+1	; 0x01
    11ae:	89 2b       	or	r24, r25
    11b0:	29 f0       	breq	.+10     	; 0x11bc <_ZN6String7reserveEj+0x18>
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	86 17       	cp	r24, r22
    11b8:	97 07       	cpc	r25, r23
    11ba:	60 f4       	brcc	.+24     	; 0x11d4 <_ZN6String7reserveEj+0x30>
    11bc:	ce 01       	movw	r24, r28
    11be:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN6String12changeBufferEj>
    11c2:	88 23       	and	r24, r24
    11c4:	41 f0       	breq	.+16     	; 0x11d6 <_ZN6String7reserveEj+0x32>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	89 2b       	or	r24, r25
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <_ZN6String7reserveEj+0x30>
    11ce:	e8 81       	ld	r30, Y
    11d0:	f9 81       	ldd	r31, Y+1	; 0x01
    11d2:	10 82       	st	Z, r1
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <_ZN6String4copyEPKcj>:
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	7b 01       	movw	r14, r22
    11ec:	8a 01       	movw	r16, r20
    11ee:	ba 01       	movw	r22, r20
    11f0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN6String7reserveEj>
    11f4:	81 11       	cpse	r24, r1
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <_ZN6String4copyEPKcj+0x24>
    11f8:	ce 01       	movw	r24, r28
    11fa:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN6String10invalidateEv>
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <_ZN6String4copyEPKcj+0x32>
    1200:	1d 83       	std	Y+5, r17	; 0x05
    1202:	0c 83       	std	Y+4, r16	; 0x04
    1204:	b7 01       	movw	r22, r14
    1206:	88 81       	ld	r24, Y
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	0e 94 4d 14 	call	0x289a	; 0x289a <strcpy>
    120e:	ce 01       	movw	r24, r28
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <_ZN6StringC1EPKc>:
    121e:	fc 01       	movw	r30, r24
    1220:	11 82       	std	Z+1, r1	; 0x01
    1222:	10 82       	st	Z, r1
    1224:	13 82       	std	Z+3, r1	; 0x03
    1226:	12 82       	std	Z+2, r1	; 0x02
    1228:	15 82       	std	Z+5, r1	; 0x05
    122a:	14 82       	std	Z+4, r1	; 0x04
    122c:	61 15       	cp	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	51 f0       	breq	.+20     	; 0x1246 <_ZN6StringC1EPKc+0x28>
    1232:	fb 01       	movw	r30, r22
    1234:	01 90       	ld	r0, Z+
    1236:	00 20       	and	r0, r0
    1238:	e9 f7       	brne	.-6      	; 0x1234 <_ZN6StringC1EPKc+0x16>
    123a:	31 97       	sbiw	r30, 0x01	; 1
    123c:	af 01       	movw	r20, r30
    123e:	46 1b       	sub	r20, r22
    1240:	57 0b       	sbc	r21, r23
    1242:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <_ZN6String4copyEPKcj>
    1246:	08 95       	ret

00001248 <_ZN6String4moveERS_>:
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	8c 01       	movw	r16, r24
    1252:	eb 01       	movw	r28, r22
    1254:	fc 01       	movw	r30, r24
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	d1 f0       	breq	.+52     	; 0x1292 <_ZN6String4moveERS_+0x4a>
    125e:	68 81       	ld	r22, Y
    1260:	79 81       	ldd	r23, Y+1	; 0x01
    1262:	61 15       	cp	r22, r1
    1264:	71 05       	cpc	r23, r1
    1266:	99 f0       	breq	.+38     	; 0x128e <_ZN6String4moveERS_+0x46>
    1268:	20 ea       	ldi	r18, 0xA0	; 160
    126a:	38 e0       	ldi	r19, 0x08	; 8
    126c:	23 2b       	or	r18, r19
    126e:	79 f0       	breq	.+30     	; 0x128e <_ZN6String4moveERS_+0x46>
    1270:	42 81       	ldd	r20, Z+2	; 0x02
    1272:	53 81       	ldd	r21, Z+3	; 0x03
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	42 17       	cp	r20, r18
    127a:	53 07       	cpc	r21, r19
    127c:	40 f0       	brcs	.+16     	; 0x128e <_ZN6String4moveERS_+0x46>
    127e:	0e 94 4d 14 	call	0x289a	; 0x289a <strcpy>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	f8 01       	movw	r30, r16
    1288:	95 83       	std	Z+5, r25	; 0x05
    128a:	84 83       	std	Z+4, r24	; 0x04
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <_ZN6String4moveERS_+0x6c>
    128e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <free>
    1292:	88 81       	ld	r24, Y
    1294:	99 81       	ldd	r25, Y+1	; 0x01
    1296:	f8 01       	movw	r30, r16
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	9b 81       	ldd	r25, Y+3	; 0x03
    12a0:	93 83       	std	Z+3, r25	; 0x03
    12a2:	82 83       	std	Z+2, r24	; 0x02
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	95 83       	std	Z+5, r25	; 0x05
    12aa:	84 83       	std	Z+4, r24	; 0x04
    12ac:	19 82       	std	Y+1, r1	; 0x01
    12ae:	18 82       	st	Y, r1
    12b0:	1b 82       	std	Y+3, r1	; 0x03
    12b2:	1a 82       	std	Y+2, r1	; 0x02
    12b4:	1d 82       	std	Y+5, r1	; 0x05
    12b6:	1c 82       	std	Y+4, r1	; 0x04
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <_ZN6StringaSERKS_>:
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	ec 01       	movw	r28, r24
    12c8:	fb 01       	movw	r30, r22
    12ca:	86 17       	cp	r24, r22
    12cc:	97 07       	cpc	r25, r23
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <_ZN6StringaSERKS_+0x26>
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	61 15       	cp	r22, r1
    12d6:	71 05       	cpc	r23, r1
    12d8:	29 f0       	breq	.+10     	; 0x12e4 <_ZN6StringaSERKS_+0x22>
    12da:	44 81       	ldd	r20, Z+4	; 0x04
    12dc:	55 81       	ldd	r21, Z+5	; 0x05
    12de:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN6String4copyEPKcj>
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <_ZN6StringaSERKS_+0x26>
    12e4:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN6String10invalidateEv>
    12e8:	ce 01       	movw	r24, r28
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN6StringC1ERKS_>:
    12f0:	fc 01       	movw	r30, r24
    12f2:	11 82       	std	Z+1, r1	; 0x01
    12f4:	10 82       	st	Z, r1
    12f6:	13 82       	std	Z+3, r1	; 0x03
    12f8:	12 82       	std	Z+2, r1	; 0x02
    12fa:	15 82       	std	Z+5, r1	; 0x05
    12fc:	14 82       	std	Z+4, r1	; 0x04
    12fe:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN6StringaSERKS_>

00001302 <_ZN6StringaSEOS_>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ec 01       	movw	r28, r24
    1308:	86 17       	cp	r24, r22
    130a:	97 07       	cpc	r25, r23
    130c:	11 f0       	breq	.+4      	; 0x1312 <_ZN6StringaSEOS_+0x10>
    130e:	0e 94 24 09 	call	0x1248	; 0x1248 <_ZN6String4moveERS_>
    1312:	ce 01       	movw	r24, r28
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <_ZN6StringaSEPKc>:
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	61 15       	cp	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	59 f0       	breq	.+22     	; 0x133c <_ZN6StringaSEPKc+0x22>
    1326:	fb 01       	movw	r30, r22
    1328:	01 90       	ld	r0, Z+
    132a:	00 20       	and	r0, r0
    132c:	e9 f7       	brne	.-6      	; 0x1328 <_ZN6StringaSEPKc+0xe>
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	af 01       	movw	r20, r30
    1332:	46 1b       	sub	r20, r22
    1334:	57 0b       	sbc	r21, r23
    1336:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN6String4copyEPKcj>
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <_ZN6StringaSEPKc+0x26>
    133c:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN6String10invalidateEv>
    1340:	ce 01       	movw	r24, r28
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	7c 01       	movw	r14, r24
    135c:	6b 01       	movw	r12, r22
    135e:	8a 01       	movw	r16, r20
    1360:	e9 01       	movw	r28, r18
	if (left > right) {
    1362:	24 17       	cp	r18, r20
    1364:	35 07       	cpc	r19, r21
    1366:	20 f4       	brcc	.+8      	; 0x1370 <_ZNK6String9substringEjj+0x28>
    1368:	81 2f       	mov	r24, r17
    136a:	89 01       	movw	r16, r18
    136c:	c4 2f       	mov	r28, r20
    136e:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1370:	69 eb       	ldi	r22, 0xB9	; 185
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	c7 01       	movw	r24, r14
    1376:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6StringC1EPKc>
	if (left >= len) return out;
    137a:	d6 01       	movw	r26, r12
    137c:	14 96       	adiw	r26, 0x04	; 4
    137e:	8d 91       	ld	r24, X+
    1380:	9c 91       	ld	r25, X
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	08 17       	cp	r16, r24
    1386:	19 07       	cpc	r17, r25
    1388:	c8 f4       	brcc	.+50     	; 0x13bc <_ZNK6String9substringEjj+0x74>
    138a:	8c 17       	cp	r24, r28
    138c:	9d 07       	cpc	r25, r29
    138e:	08 f4       	brcc	.+2      	; 0x1392 <_ZNK6String9substringEjj+0x4a>
    1390:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1392:	d6 01       	movw	r26, r12
    1394:	ed 91       	ld	r30, X+
    1396:	fc 91       	ld	r31, X
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	ec 0f       	add	r30, r28
    139c:	fd 1f       	adc	r31, r29
    139e:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    13a0:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    13a2:	6d 91       	ld	r22, X+
    13a4:	7c 91       	ld	r23, X
    13a6:	60 0f       	add	r22, r16
    13a8:	71 1f       	adc	r23, r17
    13aa:	c7 01       	movw	r24, r14
    13ac:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    13b0:	d6 01       	movw	r26, r12
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	ec 0f       	add	r30, r28
    13b8:	fd 1f       	adc	r31, r29
    13ba:	b0 82       	st	Z, r11
	return out;
}
    13bc:	c7 01       	movw	r24, r14
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	bf 90       	pop	r11
    13d0:	08 95       	ret

000013d2 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    13d2:	fc 01       	movw	r30, r24
    13d4:	13 82       	std	Z+3, r1	; 0x03
    13d6:	12 82       	std	Z+2, r1	; 0x02
    13d8:	8e ed       	ldi	r24, 0xDE	; 222
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
    13e0:	12 8e       	std	Z+26, r1	; 0x1a
    13e2:	14 8a       	std	Z+20, r1	; 0x14
    13e4:	8f e0       	ldi	r24, 0x0F	; 15
    13e6:	84 83       	std	Z+4, r24	; 0x04
    13e8:	8e e0       	ldi	r24, 0x0E	; 14
    13ea:	85 83       	std	Z+5, r24	; 0x05
    13ec:	8d e0       	ldi	r24, 0x0D	; 13
    13ee:	86 83       	std	Z+6, r24	; 0x06
    13f0:	8c e0       	ldi	r24, 0x0C	; 12
    13f2:	87 83       	std	Z+7, r24	; 0x07
    13f4:	8b e0       	ldi	r24, 0x0B	; 11
    13f6:	80 87       	std	Z+8, r24	; 0x08
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	81 87       	std	Z+9, r24	; 0x09
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	82 87       	std	Z+10, r24	; 0x0a
    1400:	17 86       	std	Z+15, r1	; 0x0f
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 8b       	std	Z+16, r24	; 0x10
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	81 8b       	std	Z+17, r24	; 0x11
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	82 8b       	std	Z+18, r24	; 0x12
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	83 8b       	std	Z+19, r24	; 0x13
    1412:	08 95       	ret

00001414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    1414:	fc 01       	movw	r30, r24
    1416:	96 2f       	mov	r25, r22
    1418:	82 8d       	ldd	r24, Z+26	; 0x1a
    141a:	8f 3f       	cpi	r24, 0xFF	; 255
    141c:	21 f0       	breq	.+8      	; 0x1426 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    141e:	cf 01       	movw	r24, r30
    1420:	4b 96       	adiw	r24, 0x1b	; 27
    1422:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1426:	64 2f       	mov	r22, r20
    1428:	89 2f       	mov	r24, r25
    142a:	0c 94 48 08 	jmp	0x1090	; 0x1090 <digitalWrite>

0000142e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	d6 2f       	mov	r29, r22
    1438:	8c 01       	movw	r16, r24
    143a:	05 5e       	subi	r16, 0xE5	; 229
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	c1 e0       	ldi	r28, 0x01	; 1
    1440:	62 fb       	bst	r22, 2
    1442:	44 27       	eor	r20, r20
    1444:	40 f9       	bld	r20, 0
    1446:	4c 27       	eor	r20, r28
    1448:	68 e0       	ldi	r22, 0x08	; 8
    144a:	c8 01       	movw	r24, r16
    144c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1450:	d1 fb       	bst	r29, 1
    1452:	44 27       	eor	r20, r20
    1454:	40 f9       	bld	r20, 0
    1456:	4c 27       	eor	r20, r28
    1458:	67 e0       	ldi	r22, 0x07	; 7
    145a:	c8 01       	movw	r24, r16
    145c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1460:	4d 2f       	mov	r20, r29
    1462:	41 70       	andi	r20, 0x01	; 1
    1464:	4c 27       	eor	r20, r28
    1466:	66 e0       	ldi	r22, 0x06	; 6
    1468:	c8 01       	movw	r24, r16
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_ZN17Adafruit_MCP2301712digitalWriteEhh>

00001476 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    1476:	fc 01       	movw	r30, r24
    1478:	96 2f       	mov	r25, r22
    147a:	82 8d       	ldd	r24, Z+26	; 0x1a
    147c:	8f 3f       	cpi	r24, 0xFF	; 255
    147e:	21 f0       	breq	.+8      	; 0x1488 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1480:	cf 01       	movw	r24, r30
    1482:	4b 96       	adiw	r24, 0x1b	; 27
    1484:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    1488:	64 2f       	mov	r22, r20
    148a:	89 2f       	mov	r24, r25
    148c:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <pinMode>

00001490 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	6e 81       	ldd	r22, Y+6	; 0x06
    149a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	6e 81       	ldd	r22, Y+6	; 0x06
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	6e 81       	ldd	r22, Y+6	; 0x06
    14bc:	ce 01       	movw	r24, r28
    14be:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    14c2:	84 e6       	ldi	r24, 0x64	; 100
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <delayMicroseconds>

000014ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	8c 01       	movw	r16, r24
    14e4:	fc 01       	movw	r30, r24
    14e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    14e8:	98 01       	movw	r18, r16
    14ea:	29 5f       	subi	r18, 0xF9	; 249
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	79 01       	movw	r14, r18
    14f0:	c6 2f       	mov	r28, r22
    14f2:	d0 e0       	ldi	r29, 0x00	; 0
    14f4:	8f 3f       	cpi	r24, 0xFF	; 255
    14f6:	09 f4       	brne	.+2      	; 0x14fa <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    14f8:	73 c0       	rjmp	.+230    	; 0x15e0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    14fa:	68 01       	movw	r12, r16
    14fc:	3b e1       	ldi	r19, 0x1B	; 27
    14fe:	c3 0e       	add	r12, r19
    1500:	d1 1c       	adc	r13, r1
    1502:	c6 01       	movw	r24, r12
    1504:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    1508:	f7 01       	movw	r30, r14
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	a1 e0       	ldi	r26, 0x01	; 1
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	b1 90       	ld	r11, Z+
    1514:	ee 24       	eor	r14, r14
    1516:	e3 94       	inc	r14
    1518:	f1 2c       	mov	r15, r1
    151a:	bd 01       	movw	r22, r26
    151c:	0b 2c       	mov	r0, r11
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    1520:	66 0f       	add	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    1528:	60 95       	com	r22
    152a:	70 95       	com	r23
    152c:	86 23       	and	r24, r22
    152e:	97 23       	and	r25, r23
    1530:	9e 01       	movw	r18, r28
    1532:	04 2e       	mov	r0, r20
    1534:	02 c0       	rjmp	.+4      	; 0x153a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1536:	35 95       	asr	r19
    1538:	27 95       	ror	r18
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    153e:	21 70       	andi	r18, 0x01	; 1
    1540:	33 27       	eor	r19, r19
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	ba 94       	dec	r11
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    154c:	82 2b       	or	r24, r18
    154e:	93 2b       	or	r25, r19
    1550:	4f 5f       	subi	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	44 30       	cpi	r20, 0x04	; 4
    1556:	51 05       	cpc	r21, r1
    1558:	e1 f6       	brne	.-72     	; 0x1512 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    155a:	e7 01       	movw	r28, r14
    155c:	f8 01       	movw	r30, r16
    155e:	06 80       	ldd	r0, Z+6	; 0x06
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1562:	cc 0f       	add	r28, r28
    1564:	dd 1f       	adc	r29, r29
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    156a:	c0 95       	com	r28
    156c:	d0 95       	com	r29
    156e:	c8 23       	and	r28, r24
    1570:	d9 23       	and	r29, r25
    1572:	be 01       	movw	r22, r28
    1574:	c6 01       	movw	r24, r12
    1576:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    1582:	c7 01       	movw	r24, r14
    1584:	f8 01       	movw	r30, r16
    1586:	06 80       	ldd	r0, Z+6	; 0x06
    1588:	02 c0       	rjmp	.+4      	; 0x158e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1592:	c8 2b       	or	r28, r24
    1594:	d9 2b       	or	r29, r25
    1596:	be 01       	movw	r22, r28
    1598:	c6 01       	movw	r24, r12
    159a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    15a6:	b7 01       	movw	r22, r14
    15a8:	f8 01       	movw	r30, r16
    15aa:	06 80       	ldd	r0, Z+6	; 0x06
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    15b6:	60 95       	com	r22
    15b8:	70 95       	com	r23
    15ba:	6c 23       	and	r22, r28
    15bc:	7d 23       	and	r23, r29
    15be:	c6 01       	movw	r24, r12
    15c0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    15c4:	84 e6       	ldi	r24, 0x64	; 100
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <delayMicroseconds>
    15e0:	c1 2c       	mov	r12, r1
    15e2:	d1 2c       	mov	r13, r1
    15e4:	57 01       	movw	r10, r14
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	f7 01       	movw	r30, r14
    15ea:	61 91       	ld	r22, Z+
    15ec:	7f 01       	movw	r14, r30
    15ee:	c8 01       	movw	r24, r16
    15f0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    15f4:	ae 01       	movw	r20, r28
    15f6:	0c 2c       	mov	r0, r12
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    15fa:	55 95       	asr	r21
    15fc:	47 95       	ror	r20
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    1602:	41 70       	andi	r20, 0x01	; 1
    1604:	f5 01       	movw	r30, r10
    1606:	60 81       	ld	r22, Z
    1608:	c8 01       	movw	r24, r16
    160a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    160e:	ff ef       	ldi	r31, 0xFF	; 255
    1610:	cf 1a       	sub	r12, r31
    1612:	df 0a       	sbc	r13, r31
    1614:	24 e0       	ldi	r18, 0x04	; 4
    1616:	c2 16       	cp	r12, r18
    1618:	d1 04       	cpc	r13, r1
    161a:	21 f7       	brne	.-56     	; 0x15e4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    161c:	c8 01       	movw	r24, r16
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001636 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1636:	af 92       	push	r10
    1638:	bf 92       	push	r11
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	ec 01       	movw	r28, r24
    164c:	5c 01       	movw	r10, r24
    164e:	87 e0       	ldi	r24, 0x07	; 7
    1650:	a8 0e       	add	r10, r24
    1652:	b1 1c       	adc	r11, r1
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	e6 2e       	mov	r14, r22
    165a:	f1 2c       	mov	r15, r1
    165c:	65 01       	movw	r12, r10
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	f5 01       	movw	r30, r10
    1662:	61 91       	ld	r22, Z+
    1664:	5f 01       	movw	r10, r30
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    166c:	a7 01       	movw	r20, r14
    166e:	00 2e       	mov	r0, r16
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1672:	55 95       	asr	r21
    1674:	47 95       	ror	r20
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    167a:	41 70       	andi	r20, 0x01	; 1
    167c:	f6 01       	movw	r30, r12
    167e:	60 81       	ld	r22, Z
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1686:	0f 5f       	subi	r16, 0xFF	; 255
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	08 30       	cpi	r16, 0x08	; 8
    168c:	11 05       	cpc	r17, r1
    168e:	31 f7       	brne	.-52     	; 0x165c <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1690:	ce 01       	movw	r24, r28
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000016aa <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
    16b2:	16 2f       	mov	r17, r22
    16b4:	6c 81       	ldd	r22, Y+4	; 0x04
    16b6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    16ba:	6d 81       	ldd	r22, Y+5	; 0x05
    16bc:	6f 3f       	cpi	r22, 0xFF	; 255
    16be:	21 f0       	breq	.+8      	; 0x16c8 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    16c8:	8c 89       	ldd	r24, Y+20	; 0x14
    16ca:	61 2f       	mov	r22, r17
    16cc:	84 ff       	sbrs	r24, 4
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    16d0:	ce 01       	movw	r24, r28
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	75 95       	asr	r23
    16e2:	67 95       	ror	r22
    16e4:	8a 95       	dec	r24
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    16ee:	61 2f       	mov	r22, r17
    16f0:	ce 01       	movw	r24, r28
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000016fc <_ZN21Adafruit_RGBLCDShield7commandEh>:
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <_ZN21Adafruit_RGBLCDShield4sendEhh>

00001702 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1708:	80 ed       	ldi	r24, 0xD0	; 208
    170a:	97 e0       	ldi	r25, 0x07	; 7
    170c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <delayMicroseconds>

00001710 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	28 97       	sbiw	r28, 0x08	; 8
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	9c 01       	movw	r18, r24
    1726:	88 e0       	ldi	r24, 0x08	; 8
    1728:	e7 e0       	ldi	r30, 0x07	; 7
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	de 01       	movw	r26, r28
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	01 90       	ld	r0, Z+
    1732:	0d 92       	st	X+, r0
    1734:	8a 95       	dec	r24
    1736:	e1 f7       	brne	.-8      	; 0x1730 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    1738:	f9 01       	movw	r30, r18
    173a:	80 8d       	ldd	r24, Z+24	; 0x18
    173c:	84 17       	cp	r24, r20
    173e:	10 f4       	brcc	.+4      	; 0x1744 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    1740:	4f ef       	ldi	r20, 0xFF	; 255
    1742:	48 0f       	add	r20, r24
    1744:	fe 01       	movw	r30, r28
    1746:	31 96       	adiw	r30, 0x01	; 1
    1748:	e4 0f       	add	r30, r20
    174a:	f1 1d       	adc	r31, r1
    174c:	e4 0f       	add	r30, r20
    174e:	f1 1d       	adc	r31, r1
    1750:	90 81       	ld	r25, Z
    1752:	69 0f       	add	r22, r25
    1754:	60 68       	ori	r22, 0x80	; 128
    1756:	c9 01       	movw	r24, r18
    1758:	28 96       	adiw	r28, 0x08	; 8
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>

0000176c <_ZN21Adafruit_RGBLCDShield7displayEv>:
    176c:	fc 01       	movw	r30, r24
    176e:	65 89       	ldd	r22, Z+21	; 0x15
    1770:	26 2f       	mov	r18, r22
    1772:	24 60       	ori	r18, 0x04	; 4
    1774:	25 8b       	std	Z+21, r18	; 0x15
    1776:	6c 60       	ori	r22, 0x0C	; 12
    1778:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>

0000177c <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    177c:	8f 92       	push	r8
    177e:	9f 92       	push	r9
    1780:	af 92       	push	r10
    1782:	bf 92       	push	r11
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
    1796:	d4 2e       	mov	r13, r20
    1798:	c2 2e       	mov	r12, r18
    179a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    179c:	8f 3f       	cpi	r24, 0xFF	; 255
    179e:	41 f4       	brne	.+16     	; 0x17b0 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	8d 15       	cp	r24, r13
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    17a6:	5e c0       	rjmp	.+188    	; 0x1864 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    17a8:	8c 89       	ldd	r24, Y+20	; 0x14
    17aa:	88 60       	ori	r24, 0x08	; 8
    17ac:	8c 8b       	std	Y+20, r24	; 0x14
    17ae:	5a c0       	rjmp	.+180    	; 0x1864 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    17b0:	87 e2       	ldi	r24, 0x27	; 39
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN7TwoWire5beginEv>
    17b8:	8e 01       	movw	r16, r28
    17ba:	05 5e       	subi	r16, 0xE5	; 229
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	c8 01       	movw	r24, r16
    17c0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN17Adafruit_MCP230175beginEv>
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	68 e0       	ldi	r22, 0x08	; 8
    17c8:	c8 01       	movw	r24, r16
    17ca:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	66 e0       	ldi	r22, 0x06	; 6
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	67 e0       	ldi	r22, 0x07	; 7
    17dc:	c8 01       	movw	r24, r16
    17de:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    17e2:	67 e0       	ldi	r22, 0x07	; 7
    17e4:	ce 01       	movw	r24, r28
    17e6:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    17ea:	6d 81       	ldd	r22, Y+5	; 0x05
    17ec:	66 23       	and	r22, r22
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	c8 01       	movw	r24, r16
    17f4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	6c 81       	ldd	r22, Y+4	; 0x04
    17fc:	c8 01       	movw	r24, r16
    17fe:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	6e 81       	ldd	r22, Y+6	; 0x06
    1806:	c8 01       	movw	r24, r16
    1808:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    180c:	7e 01       	movw	r14, r28
    180e:	e7 e0       	ldi	r30, 0x07	; 7
    1810:	ee 0e       	add	r14, r30
    1812:	f1 1c       	adc	r15, r1
    1814:	5e 01       	movw	r10, r28
    1816:	fb e0       	ldi	r31, 0x0B	; 11
    1818:	af 0e       	add	r10, r31
    181a:	b1 1c       	adc	r11, r1
    181c:	f7 01       	movw	r30, r14
    181e:	61 91       	ld	r22, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	c8 01       	movw	r24, r16
    1826:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    182a:	ea 14       	cp	r14, r10
    182c:	fb 04       	cpc	r15, r11
    182e:	b1 f7       	brne	.-20     	; 0x181c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    1830:	7e 01       	movw	r14, r28
    1832:	ff e0       	ldi	r31, 0x0F	; 15
    1834:	ef 0e       	add	r14, r31
    1836:	f1 1c       	adc	r15, r1
    1838:	5e 01       	movw	r10, r28
    183a:	84 e1       	ldi	r24, 0x14	; 20
    183c:	a8 0e       	add	r10, r24
    183e:	b1 1c       	adc	r11, r1
    1840:	47 01       	movw	r8, r14
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	f7 01       	movw	r30, r14
    1846:	61 91       	ld	r22, Z+
    1848:	7f 01       	movw	r14, r30
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN17Adafruit_MCP230177pinModeEhh>
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	f4 01       	movw	r30, r8
    1854:	60 81       	ld	r22, Z
    1856:	c8 01       	movw	r24, r16
    1858:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN17Adafruit_MCP230176pullUpEhh>
    185c:	ea 14       	cp	r14, r10
    185e:	fb 04       	cpc	r15, r11
    1860:	79 f7       	brne	.-34     	; 0x1840 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    1862:	9e cf       	rjmp	.-196    	; 0x17a0 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    1864:	d8 8e       	std	Y+24, r13	; 0x18
    1866:	19 8e       	std	Y+25, r1	; 0x19
    1868:	cc 20       	and	r12, r12
    186a:	31 f0       	breq	.+12     	; 0x1878 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    186c:	f1 e0       	ldi	r31, 0x01	; 1
    186e:	df 12       	cpse	r13, r31
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1872:	8c 89       	ldd	r24, Y+20	; 0x14
    1874:	84 60       	ori	r24, 0x04	; 4
    1876:	8c 8b       	std	Y+20, r24	; 0x14
    1878:	80 e5       	ldi	r24, 0x50	; 80
    187a:	93 ec       	ldi	r25, 0xC3	; 195
    187c:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	6c 81       	ldd	r22, Y+4	; 0x04
    1884:	ce 01       	movw	r24, r28
    1886:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	6e 81       	ldd	r22, Y+6	; 0x06
    188e:	ce 01       	movw	r24, r28
    1890:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1894:	6d 81       	ldd	r22, Y+5	; 0x05
    1896:	6f 3f       	cpi	r22, 0xFF	; 255
    1898:	21 f0       	breq	.+8      	; 0x18a2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	ce 01       	movw	r24, r28
    189e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    18a2:	6c 89       	ldd	r22, Y+20	; 0x14
    18a4:	64 fd       	sbrc	r22, 4
    18a6:	1d c0       	rjmp	.+58     	; 0x18e2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    18a8:	63 e0       	ldi	r22, 0x03	; 3
    18aa:	ce 01       	movw	r24, r28
    18ac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    18b0:	84 e9       	ldi	r24, 0x94	; 148
    18b2:	91 e1       	ldi	r25, 0x11	; 17
    18b4:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	ce 01       	movw	r24, r28
    18bc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    18c0:	84 e9       	ldi	r24, 0x94	; 148
    18c2:	91 e1       	ldi	r25, 0x11	; 17
    18c4:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    18c8:	63 e0       	ldi	r22, 0x03	; 3
    18ca:	ce 01       	movw	r24, r28
    18cc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    18d0:	86 e9       	ldi	r24, 0x96	; 150
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    18d8:	62 e0       	ldi	r22, 0x02	; 2
    18da:	ce 01       	movw	r24, r28
    18dc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    18e2:	60 62       	ori	r22, 0x20	; 32
    18e4:	ce 01       	movw	r24, r28
    18e6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>
    18ea:	84 e9       	ldi	r24, 0x94	; 148
    18ec:	91 e1       	ldi	r25, 0x11	; 17
    18ee:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    18f2:	6c 89       	ldd	r22, Y+20	; 0x14
    18f4:	60 62       	ori	r22, 0x20	; 32
    18f6:	ce 01       	movw	r24, r28
    18f8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>
    18fc:	86 e9       	ldi	r24, 0x96	; 150
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 9a 07 	call	0xf34	; 0xf34 <delayMicroseconds>
    1904:	6c 89       	ldd	r22, Y+20	; 0x14
    1906:	60 62       	ori	r22, 0x20	; 32
    1908:	ce 01       	movw	r24, r28
    190a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>
    190e:	6c 89       	ldd	r22, Y+20	; 0x14
    1910:	60 62       	ori	r22, 0x20	; 32
    1912:	ce 01       	movw	r24, r28
    1914:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	8d 8b       	std	Y+21, r24	; 0x15
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN21Adafruit_RGBLCDShield7displayEv>
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN21Adafruit_RGBLCDShield5clearEv>
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	8e 8b       	std	Y+22, r24	; 0x16
    192c:	66 e0       	ldi	r22, 0x06	; 6
    192e:	ce 01       	movw	r24, r28
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_ZN21Adafruit_RGBLCDShield7commandEh>

0000194c <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	08 95       	ret

00001958 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	7c 01       	movw	r14, r24
    1968:	2f e0       	ldi	r18, 0x0F	; 15
    196a:	e2 0e       	add	r14, r18
    196c:	f1 1c       	adc	r15, r1
    196e:	c0 e0       	ldi	r28, 0x00	; 0
    1970:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    1972:	2f e1       	ldi	r18, 0x1F	; 31
    1974:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1976:	8c 01       	movw	r16, r24
    1978:	05 5e       	subi	r16, 0xE5	; 229
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	f7 01       	movw	r30, r14
    197e:	61 91       	ld	r22, Z+
    1980:	7f 01       	movw	r14, r30
    1982:	c8 01       	movw	r24, r16
    1984:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <_ZN17Adafruit_MCP2301711digitalReadEh>
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	0c 2e       	mov	r0, r28
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    1998:	20 95       	com	r18
    199a:	30 95       	com	r19
    199c:	d2 22       	and	r13, r18
    199e:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    19a0:	c5 30       	cpi	r28, 0x05	; 5
    19a2:	d1 05       	cpc	r29, r1
    19a4:	59 f7       	brne	.-42     	; 0x197c <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    19a6:	8d 2d       	mov	r24, r13
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	08 95       	ret

000019b8 <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    19b8:	68 2f       	mov	r22, r24
    19ba:	87 e2       	ldi	r24, 0x27	; 39
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <_ZN7TwoWire5writeEh>

000019c2 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    19c8:	68 30       	cpi	r22, 0x08	; 8
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <_ZN17Adafruit_MCP230175beginEh+0xc>
    19cc:	67 e0       	ldi	r22, 0x07	; 7
    19ce:	68 83       	st	Y, r22

  WIRE.begin();
    19d0:	87 e2       	ldi	r24, 0x27	; 39
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19d8:	68 81       	ld	r22, Y
    19da:	60 62       	ori	r22, 0x20	; 32
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	87 e2       	ldi	r24, 0x27	; 39
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    19f2:	87 e2       	ldi	r24, 0x27	; 39
    19f4:	92 e0       	ldi	r25, 0x02	; 2
    19f6:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19fa:	68 81       	ld	r22, Y
    19fc:	60 62       	ori	r22, 0x20	; 32
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	87 e2       	ldi	r24, 0x27	; 39
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a14:	87 e2       	ldi	r24, 0x27	; 39
    1a16:	92 e0       	ldi	r25, 0x02	; 2
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    1a1c:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>

00001a20 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <_ZN17Adafruit_MCP230175beginEh>

00001a26 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	d6 2f       	mov	r29, r22
    1a2c:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a2e:	fc 01       	movw	r30, r24
    1a30:	60 81       	ld	r22, Z
    1a32:	60 62       	ori	r22, 0x20	; 32
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	87 e2       	ldi	r24, 0x27	; 39
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1a3e:	82 e1       	ldi	r24, 0x12	; 18
    1a40:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1a44:	8d 2f       	mov	r24, r29
    1a46:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(ba >> 8);
    1a4a:	8c 2f       	mov	r24, r28
    1a4c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a50:	87 e2       	ldi	r24, 0x27	; 39
    1a52:	92 e0       	ldi	r25, 0x02	; 2
}
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    1a58:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>

00001a5c <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	8c 01       	movw	r16, r24
    1a68:	c6 2f       	mov	r28, r22
    1a6a:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1a6c:	60 31       	cpi	r22, 0x10	; 16
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    1a70:	51 c0       	rjmp	.+162    	; 0x1b14 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    1a72:	68 30       	cpi	r22, 0x08	; 8
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    1a76:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    1a78:	ff 24       	eor	r15, r15
    1a7a:	f3 94       	inc	r15
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1a7e:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a80:	f8 01       	movw	r30, r16
    1a82:	60 81       	ld	r22, Z
    1a84:	60 62       	ori	r22, 0x20	; 32
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	87 e2       	ldi	r24, 0x27	; 39
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1a90:	8f 2d       	mov	r24, r15
    1a92:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a96:	87 e2       	ldi	r24, 0x27	; 39
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	60 81       	ld	r22, Z
    1aa2:	60 62       	ori	r22, 0x20	; 32
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	87 e2       	ldi	r24, 0x27	; 39
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1ab2:	87 e2       	ldi	r24, 0x27	; 39
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1aba:	21 e0       	ldi	r18, 0x01	; 1
    1abc:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1abe:	d1 11       	cpse	r29, r1
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1ac6:	44 0f       	add	r20, r20
    1ac8:	55 1f       	adc	r21, r21
    1aca:	ca 95       	dec	r28
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1ace:	ea 01       	movw	r28, r20
    1ad0:	c8 2b       	or	r28, r24
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ca 95       	dec	r28
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1ae0:	ef 01       	movw	r28, r30
    1ae2:	c0 95       	com	r28
    1ae4:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	60 81       	ld	r22, Z
    1aea:	60 62       	ori	r22, 0x20	; 32
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	87 e2       	ldi	r24, 0x27	; 39
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1af6:	8f 2d       	mov	r24, r15
    1af8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(iodir);	
    1afc:	8c 2f       	mov	r24, r28
    1afe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1b02:	87 e2       	ldi	r24, 0x27	; 39
    1b04:	92 e0       	ldi	r25, 0x02	; 2
}
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1b10:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	08 95       	ret

00001b20 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b26:	68 81       	ld	r22, Y
    1b28:	60 62       	ori	r22, 0x20	; 32
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	87 e2       	ldi	r24, 0x27	; 39
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1b34:	82 e1       	ldi	r24, 0x12	; 18
    1b36:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1b3a:	87 e2       	ldi	r24, 0x27	; 39
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1b42:	68 81       	ld	r22, Y
    1b44:	60 62       	ori	r22, 0x20	; 32
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	42 e0       	ldi	r20, 0x02	; 2
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	87 e2       	ldi	r24, 0x27	; 39
    1b4e:	92 e0       	ldi	r25, 0x02	; 2
    1b50:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b54:	87 e2       	ldi	r24, 0x27	; 39
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
    1b5c:	c8 2f       	mov	r28, r24
    1b5e:	87 e2       	ldi	r24, 0x27	; 39
    1b60:	92 e0       	ldi	r25, 0x02	; 2
    1b62:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1b66:	98 2f       	mov	r25, r24
    1b68:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1b6a:	8c 2b       	or	r24, r28
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	8c 01       	movw	r16, r24
    1b7c:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1b7e:	60 31       	cpi	r22, 0x10	; 16
    1b80:	58 f5       	brcc	.+86     	; 0x1bd8 <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1b82:	68 30       	cpi	r22, 0x08	; 8
    1b84:	18 f0       	brcs	.+6      	; 0x1b8c <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1b86:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1b88:	d3 e1       	ldi	r29, 0x13	; 19
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1b8c:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b8e:	f8 01       	movw	r30, r16
    1b90:	60 81       	ld	r22, Z
    1b92:	60 62       	ori	r22, 0x20	; 32
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	87 e2       	ldi	r24, 0x27	; 39
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1b9e:	8d 2f       	mov	r24, r29
    1ba0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1ba4:	87 e2       	ldi	r24, 0x27	; 39
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1bac:	f8 01       	movw	r30, r16
    1bae:	60 81       	ld	r22, Z
    1bb0:	60 62       	ori	r22, 0x20	; 32
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	87 e2       	ldi	r24, 0x27	; 39
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1bc0:	87 e2       	ldi	r24, 0x27	; 39
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1bc8:	99 27       	eor	r25, r25
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1bcc:	95 95       	asr	r25
    1bce:	87 95       	ror	r24
    1bd0:	ca 95       	dec	r28
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1bd4:	81 70       	andi	r24, 0x01	; 1
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	8c 01       	movw	r16, r24
    1bf0:	c6 2f       	mov	r28, r22
    1bf2:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1bf4:	60 31       	cpi	r22, 0x10	; 16
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1bf8:	52 c0       	rjmp	.+164    	; 0x1c9e <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1bfa:	68 30       	cpi	r22, 0x08	; 8
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1bfe:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1c00:	9d e0       	ldi	r25, 0x0D	; 13
    1c02:	f9 2e       	mov	r15, r25
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1c06:	8c e0       	ldi	r24, 0x0C	; 12
    1c08:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	60 81       	ld	r22, Z
    1c0e:	60 62       	ori	r22, 0x20	; 32
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	87 e2       	ldi	r24, 0x27	; 39
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1c1a:	8f 2d       	mov	r24, r15
    1c1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1c20:	87 e2       	ldi	r24, 0x27	; 39
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1c28:	f8 01       	movw	r30, r16
    1c2a:	60 81       	ld	r22, Z
    1c2c:	60 62       	ori	r22, 0x20	; 32
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	87 e2       	ldi	r24, 0x27	; 39
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c3c:	87 e2       	ldi	r24, 0x27	; 39
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1c44:	21 e0       	ldi	r18, 0x01	; 1
    1c46:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1c48:	d1 30       	cpi	r29, 0x01	; 1
    1c4a:	49 f4       	brne	.+18     	; 0x1c5e <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1c50:	44 0f       	add	r20, r20
    1c52:	55 1f       	adc	r21, r21
    1c54:	ca 95       	dec	r28
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1c58:	ea 01       	movw	r28, r20
    1c5a:	c8 2b       	or	r28, r24
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1c5e:	f9 01       	movw	r30, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	ca 95       	dec	r28
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1c6a:	ef 01       	movw	r28, r30
    1c6c:	c0 95       	com	r28
    1c6e:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c70:	f8 01       	movw	r30, r16
    1c72:	60 81       	ld	r22, Z
    1c74:	60 62       	ori	r22, 0x20	; 32
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	87 e2       	ldi	r24, 0x27	; 39
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1c80:	8f 2d       	mov	r24, r15
    1c82:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(gppu);	
    1c86:	8c 2f       	mov	r24, r28
    1c88:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1c8c:	87 e2       	ldi	r24, 0x27	; 39
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1c9a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	08 95       	ret

00001caa <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	8c 01       	movw	r16, r24
    1cb8:	c6 2f       	mov	r28, r22
    1cba:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1cbc:	60 31       	cpi	r22, 0x10	; 16
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1cc0:	56 c0       	rjmp	.+172    	; 0x1d6e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1cc2:	68 30       	cpi	r22, 0x08	; 8
    1cc4:	28 f0       	brcs	.+10     	; 0x1cd0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1cc6:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1cc8:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1cca:	93 e1       	ldi	r25, 0x13	; 19
    1ccc:	f9 2e       	mov	r15, r25
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1cd0:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1cd2:	82 e1       	ldi	r24, 0x12	; 18
    1cd4:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	60 81       	ld	r22, Z
    1cda:	60 62       	ori	r22, 0x20	; 32
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	87 e2       	ldi	r24, 0x27	; 39
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1ce6:	8d 2f       	mov	r24, r29
    1ce8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1cec:	87 e2       	ldi	r24, 0x27	; 39
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	60 81       	ld	r22, Z
    1cf8:	60 62       	ori	r22, 0x20	; 32
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	87 e2       	ldi	r24, 0x27	; 39
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1d08:	87 e2       	ldi	r24, 0x27	; 39
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1d12:	21 e0       	ldi	r18, 0x01	; 1
    1d14:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1d16:	ef 12       	cpse	r14, r31
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1d1a:	a9 01       	movw	r20, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1d1e:	44 0f       	add	r20, r20
    1d20:	55 1f       	adc	r21, r21
    1d22:	ca 95       	dec	r28
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1d26:	ea 01       	movw	r28, r20
    1d28:	c8 2b       	or	r28, r24
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	ca 95       	dec	r28
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1d38:	ef 01       	movw	r28, r30
    1d3a:	c0 95       	com	r28
    1d3c:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1d3e:	f8 01       	movw	r30, r16
    1d40:	60 81       	ld	r22, Z
    1d42:	60 62       	ori	r22, 0x20	; 32
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	87 e2       	ldi	r24, 0x27	; 39
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1d4e:	8f 2d       	mov	r24, r15
    1d50:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  wiresend(gpio);	
    1d54:	8c 2f       	mov	r24, r28
    1d56:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL8wiresendh>
  WIRE.endTransmission();
    1d5a:	87 e2       	ldi	r24, 0x27	; 39
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1d6a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_ZN7TwoWire15endTransmissionEv>
}
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	08 95       	ret

00001d7c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1d7c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1d86:	82 1b       	sub	r24, r18
    1d88:	91 09       	sbc	r25, r1
    1d8a:	08 95       	ret

00001d8c <_ZN7TwoWire4readEv>:
    1d8c:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1d90:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1d94:	98 17       	cp	r25, r24
    1d96:	50 f4       	brcc	.+20     	; 0x1dac <_ZN7TwoWire4readEv+0x20>
    1d98:	e9 2f       	mov	r30, r25
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	e3 5a       	subi	r30, 0xA3	; 163
    1d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1da0:	20 81       	ld	r18, Z
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	9f 5f       	subi	r25, 0xFF	; 255
    1da6:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <_ZN7TwoWire4readEv+0x24>
    1dac:	2f ef       	ldi	r18, 0xFF	; 255
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	c9 01       	movw	r24, r18
    1db2:	08 95       	ret

00001db4 <_ZN7TwoWire4peekEv>:
    1db4:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1db8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1dbc:	e8 17       	cp	r30, r24
    1dbe:	30 f4       	brcc	.+12     	; 0x1dcc <_ZN7TwoWire4peekEv+0x18>
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	e3 5a       	subi	r30, 0xA3	; 163
    1dc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc6:	80 81       	ld	r24, Z
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	08 95       	ret
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255
    1dd0:	08 95       	ret

00001dd2 <_ZN7TwoWire5flushEv>:
    1dd2:	08 95       	ret

00001dd4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
    1dda:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <_ZN7TwoWire14user_onReceiveE>
    1dde:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <_ZN7TwoWire14user_onReceiveE+0x1>
    1de2:	30 97       	sbiw	r30, 0x00	; 0
    1de4:	f1 f0       	breq	.+60     	; 0x1e22 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1de6:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1dea:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1dee:	98 17       	cp	r25, r24
    1df0:	c0 f0       	brcs	.+48     	; 0x1e22 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	29 2f       	mov	r18, r25
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	26 17       	cp	r18, r22
    1dfa:	37 07       	cpc	r19, r23
    1dfc:	54 f4       	brge	.+20     	; 0x1e12 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1dfe:	de 01       	movw	r26, r28
    1e00:	a2 0f       	add	r26, r18
    1e02:	b3 1f       	adc	r27, r19
    1e04:	4c 91       	ld	r20, X
    1e06:	d9 01       	movw	r26, r18
    1e08:	a3 5a       	subi	r26, 0xA3	; 163
    1e0a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e0c:	4c 93       	st	X, r20
    1e0e:	9f 5f       	subi	r25, 0xFF	; 255
    1e10:	f1 cf       	rjmp	.-30     	; 0x1df4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1e12:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1e16:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	09 94       	ijmp
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <_ZN7TwoWire16onRequestServiceEv>:
    1e28:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <_ZN7TwoWire14user_onRequestE>
    1e2c:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <_ZN7TwoWire14user_onRequestE+0x1>
    1e30:	30 97       	sbiw	r30, 0x00	; 0
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <_ZN7TwoWire16onRequestServiceEv+0x16>
    1e34:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1e38:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1e3c:	09 94       	ijmp
    1e3e:	08 95       	ret

00001e40 <_ZN7TwoWire5writeEPKhj>:
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	7c 01       	movw	r14, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8a 01       	movw	r16, r20
    1e56:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <_ZN7TwoWire12transmittingE>
    1e5a:	22 23       	and	r18, r18
    1e5c:	89 f0       	breq	.+34     	; 0x1e80 <_ZN7TwoWire5writeEPKhj+0x40>
    1e5e:	eb 01       	movw	r28, r22
    1e60:	6b 01       	movw	r12, r22
    1e62:	c4 0e       	add	r12, r20
    1e64:	d5 1e       	adc	r13, r21
    1e66:	cc 15       	cp	r28, r12
    1e68:	dd 05       	cpc	r29, r13
    1e6a:	69 f0       	breq	.+26     	; 0x1e86 <_ZN7TwoWire5writeEPKhj+0x46>
    1e6c:	69 91       	ld	r22, Y+
    1e6e:	d7 01       	movw	r26, r14
    1e70:	ed 91       	ld	r30, X+
    1e72:	fc 91       	ld	r31, X
    1e74:	01 90       	ld	r0, Z+
    1e76:	f0 81       	ld	r31, Z
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	c7 01       	movw	r24, r14
    1e7c:	09 95       	icall
    1e7e:	f3 cf       	rjmp	.-26     	; 0x1e66 <_ZN7TwoWire5writeEPKhj+0x26>
    1e80:	64 2f       	mov	r22, r20
    1e82:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <twi_transmit>
    1e86:	c8 01       	movw	r24, r16
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	08 95       	ret

00001e9a <_ZN7TwoWire5writeEh>:
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	1f 92       	push	r1
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	69 83       	std	Y+1, r22	; 0x01
    1ea6:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <_ZN7TwoWire12transmittingE>
    1eaa:	22 23       	and	r18, r18
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <_ZN7TwoWire5writeEh+0x48>
    1eae:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1eb2:	20 32       	cpi	r18, 0x20	; 32
    1eb4:	40 f0       	brcs	.+16     	; 0x1ec6 <_ZN7TwoWire5writeEh+0x2c>
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	33 83       	std	Z+3, r19	; 0x03
    1ebe:	22 83       	std	Z+2, r18	; 0x02
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	15 c0       	rjmp	.+42     	; 0x1ef0 <_ZN7TwoWire5writeEh+0x56>
    1ec6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1eca:	e8 2f       	mov	r30, r24
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	e6 5c       	subi	r30, 0xC6	; 198
    1ed0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed2:	99 81       	ldd	r25, Y+1	; 0x01
    1ed4:	90 83       	st	Z, r25
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1edc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <_ZN7TwoWire5writeEh+0x52>
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <twi_transmit>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0f 90       	pop	r0
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <_ZN7TwoWireC1Ev>:
    1ef8:	fc 01       	movw	r30, r24
    1efa:	13 82       	std	Z+3, r1	; 0x03
    1efc:	12 82       	std	Z+2, r1	; 0x02
    1efe:	88 ee       	ldi	r24, 0xE8	; 232
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	a0 e0       	ldi	r26, 0x00	; 0
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	84 83       	std	Z+4, r24	; 0x04
    1f08:	95 83       	std	Z+5, r25	; 0x05
    1f0a:	a6 83       	std	Z+6, r26	; 0x06
    1f0c:	b7 83       	std	Z+7, r27	; 0x07
    1f0e:	8a ee       	ldi	r24, 0xEA	; 234
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
    1f16:	08 95       	ret

00001f18 <_ZN7TwoWire5beginEv>:
    1f18:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    1f1c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    1f20:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1f24:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1f28:	0e 94 2c 10 	call	0x2058	; 0x2058 <twi_init>
    1f2c:	84 e1       	ldi	r24, 0x14	; 20
    1f2e:	9f e0       	ldi	r25, 0x0F	; 15
    1f30:	0e 94 15 11 	call	0x222a	; 0x222a <twi_attachSlaveTxEvent>
    1f34:	8a ee       	ldi	r24, 0xEA	; 234
    1f36:	9e e0       	ldi	r25, 0x0E	; 14
    1f38:	0c 94 10 11 	jmp	0x2220	; 0x2220 <twi_attachSlaveRxEvent>

00001f3c <_ZN7TwoWire17beginTransmissionEh>:
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <_ZN7TwoWire12transmittingE>
    1f42:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <_ZN7TwoWire9txAddressE>
    1f46:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1f4a:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1f4e:	08 95       	ret

00001f50 <_ZN7TwoWire17beginTransmissionEi>:
    1f50:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <_ZN7TwoWire17beginTransmissionEh>

00001f54 <_ZN7TwoWire15endTransmissionEh>:
    1f54:	0f 93       	push	r16
    1f56:	06 2f       	mov	r16, r22
    1f58:	21 e0       	ldi	r18, 0x01	; 1
    1f5a:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1f5e:	6a e3       	ldi	r22, 0x3A	; 58
    1f60:	72 e0       	ldi	r23, 0x02	; 2
    1f62:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <_ZN7TwoWire9txAddressE>
    1f66:	0e 94 92 10 	call	0x2124	; 0x2124 <twi_writeTo>
    1f6a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZN7TwoWire13txBufferIndexE>
    1f6e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZN7TwoWire14txBufferLengthE>
    1f72:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <_ZN7TwoWire12transmittingE>
    1f76:	0f 91       	pop	r16
    1f78:	08 95       	ret

00001f7a <_ZN7TwoWire11requestFromEhhmhh>:
    1f7a:	4f 92       	push	r4
    1f7c:	5f 92       	push	r5
    1f7e:	6f 92       	push	r6
    1f80:	7f 92       	push	r7
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	5c 01       	movw	r10, r24
    1f96:	f6 2e       	mov	r15, r22
    1f98:	d4 2f       	mov	r29, r20
    1f9a:	28 01       	movw	r4, r16
    1f9c:	39 01       	movw	r6, r18
    1f9e:	ee 20       	and	r14, r14
    1fa0:	21 f1       	breq	.+72     	; 0x1fea <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1fa2:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN7TwoWire17beginTransmissionEh>
    1fa6:	ce 2d       	mov	r28, r14
    1fa8:	c4 30       	cpi	r28, 0x04	; 4
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1fac:	c3 e0       	ldi	r28, 0x03	; 3
    1fae:	c1 50       	subi	r28, 0x01	; 1
    1fb0:	c0 f0       	brcs	.+48     	; 0x1fe2 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1fb2:	28 e0       	ldi	r18, 0x08	; 8
    1fb4:	c2 9f       	mul	r28, r18
    1fb6:	c0 01       	movw	r24, r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	a3 01       	movw	r20, r6
    1fbc:	92 01       	movw	r18, r4
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1fc0:	56 95       	lsr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	37 95       	ror	r19
    1fc6:	27 95       	ror	r18
    1fc8:	8a 95       	dec	r24
    1fca:	d2 f7       	brpl	.-12     	; 0x1fc0 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1fcc:	ca 01       	movw	r24, r20
    1fce:	b9 01       	movw	r22, r18
    1fd0:	d5 01       	movw	r26, r10
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	01 90       	ld	r0, Z+
    1fd8:	f0 81       	ld	r31, Z
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	c5 01       	movw	r24, r10
    1fde:	09 95       	icall
    1fe0:	e6 cf       	rjmp	.-52     	; 0x1fae <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	c5 01       	movw	r24, r10
    1fe6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN7TwoWire15endTransmissionEh>
    1fea:	4d 2f       	mov	r20, r29
    1fec:	d1 32       	cpi	r29, 0x21	; 33
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	2c 2d       	mov	r18, r12
    1ff4:	6d e5       	ldi	r22, 0x5D	; 93
    1ff6:	72 e0       	ldi	r23, 0x02	; 2
    1ff8:	8f 2d       	mov	r24, r15
    1ffa:	0e 94 4a 10 	call	0x2094	; 0x2094 <twi_readFrom>
    1ffe:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <_ZN7TwoWire13rxBufferIndexE>
    2002:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <_ZN7TwoWire14rxBufferLengthE>
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	cf 90       	pop	r12
    2014:	bf 90       	pop	r11
    2016:	af 90       	pop	r10
    2018:	7f 90       	pop	r7
    201a:	6f 90       	pop	r6
    201c:	5f 90       	pop	r5
    201e:	4f 90       	pop	r4
    2020:	08 95       	ret

00002022 <_ZN7TwoWire11requestFromEhhh>:
    2022:	cf 92       	push	r12
    2024:	ef 92       	push	r14
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	c2 2e       	mov	r12, r18
    202c:	e1 2c       	mov	r14, r1
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	98 01       	movw	r18, r16
    2034:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN7TwoWire11requestFromEhhmhh>
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ef 90       	pop	r14
    203e:	cf 90       	pop	r12
    2040:	08 95       	ret

00002042 <_ZN7TwoWire11requestFromEii>:
    2042:	21 e0       	ldi	r18, 0x01	; 1
    2044:	0c 94 11 10 	jmp	0x2022	; 0x2022 <_ZN7TwoWire11requestFromEhhh>

00002048 <_ZN7TwoWire15endTransmissionEv>:
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_ZN7TwoWire15endTransmissionEh>

0000204e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    204e:	87 e2       	ldi	r24, 0x27	; 39
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <_ZN7TwoWireC1Ev>

00002056 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2056:	08 95       	ret

00002058 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2058:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_state>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_sendStop>
    2062:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <twi_inRepStart>
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	82 e1       	ldi	r24, 0x12	; 18
    206a:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	83 e1       	ldi	r24, 0x13	; 19
    2072:	0e 94 48 08 	call	0x1090	; 0x1090 <digitalWrite>
    2076:	e9 eb       	ldi	r30, 0xB9	; 185
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8e 7f       	andi	r24, 0xFE	; 254
    207e:	80 83       	st	Z, r24
    2080:	80 81       	ld	r24, Z
    2082:	8d 7f       	andi	r24, 0xFD	; 253
    2084:	80 83       	st	Z, r24
    2086:	88 e4       	ldi	r24, 0x48	; 72
    2088:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    208c:	85 e4       	ldi	r24, 0x45	; 69
    208e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2092:	08 95       	ret

00002094 <twi_readFrom>:
    2094:	41 32       	cpi	r20, 0x21	; 33
    2096:	08 f0       	brcs	.+2      	; 0x209a <twi_readFrom+0x6>
    2098:	43 c0       	rjmp	.+134    	; 0x2120 <twi_readFrom+0x8c>
    209a:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <twi_state>
    209e:	91 11       	cpse	r25, r1
    20a0:	fc cf       	rjmp	.-8      	; 0x209a <twi_readFrom+0x6>
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <twi_state>
    20a8:	20 93 e8 02 	sts	0x02E8, r18	; 0x8002e8 <twi_sendStop>
    20ac:	2f ef       	ldi	r18, 0xFF	; 255
    20ae:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <twi_error>
    20b2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_masterBufferIndex>
    20b6:	24 0f       	add	r18, r20
    20b8:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <twi_masterBufferLength>
    20bc:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <twi_slarw>
    20c0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_slarw>
    20c4:	88 0f       	add	r24, r24
    20c6:	89 2b       	or	r24, r25
    20c8:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
    20cc:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_inRepStart>
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	61 f4       	brne	.+24     	; 0x20ec <twi_readFrom+0x58>
    20d4:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <twi_inRepStart>
    20d8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    20dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20e4:	83 fd       	sbrc	r24, 3
    20e6:	f8 cf       	rjmp	.-16     	; 0x20d8 <twi_readFrom+0x44>
    20e8:	85 ec       	ldi	r24, 0xC5	; 197
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <twi_readFrom+0x5a>
    20ec:	85 ee       	ldi	r24, 0xE5	; 229
    20ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20f2:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_state>
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	e1 f3       	breq	.-8      	; 0x20f2 <twi_readFrom+0x5e>
    20fa:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    20fe:	84 17       	cp	r24, r20
    2100:	10 f4       	brcc	.+4      	; 0x2106 <twi_readFrom+0x72>
    2102:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    2106:	a3 ec       	ldi	r26, 0xC3	; 195
    2108:	b2 e0       	ldi	r27, 0x02	; 2
    210a:	96 2f       	mov	r25, r22
    210c:	fb 01       	movw	r30, r22
    210e:	8e 2f       	mov	r24, r30
    2110:	89 1b       	sub	r24, r25
    2112:	84 17       	cp	r24, r20
    2114:	18 f4       	brcc	.+6      	; 0x211c <twi_readFrom+0x88>
    2116:	8d 91       	ld	r24, X+
    2118:	81 93       	st	Z+, r24
    211a:	f9 cf       	rjmp	.-14     	; 0x210e <twi_readFrom+0x7a>
    211c:	84 2f       	mov	r24, r20
    211e:	08 95       	ret
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	08 95       	ret

00002124 <twi_writeTo>:
    2124:	0f 93       	push	r16
    2126:	41 32       	cpi	r20, 0x21	; 33
    2128:	08 f0       	brcs	.+2      	; 0x212c <twi_writeTo+0x8>
    212a:	4a c0       	rjmp	.+148    	; 0x21c0 <twi_writeTo+0x9c>
    212c:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <twi_state>
    2130:	91 11       	cpse	r25, r1
    2132:	fc cf       	rjmp	.-8      	; 0x212c <twi_writeTo+0x8>
    2134:	32 e0       	ldi	r19, 0x02	; 2
    2136:	30 93 ea 02 	sts	0x02EA, r19	; 0x8002ea <twi_state>
    213a:	00 93 e8 02 	sts	0x02E8, r16	; 0x8002e8 <twi_sendStop>
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <twi_error>
    2144:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_masterBufferIndex>
    2148:	40 93 c1 02 	sts	0x02C1, r20	; 0x8002c1 <twi_masterBufferLength>
    214c:	56 2f       	mov	r21, r22
    214e:	a3 ec       	ldi	r26, 0xC3	; 195
    2150:	b2 e0       	ldi	r27, 0x02	; 2
    2152:	fb 01       	movw	r30, r22
    2154:	3e 2f       	mov	r19, r30
    2156:	35 1b       	sub	r19, r21
    2158:	34 17       	cp	r19, r20
    215a:	18 f4       	brcc	.+6      	; 0x2162 <twi_writeTo+0x3e>
    215c:	31 91       	ld	r19, Z+
    215e:	3d 93       	st	X+, r19
    2160:	f9 cf       	rjmp	.-14     	; 0x2154 <twi_writeTo+0x30>
    2162:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_slarw>
    2166:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <twi_slarw>
    216a:	88 0f       	add	r24, r24
    216c:	83 2b       	or	r24, r19
    216e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
    2172:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_inRepStart>
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	61 f4       	brne	.+24     	; 0x2192 <twi_writeTo+0x6e>
    217a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <twi_inRepStart>
    217e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    2182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2186:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    218a:	83 fd       	sbrc	r24, 3
    218c:	f8 cf       	rjmp	.-16     	; 0x217e <twi_writeTo+0x5a>
    218e:	85 ec       	ldi	r24, 0xC5	; 197
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <twi_writeTo+0x70>
    2192:	85 ee       	ldi	r24, 0xE5	; 229
    2194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2198:	22 23       	and	r18, r18
    219a:	21 f0       	breq	.+8      	; 0x21a4 <twi_writeTo+0x80>
    219c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_state>
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	d1 f3       	breq	.-12     	; 0x2198 <twi_writeTo+0x74>
    21a4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_error>
    21a8:	8f 3f       	cpi	r24, 0xFF	; 255
    21aa:	79 f0       	breq	.+30     	; 0x21ca <twi_writeTo+0xa6>
    21ac:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_error>
    21b0:	80 32       	cpi	r24, 0x20	; 32
    21b2:	41 f0       	breq	.+16     	; 0x21c4 <twi_writeTo+0xa0>
    21b4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_error>
    21b8:	80 33       	cpi	r24, 0x30	; 48
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <twi_writeTo+0xa4>
    21bc:	94 e0       	ldi	r25, 0x04	; 4
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <twi_writeTo+0xa6>
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <twi_writeTo+0xa6>
    21c4:	92 e0       	ldi	r25, 0x02	; 2
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <twi_writeTo+0xa6>
    21c8:	93 e0       	ldi	r25, 0x03	; 3
    21ca:	89 2f       	mov	r24, r25
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <twi_transmit>:
    21d0:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <twi_txBufferLength>
    21d4:	26 2f       	mov	r18, r22
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	24 0f       	add	r18, r20
    21da:	31 1d       	adc	r19, r1
    21dc:	21 32       	cpi	r18, 0x21	; 33
    21de:	31 05       	cpc	r19, r1
    21e0:	dc f4       	brge	.+54     	; 0x2218 <twi_transmit+0x48>
    21e2:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <twi_state>
    21e6:	24 30       	cpi	r18, 0x04	; 4
    21e8:	c9 f4       	brne	.+50     	; 0x221c <twi_transmit+0x4c>
    21ea:	fc 01       	movw	r30, r24
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	86 17       	cp	r24, r22
    21f2:	58 f4       	brcc	.+22     	; 0x220a <twi_transmit+0x3a>
    21f4:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <twi_txBufferLength>
    21f8:	21 91       	ld	r18, Z+
    21fa:	dc 01       	movw	r26, r24
    21fc:	af 55       	subi	r26, 0x5F	; 95
    21fe:	bd 4f       	sbci	r27, 0xFD	; 253
    2200:	a3 0f       	add	r26, r19
    2202:	b1 1d       	adc	r27, r1
    2204:	2c 93       	st	X, r18
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	f3 cf       	rjmp	.-26     	; 0x21f0 <twi_transmit+0x20>
    220a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_txBufferLength>
    220e:	68 0f       	add	r22, r24
    2210:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <twi_txBufferLength>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	08 95       	ret
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	08 95       	ret
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	08 95       	ret

00002220 <twi_attachSlaveRxEvent>:
    2220:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <twi_onSlaveReceive+0x1>
    2224:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_onSlaveReceive>
    2228:	08 95       	ret

0000222a <twi_attachSlaveTxEvent>:
    222a:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <twi_onSlaveTransmit+0x1>
    222e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_onSlaveTransmit>
    2232:	08 95       	ret

00002234 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2234:	85 ed       	ldi	r24, 0xD5	; 213
    2236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    223a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    223e:	84 fd       	sbrc	r24, 4
    2240:	fc cf       	rjmp	.-8      	; 0x223a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2242:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_state>
    2246:	08 95       	ret

00002248 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2248:	85 ec       	ldi	r24, 0xC5	; 197
    224a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    224e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_state>
    2252:	08 95       	ret

00002254 <__vector_24>:
}

ISR(TWI_vect)
{
    2254:	1f 92       	push	r1
    2256:	0f 92       	push	r0
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	0f 92       	push	r0
    225c:	11 24       	eor	r1, r1
    225e:	2f 93       	push	r18
    2260:	3f 93       	push	r19
    2262:	4f 93       	push	r20
    2264:	5f 93       	push	r21
    2266:	6f 93       	push	r22
    2268:	7f 93       	push	r23
    226a:	8f 93       	push	r24
    226c:	9f 93       	push	r25
    226e:	af 93       	push	r26
    2270:	bf 93       	push	r27
    2272:	ef 93       	push	r30
    2274:	ff 93       	push	r31
  switch(TW_STATUS){
    2276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    227a:	88 7f       	andi	r24, 0xF8	; 248
    227c:	80 36       	cpi	r24, 0x60	; 96
    227e:	09 f4       	brne	.+2      	; 0x2282 <__vector_24+0x2e>
    2280:	9e c0       	rjmp	.+316    	; 0x23be <__vector_24+0x16a>
    2282:	78 f5       	brcc	.+94     	; 0x22e2 <__vector_24+0x8e>
    2284:	88 32       	cpi	r24, 0x28	; 40
    2286:	09 f4       	brne	.+2      	; 0x228a <__vector_24+0x36>
    2288:	5d c0       	rjmp	.+186    	; 0x2344 <__vector_24+0xf0>
    228a:	90 f4       	brcc	.+36     	; 0x22b0 <__vector_24+0x5c>
    228c:	80 31       	cpi	r24, 0x10	; 16
    228e:	09 f4       	brne	.+2      	; 0x2292 <__vector_24+0x3e>
    2290:	56 c0       	rjmp	.+172    	; 0x233e <__vector_24+0xea>
    2292:	38 f4       	brcc	.+14     	; 0x22a2 <__vector_24+0x4e>
    2294:	88 23       	and	r24, r24
    2296:	09 f4       	brne	.+2      	; 0x229a <__vector_24+0x46>
    2298:	f5 c0       	rjmp	.+490    	; 0x2484 <__vector_24+0x230>
    229a:	88 30       	cpi	r24, 0x08	; 8
    229c:	09 f4       	brne	.+2      	; 0x22a0 <__vector_24+0x4c>
    229e:	4f c0       	rjmp	.+158    	; 0x233e <__vector_24+0xea>
    22a0:	f5 c0       	rjmp	.+490    	; 0x248c <__vector_24+0x238>
    22a2:	88 31       	cpi	r24, 0x18	; 24
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <__vector_24+0x54>
    22a6:	4e c0       	rjmp	.+156    	; 0x2344 <__vector_24+0xf0>
    22a8:	80 32       	cpi	r24, 0x20	; 32
    22aa:	09 f4       	brne	.+2      	; 0x22ae <__vector_24+0x5a>
    22ac:	5f c0       	rjmp	.+190    	; 0x236c <__vector_24+0x118>
    22ae:	ee c0       	rjmp	.+476    	; 0x248c <__vector_24+0x238>
    22b0:	80 34       	cpi	r24, 0x40	; 64
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__vector_24+0x62>
    22b4:	6a c0       	rjmp	.+212    	; 0x238a <__vector_24+0x136>
    22b6:	58 f4       	brcc	.+22     	; 0x22ce <__vector_24+0x7a>
    22b8:	80 33       	cpi	r24, 0x30	; 48
    22ba:	09 f4       	brne	.+2      	; 0x22be <__vector_24+0x6a>
    22bc:	57 c0       	rjmp	.+174    	; 0x236c <__vector_24+0x118>
    22be:	88 33       	cpi	r24, 0x38	; 56
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <__vector_24+0x70>
    22c2:	e4 c0       	rjmp	.+456    	; 0x248c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    22c4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <twi_error>
      twi_releaseBus();
    22c8:	0e 94 24 11 	call	0x2248	; 0x2248 <twi_releaseBus>
      break;
    22cc:	df c0       	rjmp	.+446    	; 0x248c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    22ce:	80 35       	cpi	r24, 0x50	; 80
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <__vector_24+0x80>
    22d2:	4f c0       	rjmp	.+158    	; 0x2372 <__vector_24+0x11e>
    22d4:	88 35       	cpi	r24, 0x58	; 88
    22d6:	09 f4       	brne	.+2      	; 0x22da <__vector_24+0x86>
    22d8:	5d c0       	rjmp	.+186    	; 0x2394 <__vector_24+0x140>
    22da:	88 34       	cpi	r24, 0x48	; 72
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <__vector_24+0x8c>
    22de:	d6 c0       	rjmp	.+428    	; 0x248c <__vector_24+0x238>
    22e0:	d3 c0       	rjmp	.+422    	; 0x2488 <__vector_24+0x234>
    22e2:	88 39       	cpi	r24, 0x98	; 152
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <__vector_24+0x94>
    22e6:	c4 c0       	rjmp	.+392    	; 0x2470 <__vector_24+0x21c>
    22e8:	a8 f4       	brcc	.+42     	; 0x2314 <__vector_24+0xc0>
    22ea:	88 37       	cpi	r24, 0x78	; 120
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__vector_24+0x9c>
    22ee:	67 c0       	rjmp	.+206    	; 0x23be <__vector_24+0x16a>
    22f0:	38 f4       	brcc	.+14     	; 0x2300 <__vector_24+0xac>
    22f2:	88 36       	cpi	r24, 0x68	; 104
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <__vector_24+0xa4>
    22f6:	63 c0       	rjmp	.+198    	; 0x23be <__vector_24+0x16a>
    22f8:	80 37       	cpi	r24, 0x70	; 112
    22fa:	09 f4       	brne	.+2      	; 0x22fe <__vector_24+0xaa>
    22fc:	60 c0       	rjmp	.+192    	; 0x23be <__vector_24+0x16a>
    22fe:	c6 c0       	rjmp	.+396    	; 0x248c <__vector_24+0x238>
    2300:	88 38       	cpi	r24, 0x88	; 136
    2302:	09 f4       	brne	.+2      	; 0x2306 <__vector_24+0xb2>
    2304:	b5 c0       	rjmp	.+362    	; 0x2470 <__vector_24+0x21c>
    2306:	80 39       	cpi	r24, 0x90	; 144
    2308:	09 f4       	brne	.+2      	; 0x230c <__vector_24+0xb8>
    230a:	5f c0       	rjmp	.+190    	; 0x23ca <__vector_24+0x176>
    230c:	80 38       	cpi	r24, 0x80	; 128
    230e:	09 f0       	breq	.+2      	; 0x2312 <__vector_24+0xbe>
    2310:	bd c0       	rjmp	.+378    	; 0x248c <__vector_24+0x238>
    2312:	5b c0       	rjmp	.+182    	; 0x23ca <__vector_24+0x176>
    2314:	80 3b       	cpi	r24, 0xB0	; 176
    2316:	09 f4       	brne	.+2      	; 0x231a <__vector_24+0xc6>
    2318:	83 c0       	rjmp	.+262    	; 0x2420 <__vector_24+0x1cc>
    231a:	38 f4       	brcc	.+14     	; 0x232a <__vector_24+0xd6>
    231c:	80 3a       	cpi	r24, 0xA0	; 160
    231e:	09 f4       	brne	.+2      	; 0x2322 <__vector_24+0xce>
    2320:	66 c0       	rjmp	.+204    	; 0x23ee <__vector_24+0x19a>
    2322:	88 3a       	cpi	r24, 0xA8	; 168
    2324:	09 f4       	brne	.+2      	; 0x2328 <__vector_24+0xd4>
    2326:	7c c0       	rjmp	.+248    	; 0x2420 <__vector_24+0x1cc>
    2328:	b1 c0       	rjmp	.+354    	; 0x248c <__vector_24+0x238>
    232a:	80 3c       	cpi	r24, 0xC0	; 192
    232c:	09 f4       	brne	.+2      	; 0x2330 <__vector_24+0xdc>
    232e:	a4 c0       	rjmp	.+328    	; 0x2478 <__vector_24+0x224>
    2330:	88 3c       	cpi	r24, 0xC8	; 200
    2332:	09 f4       	brne	.+2      	; 0x2336 <__vector_24+0xe2>
    2334:	a1 c0       	rjmp	.+322    	; 0x2478 <__vector_24+0x224>
    2336:	88 3b       	cpi	r24, 0xB8	; 184
    2338:	09 f4       	brne	.+2      	; 0x233c <__vector_24+0xe8>
    233a:	87 c0       	rjmp	.+270    	; 0x244a <__vector_24+0x1f6>
    233c:	a7 c0       	rjmp	.+334    	; 0x248c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    233e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    2342:	10 c0       	rjmp	.+32     	; 0x2364 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2344:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    2348:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <twi_masterBufferLength>
    234c:	98 17       	cp	r25, r24
    234e:	70 f5       	brcc	.+92     	; 0x23ac <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2350:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	8e 0f       	add	r24, r30
    2358:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_masterBufferIndex>
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	ed 53       	subi	r30, 0x3D	; 61
    2360:	fd 4f       	sbci	r31, 0xFD	; 253
    2362:	80 81       	ld	r24, Z
    2364:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2368:	85 ec       	ldi	r24, 0xC5	; 197
    236a:	83 c0       	rjmp	.+262    	; 0x2472 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    236c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <twi_error>
    2370:	8b c0       	rjmp	.+278    	; 0x2488 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2372:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	8e 0f       	add	r24, r30
    237a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_masterBufferIndex>
    237e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	ed 53       	subi	r30, 0x3D	; 61
    2386:	fd 4f       	sbci	r31, 0xFD	; 253
    2388:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    238a:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    238e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <twi_masterBufferLength>
    2392:	6b c0       	rjmp	.+214    	; 0x246a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2394:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <twi_masterBufferIndex>
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	8e 0f       	add	r24, r30
    239c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_masterBufferIndex>
    23a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	ed 53       	subi	r30, 0x3D	; 61
    23a8:	fd 4f       	sbci	r31, 0xFD	; 253
    23aa:	80 83       	st	Z, r24
	if (twi_sendStop)
    23ac:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_sendStop>
    23b0:	81 11       	cpse	r24, r1
    23b2:	6a c0       	rjmp	.+212    	; 0x2488 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    23ba:	84 ea       	ldi	r24, 0xA4	; 164
    23bc:	5e c0       	rjmp	.+188    	; 0x247a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    23c4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_rxBufferIndex>
    23c8:	cf cf       	rjmp	.-98     	; 0x2368 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23ca:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <twi_rxBufferIndex>
    23ce:	80 32       	cpi	r24, 0x20	; 32
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <__vector_24+0x180>
    23d2:	4e c0       	rjmp	.+156    	; 0x2470 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    23d4:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <twi_rxBufferIndex>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	8e 0f       	add	r24, r30
    23dc:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <twi_rxBufferIndex>
    23e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	e1 58       	subi	r30, 0x81	; 129
    23e8:	fd 4f       	sbci	r31, 0xFD	; 253
    23ea:	80 83       	st	Z, r24
    23ec:	bd cf       	rjmp	.-134    	; 0x2368 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    23ee:	0e 94 24 11 	call	0x2248	; 0x2248 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23f2:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <twi_rxBufferIndex>
    23f6:	80 32       	cpi	r24, 0x20	; 32
    23f8:	30 f4       	brcc	.+12     	; 0x2406 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    23fa:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <twi_rxBufferIndex>
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	e1 58       	subi	r30, 0x81	; 129
    2402:	fd 4f       	sbci	r31, 0xFD	; 253
    2404:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2406:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <twi_rxBufferIndex>
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_onSlaveReceive>
    2410:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <twi_onSlaveReceive+0x1>
    2414:	8f e7       	ldi	r24, 0x7F	; 127
    2416:	92 e0       	ldi	r25, 0x02	; 2
    2418:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    241a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_rxBufferIndex>
      break;
    241e:	36 c0       	rjmp	.+108    	; 0x248c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2426:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    242a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    242e:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <twi_onSlaveTransmit>
    2432:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <twi_onSlaveTransmit+0x1>
    2436:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2438:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_txBufferLength>
    243c:	81 11       	cpse	r24, r1
    243e:	05 c0       	rjmp	.+10     	; 0x244a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2446:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    244a:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <twi_txBufferIndex>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	8e 0f       	add	r24, r30
    2452:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <twi_txBufferIndex>
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	ef 55       	subi	r30, 0x5F	; 95
    245a:	fd 4f       	sbci	r31, 0xFD	; 253
    245c:	80 81       	ld	r24, Z
    245e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2462:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <twi_txBufferIndex>
    2466:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_txBufferLength>
    246a:	98 17       	cp	r25, r24
    246c:	08 f4       	brcc	.+2      	; 0x2470 <__vector_24+0x21c>
    246e:	7c cf       	rjmp	.-264    	; 0x2368 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2470:	85 e8       	ldi	r24, 0x85	; 133
    2472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2476:	0a c0       	rjmp	.+20     	; 0x248c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2478:	85 ec       	ldi	r24, 0xC5	; 197
    247a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    247e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_state>
      break;
    2482:	04 c0       	rjmp	.+8      	; 0x248c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2484:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <twi_error>
      twi_stop();
    2488:	0e 94 1a 11 	call	0x2234	; 0x2234 <twi_stop>
      break;
  }
}
    248c:	ff 91       	pop	r31
    248e:	ef 91       	pop	r30
    2490:	bf 91       	pop	r27
    2492:	af 91       	pop	r26
    2494:	9f 91       	pop	r25
    2496:	8f 91       	pop	r24
    2498:	7f 91       	pop	r23
    249a:	6f 91       	pop	r22
    249c:	5f 91       	pop	r21
    249e:	4f 91       	pop	r20
    24a0:	3f 91       	pop	r19
    24a2:	2f 91       	pop	r18
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__tablejump2__>:
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	05 90       	lpm	r0, Z+
    24b4:	f4 91       	lpm	r31, Z
    24b6:	e0 2d       	mov	r30, r0
    24b8:	09 94       	ijmp

000024ba <malloc>:
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	91 05       	cpc	r25, r1
    24c6:	10 f4       	brcc	.+4      	; 0x24cc <malloc+0x12>
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <__flp>
    24d0:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <__flp+0x1>
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	19 f1       	breq	.+70     	; 0x2526 <malloc+0x6c>
    24e0:	40 81       	ld	r20, Z
    24e2:	51 81       	ldd	r21, Z+1	; 0x01
    24e4:	02 81       	ldd	r16, Z+2	; 0x02
    24e6:	13 81       	ldd	r17, Z+3	; 0x03
    24e8:	48 17       	cp	r20, r24
    24ea:	59 07       	cpc	r21, r25
    24ec:	c8 f0       	brcs	.+50     	; 0x2520 <malloc+0x66>
    24ee:	84 17       	cp	r24, r20
    24f0:	95 07       	cpc	r25, r21
    24f2:	69 f4       	brne	.+26     	; 0x250e <malloc+0x54>
    24f4:	10 97       	sbiw	r26, 0x00	; 0
    24f6:	31 f0       	breq	.+12     	; 0x2504 <malloc+0x4a>
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	0c 93       	st	X, r16
    24fc:	12 97       	sbiw	r26, 0x02	; 2
    24fe:	13 96       	adiw	r26, 0x03	; 3
    2500:	1c 93       	st	X, r17
    2502:	27 c0       	rjmp	.+78     	; 0x2552 <malloc+0x98>
    2504:	00 93 ed 02 	sts	0x02ED, r16	; 0x8002ed <__flp>
    2508:	10 93 ee 02 	sts	0x02EE, r17	; 0x8002ee <__flp+0x1>
    250c:	22 c0       	rjmp	.+68     	; 0x2552 <malloc+0x98>
    250e:	21 15       	cp	r18, r1
    2510:	31 05       	cpc	r19, r1
    2512:	19 f0       	breq	.+6      	; 0x251a <malloc+0x60>
    2514:	42 17       	cp	r20, r18
    2516:	53 07       	cpc	r21, r19
    2518:	18 f4       	brcc	.+6      	; 0x2520 <malloc+0x66>
    251a:	9a 01       	movw	r18, r20
    251c:	bd 01       	movw	r22, r26
    251e:	ef 01       	movw	r28, r30
    2520:	df 01       	movw	r26, r30
    2522:	f8 01       	movw	r30, r16
    2524:	db cf       	rjmp	.-74     	; 0x24dc <malloc+0x22>
    2526:	21 15       	cp	r18, r1
    2528:	31 05       	cpc	r19, r1
    252a:	f9 f0       	breq	.+62     	; 0x256a <malloc+0xb0>
    252c:	28 1b       	sub	r18, r24
    252e:	39 0b       	sbc	r19, r25
    2530:	24 30       	cpi	r18, 0x04	; 4
    2532:	31 05       	cpc	r19, r1
    2534:	80 f4       	brcc	.+32     	; 0x2556 <malloc+0x9c>
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	61 15       	cp	r22, r1
    253c:	71 05       	cpc	r23, r1
    253e:	21 f0       	breq	.+8      	; 0x2548 <malloc+0x8e>
    2540:	fb 01       	movw	r30, r22
    2542:	93 83       	std	Z+3, r25	; 0x03
    2544:	82 83       	std	Z+2, r24	; 0x02
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <malloc+0x96>
    2548:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <__flp+0x1>
    254c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <__flp>
    2550:	fe 01       	movw	r30, r28
    2552:	32 96       	adiw	r30, 0x02	; 2
    2554:	44 c0       	rjmp	.+136    	; 0x25de <malloc+0x124>
    2556:	fe 01       	movw	r30, r28
    2558:	e2 0f       	add	r30, r18
    255a:	f3 1f       	adc	r31, r19
    255c:	81 93       	st	Z+, r24
    255e:	91 93       	st	Z+, r25
    2560:	22 50       	subi	r18, 0x02	; 2
    2562:	31 09       	sbc	r19, r1
    2564:	39 83       	std	Y+1, r19	; 0x01
    2566:	28 83       	st	Y, r18
    2568:	3a c0       	rjmp	.+116    	; 0x25de <malloc+0x124>
    256a:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <__brkval>
    256e:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <__brkval+0x1>
    2572:	23 2b       	or	r18, r19
    2574:	41 f4       	brne	.+16     	; 0x2586 <malloc+0xcc>
    2576:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    257a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    257e:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <__brkval+0x1>
    2582:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <__brkval>
    2586:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    258a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    258e:	21 15       	cp	r18, r1
    2590:	31 05       	cpc	r19, r1
    2592:	41 f4       	brne	.+16     	; 0x25a4 <malloc+0xea>
    2594:	2d b7       	in	r18, 0x3d	; 61
    2596:	3e b7       	in	r19, 0x3e	; 62
    2598:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    259c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25a0:	24 1b       	sub	r18, r20
    25a2:	35 0b       	sbc	r19, r21
    25a4:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <__brkval>
    25a8:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <__brkval+0x1>
    25ac:	e2 17       	cp	r30, r18
    25ae:	f3 07       	cpc	r31, r19
    25b0:	a0 f4       	brcc	.+40     	; 0x25da <malloc+0x120>
    25b2:	2e 1b       	sub	r18, r30
    25b4:	3f 0b       	sbc	r19, r31
    25b6:	28 17       	cp	r18, r24
    25b8:	39 07       	cpc	r19, r25
    25ba:	78 f0       	brcs	.+30     	; 0x25da <malloc+0x120>
    25bc:	ac 01       	movw	r20, r24
    25be:	4e 5f       	subi	r20, 0xFE	; 254
    25c0:	5f 4f       	sbci	r21, 0xFF	; 255
    25c2:	24 17       	cp	r18, r20
    25c4:	35 07       	cpc	r19, r21
    25c6:	48 f0       	brcs	.+18     	; 0x25da <malloc+0x120>
    25c8:	4e 0f       	add	r20, r30
    25ca:	5f 1f       	adc	r21, r31
    25cc:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <__brkval+0x1>
    25d0:	40 93 eb 02 	sts	0x02EB, r20	; 0x8002eb <__brkval>
    25d4:	81 93       	st	Z+, r24
    25d6:	91 93       	st	Z+, r25
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <malloc+0x124>
    25da:	e0 e0       	ldi	r30, 0x00	; 0
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	cf 01       	movw	r24, r30
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	08 95       	ret

000025ea <free>:
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <free+0xa>
    25f2:	81 c0       	rjmp	.+258    	; 0x26f6 <free+0x10c>
    25f4:	fc 01       	movw	r30, r24
    25f6:	32 97       	sbiw	r30, 0x02	; 2
    25f8:	13 82       	std	Z+3, r1	; 0x03
    25fa:	12 82       	std	Z+2, r1	; 0x02
    25fc:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <__flp>
    2600:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <__flp+0x1>
    2604:	10 97       	sbiw	r26, 0x00	; 0
    2606:	81 f4       	brne	.+32     	; 0x2628 <free+0x3e>
    2608:	20 81       	ld	r18, Z
    260a:	31 81       	ldd	r19, Z+1	; 0x01
    260c:	82 0f       	add	r24, r18
    260e:	93 1f       	adc	r25, r19
    2610:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <__brkval>
    2614:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <__brkval+0x1>
    2618:	28 17       	cp	r18, r24
    261a:	39 07       	cpc	r19, r25
    261c:	51 f5       	brne	.+84     	; 0x2672 <free+0x88>
    261e:	f0 93 ec 02 	sts	0x02EC, r31	; 0x8002ec <__brkval+0x1>
    2622:	e0 93 eb 02 	sts	0x02EB, r30	; 0x8002eb <__brkval>
    2626:	67 c0       	rjmp	.+206    	; 0x26f6 <free+0x10c>
    2628:	ed 01       	movw	r28, r26
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	ce 17       	cp	r28, r30
    2630:	df 07       	cpc	r29, r31
    2632:	40 f4       	brcc	.+16     	; 0x2644 <free+0x5a>
    2634:	4a 81       	ldd	r20, Y+2	; 0x02
    2636:	5b 81       	ldd	r21, Y+3	; 0x03
    2638:	9e 01       	movw	r18, r28
    263a:	41 15       	cp	r20, r1
    263c:	51 05       	cpc	r21, r1
    263e:	f1 f0       	breq	.+60     	; 0x267c <free+0x92>
    2640:	ea 01       	movw	r28, r20
    2642:	f5 cf       	rjmp	.-22     	; 0x262e <free+0x44>
    2644:	d3 83       	std	Z+3, r29	; 0x03
    2646:	c2 83       	std	Z+2, r28	; 0x02
    2648:	40 81       	ld	r20, Z
    264a:	51 81       	ldd	r21, Z+1	; 0x01
    264c:	84 0f       	add	r24, r20
    264e:	95 1f       	adc	r25, r21
    2650:	c8 17       	cp	r28, r24
    2652:	d9 07       	cpc	r29, r25
    2654:	59 f4       	brne	.+22     	; 0x266c <free+0x82>
    2656:	88 81       	ld	r24, Y
    2658:	99 81       	ldd	r25, Y+1	; 0x01
    265a:	84 0f       	add	r24, r20
    265c:	95 1f       	adc	r25, r21
    265e:	02 96       	adiw	r24, 0x02	; 2
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	93 83       	std	Z+3, r25	; 0x03
    266a:	82 83       	std	Z+2, r24	; 0x02
    266c:	21 15       	cp	r18, r1
    266e:	31 05       	cpc	r19, r1
    2670:	29 f4       	brne	.+10     	; 0x267c <free+0x92>
    2672:	f0 93 ee 02 	sts	0x02EE, r31	; 0x8002ee <__flp+0x1>
    2676:	e0 93 ed 02 	sts	0x02ED, r30	; 0x8002ed <__flp>
    267a:	3d c0       	rjmp	.+122    	; 0x26f6 <free+0x10c>
    267c:	e9 01       	movw	r28, r18
    267e:	fb 83       	std	Y+3, r31	; 0x03
    2680:	ea 83       	std	Y+2, r30	; 0x02
    2682:	49 91       	ld	r20, Y+
    2684:	59 91       	ld	r21, Y+
    2686:	c4 0f       	add	r28, r20
    2688:	d5 1f       	adc	r29, r21
    268a:	ec 17       	cp	r30, r28
    268c:	fd 07       	cpc	r31, r29
    268e:	61 f4       	brne	.+24     	; 0x26a8 <free+0xbe>
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	84 0f       	add	r24, r20
    2696:	95 1f       	adc	r25, r21
    2698:	02 96       	adiw	r24, 0x02	; 2
    269a:	e9 01       	movw	r28, r18
    269c:	99 83       	std	Y+1, r25	; 0x01
    269e:	88 83       	st	Y, r24
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	9b 83       	std	Y+3, r25	; 0x03
    26a6:	8a 83       	std	Y+2, r24	; 0x02
    26a8:	e0 e0       	ldi	r30, 0x00	; 0
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	12 96       	adiw	r26, 0x02	; 2
    26ae:	8d 91       	ld	r24, X+
    26b0:	9c 91       	ld	r25, X
    26b2:	13 97       	sbiw	r26, 0x03	; 3
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	19 f0       	breq	.+6      	; 0x26be <free+0xd4>
    26b8:	fd 01       	movw	r30, r26
    26ba:	dc 01       	movw	r26, r24
    26bc:	f7 cf       	rjmp	.-18     	; 0x26ac <free+0xc2>
    26be:	8d 91       	ld	r24, X+
    26c0:	9c 91       	ld	r25, X
    26c2:	11 97       	sbiw	r26, 0x01	; 1
    26c4:	9d 01       	movw	r18, r26
    26c6:	2e 5f       	subi	r18, 0xFE	; 254
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	82 0f       	add	r24, r18
    26cc:	93 1f       	adc	r25, r19
    26ce:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <__brkval>
    26d2:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <__brkval+0x1>
    26d6:	28 17       	cp	r18, r24
    26d8:	39 07       	cpc	r19, r25
    26da:	69 f4       	brne	.+26     	; 0x26f6 <free+0x10c>
    26dc:	30 97       	sbiw	r30, 0x00	; 0
    26de:	29 f4       	brne	.+10     	; 0x26ea <free+0x100>
    26e0:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <__flp+0x1>
    26e4:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <__flp>
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <free+0x104>
    26ea:	13 82       	std	Z+3, r1	; 0x03
    26ec:	12 82       	std	Z+2, r1	; 0x02
    26ee:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <__brkval+0x1>
    26f2:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <__brkval>
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <realloc>:
    26fc:	a0 e0       	ldi	r26, 0x00	; 0
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__prologue_saves__+0x8>
    2708:	ec 01       	movw	r28, r24
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	21 f4       	brne	.+8      	; 0x2716 <realloc+0x1a>
    270e:	cb 01       	movw	r24, r22
    2710:	0e 94 5d 12 	call	0x24ba	; 0x24ba <malloc>
    2714:	b4 c0       	rjmp	.+360    	; 0x287e <realloc+0x182>
    2716:	fc 01       	movw	r30, r24
    2718:	e6 0f       	add	r30, r22
    271a:	f7 1f       	adc	r31, r23
    271c:	9c 01       	movw	r18, r24
    271e:	22 50       	subi	r18, 0x02	; 2
    2720:	31 09       	sbc	r19, r1
    2722:	e2 17       	cp	r30, r18
    2724:	f3 07       	cpc	r31, r19
    2726:	08 f4       	brcc	.+2      	; 0x272a <realloc+0x2e>
    2728:	a8 c0       	rjmp	.+336    	; 0x287a <realloc+0x17e>
    272a:	d9 01       	movw	r26, r18
    272c:	0d 91       	ld	r16, X+
    272e:	1c 91       	ld	r17, X
    2730:	11 97       	sbiw	r26, 0x01	; 1
    2732:	06 17       	cp	r16, r22
    2734:	17 07       	cpc	r17, r23
    2736:	b0 f0       	brcs	.+44     	; 0x2764 <realloc+0x68>
    2738:	05 30       	cpi	r16, 0x05	; 5
    273a:	11 05       	cpc	r17, r1
    273c:	08 f4       	brcc	.+2      	; 0x2740 <realloc+0x44>
    273e:	9b c0       	rjmp	.+310    	; 0x2876 <realloc+0x17a>
    2740:	c8 01       	movw	r24, r16
    2742:	04 97       	sbiw	r24, 0x04	; 4
    2744:	86 17       	cp	r24, r22
    2746:	97 07       	cpc	r25, r23
    2748:	08 f4       	brcc	.+2      	; 0x274c <realloc+0x50>
    274a:	95 c0       	rjmp	.+298    	; 0x2876 <realloc+0x17a>
    274c:	02 50       	subi	r16, 0x02	; 2
    274e:	11 09       	sbc	r17, r1
    2750:	06 1b       	sub	r16, r22
    2752:	17 0b       	sbc	r17, r23
    2754:	01 93       	st	Z+, r16
    2756:	11 93       	st	Z+, r17
    2758:	6d 93       	st	X+, r22
    275a:	7c 93       	st	X, r23
    275c:	cf 01       	movw	r24, r30
    275e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <free>
    2762:	89 c0       	rjmp	.+274    	; 0x2876 <realloc+0x17a>
    2764:	5b 01       	movw	r10, r22
    2766:	a0 1a       	sub	r10, r16
    2768:	b1 0a       	sbc	r11, r17
    276a:	4c 01       	movw	r8, r24
    276c:	80 0e       	add	r8, r16
    276e:	91 1e       	adc	r9, r17
    2770:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <__flp>
    2774:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <__flp+0x1>
    2778:	61 2c       	mov	r6, r1
    277a:	71 2c       	mov	r7, r1
    277c:	e1 2c       	mov	r14, r1
    277e:	f1 2c       	mov	r15, r1
    2780:	10 97       	sbiw	r26, 0x00	; 0
    2782:	09 f4       	brne	.+2      	; 0x2786 <realloc+0x8a>
    2784:	46 c0       	rjmp	.+140    	; 0x2812 <realloc+0x116>
    2786:	8d 91       	ld	r24, X+
    2788:	9c 91       	ld	r25, X
    278a:	11 97       	sbiw	r26, 0x01	; 1
    278c:	a8 15       	cp	r26, r8
    278e:	b9 05       	cpc	r27, r9
    2790:	b1 f5       	brne	.+108    	; 0x27fe <realloc+0x102>
    2792:	6c 01       	movw	r12, r24
    2794:	42 e0       	ldi	r20, 0x02	; 2
    2796:	c4 0e       	add	r12, r20
    2798:	d1 1c       	adc	r13, r1
    279a:	ca 14       	cp	r12, r10
    279c:	db 04       	cpc	r13, r11
    279e:	78 f1       	brcs	.+94     	; 0x27fe <realloc+0x102>
    27a0:	4c 01       	movw	r8, r24
    27a2:	8a 18       	sub	r8, r10
    27a4:	9b 08       	sbc	r9, r11
    27a6:	64 01       	movw	r12, r8
    27a8:	42 e0       	ldi	r20, 0x02	; 2
    27aa:	c4 0e       	add	r12, r20
    27ac:	d1 1c       	adc	r13, r1
    27ae:	12 96       	adiw	r26, 0x02	; 2
    27b0:	bc 90       	ld	r11, X
    27b2:	12 97       	sbiw	r26, 0x02	; 2
    27b4:	13 96       	adiw	r26, 0x03	; 3
    27b6:	ac 91       	ld	r26, X
    27b8:	b5 e0       	ldi	r27, 0x05	; 5
    27ba:	cb 16       	cp	r12, r27
    27bc:	d1 04       	cpc	r13, r1
    27be:	40 f0       	brcs	.+16     	; 0x27d0 <realloc+0xd4>
    27c0:	b2 82       	std	Z+2, r11	; 0x02
    27c2:	a3 83       	std	Z+3, r26	; 0x03
    27c4:	91 82       	std	Z+1, r9	; 0x01
    27c6:	80 82       	st	Z, r8
    27c8:	d9 01       	movw	r26, r18
    27ca:	6d 93       	st	X+, r22
    27cc:	7c 93       	st	X, r23
    27ce:	09 c0       	rjmp	.+18     	; 0x27e2 <realloc+0xe6>
    27d0:	0e 5f       	subi	r16, 0xFE	; 254
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	80 0f       	add	r24, r16
    27d6:	91 1f       	adc	r25, r17
    27d8:	f9 01       	movw	r30, r18
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	eb 2d       	mov	r30, r11
    27e0:	fa 2f       	mov	r31, r26
    27e2:	e1 14       	cp	r14, r1
    27e4:	f1 04       	cpc	r15, r1
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <realloc+0xf8>
    27e8:	d7 01       	movw	r26, r14
    27ea:	13 96       	adiw	r26, 0x03	; 3
    27ec:	fc 93       	st	X, r31
    27ee:	ee 93       	st	-X, r30
    27f0:	12 97       	sbiw	r26, 0x02	; 2
    27f2:	41 c0       	rjmp	.+130    	; 0x2876 <realloc+0x17a>
    27f4:	f0 93 ee 02 	sts	0x02EE, r31	; 0x8002ee <__flp+0x1>
    27f8:	e0 93 ed 02 	sts	0x02ED, r30	; 0x8002ed <__flp>
    27fc:	3c c0       	rjmp	.+120    	; 0x2876 <realloc+0x17a>
    27fe:	68 16       	cp	r6, r24
    2800:	79 06       	cpc	r7, r25
    2802:	08 f4       	brcc	.+2      	; 0x2806 <realloc+0x10a>
    2804:	3c 01       	movw	r6, r24
    2806:	7d 01       	movw	r14, r26
    2808:	12 96       	adiw	r26, 0x02	; 2
    280a:	0d 90       	ld	r0, X+
    280c:	bc 91       	ld	r27, X
    280e:	a0 2d       	mov	r26, r0
    2810:	b7 cf       	rjmp	.-146    	; 0x2780 <realloc+0x84>
    2812:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <__brkval>
    2816:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <__brkval+0x1>
    281a:	88 16       	cp	r8, r24
    281c:	99 06       	cpc	r9, r25
    281e:	e1 f4       	brne	.+56     	; 0x2858 <realloc+0x15c>
    2820:	66 16       	cp	r6, r22
    2822:	77 06       	cpc	r7, r23
    2824:	c8 f4       	brcc	.+50     	; 0x2858 <realloc+0x15c>
    2826:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    282a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	41 f4       	brne	.+16     	; 0x2842 <realloc+0x146>
    2832:	8d b7       	in	r24, 0x3d	; 61
    2834:	9e b7       	in	r25, 0x3e	; 62
    2836:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    283a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    283e:	84 1b       	sub	r24, r20
    2840:	95 0b       	sbc	r25, r21
    2842:	e8 17       	cp	r30, r24
    2844:	f9 07       	cpc	r31, r25
    2846:	c8 f4       	brcc	.+50     	; 0x287a <realloc+0x17e>
    2848:	f0 93 ec 02 	sts	0x02EC, r31	; 0x8002ec <__brkval+0x1>
    284c:	e0 93 eb 02 	sts	0x02EB, r30	; 0x8002eb <__brkval>
    2850:	f9 01       	movw	r30, r18
    2852:	71 83       	std	Z+1, r23	; 0x01
    2854:	60 83       	st	Z, r22
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <realloc+0x17a>
    2858:	cb 01       	movw	r24, r22
    285a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <malloc>
    285e:	7c 01       	movw	r14, r24
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	59 f0       	breq	.+22     	; 0x287a <realloc+0x17e>
    2864:	a8 01       	movw	r20, r16
    2866:	be 01       	movw	r22, r28
    2868:	0e 94 44 14 	call	0x2888	; 0x2888 <memcpy>
    286c:	ce 01       	movw	r24, r28
    286e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <free>
    2872:	c7 01       	movw	r24, r14
    2874:	04 c0       	rjmp	.+8      	; 0x287e <realloc+0x182>
    2876:	ce 01       	movw	r24, r28
    2878:	02 c0       	rjmp	.+4      	; 0x287e <realloc+0x182>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	ee e0       	ldi	r30, 0x0E	; 14
    2884:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__epilogue_restores__+0x8>

00002888 <memcpy>:
    2888:	fb 01       	movw	r30, r22
    288a:	dc 01       	movw	r26, r24
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <memcpy+0xa>
    288e:	01 90       	ld	r0, Z+
    2890:	0d 92       	st	X+, r0
    2892:	41 50       	subi	r20, 0x01	; 1
    2894:	50 40       	sbci	r21, 0x00	; 0
    2896:	d8 f7       	brcc	.-10     	; 0x288e <memcpy+0x6>
    2898:	08 95       	ret

0000289a <strcpy>:
    289a:	fb 01       	movw	r30, r22
    289c:	dc 01       	movw	r26, r24
    289e:	01 90       	ld	r0, Z+
    28a0:	0d 92       	st	X+, r0
    28a2:	00 20       	and	r0, r0
    28a4:	e1 f7       	brne	.-8      	; 0x289e <strcpy+0x4>
    28a6:	08 95       	ret

000028a8 <sprintf>:
    28a8:	ae e0       	ldi	r26, 0x0E	; 14
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ea e5       	ldi	r30, 0x5A	; 90
    28ae:	f4 e1       	ldi	r31, 0x14	; 20
    28b0:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x1c>
    28b4:	0d 89       	ldd	r16, Y+21	; 0x15
    28b6:	1e 89       	ldd	r17, Y+22	; 0x16
    28b8:	86 e0       	ldi	r24, 0x06	; 6
    28ba:	8c 83       	std	Y+4, r24	; 0x04
    28bc:	1a 83       	std	Y+2, r17	; 0x02
    28be:	09 83       	std	Y+1, r16	; 0x01
    28c0:	8f ef       	ldi	r24, 0xFF	; 255
    28c2:	9f e7       	ldi	r25, 0x7F	; 127
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	ae 01       	movw	r20, r28
    28ca:	47 5e       	subi	r20, 0xE7	; 231
    28cc:	5f 4f       	sbci	r21, 0xFF	; 255
    28ce:	6f 89       	ldd	r22, Y+23	; 0x17
    28d0:	78 8d       	ldd	r23, Y+24	; 0x18
    28d2:	ce 01       	movw	r24, r28
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	0e 94 76 14 	call	0x28ec	; 0x28ec <vfprintf>
    28da:	ef 81       	ldd	r30, Y+7	; 0x07
    28dc:	f8 85       	ldd	r31, Y+8	; 0x08
    28de:	e0 0f       	add	r30, r16
    28e0:	f1 1f       	adc	r31, r17
    28e2:	10 82       	st	Z, r1
    28e4:	2e 96       	adiw	r28, 0x0e	; 14
    28e6:	e4 e0       	ldi	r30, 0x04	; 4
    28e8:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x1c>

000028ec <vfprintf>:
    28ec:	ab e0       	ldi	r26, 0x0B	; 11
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ec e7       	ldi	r30, 0x7C	; 124
    28f2:	f4 e1       	ldi	r31, 0x14	; 20
    28f4:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__prologue_saves__>
    28f8:	6c 01       	movw	r12, r24
    28fa:	7b 01       	movw	r14, r22
    28fc:	8a 01       	movw	r16, r20
    28fe:	fc 01       	movw	r30, r24
    2900:	17 82       	std	Z+7, r1	; 0x07
    2902:	16 82       	std	Z+6, r1	; 0x06
    2904:	83 81       	ldd	r24, Z+3	; 0x03
    2906:	81 ff       	sbrs	r24, 1
    2908:	cc c1       	rjmp	.+920    	; 0x2ca2 <vfprintf+0x3b6>
    290a:	ce 01       	movw	r24, r28
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	3c 01       	movw	r6, r24
    2910:	f6 01       	movw	r30, r12
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	f7 01       	movw	r30, r14
    2916:	93 fd       	sbrc	r25, 3
    2918:	85 91       	lpm	r24, Z+
    291a:	93 ff       	sbrs	r25, 3
    291c:	81 91       	ld	r24, Z+
    291e:	7f 01       	movw	r14, r30
    2920:	88 23       	and	r24, r24
    2922:	09 f4       	brne	.+2      	; 0x2926 <vfprintf+0x3a>
    2924:	ba c1       	rjmp	.+884    	; 0x2c9a <vfprintf+0x3ae>
    2926:	85 32       	cpi	r24, 0x25	; 37
    2928:	39 f4       	brne	.+14     	; 0x2938 <vfprintf+0x4c>
    292a:	93 fd       	sbrc	r25, 3
    292c:	85 91       	lpm	r24, Z+
    292e:	93 ff       	sbrs	r25, 3
    2930:	81 91       	ld	r24, Z+
    2932:	7f 01       	movw	r14, r30
    2934:	85 32       	cpi	r24, 0x25	; 37
    2936:	29 f4       	brne	.+10     	; 0x2942 <vfprintf+0x56>
    2938:	b6 01       	movw	r22, r12
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2940:	e7 cf       	rjmp	.-50     	; 0x2910 <vfprintf+0x24>
    2942:	91 2c       	mov	r9, r1
    2944:	21 2c       	mov	r2, r1
    2946:	31 2c       	mov	r3, r1
    2948:	ff e1       	ldi	r31, 0x1F	; 31
    294a:	f3 15       	cp	r31, r3
    294c:	d8 f0       	brcs	.+54     	; 0x2984 <vfprintf+0x98>
    294e:	8b 32       	cpi	r24, 0x2B	; 43
    2950:	79 f0       	breq	.+30     	; 0x2970 <vfprintf+0x84>
    2952:	38 f4       	brcc	.+14     	; 0x2962 <vfprintf+0x76>
    2954:	80 32       	cpi	r24, 0x20	; 32
    2956:	79 f0       	breq	.+30     	; 0x2976 <vfprintf+0x8a>
    2958:	83 32       	cpi	r24, 0x23	; 35
    295a:	a1 f4       	brne	.+40     	; 0x2984 <vfprintf+0x98>
    295c:	23 2d       	mov	r18, r3
    295e:	20 61       	ori	r18, 0x10	; 16
    2960:	1d c0       	rjmp	.+58     	; 0x299c <vfprintf+0xb0>
    2962:	8d 32       	cpi	r24, 0x2D	; 45
    2964:	61 f0       	breq	.+24     	; 0x297e <vfprintf+0x92>
    2966:	80 33       	cpi	r24, 0x30	; 48
    2968:	69 f4       	brne	.+26     	; 0x2984 <vfprintf+0x98>
    296a:	23 2d       	mov	r18, r3
    296c:	21 60       	ori	r18, 0x01	; 1
    296e:	16 c0       	rjmp	.+44     	; 0x299c <vfprintf+0xb0>
    2970:	83 2d       	mov	r24, r3
    2972:	82 60       	ori	r24, 0x02	; 2
    2974:	38 2e       	mov	r3, r24
    2976:	e3 2d       	mov	r30, r3
    2978:	e4 60       	ori	r30, 0x04	; 4
    297a:	3e 2e       	mov	r3, r30
    297c:	2a c0       	rjmp	.+84     	; 0x29d2 <vfprintf+0xe6>
    297e:	f3 2d       	mov	r31, r3
    2980:	f8 60       	ori	r31, 0x08	; 8
    2982:	1d c0       	rjmp	.+58     	; 0x29be <vfprintf+0xd2>
    2984:	37 fc       	sbrc	r3, 7
    2986:	2d c0       	rjmp	.+90     	; 0x29e2 <vfprintf+0xf6>
    2988:	20 ed       	ldi	r18, 0xD0	; 208
    298a:	28 0f       	add	r18, r24
    298c:	2a 30       	cpi	r18, 0x0A	; 10
    298e:	40 f0       	brcs	.+16     	; 0x29a0 <vfprintf+0xb4>
    2990:	8e 32       	cpi	r24, 0x2E	; 46
    2992:	b9 f4       	brne	.+46     	; 0x29c2 <vfprintf+0xd6>
    2994:	36 fc       	sbrc	r3, 6
    2996:	81 c1       	rjmp	.+770    	; 0x2c9a <vfprintf+0x3ae>
    2998:	23 2d       	mov	r18, r3
    299a:	20 64       	ori	r18, 0x40	; 64
    299c:	32 2e       	mov	r3, r18
    299e:	19 c0       	rjmp	.+50     	; 0x29d2 <vfprintf+0xe6>
    29a0:	36 fe       	sbrs	r3, 6
    29a2:	06 c0       	rjmp	.+12     	; 0x29b0 <vfprintf+0xc4>
    29a4:	8a e0       	ldi	r24, 0x0A	; 10
    29a6:	98 9e       	mul	r9, r24
    29a8:	20 0d       	add	r18, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	92 2e       	mov	r9, r18
    29ae:	11 c0       	rjmp	.+34     	; 0x29d2 <vfprintf+0xe6>
    29b0:	ea e0       	ldi	r30, 0x0A	; 10
    29b2:	2e 9e       	mul	r2, r30
    29b4:	20 0d       	add	r18, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	22 2e       	mov	r2, r18
    29ba:	f3 2d       	mov	r31, r3
    29bc:	f0 62       	ori	r31, 0x20	; 32
    29be:	3f 2e       	mov	r3, r31
    29c0:	08 c0       	rjmp	.+16     	; 0x29d2 <vfprintf+0xe6>
    29c2:	8c 36       	cpi	r24, 0x6C	; 108
    29c4:	21 f4       	brne	.+8      	; 0x29ce <vfprintf+0xe2>
    29c6:	83 2d       	mov	r24, r3
    29c8:	80 68       	ori	r24, 0x80	; 128
    29ca:	38 2e       	mov	r3, r24
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <vfprintf+0xe6>
    29ce:	88 36       	cpi	r24, 0x68	; 104
    29d0:	41 f4       	brne	.+16     	; 0x29e2 <vfprintf+0xf6>
    29d2:	f7 01       	movw	r30, r14
    29d4:	93 fd       	sbrc	r25, 3
    29d6:	85 91       	lpm	r24, Z+
    29d8:	93 ff       	sbrs	r25, 3
    29da:	81 91       	ld	r24, Z+
    29dc:	7f 01       	movw	r14, r30
    29de:	81 11       	cpse	r24, r1
    29e0:	b3 cf       	rjmp	.-154    	; 0x2948 <vfprintf+0x5c>
    29e2:	98 2f       	mov	r25, r24
    29e4:	9f 7d       	andi	r25, 0xDF	; 223
    29e6:	95 54       	subi	r25, 0x45	; 69
    29e8:	93 30       	cpi	r25, 0x03	; 3
    29ea:	28 f4       	brcc	.+10     	; 0x29f6 <vfprintf+0x10a>
    29ec:	0c 5f       	subi	r16, 0xFC	; 252
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	9f e3       	ldi	r25, 0x3F	; 63
    29f2:	99 83       	std	Y+1, r25	; 0x01
    29f4:	0d c0       	rjmp	.+26     	; 0x2a10 <vfprintf+0x124>
    29f6:	83 36       	cpi	r24, 0x63	; 99
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <vfprintf+0x11a>
    29fa:	83 37       	cpi	r24, 0x73	; 115
    29fc:	71 f0       	breq	.+28     	; 0x2a1a <vfprintf+0x12e>
    29fe:	83 35       	cpi	r24, 0x53	; 83
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <vfprintf+0x118>
    2a02:	59 c0       	rjmp	.+178    	; 0x2ab6 <vfprintf+0x1ca>
    2a04:	21 c0       	rjmp	.+66     	; 0x2a48 <vfprintf+0x15c>
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 81       	ld	r24, Z
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	0e 5f       	subi	r16, 0xFE	; 254
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	88 24       	eor	r8, r8
    2a12:	83 94       	inc	r8
    2a14:	91 2c       	mov	r9, r1
    2a16:	53 01       	movw	r10, r6
    2a18:	13 c0       	rjmp	.+38     	; 0x2a40 <vfprintf+0x154>
    2a1a:	28 01       	movw	r4, r16
    2a1c:	f2 e0       	ldi	r31, 0x02	; 2
    2a1e:	4f 0e       	add	r4, r31
    2a20:	51 1c       	adc	r5, r1
    2a22:	f8 01       	movw	r30, r16
    2a24:	a0 80       	ld	r10, Z
    2a26:	b1 80       	ldd	r11, Z+1	; 0x01
    2a28:	36 fe       	sbrs	r3, 6
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <vfprintf+0x146>
    2a2c:	69 2d       	mov	r22, r9
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <vfprintf+0x14a>
    2a32:	6f ef       	ldi	r22, 0xFF	; 255
    2a34:	7f ef       	ldi	r23, 0xFF	; 255
    2a36:	c5 01       	movw	r24, r10
    2a38:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strnlen>
    2a3c:	4c 01       	movw	r8, r24
    2a3e:	82 01       	movw	r16, r4
    2a40:	f3 2d       	mov	r31, r3
    2a42:	ff 77       	andi	r31, 0x7F	; 127
    2a44:	3f 2e       	mov	r3, r31
    2a46:	16 c0       	rjmp	.+44     	; 0x2a74 <vfprintf+0x188>
    2a48:	28 01       	movw	r4, r16
    2a4a:	22 e0       	ldi	r18, 0x02	; 2
    2a4c:	42 0e       	add	r4, r18
    2a4e:	51 1c       	adc	r5, r1
    2a50:	f8 01       	movw	r30, r16
    2a52:	a0 80       	ld	r10, Z
    2a54:	b1 80       	ldd	r11, Z+1	; 0x01
    2a56:	36 fe       	sbrs	r3, 6
    2a58:	03 c0       	rjmp	.+6      	; 0x2a60 <vfprintf+0x174>
    2a5a:	69 2d       	mov	r22, r9
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <vfprintf+0x178>
    2a60:	6f ef       	ldi	r22, 0xFF	; 255
    2a62:	7f ef       	ldi	r23, 0xFF	; 255
    2a64:	c5 01       	movw	r24, r10
    2a66:	0e 94 57 16 	call	0x2cae	; 0x2cae <strnlen_P>
    2a6a:	4c 01       	movw	r8, r24
    2a6c:	f3 2d       	mov	r31, r3
    2a6e:	f0 68       	ori	r31, 0x80	; 128
    2a70:	3f 2e       	mov	r3, r31
    2a72:	82 01       	movw	r16, r4
    2a74:	33 fc       	sbrc	r3, 3
    2a76:	1b c0       	rjmp	.+54     	; 0x2aae <vfprintf+0x1c2>
    2a78:	82 2d       	mov	r24, r2
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	88 16       	cp	r8, r24
    2a7e:	99 06       	cpc	r9, r25
    2a80:	b0 f4       	brcc	.+44     	; 0x2aae <vfprintf+0x1c2>
    2a82:	b6 01       	movw	r22, r12
    2a84:	80 e2       	ldi	r24, 0x20	; 32
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2a8c:	2a 94       	dec	r2
    2a8e:	f4 cf       	rjmp	.-24     	; 0x2a78 <vfprintf+0x18c>
    2a90:	f5 01       	movw	r30, r10
    2a92:	37 fc       	sbrc	r3, 7
    2a94:	85 91       	lpm	r24, Z+
    2a96:	37 fe       	sbrs	r3, 7
    2a98:	81 91       	ld	r24, Z+
    2a9a:	5f 01       	movw	r10, r30
    2a9c:	b6 01       	movw	r22, r12
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2aa4:	21 10       	cpse	r2, r1
    2aa6:	2a 94       	dec	r2
    2aa8:	21 e0       	ldi	r18, 0x01	; 1
    2aaa:	82 1a       	sub	r8, r18
    2aac:	91 08       	sbc	r9, r1
    2aae:	81 14       	cp	r8, r1
    2ab0:	91 04       	cpc	r9, r1
    2ab2:	71 f7       	brne	.-36     	; 0x2a90 <vfprintf+0x1a4>
    2ab4:	e8 c0       	rjmp	.+464    	; 0x2c86 <vfprintf+0x39a>
    2ab6:	84 36       	cpi	r24, 0x64	; 100
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <vfprintf+0x1d2>
    2aba:	89 36       	cpi	r24, 0x69	; 105
    2abc:	41 f5       	brne	.+80     	; 0x2b0e <vfprintf+0x222>
    2abe:	f8 01       	movw	r30, r16
    2ac0:	37 fe       	sbrs	r3, 7
    2ac2:	07 c0       	rjmp	.+14     	; 0x2ad2 <vfprintf+0x1e6>
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	0c 5f       	subi	r16, 0xFC	; 252
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	08 c0       	rjmp	.+16     	; 0x2ae2 <vfprintf+0x1f6>
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	07 2e       	mov	r0, r23
    2ad8:	00 0c       	add	r0, r0
    2ada:	88 0b       	sbc	r24, r24
    2adc:	99 0b       	sbc	r25, r25
    2ade:	0e 5f       	subi	r16, 0xFE	; 254
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	f3 2d       	mov	r31, r3
    2ae4:	ff 76       	andi	r31, 0x6F	; 111
    2ae6:	3f 2e       	mov	r3, r31
    2ae8:	97 ff       	sbrs	r25, 7
    2aea:	09 c0       	rjmp	.+18     	; 0x2afe <vfprintf+0x212>
    2aec:	90 95       	com	r25
    2aee:	80 95       	com	r24
    2af0:	70 95       	com	r23
    2af2:	61 95       	neg	r22
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	8f 4f       	sbci	r24, 0xFF	; 255
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	f0 68       	ori	r31, 0x80	; 128
    2afc:	3f 2e       	mov	r3, r31
    2afe:	2a e0       	ldi	r18, 0x0A	; 10
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	a3 01       	movw	r20, r6
    2b04:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__ultoa_invert>
    2b08:	88 2e       	mov	r8, r24
    2b0a:	86 18       	sub	r8, r6
    2b0c:	45 c0       	rjmp	.+138    	; 0x2b98 <vfprintf+0x2ac>
    2b0e:	85 37       	cpi	r24, 0x75	; 117
    2b10:	31 f4       	brne	.+12     	; 0x2b1e <vfprintf+0x232>
    2b12:	23 2d       	mov	r18, r3
    2b14:	2f 7e       	andi	r18, 0xEF	; 239
    2b16:	b2 2e       	mov	r11, r18
    2b18:	2a e0       	ldi	r18, 0x0A	; 10
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	25 c0       	rjmp	.+74     	; 0x2b68 <vfprintf+0x27c>
    2b1e:	93 2d       	mov	r25, r3
    2b20:	99 7f       	andi	r25, 0xF9	; 249
    2b22:	b9 2e       	mov	r11, r25
    2b24:	8f 36       	cpi	r24, 0x6F	; 111
    2b26:	c1 f0       	breq	.+48     	; 0x2b58 <vfprintf+0x26c>
    2b28:	18 f4       	brcc	.+6      	; 0x2b30 <vfprintf+0x244>
    2b2a:	88 35       	cpi	r24, 0x58	; 88
    2b2c:	79 f0       	breq	.+30     	; 0x2b4c <vfprintf+0x260>
    2b2e:	b5 c0       	rjmp	.+362    	; 0x2c9a <vfprintf+0x3ae>
    2b30:	80 37       	cpi	r24, 0x70	; 112
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <vfprintf+0x24e>
    2b34:	88 37       	cpi	r24, 0x78	; 120
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <vfprintf+0x254>
    2b38:	b0 c0       	rjmp	.+352    	; 0x2c9a <vfprintf+0x3ae>
    2b3a:	e9 2f       	mov	r30, r25
    2b3c:	e0 61       	ori	r30, 0x10	; 16
    2b3e:	be 2e       	mov	r11, r30
    2b40:	b4 fe       	sbrs	r11, 4
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <vfprintf+0x272>
    2b44:	fb 2d       	mov	r31, r11
    2b46:	f4 60       	ori	r31, 0x04	; 4
    2b48:	bf 2e       	mov	r11, r31
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <vfprintf+0x272>
    2b4c:	34 fe       	sbrs	r3, 4
    2b4e:	0a c0       	rjmp	.+20     	; 0x2b64 <vfprintf+0x278>
    2b50:	29 2f       	mov	r18, r25
    2b52:	26 60       	ori	r18, 0x06	; 6
    2b54:	b2 2e       	mov	r11, r18
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <vfprintf+0x278>
    2b58:	28 e0       	ldi	r18, 0x08	; 8
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <vfprintf+0x27c>
    2b5e:	20 e1       	ldi	r18, 0x10	; 16
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <vfprintf+0x27c>
    2b64:	20 e1       	ldi	r18, 0x10	; 16
    2b66:	32 e0       	ldi	r19, 0x02	; 2
    2b68:	f8 01       	movw	r30, r16
    2b6a:	b7 fe       	sbrs	r11, 7
    2b6c:	07 c0       	rjmp	.+14     	; 0x2b7c <vfprintf+0x290>
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	0c 5f       	subi	r16, 0xFC	; 252
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	06 c0       	rjmp	.+12     	; 0x2b88 <vfprintf+0x29c>
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 5f       	subi	r16, 0xFE	; 254
    2b86:	1f 4f       	sbci	r17, 0xFF	; 255
    2b88:	a3 01       	movw	r20, r6
    2b8a:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__ultoa_invert>
    2b8e:	88 2e       	mov	r8, r24
    2b90:	86 18       	sub	r8, r6
    2b92:	fb 2d       	mov	r31, r11
    2b94:	ff 77       	andi	r31, 0x7F	; 127
    2b96:	3f 2e       	mov	r3, r31
    2b98:	36 fe       	sbrs	r3, 6
    2b9a:	0d c0       	rjmp	.+26     	; 0x2bb6 <vfprintf+0x2ca>
    2b9c:	23 2d       	mov	r18, r3
    2b9e:	2e 7f       	andi	r18, 0xFE	; 254
    2ba0:	a2 2e       	mov	r10, r18
    2ba2:	89 14       	cp	r8, r9
    2ba4:	58 f4       	brcc	.+22     	; 0x2bbc <vfprintf+0x2d0>
    2ba6:	34 fe       	sbrs	r3, 4
    2ba8:	0b c0       	rjmp	.+22     	; 0x2bc0 <vfprintf+0x2d4>
    2baa:	32 fc       	sbrc	r3, 2
    2bac:	09 c0       	rjmp	.+18     	; 0x2bc0 <vfprintf+0x2d4>
    2bae:	83 2d       	mov	r24, r3
    2bb0:	8e 7e       	andi	r24, 0xEE	; 238
    2bb2:	a8 2e       	mov	r10, r24
    2bb4:	05 c0       	rjmp	.+10     	; 0x2bc0 <vfprintf+0x2d4>
    2bb6:	b8 2c       	mov	r11, r8
    2bb8:	a3 2c       	mov	r10, r3
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <vfprintf+0x2d6>
    2bbc:	b8 2c       	mov	r11, r8
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <vfprintf+0x2d6>
    2bc0:	b9 2c       	mov	r11, r9
    2bc2:	a4 fe       	sbrs	r10, 4
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <vfprintf+0x2f8>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e8 0d       	add	r30, r8
    2bca:	f1 1d       	adc	r31, r1
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 33       	cpi	r24, 0x30	; 48
    2bd0:	21 f4       	brne	.+8      	; 0x2bda <vfprintf+0x2ee>
    2bd2:	9a 2d       	mov	r25, r10
    2bd4:	99 7e       	andi	r25, 0xE9	; 233
    2bd6:	a9 2e       	mov	r10, r25
    2bd8:	09 c0       	rjmp	.+18     	; 0x2bec <vfprintf+0x300>
    2bda:	a2 fe       	sbrs	r10, 2
    2bdc:	06 c0       	rjmp	.+12     	; 0x2bea <vfprintf+0x2fe>
    2bde:	b3 94       	inc	r11
    2be0:	b3 94       	inc	r11
    2be2:	04 c0       	rjmp	.+8      	; 0x2bec <vfprintf+0x300>
    2be4:	8a 2d       	mov	r24, r10
    2be6:	86 78       	andi	r24, 0x86	; 134
    2be8:	09 f0       	breq	.+2      	; 0x2bec <vfprintf+0x300>
    2bea:	b3 94       	inc	r11
    2bec:	a3 fc       	sbrc	r10, 3
    2bee:	11 c0       	rjmp	.+34     	; 0x2c12 <vfprintf+0x326>
    2bf0:	a0 fe       	sbrs	r10, 0
    2bf2:	06 c0       	rjmp	.+12     	; 0x2c00 <vfprintf+0x314>
    2bf4:	b2 14       	cp	r11, r2
    2bf6:	88 f4       	brcc	.+34     	; 0x2c1a <vfprintf+0x32e>
    2bf8:	28 0c       	add	r2, r8
    2bfa:	92 2c       	mov	r9, r2
    2bfc:	9b 18       	sub	r9, r11
    2bfe:	0e c0       	rjmp	.+28     	; 0x2c1c <vfprintf+0x330>
    2c00:	b2 14       	cp	r11, r2
    2c02:	60 f4       	brcc	.+24     	; 0x2c1c <vfprintf+0x330>
    2c04:	b6 01       	movw	r22, r12
    2c06:	80 e2       	ldi	r24, 0x20	; 32
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c0e:	b3 94       	inc	r11
    2c10:	f7 cf       	rjmp	.-18     	; 0x2c00 <vfprintf+0x314>
    2c12:	b2 14       	cp	r11, r2
    2c14:	18 f4       	brcc	.+6      	; 0x2c1c <vfprintf+0x330>
    2c16:	2b 18       	sub	r2, r11
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <vfprintf+0x332>
    2c1a:	98 2c       	mov	r9, r8
    2c1c:	21 2c       	mov	r2, r1
    2c1e:	a4 fe       	sbrs	r10, 4
    2c20:	10 c0       	rjmp	.+32     	; 0x2c42 <vfprintf+0x356>
    2c22:	b6 01       	movw	r22, r12
    2c24:	80 e3       	ldi	r24, 0x30	; 48
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c2c:	a2 fe       	sbrs	r10, 2
    2c2e:	17 c0       	rjmp	.+46     	; 0x2c5e <vfprintf+0x372>
    2c30:	a1 fc       	sbrc	r10, 1
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <vfprintf+0x34e>
    2c34:	88 e7       	ldi	r24, 0x78	; 120
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <vfprintf+0x352>
    2c3a:	88 e5       	ldi	r24, 0x58	; 88
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	b6 01       	movw	r22, r12
    2c40:	0c c0       	rjmp	.+24     	; 0x2c5a <vfprintf+0x36e>
    2c42:	8a 2d       	mov	r24, r10
    2c44:	86 78       	andi	r24, 0x86	; 134
    2c46:	59 f0       	breq	.+22     	; 0x2c5e <vfprintf+0x372>
    2c48:	a1 fe       	sbrs	r10, 1
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <vfprintf+0x364>
    2c4c:	8b e2       	ldi	r24, 0x2B	; 43
    2c4e:	01 c0       	rjmp	.+2      	; 0x2c52 <vfprintf+0x366>
    2c50:	80 e2       	ldi	r24, 0x20	; 32
    2c52:	a7 fc       	sbrc	r10, 7
    2c54:	8d e2       	ldi	r24, 0x2D	; 45
    2c56:	b6 01       	movw	r22, r12
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c5e:	89 14       	cp	r8, r9
    2c60:	38 f4       	brcc	.+14     	; 0x2c70 <vfprintf+0x384>
    2c62:	b6 01       	movw	r22, r12
    2c64:	80 e3       	ldi	r24, 0x30	; 48
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c6c:	9a 94       	dec	r9
    2c6e:	f7 cf       	rjmp	.-18     	; 0x2c5e <vfprintf+0x372>
    2c70:	8a 94       	dec	r8
    2c72:	f3 01       	movw	r30, r6
    2c74:	e8 0d       	add	r30, r8
    2c76:	f1 1d       	adc	r31, r1
    2c78:	80 81       	ld	r24, Z
    2c7a:	b6 01       	movw	r22, r12
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c82:	81 10       	cpse	r8, r1
    2c84:	f5 cf       	rjmp	.-22     	; 0x2c70 <vfprintf+0x384>
    2c86:	22 20       	and	r2, r2
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <vfprintf+0x3a0>
    2c8a:	42 ce       	rjmp	.-892    	; 0x2910 <vfprintf+0x24>
    2c8c:	b6 01       	movw	r22, r12
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fputc>
    2c96:	2a 94       	dec	r2
    2c98:	f6 cf       	rjmp	.-20     	; 0x2c86 <vfprintf+0x39a>
    2c9a:	f6 01       	movw	r30, r12
    2c9c:	86 81       	ldd	r24, Z+6	; 0x06
    2c9e:	97 81       	ldd	r25, Z+7	; 0x07
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <vfprintf+0x3ba>
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	9f ef       	ldi	r25, 0xFF	; 255
    2ca6:	2b 96       	adiw	r28, 0x0b	; 11
    2ca8:	e2 e1       	ldi	r30, 0x12	; 18
    2caa:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__epilogue_restores__>

00002cae <strnlen_P>:
    2cae:	fc 01       	movw	r30, r24
    2cb0:	05 90       	lpm	r0, Z+
    2cb2:	61 50       	subi	r22, 0x01	; 1
    2cb4:	70 40       	sbci	r23, 0x00	; 0
    2cb6:	01 10       	cpse	r0, r1
    2cb8:	d8 f7       	brcc	.-10     	; 0x2cb0 <strnlen_P+0x2>
    2cba:	80 95       	com	r24
    2cbc:	90 95       	com	r25
    2cbe:	8e 0f       	add	r24, r30
    2cc0:	9f 1f       	adc	r25, r31
    2cc2:	08 95       	ret

00002cc4 <strnlen>:
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	61 50       	subi	r22, 0x01	; 1
    2cc8:	70 40       	sbci	r23, 0x00	; 0
    2cca:	01 90       	ld	r0, Z+
    2ccc:	01 10       	cpse	r0, r1
    2cce:	d8 f7       	brcc	.-10     	; 0x2cc6 <strnlen+0x2>
    2cd0:	80 95       	com	r24
    2cd2:	90 95       	com	r25
    2cd4:	8e 0f       	add	r24, r30
    2cd6:	9f 1f       	adc	r25, r31
    2cd8:	08 95       	ret

00002cda <fputc>:
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	fb 01       	movw	r30, r22
    2ce4:	23 81       	ldd	r18, Z+3	; 0x03
    2ce6:	21 fd       	sbrc	r18, 1
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <fputc+0x16>
    2cea:	8f ef       	ldi	r24, 0xFF	; 255
    2cec:	9f ef       	ldi	r25, 0xFF	; 255
    2cee:	2c c0       	rjmp	.+88     	; 0x2d48 <fputc+0x6e>
    2cf0:	22 ff       	sbrs	r18, 2
    2cf2:	16 c0       	rjmp	.+44     	; 0x2d20 <fputc+0x46>
    2cf4:	46 81       	ldd	r20, Z+6	; 0x06
    2cf6:	57 81       	ldd	r21, Z+7	; 0x07
    2cf8:	24 81       	ldd	r18, Z+4	; 0x04
    2cfa:	35 81       	ldd	r19, Z+5	; 0x05
    2cfc:	42 17       	cp	r20, r18
    2cfe:	53 07       	cpc	r21, r19
    2d00:	44 f4       	brge	.+16     	; 0x2d12 <fputc+0x38>
    2d02:	a0 81       	ld	r26, Z
    2d04:	b1 81       	ldd	r27, Z+1	; 0x01
    2d06:	9d 01       	movw	r18, r26
    2d08:	2f 5f       	subi	r18, 0xFF	; 255
    2d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0c:	31 83       	std	Z+1, r19	; 0x01
    2d0e:	20 83       	st	Z, r18
    2d10:	8c 93       	st	X, r24
    2d12:	26 81       	ldd	r18, Z+6	; 0x06
    2d14:	37 81       	ldd	r19, Z+7	; 0x07
    2d16:	2f 5f       	subi	r18, 0xFF	; 255
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	37 83       	std	Z+7, r19	; 0x07
    2d1c:	26 83       	std	Z+6, r18	; 0x06
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <fputc+0x6e>
    2d20:	8b 01       	movw	r16, r22
    2d22:	ec 01       	movw	r28, r24
    2d24:	fb 01       	movw	r30, r22
    2d26:	00 84       	ldd	r0, Z+8	; 0x08
    2d28:	f1 85       	ldd	r31, Z+9	; 0x09
    2d2a:	e0 2d       	mov	r30, r0
    2d2c:	09 95       	icall
    2d2e:	89 2b       	or	r24, r25
    2d30:	e1 f6       	brne	.-72     	; 0x2cea <fputc+0x10>
    2d32:	d8 01       	movw	r26, r16
    2d34:	16 96       	adiw	r26, 0x06	; 6
    2d36:	8d 91       	ld	r24, X+
    2d38:	9c 91       	ld	r25, X
    2d3a:	17 97       	sbiw	r26, 0x07	; 7
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	17 96       	adiw	r26, 0x07	; 7
    2d40:	9c 93       	st	X, r25
    2d42:	8e 93       	st	-X, r24
    2d44:	16 97       	sbiw	r26, 0x06	; 6
    2d46:	ce 01       	movw	r24, r28
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <__ultoa_invert>:
    2d52:	fa 01       	movw	r30, r20
    2d54:	aa 27       	eor	r26, r26
    2d56:	28 30       	cpi	r18, 0x08	; 8
    2d58:	51 f1       	breq	.+84     	; 0x2dae <__ultoa_invert+0x5c>
    2d5a:	20 31       	cpi	r18, 0x10	; 16
    2d5c:	81 f1       	breq	.+96     	; 0x2dbe <__ultoa_invert+0x6c>
    2d5e:	e8 94       	clt
    2d60:	6f 93       	push	r22
    2d62:	6e 7f       	andi	r22, 0xFE	; 254
    2d64:	6e 5f       	subi	r22, 0xFE	; 254
    2d66:	7f 4f       	sbci	r23, 0xFF	; 255
    2d68:	8f 4f       	sbci	r24, 0xFF	; 255
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	af 4f       	sbci	r26, 0xFF	; 255
    2d6e:	b1 e0       	ldi	r27, 0x01	; 1
    2d70:	3e d0       	rcall	.+124    	; 0x2dee <__ultoa_invert+0x9c>
    2d72:	b4 e0       	ldi	r27, 0x04	; 4
    2d74:	3c d0       	rcall	.+120    	; 0x2dee <__ultoa_invert+0x9c>
    2d76:	67 0f       	add	r22, r23
    2d78:	78 1f       	adc	r23, r24
    2d7a:	89 1f       	adc	r24, r25
    2d7c:	9a 1f       	adc	r25, r26
    2d7e:	a1 1d       	adc	r26, r1
    2d80:	68 0f       	add	r22, r24
    2d82:	79 1f       	adc	r23, r25
    2d84:	8a 1f       	adc	r24, r26
    2d86:	91 1d       	adc	r25, r1
    2d88:	a1 1d       	adc	r26, r1
    2d8a:	6a 0f       	add	r22, r26
    2d8c:	71 1d       	adc	r23, r1
    2d8e:	81 1d       	adc	r24, r1
    2d90:	91 1d       	adc	r25, r1
    2d92:	a1 1d       	adc	r26, r1
    2d94:	20 d0       	rcall	.+64     	; 0x2dd6 <__ultoa_invert+0x84>
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <__ultoa_invert+0x48>
    2d98:	68 94       	set
    2d9a:	3f 91       	pop	r19
    2d9c:	2a e0       	ldi	r18, 0x0A	; 10
    2d9e:	26 9f       	mul	r18, r22
    2da0:	11 24       	eor	r1, r1
    2da2:	30 19       	sub	r19, r0
    2da4:	30 5d       	subi	r19, 0xD0	; 208
    2da6:	31 93       	st	Z+, r19
    2da8:	de f6       	brtc	.-74     	; 0x2d60 <__ultoa_invert+0xe>
    2daa:	cf 01       	movw	r24, r30
    2dac:	08 95       	ret
    2dae:	46 2f       	mov	r20, r22
    2db0:	47 70       	andi	r20, 0x07	; 7
    2db2:	40 5d       	subi	r20, 0xD0	; 208
    2db4:	41 93       	st	Z+, r20
    2db6:	b3 e0       	ldi	r27, 0x03	; 3
    2db8:	0f d0       	rcall	.+30     	; 0x2dd8 <__ultoa_invert+0x86>
    2dba:	c9 f7       	brne	.-14     	; 0x2dae <__ultoa_invert+0x5c>
    2dbc:	f6 cf       	rjmp	.-20     	; 0x2daa <__ultoa_invert+0x58>
    2dbe:	46 2f       	mov	r20, r22
    2dc0:	4f 70       	andi	r20, 0x0F	; 15
    2dc2:	40 5d       	subi	r20, 0xD0	; 208
    2dc4:	4a 33       	cpi	r20, 0x3A	; 58
    2dc6:	18 f0       	brcs	.+6      	; 0x2dce <__ultoa_invert+0x7c>
    2dc8:	49 5d       	subi	r20, 0xD9	; 217
    2dca:	31 fd       	sbrc	r19, 1
    2dcc:	40 52       	subi	r20, 0x20	; 32
    2dce:	41 93       	st	Z+, r20
    2dd0:	02 d0       	rcall	.+4      	; 0x2dd6 <__ultoa_invert+0x84>
    2dd2:	a9 f7       	brne	.-22     	; 0x2dbe <__ultoa_invert+0x6c>
    2dd4:	ea cf       	rjmp	.-44     	; 0x2daa <__ultoa_invert+0x58>
    2dd6:	b4 e0       	ldi	r27, 0x04	; 4
    2dd8:	a6 95       	lsr	r26
    2dda:	97 95       	ror	r25
    2ddc:	87 95       	ror	r24
    2dde:	77 95       	ror	r23
    2de0:	67 95       	ror	r22
    2de2:	ba 95       	dec	r27
    2de4:	c9 f7       	brne	.-14     	; 0x2dd8 <__ultoa_invert+0x86>
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	61 05       	cpc	r22, r1
    2dea:	71 05       	cpc	r23, r1
    2dec:	08 95       	ret
    2dee:	9b 01       	movw	r18, r22
    2df0:	ac 01       	movw	r20, r24
    2df2:	0a 2e       	mov	r0, r26
    2df4:	06 94       	lsr	r0
    2df6:	57 95       	ror	r21
    2df8:	47 95       	ror	r20
    2dfa:	37 95       	ror	r19
    2dfc:	27 95       	ror	r18
    2dfe:	ba 95       	dec	r27
    2e00:	c9 f7       	brne	.-14     	; 0x2df4 <__ultoa_invert+0xa2>
    2e02:	62 0f       	add	r22, r18
    2e04:	73 1f       	adc	r23, r19
    2e06:	84 1f       	adc	r24, r20
    2e08:	95 1f       	adc	r25, r21
    2e0a:	a0 1d       	adc	r26, r0
    2e0c:	08 95       	ret

00002e0e <__prologue_saves__>:
    2e0e:	2f 92       	push	r2
    2e10:	3f 92       	push	r3
    2e12:	4f 92       	push	r4
    2e14:	5f 92       	push	r5
    2e16:	6f 92       	push	r6
    2e18:	7f 92       	push	r7
    2e1a:	8f 92       	push	r8
    2e1c:	9f 92       	push	r9
    2e1e:	af 92       	push	r10
    2e20:	bf 92       	push	r11
    2e22:	cf 92       	push	r12
    2e24:	df 92       	push	r13
    2e26:	ef 92       	push	r14
    2e28:	ff 92       	push	r15
    2e2a:	0f 93       	push	r16
    2e2c:	1f 93       	push	r17
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	ca 1b       	sub	r28, r26
    2e38:	db 0b       	sbc	r29, r27
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	09 94       	ijmp

00002e46 <__epilogue_restores__>:
    2e46:	2a 88       	ldd	r2, Y+18	; 0x12
    2e48:	39 88       	ldd	r3, Y+17	; 0x11
    2e4a:	48 88       	ldd	r4, Y+16	; 0x10
    2e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e58:	b9 84       	ldd	r11, Y+9	; 0x09
    2e5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e5c:	df 80       	ldd	r13, Y+7	; 0x07
    2e5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e60:	fd 80       	ldd	r15, Y+5	; 0x05
    2e62:	0c 81       	ldd	r16, Y+4	; 0x04
    2e64:	1b 81       	ldd	r17, Y+3	; 0x03
    2e66:	aa 81       	ldd	r26, Y+2	; 0x02
    2e68:	b9 81       	ldd	r27, Y+1	; 0x01
    2e6a:	ce 0f       	add	r28, r30
    2e6c:	d1 1d       	adc	r29, r1
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	ed 01       	movw	r28, r26
    2e7a:	08 95       	ret

00002e7c <_exit>:
    2e7c:	f8 94       	cli

00002e7e <__stop_program>:
    2e7e:	ff cf       	rjmp	.-2      	; 0x2e7e <__stop_program>
