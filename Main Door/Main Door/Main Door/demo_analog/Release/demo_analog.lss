
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00002f80  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a4  0080025e  0080025e  00003172  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00003172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008b8  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001106e  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cee  00000000  00000000  00014b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000477a  00000000  00000000  00017854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b9c  00000000  00000000  0001bfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033cc  00000000  00000000  0001db6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ac9  00000000  00000000  00020f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000878  00000000  00000000  0002aa01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_1>
       8:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_18>
      4c:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	8f 04       	cpc	r8, r15
      ba:	4e 06       	cpc	r4, r30
      bc:	7a 10       	cpse	r7, r10

000000be <__ctors_end>:
      be:	9f 04       	cpc	r9, r15

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	12 e0       	ldi	r17, 0x02	; 2
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 e8       	ldi	r30, 0x80	; 128
      d4:	ff e2       	ldi	r31, 0x2F	; 47
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	ae 35       	cpi	r26, 0x5E	; 94
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	24 e0       	ldi	r18, 0x04	; 4
      e4:	ae e5       	ldi	r26, 0x5E	; 94
      e6:	b2 e0       	ldi	r27, 0x02	; 2
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a2 30       	cpi	r26, 0x02	; 2
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 cc 12 	call	0x2598	; 0x2598 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <main>
     10c:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN7Display8print2lnE6StringS0_>:
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
     122:	7b 01       	movw	r14, r22
     124:	8a 01       	movw	r16, r20
     126:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN21Adafruit_RGBLCDShield5clearEv>
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	ce 01       	movw	r24, r28
     130:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     134:	b7 01       	movw	r22, r14
     136:	ce 01       	movw	r24, r28
     138:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5Print5printERK6String>
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	ce 01       	movw	r24, r28
     142:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     146:	b8 01       	movw	r22, r16
     148:	ce 01       	movw	r24, r28
     14a:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5Print5printERK6String>
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	ce 01       	movw	r24, r28
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

00000164 <_ZN7Display11refreshLineEv>:
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	2c 97       	sbiw	r28, 0x0c	; 12
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
     17c:	8c 01       	movw	r16, r24
     17e:	63 e3       	ldi	r22, 0x33	; 51
     180:	72 e0       	ldi	r23, 0x02	; 2
     182:	ce 01       	movw	r24, r28
     184:	07 96       	adiw	r24, 0x07	; 7
     186:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     18a:	f8 01       	movw	r30, r16
     18c:	82 a5       	ldd	r24, Z+42	; 0x2a
     18e:	93 a5       	ldd	r25, Z+43	; 0x2b
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	19 f0       	breq	.+6      	; 0x19a <_ZN7Display11refreshLineEv+0x36>
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	41 f0       	breq	.+16     	; 0x1a8 <_ZN7Display11refreshLineEv+0x44>
     198:	0e c0       	rjmp	.+28     	; 0x1b6 <_ZN7Display11refreshLineEv+0x52>
     19a:	b8 01       	movw	r22, r16
     19c:	60 5d       	subi	r22, 0xD0	; 208
     19e:	7f 4f       	sbci	r23, 0xFF	; 255
     1a0:	ce 01       	movw	r24, r28
     1a2:	07 96       	adiw	r24, 0x07	; 7
     1a4:	0e 94 b4 09 	call	0x1368	; 0x1368 <_ZN6StringaSERKS_>
     1a8:	b8 01       	movw	r22, r16
     1aa:	6a 5c       	subi	r22, 0xCA	; 202
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	ce 01       	movw	r24, r28
     1b0:	07 96       	adiw	r24, 0x07	; 7
     1b2:	0e 94 b4 09 	call	0x1368	; 0x1368 <_ZN6StringaSERKS_>
     1b6:	f8 01       	movw	r30, r16
     1b8:	46 a5       	ldd	r20, Z+46	; 0x2e
     1ba:	57 a5       	ldd	r21, Z+47	; 0x2f
     1bc:	84 a5       	ldd	r24, Z+44	; 0x2c
     1be:	95 a5       	ldd	r25, Z+45	; 0x2d
     1c0:	48 17       	cp	r20, r24
     1c2:	59 07       	cpc	r21, r25
     1c4:	14 f4       	brge	.+4      	; 0x1ca <_ZN7Display11refreshLineEv+0x66>
     1c6:	15 a6       	std	Z+45, r1	; 0x2d
     1c8:	14 a6       	std	Z+44, r1	; 0x2c
     1ca:	f8 01       	movw	r30, r16
     1cc:	24 a5       	ldd	r18, Z+44	; 0x2c
     1ce:	35 a5       	ldd	r19, Z+45	; 0x2d
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <_ZN7Display11refreshLineEv+0x82>
     1d6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1d8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1da:	94 e0       	ldi	r25, 0x04	; 4
     1dc:	44 0f       	add	r20, r20
     1de:	55 1f       	adc	r21, r21
     1e0:	9a 95       	dec	r25
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <_ZN7Display11refreshLineEv+0x78>
     1e4:	0a c0       	rjmp	.+20     	; 0x1fa <_ZN7Display11refreshLineEv+0x96>
     1e6:	2f 5f       	subi	r18, 0xFF	; 255
     1e8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	22 0f       	add	r18, r18
     1ee:	33 1f       	adc	r19, r19
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <_ZN7Display11refreshLineEv+0x88>
     1f4:	a9 01       	movw	r20, r18
     1f6:	40 51       	subi	r20, 0x10	; 16
     1f8:	51 09       	sbc	r21, r1
     1fa:	be 01       	movw	r22, r28
     1fc:	69 5f       	subi	r22, 0xF9	; 249
     1fe:	7f 4f       	sbci	r23, 0xFF	; 255
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZNK6String9substringEjj>
     208:	be 01       	movw	r22, r28
     20a:	6f 5f       	subi	r22, 0xFF	; 255
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	ce 01       	movw	r24, r28
     210:	07 96       	adiw	r24, 0x07	; 7
     212:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_ZN6StringaSEOS_>
     216:	ce 01       	movw	r24, r28
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     21e:	f8 01       	movw	r30, r16
     220:	42 a5       	ldd	r20, Z+42	; 0x2a
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	c8 01       	movw	r24, r16
     226:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     22a:	be 01       	movw	r22, r28
     22c:	69 5f       	subi	r22, 0xF9	; 249
     22e:	7f 4f       	sbci	r23, 0xFF	; 255
     230:	c8 01       	movw	r24, r16
     232:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5Print5printERK6String>
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	c8 01       	movw	r24, r16
     23c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
     240:	f8 01       	movw	r30, r16
     242:	04 a5       	ldd	r16, Z+44	; 0x2c
     244:	15 a5       	ldd	r17, Z+45	; 0x2d
     246:	0f 5f       	subi	r16, 0xFF	; 255
     248:	1f 4f       	sbci	r17, 0xFF	; 255
     24a:	ce 01       	movw	r24, r28
     24c:	07 96       	adiw	r24, 0x07	; 7
     24e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     252:	c8 01       	movw	r24, r16
     254:	2c 96       	adiw	r28, 0x0c	; 12
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:
     26a:	4f 92       	push	r4
     26c:	5f 92       	push	r5
     26e:	6f 92       	push	r6
     270:	7f 92       	push	r7
     272:	8f 92       	push	r8
     274:	9f 92       	push	r9
     276:	af 92       	push	r10
     278:	bf 92       	push	r11
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	2c 97       	sbiw	r28, 0x0c	; 12
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	4c 01       	movw	r8, r24
     29c:	3b 01       	movw	r6, r22
     29e:	2a 01       	movw	r4, r20
     2a0:	b2 2e       	mov	r11, r18
     2a2:	c0 96       	adiw	r24, 0x30	; 48
     2a4:	0e 94 b4 09 	call	0x1368	; 0x1368 <_ZN6StringaSERKS_>
     2a8:	b2 01       	movw	r22, r4
     2aa:	c4 01       	movw	r24, r8
     2ac:	c6 96       	adiw	r24, 0x36	; 54
     2ae:	0e 94 b4 09 	call	0x1368	; 0x1368 <_ZN6StringaSERKS_>
     2b2:	f4 01       	movw	r30, r8
     2b4:	f7 a6       	std	Z+47, r15	; 0x2f
     2b6:	e6 a6       	std	Z+46, r14	; 0x2e
     2b8:	d3 a6       	std	Z+43, r13	; 0x2b
     2ba:	c2 a6       	std	Z+42, r12	; 0x2a
     2bc:	f8 01       	movw	r30, r16
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	f4 01       	movw	r30, r8
     2c4:	97 8f       	std	Z+31, r25	; 0x1f
     2c6:	86 8f       	std	Z+30, r24	; 0x1e
     2c8:	f8 01       	movw	r30, r16
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	93 81       	ldd	r25, Z+3	; 0x03
     2ce:	f4 01       	movw	r30, r8
     2d0:	91 a3       	std	Z+33, r25	; 0x21
     2d2:	80 a3       	std	Z+32, r24	; 0x20
     2d4:	f8 01       	movw	r30, r16
     2d6:	84 81       	ldd	r24, Z+4	; 0x04
     2d8:	95 81       	ldd	r25, Z+5	; 0x05
     2da:	f4 01       	movw	r30, r8
     2dc:	93 a3       	std	Z+35, r25	; 0x23
     2de:	82 a3       	std	Z+34, r24	; 0x22
     2e0:	f8 01       	movw	r30, r16
     2e2:	86 81       	ldd	r24, Z+6	; 0x06
     2e4:	97 81       	ldd	r25, Z+7	; 0x07
     2e6:	f4 01       	movw	r30, r8
     2e8:	95 a3       	std	Z+37, r25	; 0x25
     2ea:	84 a3       	std	Z+36, r24	; 0x24
     2ec:	f8 01       	movw	r30, r16
     2ee:	80 85       	ldd	r24, Z+8	; 0x08
     2f0:	91 85       	ldd	r25, Z+9	; 0x09
     2f2:	f4 01       	movw	r30, r8
     2f4:	97 a3       	std	Z+39, r25	; 0x27
     2f6:	86 a3       	std	Z+38, r24	; 0x26
     2f8:	6b 2d       	mov	r22, r11
     2fa:	c4 01       	movw	r24, r8
     2fc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     300:	f4 01       	movw	r30, r8
     302:	a4 ae       	std	Z+60, r10	; 0x3c
     304:	a1 10       	cpse	r10, r1
     306:	1e c0       	rjmp	.+60     	; 0x344 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
     308:	15 a6       	std	Z+45, r1	; 0x2d
     30a:	14 a6       	std	Z+44, r1	; 0x2c
     30c:	b2 01       	movw	r22, r4
     30e:	ce 01       	movw	r24, r28
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN6StringC1ERKS_>
     316:	b3 01       	movw	r22, r6
     318:	ce 01       	movw	r24, r28
     31a:	07 96       	adiw	r24, 0x07	; 7
     31c:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN6StringC1ERKS_>
     320:	ae 01       	movw	r20, r28
     322:	4f 5f       	subi	r20, 0xFF	; 255
     324:	5f 4f       	sbci	r21, 0xFF	; 255
     326:	be 01       	movw	r22, r28
     328:	69 5f       	subi	r22, 0xF9	; 249
     32a:	7f 4f       	sbci	r23, 0xFF	; 255
     32c:	c4 01       	movw	r24, r8
     32e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7Display8print2lnE6StringS0_>
     332:	ce 01       	movw	r24, r28
     334:	07 96       	adiw	r24, 0x07	; 7
     336:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     342:	06 c0       	rjmp	.+12     	; 0x350 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
     344:	c4 01       	movw	r24, r8
     346:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN7Display11refreshLineEv>
     34a:	f4 01       	movw	r30, r8
     34c:	95 a7       	std	Z+45, r25	; 0x2d
     34e:	84 a7       	std	Z+44, r24	; 0x2c
     350:	2c 96       	adiw	r28, 0x0c	; 12
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	7f 90       	pop	r7
     376:	6f 90       	pop	r6
     378:	5f 90       	pop	r5
     37a:	4f 90       	pop	r4
     37c:	08 95       	ret

0000037e <_ZN7Display13selectDisplayEibPcS0_>:
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	ac 97       	sbiw	r28, 0x2c	; 44
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	4c 01       	movw	r8, r24
     3a6:	c8 01       	movw	r24, r16
     3a8:	44 23       	and	r20, r20
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3ac:	c4 01       	movw	r24, r8
     3ae:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN7Display11refreshLineEv>
     3b2:	9e c0       	rjmp	.+316    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     3b4:	8e 01       	movw	r16, r28
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	62 30       	cpi	r22, 0x02	; 2
     3bc:	71 05       	cpc	r23, r1
     3be:	59 f1       	breq	.+86     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3c0:	ec f4       	brge	.+58     	; 0x3fc <_ZN7Display13selectDisplayEibPcS0_+0x7e>
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <_ZN7Display13selectDisplayEibPcS0_+0x4c>
     3c8:	59 c0       	rjmp	.+178    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	71 05       	cpc	r23, r1
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3d0:	55 c0       	rjmp	.+170    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     3d2:	1a 82       	std	Y+2, r1	; 0x02
     3d4:	19 82       	std	Y+1, r1	; 0x01
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	8b 83       	std	Y+3, r24	; 0x03
     3de:	9e 83       	std	Y+6, r25	; 0x06
     3e0:	8d 83       	std	Y+5, r24	; 0x05
     3e2:	98 87       	std	Y+8, r25	; 0x08
     3e4:	8f 83       	std	Y+7, r24	; 0x07
     3e6:	9a 87       	std	Y+10, r25	; 0x0a
     3e8:	89 87       	std	Y+9, r24	; 0x09
     3ea:	6d e3       	ldi	r22, 0x3D	; 61
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	ce 01       	movw	r24, r28
     3f0:	81 96       	adiw	r24, 0x21	; 33
     3f2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     3f6:	68 e4       	ldi	r22, 0x48	; 72
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	21 c0       	rjmp	.+66     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3fc:	63 30       	cpi	r22, 0x03	; 3
     3fe:	71 05       	cpc	r23, r1
     400:	59 f1       	breq	.+86     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     402:	64 30       	cpi	r22, 0x04	; 4
     404:	71 05       	cpc	r23, r1
     406:	d1 f5       	brne	.+116    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	3f 93       	push	r19
     40e:	2f 93       	push	r18
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	27 c0       	rjmp	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	19 82       	std	Y+1, r1	; 0x01
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	9f ef       	ldi	r25, 0xFF	; 255
     41e:	9c 83       	std	Y+4, r25	; 0x04
     420:	8b 83       	std	Y+3, r24	; 0x03
     422:	9e 83       	std	Y+6, r25	; 0x06
     424:	8d 83       	std	Y+5, r24	; 0x05
     426:	98 87       	std	Y+8, r25	; 0x08
     428:	8f 83       	std	Y+7, r24	; 0x07
     42a:	9a 87       	std	Y+10, r25	; 0x0a
     42c:	89 87       	std	Y+9, r24	; 0x09
     42e:	6d e3       	ldi	r22, 0x3D	; 61
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	ce 01       	movw	r24, r28
     434:	81 96       	adiw	r24, 0x21	; 33
     436:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     43a:	65 e5       	ldi	r22, 0x55	; 85
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	ce 01       	movw	r24, r28
     440:	87 96       	adiw	r24, 0x27	; 39
     442:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     446:	a1 2c       	mov	r10, r1
     448:	cc 24       	eor	r12, r12
     44a:	ca 94       	dec	r12
     44c:	dc 2c       	mov	r13, r12
     44e:	e1 2c       	mov	r14, r1
     450:	f1 2c       	mov	r15, r1
     452:	23 e0       	ldi	r18, 0x03	; 3
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	3b c0       	rjmp	.+118    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	3f 93       	push	r19
     45e:	2f 93       	push	r18
     460:	82 e6       	ldi	r24, 0x62	; 98
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9f 93       	push	r25
     466:	8f 93       	push	r24
     468:	1f 93       	push	r17
     46a:	0f 93       	push	r16
     46c:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	3a c0       	rjmp	.+116    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	9f ef       	ldi	r25, 0xFF	; 255
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9c 83       	std	Y+4, r25	; 0x04
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9e 83       	std	Y+6, r25	; 0x06
     492:	8d 83       	std	Y+5, r24	; 0x05
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	98 87       	std	Y+8, r25	; 0x08
     49a:	8f 83       	std	Y+7, r24	; 0x07
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9a 87       	std	Y+10, r25	; 0x0a
     4a2:	89 87       	std	Y+9, r24	; 0x09
     4a4:	63 e1       	ldi	r22, 0x13	; 19
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	ce 01       	movw	r24, r28
     4aa:	81 96       	adiw	r24, 0x21	; 33
     4ac:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     4b0:	63 e3       	ldi	r22, 0x33	; 51
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	ce 01       	movw	r24, r28
     4b6:	87 96       	adiw	r24, 0x27	; 39
     4b8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     4bc:	a1 2c       	mov	r10, r1
     4be:	cc 24       	eor	r12, r12
     4c0:	c3 94       	inc	r12
     4c2:	d1 2c       	mov	r13, r1
     4c4:	ee 24       	eor	r14, r14
     4c6:	e3 94       	inc	r14
     4c8:	f1 2c       	mov	r15, r1
     4ca:	22 e0       	ldi	r18, 0x02	; 2
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	ae 01       	movw	r20, r28
     4d0:	4f 5d       	subi	r20, 0xDF	; 223
     4d2:	5f 4f       	sbci	r21, 0xFF	; 255
     4d4:	be 01       	movw	r22, r28
     4d6:	69 5d       	subi	r22, 0xD9	; 217
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	c4 01       	movw	r24, r8
     4dc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     4e0:	ce 01       	movw	r24, r28
     4e2:	87 96       	adiw	r24, 0x27	; 39
     4e4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     4e8:	ce 01       	movw	r24, r28
     4ea:	81 96       	adiw	r24, 0x21	; 33
     4ec:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     4f0:	ac 96       	adiw	r28, 0x2c	; 44
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	df 90       	pop	r13
     50a:	cf 90       	pop	r12
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	08 95       	ret

00000514 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	fb 01       	movw	r30, r22
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
     528:	84 e4       	ldi	r24, 0x44	; 68
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	99 83       	std	Y+1, r25	; 0x01
     52e:	88 83       	st	Y, r24
     530:	84 81       	ldd	r24, Z+4	; 0x04
     532:	8c 83       	std	Y+4, r24	; 0x04
     534:	85 81       	ldd	r24, Z+5	; 0x05
     536:	8d 83       	std	Y+5, r24	; 0x05
     538:	86 81       	ldd	r24, Z+6	; 0x06
     53a:	8e 83       	std	Y+6, r24	; 0x06
     53c:	88 e0       	ldi	r24, 0x08	; 8
     53e:	37 96       	adiw	r30, 0x07	; 7
     540:	de 01       	movw	r26, r28
     542:	17 96       	adiw	r26, 0x07	; 7
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	fb 01       	movw	r30, r22
     550:	3f 96       	adiw	r30, 0x0f	; 15
     552:	de 01       	movw	r26, r28
     554:	1f 96       	adiw	r26, 0x0f	; 15
     556:	01 90       	ld	r0, Z+
     558:	0d 92       	st	X+, r0
     55a:	8a 95       	dec	r24
     55c:	e1 f7       	brne	.-8      	; 0x556 <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     55e:	fb 01       	movw	r30, r22
     560:	84 89       	ldd	r24, Z+20	; 0x14
     562:	8c 8b       	std	Y+20, r24	; 0x14
     564:	85 89       	ldd	r24, Z+21	; 0x15
     566:	8d 8b       	std	Y+21, r24	; 0x15
     568:	86 89       	ldd	r24, Z+22	; 0x16
     56a:	8e 8b       	std	Y+22, r24	; 0x16
     56c:	87 89       	ldd	r24, Z+23	; 0x17
     56e:	8f 8b       	std	Y+23, r24	; 0x17
     570:	80 8d       	ldd	r24, Z+24	; 0x18
     572:	88 8f       	std	Y+24, r24	; 0x18
     574:	81 8d       	ldd	r24, Z+25	; 0x19
     576:	89 8f       	std	Y+25, r24	; 0x19
     578:	82 8d       	ldd	r24, Z+26	; 0x1a
     57a:	8a 8f       	std	Y+26, r24	; 0x1a
     57c:	83 8d       	ldd	r24, Z+27	; 0x1b
     57e:	8b 8f       	std	Y+27, r24	; 0x1b
     580:	63 e3       	ldi	r22, 0x33	; 51
     582:	72 e0       	ldi	r23, 0x02	; 2
     584:	ce 01       	movw	r24, r28
     586:	c0 96       	adiw	r24, 0x30	; 48
     588:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     58c:	63 e3       	ldi	r22, 0x33	; 51
     58e:	72 e0       	ldi	r23, 0x02	; 2
     590:	ce 01       	movw	r24, r28
     592:	c6 96       	adiw	r24, 0x36	; 54
     594:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	42 e0       	ldi	r20, 0x02	; 2
     59c:	60 e1       	ldi	r22, 0x10	; 16
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN21Adafruit_RGBLCDShield5clearEv>
     5aa:	03 e3       	ldi	r16, 0x33	; 51
     5ac:	12 e0       	ldi	r17, 0x02	; 2
     5ae:	98 01       	movw	r18, r16
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN7Display13selectDisplayEibPcS0_>
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <_ZN7Display21UpdateMenuFromButtonsEv>:
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
     5d0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
     5d4:	80 ff       	sbrs	r24, 0
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <_ZN7Display21UpdateMenuFromButtonsEv+0x1e>
     5d8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     5da:	7f 8d       	ldd	r23, Y+31	; 0x1f
     5dc:	6f 3f       	cpi	r22, 0xFF	; 255
     5de:	9f ef       	ldi	r25, 0xFF	; 255
     5e0:	79 07       	cpc	r23, r25
     5e2:	01 f5       	brne	.+64     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     5e4:	83 ff       	sbrs	r24, 3
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <_ZN7Display21UpdateMenuFromButtonsEv+0x2e>
     5e8:	68 a1       	ldd	r22, Y+32	; 0x20
     5ea:	79 a1       	ldd	r23, Y+33	; 0x21
     5ec:	6f 3f       	cpi	r22, 0xFF	; 255
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	79 07       	cpc	r23, r25
     5f2:	c1 f4       	brne	.+48     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     5f4:	82 ff       	sbrs	r24, 2
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <_ZN7Display21UpdateMenuFromButtonsEv+0x3e>
     5f8:	6a a1       	ldd	r22, Y+34	; 0x22
     5fa:	7b a1       	ldd	r23, Y+35	; 0x23
     5fc:	6f 3f       	cpi	r22, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	79 07       	cpc	r23, r25
     602:	81 f4       	brne	.+32     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     604:	84 ff       	sbrs	r24, 4
     606:	06 c0       	rjmp	.+12     	; 0x614 <_ZN7Display21UpdateMenuFromButtonsEv+0x4e>
     608:	6c a1       	ldd	r22, Y+36	; 0x24
     60a:	7d a1       	ldd	r23, Y+37	; 0x25
     60c:	6f 3f       	cpi	r22, 0xFF	; 255
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	79 07       	cpc	r23, r25
     612:	41 f4       	brne	.+16     	; 0x624 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
     614:	81 ff       	sbrs	r24, 1
     616:	12 c0       	rjmp	.+36     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     618:	6e a1       	ldd	r22, Y+38	; 0x26
     61a:	7f a1       	ldd	r23, Y+39	; 0x27
     61c:	6f 3f       	cpi	r22, 0xFF	; 255
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	78 07       	cpc	r23, r24
     622:	61 f0       	breq	.+24     	; 0x63c <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     624:	03 e3       	ldi	r16, 0x33	; 51
     626:	12 e0       	ldi	r17, 0x02	; 2
     628:	98 01       	movw	r18, r16
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN7Display13selectDisplayEibPcS0_>
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret
     63c:	ce 01       	movw	r24, r28
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	0c 94 b2 00 	jmp	0x164	; 0x164 <_ZN7Display11refreshLineEv>

0000064a <_ZN6SafetyC1Ev>:
     64a:	08 95       	ret

0000064c <setup>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	6c 97       	sbiw	r28, 0x1c	; 28
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	26 e0       	ldi	r18, 0x06	; 6
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	55 e2       	ldi	r21, 0x25	; 37
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	84 e9       	ldi	r24, 0x94	; 148
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN14HardwareSerial5beginEmh>
     676:	82 e6       	ldi	r24, 0x62	; 98
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	fc 01       	movw	r30, r24
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	33 81       	ldd	r19, Z+3	; 0x03
     680:	3c 83       	std	Y+4, r19	; 0x04
     682:	2b 83       	std	Y+3, r18	; 0x03
     684:	24 e4       	ldi	r18, 0x44	; 68
     686:	32 e0       	ldi	r19, 0x02	; 2
     688:	3a 83       	std	Y+2, r19	; 0x02
     68a:	29 83       	std	Y+1, r18	; 0x01
     68c:	24 81       	ldd	r18, Z+4	; 0x04
     68e:	2d 83       	std	Y+5, r18	; 0x05
     690:	25 81       	ldd	r18, Z+5	; 0x05
     692:	2e 83       	std	Y+6, r18	; 0x06
     694:	26 81       	ldd	r18, Z+6	; 0x06
     696:	2f 83       	std	Y+7, r18	; 0x07
     698:	28 e0       	ldi	r18, 0x08	; 8
     69a:	e9 e6       	ldi	r30, 0x69	; 105
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	de 01       	movw	r26, r28
     6a0:	18 96       	adiw	r26, 0x08	; 8
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	2a 95       	dec	r18
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <setup+0x56>
     6aa:	25 e0       	ldi	r18, 0x05	; 5
     6ac:	e1 e7       	ldi	r30, 0x71	; 113
     6ae:	f2 e0       	ldi	r31, 0x02	; 2
     6b0:	de 01       	movw	r26, r28
     6b2:	50 96       	adiw	r26, 0x10	; 16
     6b4:	01 90       	ld	r0, Z+
     6b6:	0d 92       	st	X+, r0
     6b8:	2a 95       	dec	r18
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <setup+0x68>
     6bc:	fc 01       	movw	r30, r24
     6be:	24 89       	ldd	r18, Z+20	; 0x14
     6c0:	2d 8b       	std	Y+21, r18	; 0x15
     6c2:	25 89       	ldd	r18, Z+21	; 0x15
     6c4:	2e 8b       	std	Y+22, r18	; 0x16
     6c6:	26 89       	ldd	r18, Z+22	; 0x16
     6c8:	2f 8b       	std	Y+23, r18	; 0x17
     6ca:	27 89       	ldd	r18, Z+23	; 0x17
     6cc:	28 8f       	std	Y+24, r18	; 0x18
     6ce:	20 8d       	ldd	r18, Z+24	; 0x18
     6d0:	29 8f       	std	Y+25, r18	; 0x19
     6d2:	21 8d       	ldd	r18, Z+25	; 0x19
     6d4:	2a 8f       	std	Y+26, r18	; 0x1a
     6d6:	22 8d       	ldd	r18, Z+26	; 0x1a
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	83 8d       	ldd	r24, Z+27	; 0x1b
     6dc:	8c 8f       	std	Y+28, r24	; 0x1c
     6de:	8d e3       	ldi	r24, 0x3D	; 61
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 8b 06 	call	0xd16	; 0xd16 <_Znwj>
     6e6:	8c 01       	movw	r16, r24
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     6f2:	10 93 61 02 	sts	0x0261, r17	; 0x800261 <ptrdspMainDoor+0x1>
     6f6:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <ptrdspMainDoor>
     6fa:	8c e0       	ldi	r24, 0x0C	; 12
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 8b 06 	call	0xd16	; 0xd16 <_Znwj>
     702:	8c 01       	movw	r16, r24
     704:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6SafetyC1Ev>
     708:	10 93 5f 02 	sts	0x025F, r17	; 0x80025f <__data_end+0x1>
     70c:	00 93 5e 02 	sts	0x025E, r16	; 0x80025e <__data_end>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8a e0       	ldi	r24, 0x0A	; 10
     714:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     728:	43 e0       	ldi	r20, 0x03	; 3
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	6e e7       	ldi	r22, 0x7E	; 126
     72e:	74 e0       	ldi	r23, 0x04	; 4
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 f1 06 	call	0xde2	; 0xde2 <attachInterrupt>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <analogReference>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <isOkay>
     742:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <isClosing>
     746:	ec eb       	ldi	r30, 0xBC	; 188
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	80 83       	st	Z, r24
     750:	78 94       	sei
     752:	6e e9       	ldi	r22, 0x9E	; 158
     754:	71 e0       	ldi	r23, 0x01	; 1
     756:	84 e9       	ldi	r24, 0x94	; 148
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>
     75e:	6c 96       	adiw	r28, 0x1c	; 28
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <loop>:
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	68 eb       	ldi	r22, 0xB8	; 184
     77a:	7b e0       	ldi	r23, 0x0B	; 11
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 da 07 	call	0xfb4	; 0xfb4 <delay>
     784:	6c ea       	ldi	r22, 0xAC	; 172
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	84 e9       	ldi	r24, 0x94	; 148
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>
     790:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <CurrentMenu>
     794:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <CurrentMenu+0x1>
     798:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <MenuSelect>
     79c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <MenuSelect+0x1>
     7a0:	28 17       	cp	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <loop+0x40>
     7a6:	64 eb       	ldi	r22, 0xB4	; 180
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	84 e9       	ldi	r24, 0x94	; 148
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>
     7b2:	15 c0       	rjmp	.+42     	; 0x7de <loop+0x6a>
     7b4:	0e 94 a9 07 	call	0xf52	; 0xf52 <millis>
     7b8:	00 91 8c 02 	lds	r16, 0x028C	; 0x80028c <MenuLastUpdated>
     7bc:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <MenuLastUpdated+0x1>
     7c0:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <MenuLastUpdated+0x2>
     7c4:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <MenuLastUpdated+0x3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	80 1b       	sub	r24, r16
     7ce:	91 0b       	sbc	r25, r17
     7d0:	a2 0b       	sbc	r26, r18
     7d2:	b3 0b       	sbc	r27, r19
     7d4:	89 3b       	cpi	r24, 0xB9	; 185
     7d6:	9b 40       	sbci	r25, 0x0B	; 11
     7d8:	a1 05       	cpc	r26, r1
     7da:	b1 05       	cpc	r27, r1
     7dc:	c0 f0       	brcs	.+48     	; 0x80e <loop+0x9a>
     7de:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <ptrdspMainDoor>
     7e2:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <ptrdspMainDoor+0x1>
     7e6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN7Display21UpdateMenuFromButtonsEv>
     7ea:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <MenuSelect>
     7ee:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <MenuSelect+0x1>
     7f2:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <CurrentMenu+0x1>
     7f6:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <CurrentMenu>
     7fa:	0e 94 a9 07 	call	0xf52	; 0xf52 <millis>
     7fe:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <MenuLastUpdated>
     802:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <MenuLastUpdated+0x1>
     806:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <MenuLastUpdated+0x2>
     80a:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <MenuLastUpdated+0x3>
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <_Z14openDoorActioni>:
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	8a e0       	ldi	r24, 0x0A	; 10
     81e:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	89 e0       	ldi	r24, 0x09	; 9
     826:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     82a:	63 ed       	ldi	r22, 0xD3	; 211
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	84 e9       	ldi	r24, 0x94	; 148
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	8a e0       	ldi	r24, 0x0A	; 10
     83a:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	89 e0       	ldi	r24, 0x09	; 9
     842:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     846:	c8 ef       	ldi	r28, 0xF8	; 248
     848:	da e2       	ldi	r29, 0x2A	; 42
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <isOkay>
     850:	88 23       	and	r24, r24
     852:	99 f0       	breq	.+38     	; 0x87a <_Z14openDoorActioni+0x66>
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <delay>
     860:	11 23       	and	r17, r17
     862:	49 f0       	breq	.+18     	; 0x876 <_Z14openDoorActioni+0x62>
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	89 e0       	ldi	r24, 0x09	; 9
     870:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     874:	02 c0       	rjmp	.+4      	; 0x87a <_Z14openDoorActioni+0x66>
     876:	21 97       	sbiw	r28, 0x01	; 1
     878:	49 f7       	brne	.-46     	; 0x84c <_Z14openDoorActioni+0x38>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	89 e0       	ldi	r24, 0x09	; 9
     886:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	89 e0       	ldi	r24, 0x09	; 9
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0c 94 88 08 	jmp	0x1110	; 0x1110 <pinMode>

000008a0 <_Z13emergencyOpenv>:
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	8a e0       	ldi	r24, 0x0A	; 10
     8ac:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	89 e0       	ldi	r24, 0x09	; 9
     8b4:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     8c0:	68 ee       	ldi	r22, 0xE8	; 232
     8c2:	73 e0       	ldi	r23, 0x03	; 3
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <delay>
     8cc:	62 e0       	ldi	r22, 0x02	; 2
     8ce:	72 e0       	ldi	r23, 0x02	; 2
     8d0:	84 e9       	ldi	r24, 0x94	; 148
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 0a 04 	call	0x814	; 0x814 <_Z14openDoorActioni>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	89 e0       	ldi	r24, 0x09	; 9
     8e4:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	0e 94 88 08 	call	0x1110	; 0x1110 <pinMode>
     8f0:	6c e0       	ldi	r22, 0x0C	; 12
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	84 e9       	ldi	r24, 0x94	; 148
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN5Print7printlnEPKc>

000008fc <_Z17LimitSwitchActivev>:
     8fc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <isClosing>
     900:	88 23       	and	r24, r24
     902:	61 f0       	breq	.+24     	; 0x91c <__stack+0x1d>
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	89 e0       	ldi	r24, 0x09	; 9
     908:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	8a e0       	ldi	r24, 0x0A	; 10
     910:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
     914:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z13emergencyOpenv>
     918:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <isOkay>
     91c:	08 95       	ret

0000091e <_GLOBAL__sub_I_Temperature>:
     91e:	63 e3       	ldi	r22, 0x33	; 51
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	86 e8       	ldi	r24, 0x86	; 134
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     92a:	63 e3       	ldi	r22, 0x33	; 51
     92c:	72 e0       	ldi	r23, 0x02	; 2
     92e:	80 e8       	ldi	r24, 0x80	; 128
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
     936:	82 e6       	ldi	r24, 0x62	; 98
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_ZN21Adafruit_RGBLCDShieldC1Ev>

0000093e <_GLOBAL__sub_D_Temperature>:
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6StringD1Ev>
     946:	86 e8       	ldi	r24, 0x86	; 134
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_ZN6StringD1Ev>

0000094e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     94e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     950:	91 8d       	ldd	r25, Z+25	; 0x19
     952:	22 8d       	ldd	r18, Z+26	; 0x1a
     954:	89 2f       	mov	r24, r25
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	80 5c       	subi	r24, 0xC0	; 192
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	82 1b       	sub	r24, r18
     95e:	91 09       	sbc	r25, r1
}
     960:	8f 73       	andi	r24, 0x3F	; 63
     962:	99 27       	eor	r25, r25
     964:	08 95       	ret

00000966 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     966:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     968:	91 8d       	ldd	r25, Z+25	; 0x19
     96a:	82 8d       	ldd	r24, Z+26	; 0x1a
     96c:	98 17       	cp	r25, r24
     96e:	31 f0       	breq	.+12     	; 0x97c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     970:	82 8d       	ldd	r24, Z+26	; 0x1a
     972:	e8 0f       	add	r30, r24
     974:	f1 1d       	adc	r31, r1
     976:	85 8d       	ldd	r24, Z+29	; 0x1d
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     980:	08 95       	ret

00000982 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     982:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     984:	91 8d       	ldd	r25, Z+25	; 0x19
     986:	82 8d       	ldd	r24, Z+26	; 0x1a
     988:	98 17       	cp	r25, r24
     98a:	61 f0       	breq	.+24     	; 0x9a4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     98c:	82 8d       	ldd	r24, Z+26	; 0x1a
     98e:	df 01       	movw	r26, r30
     990:	a8 0f       	add	r26, r24
     992:	b1 1d       	adc	r27, r1
     994:	5d 96       	adiw	r26, 0x1d	; 29
     996:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     998:	92 8d       	ldd	r25, Z+26	; 0x1a
     99a:	9f 5f       	subi	r25, 0xFF	; 255
     99c:	9f 73       	andi	r25, 0x3F	; 63
     99e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     9a8:	08 95       	ret

000009aa <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     9aa:	fc 01       	movw	r30, r24
     9ac:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     9ae:	44 8d       	ldd	r20, Z+28	; 0x1c
     9b0:	25 2f       	mov	r18, r21
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	84 2f       	mov	r24, r20
     9b6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	54 17       	cp	r21, r20
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     9c0:	cf 96       	adiw	r24, 0x3f	; 63
     9c2:	08 95       	ret
  return tail - head - 1;
     9c4:	01 97       	sbiw	r24, 0x01	; 1
}
     9c6:	08 95       	ret

000009c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     9c8:	84 e4       	ldi	r24, 0x44	; 68
     9ca:	96 e0       	ldi	r25, 0x06	; 6
     9cc:	89 2b       	or	r24, r25
     9ce:	49 f0       	breq	.+18     	; 0x9e2 <_Z14serialEventRunv+0x1a>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	89 2b       	or	r24, r25
     9d6:	29 f0       	breq	.+10     	; 0x9e2 <_Z14serialEventRunv+0x1a>
     9d8:	0e 94 44 06 	call	0xc88	; 0xc88 <_Z17Serial0_availablev>
     9dc:	81 11       	cpse	r24, r1
     9de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     9e2:	08 95       	ret

000009e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     9e4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     9e6:	84 8d       	ldd	r24, Z+28	; 0x1c
     9e8:	df 01       	movw	r26, r30
     9ea:	a8 0f       	add	r26, r24
     9ec:	b1 1d       	adc	r27, r1
     9ee:	a3 5a       	subi	r26, 0xA3	; 163
     9f0:	bf 4f       	sbci	r27, 0xFF	; 255
     9f2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9f4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	8f 73       	andi	r24, 0x3F	; 63
     9fc:	99 27       	eor	r25, r25
     9fe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a00:	a6 89       	ldd	r26, Z+22	; 0x16
     a02:	b7 89       	ldd	r27, Z+23	; 0x17
     a04:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a06:	a0 89       	ldd	r26, Z+16	; 0x10
     a08:	b1 89       	ldd	r27, Z+17	; 0x11
     a0a:	8c 91       	ld	r24, X
     a0c:	83 70       	andi	r24, 0x03	; 3
     a0e:	80 64       	ori	r24, 0x40	; 64
     a10:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a12:	93 8d       	ldd	r25, Z+27	; 0x1b
     a14:	84 8d       	ldd	r24, Z+28	; 0x1c
     a16:	98 13       	cpse	r25, r24
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a1a:	02 88       	ldd	r0, Z+18	; 0x12
     a1c:	f3 89       	ldd	r31, Z+19	; 0x13
     a1e:	e0 2d       	mov	r30, r0
     a20:	80 81       	ld	r24, Z
     a22:	8f 7d       	andi	r24, 0xDF	; 223
     a24:	80 83       	st	Z, r24
     a26:	08 95       	ret

00000a28 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
  _written = true;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     a3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a3e:	98 13       	cpse	r25, r24
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <_ZN14HardwareSerial5writeEh+0x24>
     a42:	e8 89       	ldd	r30, Y+16	; 0x10
     a44:	f9 89       	ldd	r31, Y+17	; 0x11
     a46:	80 81       	ld	r24, Z
     a48:	85 fd       	sbrc	r24, 5
     a4a:	26 c0       	rjmp	.+76     	; 0xa98 <_ZN14HardwareSerial5writeEh+0x70>
     a4c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a4e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	0f 5f       	subi	r16, 0xFF	; 255
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	0f 73       	andi	r16, 0x3F	; 63
     a58:	11 27       	eor	r17, r17
     a5a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a5e:	e8 12       	cpse	r14, r24
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	07 fc       	sbrc	r0, 7
     a66:	fa cf       	rjmp	.-12     	; 0xa5c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a68:	e8 89       	ldd	r30, Y+16	; 0x10
     a6a:	f9 89       	ldd	r31, Y+17	; 0x11
     a6c:	80 81       	ld	r24, Z
     a6e:	85 ff       	sbrs	r24, 5
     a70:	f5 cf       	rjmp	.-22     	; 0xa5c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a78:	f1 cf       	rjmp	.-30     	; 0xa5c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a7c:	fe 01       	movw	r30, r28
     a7e:	e8 0f       	add	r30, r24
     a80:	f1 1d       	adc	r31, r1
     a82:	e3 5a       	subi	r30, 0xA3	; 163
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a88:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a8a:	f8 94       	cli
    _tx_buffer_head = i;
     a8c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a8e:	ea 89       	ldd	r30, Y+18	; 0x12
     a90:	fb 89       	ldd	r31, Y+19	; 0x13
     a92:	80 81       	ld	r24, Z
     a94:	80 62       	ori	r24, 0x20	; 32
     a96:	0a c0       	rjmp	.+20     	; 0xaac <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a98:	9f b7       	in	r25, 0x3f	; 63
     a9a:	f8 94       	cli
      *_udr = c;
     a9c:	ee 89       	ldd	r30, Y+22	; 0x16
     a9e:	ff 89       	ldd	r31, Y+23	; 0x17
     aa0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     aa2:	e8 89       	ldd	r30, Y+16	; 0x10
     aa4:	f9 89       	ldd	r31, Y+17	; 0x11
     aa6:	80 81       	ld	r24, Z
     aa8:	83 70       	andi	r24, 0x03	; 3
     aaa:	80 64       	ori	r24, 0x40	; 64
     aac:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aae:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ac8:	88 8d       	ldd	r24, Y+24	; 0x18
     aca:	88 23       	and	r24, r24
     acc:	c9 f0       	breq	.+50     	; 0xb00 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ace:	ea 89       	ldd	r30, Y+18	; 0x12
     ad0:	fb 89       	ldd	r31, Y+19	; 0x13
     ad2:	80 81       	ld	r24, Z
     ad4:	85 fd       	sbrc	r24, 5
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <_ZN14HardwareSerial5flushEv+0x20>
     ad8:	a8 89       	ldd	r26, Y+16	; 0x10
     ada:	b9 89       	ldd	r27, Y+17	; 0x11
     adc:	8c 91       	ld	r24, X
     ade:	86 fd       	sbrc	r24, 6
     ae0:	0f c0       	rjmp	.+30     	; 0xb00 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	07 fc       	sbrc	r0, 7
     ae6:	f5 cf       	rjmp	.-22     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
     ae8:	80 81       	ld	r24, Z
     aea:	85 ff       	sbrs	r24, 5
     aec:	f2 cf       	rjmp	.-28     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     aee:	a8 89       	ldd	r26, Y+16	; 0x10
     af0:	b9 89       	ldd	r27, Y+17	; 0x11
     af2:	8c 91       	ld	r24, X
     af4:	85 ff       	sbrs	r24, 5
     af6:	ed cf       	rjmp	.-38     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     afe:	e7 cf       	rjmp	.-50     	; 0xace <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
     b16:	6a 01       	movw	r12, r20
     b18:	7b 01       	movw	r14, r22
     b1a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b1c:	e8 89       	ldd	r30, Y+16	; 0x10
     b1e:	f9 89       	ldd	r31, Y+17	; 0x11
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b24:	41 15       	cp	r20, r1
     b26:	51 4e       	sbci	r21, 0xE1	; 225
     b28:	61 05       	cpc	r22, r1
     b2a:	71 05       	cpc	r23, r1
     b2c:	b1 f0       	breq	.+44     	; 0xb5a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	79 e0       	ldi	r23, 0x09	; 9
     b32:	8d e3       	ldi	r24, 0x3D	; 61
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a7 01       	movw	r20, r14
     b38:	96 01       	movw	r18, r12
     b3a:	0e 94 aa 12 	call	0x2554	; 0x2554 <__udivmodsi4>
     b3e:	da 01       	movw	r26, r20
     b40:	c9 01       	movw	r24, r18
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	a1 09       	sbc	r26, r1
     b46:	b1 09       	sbc	r27, r1
     b48:	b6 95       	lsr	r27
     b4a:	a7 95       	ror	r26
     b4c:	97 95       	ror	r25
     b4e:	87 95       	ror	r24
     b50:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b52:	21 15       	cp	r18, r1
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	38 07       	cpc	r19, r24
     b58:	a8 f0       	brcs	.+42     	; 0xb84 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b5a:	e8 89       	ldd	r30, Y+16	; 0x10
     b5c:	f9 89       	ldd	r31, Y+17	; 0x11
     b5e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b60:	60 e8       	ldi	r22, 0x80	; 128
     b62:	74 e8       	ldi	r23, 0x84	; 132
     b64:	8e e1       	ldi	r24, 0x1E	; 30
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a7 01       	movw	r20, r14
     b6a:	96 01       	movw	r18, r12
     b6c:	0e 94 aa 12 	call	0x2554	; 0x2554 <__udivmodsi4>
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	a1 09       	sbc	r26, r1
     b78:	b1 09       	sbc	r27, r1
     b7a:	b6 95       	lsr	r27
     b7c:	a7 95       	ror	r26
     b7e:	97 95       	ror	r25
     b80:	87 95       	ror	r24
     b82:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b84:	ec 85       	ldd	r30, Y+12	; 0x0c
     b86:	fd 85       	ldd	r31, Y+13	; 0x0d
     b88:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b8a:	ee 85       	ldd	r30, Y+14	; 0x0e
     b8c:	ff 85       	ldd	r31, Y+15	; 0x0f
     b8e:	20 83       	st	Z, r18

  _written = false;
     b90:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b92:	ec 89       	ldd	r30, Y+20	; 0x14
     b94:	fd 89       	ldd	r31, Y+21	; 0x15
     b96:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b98:	ea 89       	ldd	r30, Y+18	; 0x12
     b9a:	fb 89       	ldd	r31, Y+19	; 0x13
     b9c:	80 81       	ld	r24, Z
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ba2:	ea 89       	ldd	r30, Y+18	; 0x12
     ba4:	fb 89       	ldd	r31, Y+19	; 0x13
     ba6:	80 81       	ld	r24, Z
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     bac:	ea 89       	ldd	r30, Y+18	; 0x12
     bae:	fb 89       	ldd	r31, Y+19	; 0x13
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     bb6:	ea 89       	ldd	r30, Y+18	; 0x12
     bb8:	fb 89       	ldd	r31, Y+19	; 0x13
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7d       	andi	r24, 0xDF	; 223
     bbe:	80 83       	st	Z, r24
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	08 95       	ret

00000bd0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	08 95       	ret

00000bd6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bd6:	08 95       	ret

00000bd8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	2f 93       	push	r18
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     bec:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <Serial+0x10>
     bf0:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <Serial+0x11>
     bf4:	80 81       	ld	r24, Z
     bf6:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <Serial+0x16>
     bfa:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <Serial+0x17>
     bfe:	82 fd       	sbrc	r24, 2
     c00:	12 c0       	rjmp	.+36     	; 0xc26 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c02:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c04:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <Serial+0x19>
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c0c:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <Serial+0x1a>
     c10:	82 17       	cp	r24, r18
     c12:	51 f0       	breq	.+20     	; 0xc28 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     c14:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <Serial+0x19>
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ec 56       	subi	r30, 0x6C	; 108
     c1c:	fd 4f       	sbci	r31, 0xFD	; 253
     c1e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     c20:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Serial+0x19>
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c26:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c5e:	84 e9       	ldi	r24, 0x94	; 148
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c88:	84 e9       	ldi	r24, 0x94	; 148
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN14HardwareSerial9availableEv>
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	89 2b       	or	r24, r25
     c94:	09 f4       	brne	.+2      	; 0xc98 <_Z17Serial0_availablev+0x10>
     c96:	20 e0       	ldi	r18, 0x00	; 0
}
     c98:	82 2f       	mov	r24, r18
     c9a:	08 95       	ret

00000c9c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c9c:	e4 e9       	ldi	r30, 0x94	; 148
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ca4:	88 ee       	ldi	r24, 0xE8	; 232
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	84 83       	std	Z+4, r24	; 0x04
     cae:	95 83       	std	Z+5, r25	; 0x05
     cb0:	a6 83       	std	Z+6, r26	; 0x06
     cb2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     cb4:	83 e2       	ldi	r24, 0x23	; 35
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
     cbc:	85 ec       	ldi	r24, 0xC5	; 197
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	95 87       	std	Z+13, r25	; 0x0d
     cc2:	84 87       	std	Z+12, r24	; 0x0c
     cc4:	84 ec       	ldi	r24, 0xC4	; 196
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	97 87       	std	Z+15, r25	; 0x0f
     cca:	86 87       	std	Z+14, r24	; 0x0e
     ccc:	80 ec       	ldi	r24, 0xC0	; 192
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	91 8b       	std	Z+17, r25	; 0x11
     cd2:	80 8b       	std	Z+16, r24	; 0x10
     cd4:	81 ec       	ldi	r24, 0xC1	; 193
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	93 8b       	std	Z+19, r25	; 0x13
     cda:	82 8b       	std	Z+18, r24	; 0x12
     cdc:	82 ec       	ldi	r24, 0xC2	; 194
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	95 8b       	std	Z+21, r25	; 0x15
     ce2:	84 8b       	std	Z+20, r24	; 0x14
     ce4:	86 ec       	ldi	r24, 0xC6	; 198
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	97 8b       	std	Z+23, r25	; 0x17
     cea:	86 8b       	std	Z+22, r24	; 0x16
     cec:	11 8e       	std	Z+25, r1	; 0x19
     cee:	12 8e       	std	Z+26, r1	; 0x1a
     cf0:	13 8e       	std	Z+27, r1	; 0x1b
     cf2:	14 8e       	std	Z+28, r1	; 0x1c
     cf4:	08 95       	ret

00000cf6 <initVariant>:
     cf6:	08 95       	ret

00000cf8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     cf8:	0e 94 21 08 	call	0x1042	; 0x1042 <init>

	initVariant();
     cfc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d00:	0e 94 26 03 	call	0x64c	; 0x64c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d04:	c4 ee       	ldi	r28, 0xE4	; 228
     d06:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     d08:	0e 94 ba 03 	call	0x774	; 0x774 <loop>
		if (serialEventRun) serialEventRun();
     d0c:	20 97       	sbiw	r28, 0x00	; 0
     d0e:	e1 f3       	breq	.-8      	; 0xd08 <main+0x10>
     d10:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_Z14serialEventRunv>
     d14:	f9 cf       	rjmp	.-14     	; 0xd08 <main+0x10>

00000d16 <_Znwj>:
     d16:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <malloc>

00000d1a <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	6c 01       	movw	r12, r24
     d2c:	7a 01       	movw	r14, r20
     d2e:	8b 01       	movw	r16, r22
     d30:	c0 e0       	ldi	r28, 0x00	; 0
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	ce 15       	cp	r28, r14
     d36:	df 05       	cpc	r29, r15
     d38:	81 f0       	breq	.+32     	; 0xd5a <_ZN5Print5writeEPKhj+0x40>
     d3a:	d8 01       	movw	r26, r16
     d3c:	6d 91       	ld	r22, X+
     d3e:	8d 01       	movw	r16, r26
     d40:	d6 01       	movw	r26, r12
     d42:	ed 91       	ld	r30, X+
     d44:	fc 91       	ld	r31, X
     d46:	01 90       	ld	r0, Z+
     d48:	f0 81       	ld	r31, Z
     d4a:	e0 2d       	mov	r30, r0
     d4c:	c6 01       	movw	r24, r12
     d4e:	09 95       	icall
     d50:	89 2b       	or	r24, r25
     d52:	11 f0       	breq	.+4      	; 0xd58 <_ZN5Print5writeEPKhj+0x3e>
     d54:	21 96       	adiw	r28, 0x01	; 1
     d56:	ee cf       	rjmp	.-36     	; 0xd34 <_ZN5Print5writeEPKhj+0x1a>
     d58:	7e 01       	movw	r14, r28
     d5a:	c7 01       	movw	r24, r14
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <_ZN5Print5writeEPKc>:
     d6e:	61 15       	cp	r22, r1
     d70:	71 05       	cpc	r23, r1
     d72:	79 f0       	breq	.+30     	; 0xd92 <_ZN5Print5writeEPKc+0x24>
     d74:	fb 01       	movw	r30, r22
     d76:	01 90       	ld	r0, Z+
     d78:	00 20       	and	r0, r0
     d7a:	e9 f7       	brne	.-6      	; 0xd76 <_ZN5Print5writeEPKc+0x8>
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	af 01       	movw	r20, r30
     d80:	46 1b       	sub	r20, r22
     d82:	57 0b       	sbc	r21, r23
     d84:	dc 01       	movw	r26, r24
     d86:	ed 91       	ld	r30, X+
     d88:	fc 91       	ld	r31, X
     d8a:	02 80       	ldd	r0, Z+2	; 0x02
     d8c:	f3 81       	ldd	r31, Z+3	; 0x03
     d8e:	e0 2d       	mov	r30, r0
     d90:	09 94       	ijmp
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret

00000d98 <_ZN5Print5printERK6String>:
     d98:	db 01       	movw	r26, r22
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	4d 91       	ld	r20, X+
     d9e:	5c 91       	ld	r21, X
     da0:	15 97       	sbiw	r26, 0x05	; 5
     da2:	6d 91       	ld	r22, X+
     da4:	7c 91       	ld	r23, X
     da6:	dc 01       	movw	r26, r24
     da8:	ed 91       	ld	r30, X+
     daa:	fc 91       	ld	r31, X
     dac:	02 80       	ldd	r0, Z+2	; 0x02
     dae:	f3 81       	ldd	r31, Z+3	; 0x03
     db0:	e0 2d       	mov	r30, r0
     db2:	09 94       	ijmp

00000db4 <_ZN5Print7printlnEv>:
     db4:	61 e3       	ldi	r22, 0x31	; 49
     db6:	72 e0       	ldi	r23, 0x02	; 2
     db8:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_ZN5Print5writeEPKc>

00000dbc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     dc6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print5writeEPKc>
     dca:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     dcc:	ce 01       	movw	r24, r28
     dce:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN5Print7printlnEv>
  return n;
}
     dd2:	80 0f       	add	r24, r16
     dd4:	91 1f       	adc	r25, r17
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     de0:	08 95       	ret

00000de2 <attachInterrupt>:
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	e8 f4       	brcc	.+58     	; 0xe20 <attachInterrupt+0x3e>
     de6:	e8 2f       	mov	r30, r24
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ea 5f       	subi	r30, 0xFA	; 250
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	71 83       	std	Z+1, r23	; 0x01
     df4:	60 83       	st	Z, r22
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	41 f0       	breq	.+16     	; 0xe0a <attachInterrupt+0x28>
     dfa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     dfe:	8c 7f       	andi	r24, 0xFC	; 252
     e00:	48 2b       	or	r20, r24
     e02:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     e06:	e8 9a       	sbi	0x1d, 0	; 29
     e08:	08 95       	ret
     e0a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     e0e:	83 7f       	andi	r24, 0xF3	; 243
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	44 0f       	add	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	48 2b       	or	r20, r24
     e1a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     e1e:	e9 9a       	sbi	0x1d, 1	; 29
     e20:	08 95       	ret

00000e22 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
     e48:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
     e4c:	09 95       	icall
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	bf 91       	pop	r27
     e54:	af 91       	pop	r26
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	7f 91       	pop	r23
     e5c:	6f 91       	pop	r22
     e5e:	5f 91       	pop	r21
     e60:	4f 91       	pop	r20
     e62:	3f 91       	pop	r19
     e64:	2f 91       	pop	r18
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
     e92:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
     e96:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
     e9a:	09 95       	icall
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     ed4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <timer0_millis>
     ed8:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <timer0_millis+0x1>
     edc:	a0 91 34 03 	lds	r26, 0x0334	; 0x800334 <timer0_millis+0x2>
     ee0:	b0 91 35 03 	lds	r27, 0x0335	; 0x800335 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     ee4:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     ee8:	23 e0       	ldi	r18, 0x03	; 3
     eea:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     eec:	2d 37       	cpi	r18, 0x7D	; 125
     eee:	20 f4       	brcc	.+8      	; 0xef8 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	a1 1d       	adc	r26, r1
     ef4:	b1 1d       	adc	r27, r1
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     ef8:	26 e8       	ldi	r18, 0x86	; 134
     efa:	23 0f       	add	r18, r19
		m += 1;
     efc:	02 96       	adiw	r24, 0x02	; 2
     efe:	a1 1d       	adc	r26, r1
     f00:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f02:	20 93 31 03 	sts	0x0331, r18	; 0x800331 <timer0_fract>
	timer0_millis = m;
     f06:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <timer0_millis>
     f0a:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <timer0_millis+0x1>
     f0e:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <timer0_millis+0x2>
     f12:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <timer0_millis+0x3>
	timer0_overflow_count++;
     f16:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timer0_overflow_count>
     f1a:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timer0_overflow_count+0x1>
     f1e:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <timer0_overflow_count+0x2>
     f22:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <timer0_overflow_count+0x3>
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	a1 1d       	adc	r26, r1
     f2a:	b1 1d       	adc	r27, r1
     f2c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timer0_overflow_count>
     f30:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timer0_overflow_count+0x1>
     f34:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <timer0_overflow_count+0x2>
     f38:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <timer0_overflow_count+0x3>
}
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f52:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f54:	f8 94       	cli
	m = timer0_millis;
     f56:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <timer0_millis>
     f5a:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <timer0_millis+0x1>
     f5e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_millis+0x2>
     f62:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_millis+0x3>
	SREG = oldSREG;
     f66:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f68:	08 95       	ret

00000f6a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f6a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f6c:	f8 94       	cli
	m = timer0_overflow_count;
     f6e:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timer0_overflow_count>
     f72:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timer0_overflow_count+0x1>
     f76:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <timer0_overflow_count+0x2>
     f7a:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     f7e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f80:	a8 9b       	sbis	0x15, 0	; 21
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <micros+0x24>
     f84:	2f 3f       	cpi	r18, 0xFF	; 255
     f86:	19 f0       	breq	.+6      	; 0xf8e <micros+0x24>
		m++;
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	a1 1d       	adc	r26, r1
     f8c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f8e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f90:	ba 2f       	mov	r27, r26
     f92:	a9 2f       	mov	r26, r25
     f94:	98 2f       	mov	r25, r24
     f96:	88 27       	eor	r24, r24
     f98:	82 0f       	add	r24, r18
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	b1 1d       	adc	r27, r1
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	42 e0       	ldi	r20, 0x02	; 2
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	4a 95       	dec	r20
     fb0:	d1 f7       	brne	.-12     	; 0xfa6 <micros+0x3c>
}
     fb2:	08 95       	ret

00000fb4 <delay>:

void delay(unsigned long ms)
{
     fb4:	8f 92       	push	r8
     fb6:	9f 92       	push	r9
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     fc8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <micros>
     fcc:	4b 01       	movw	r8, r22
     fce:	5c 01       	movw	r10, r24

	while (ms > 0) {
     fd0:	c1 14       	cp	r12, r1
     fd2:	d1 04       	cpc	r13, r1
     fd4:	e1 04       	cpc	r14, r1
     fd6:	f1 04       	cpc	r15, r1
     fd8:	01 f1       	breq	.+64     	; 0x101a <delay+0x66>
		yield();
     fda:	0e 94 7e 10 	call	0x20fc	; 0x20fc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     fde:	0e 94 b5 07 	call	0xf6a	; 0xf6a <micros>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	88 19       	sub	r24, r8
     fe8:	99 09       	sbc	r25, r9
     fea:	aa 09       	sbc	r26, r10
     fec:	bb 09       	sbc	r27, r11
     fee:	88 3e       	cpi	r24, 0xE8	; 232
     ff0:	93 40       	sbci	r25, 0x03	; 3
     ff2:	a1 05       	cpc	r26, r1
     ff4:	b1 05       	cpc	r27, r1
     ff6:	60 f3       	brcs	.-40     	; 0xfd0 <delay+0x1c>
			ms--;
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	c2 1a       	sub	r12, r18
     ffc:	d1 08       	sbc	r13, r1
     ffe:	e1 08       	sbc	r14, r1
    1000:	f1 08       	sbc	r15, r1
			start += 1000;
    1002:	88 ee       	ldi	r24, 0xE8	; 232
    1004:	88 0e       	add	r8, r24
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	98 1e       	adc	r9, r24
    100a:	a1 1c       	adc	r10, r1
    100c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    100e:	c1 14       	cp	r12, r1
    1010:	d1 04       	cpc	r13, r1
    1012:	e1 04       	cpc	r14, r1
    1014:	f1 04       	cpc	r15, r1
    1016:	19 f7       	brne	.-58     	; 0xfde <delay+0x2a>
    1018:	db cf       	rjmp	.-74     	; 0xfd0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	08 95       	ret

0000102c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	38 f0       	brcs	.+14     	; 0x1040 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    103a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <delayMicroseconds+0x10>
    1040:	08 95       	ret

00001042 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1042:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1044:	84 b5       	in	r24, 0x24	; 36
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    104a:	84 b5       	in	r24, 0x24	; 36
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1050:	85 b5       	in	r24, 0x25	; 37
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1056:	85 b5       	in	r24, 0x25	; 37
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    105c:	ee e6       	ldi	r30, 0x6E	; 110
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1066:	e1 e8       	ldi	r30, 0x81	; 129
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1072:	80 81       	ld	r24, Z
    1074:	81 60       	ori	r24, 0x01	; 1
    1076:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1082:	e1 eb       	ldi	r30, 0xB1	; 177
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	84 60       	ori	r24, 0x04	; 4
    108a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    108c:	e0 eb       	ldi	r30, 0xB0	; 176
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1096:	ea e7       	ldi	r30, 0x7A	; 122
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	84 60       	ori	r24, 0x04	; 4
    109e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10a6:	80 81       	ld	r24, Z
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10ac:	80 81       	ld	r24, Z
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10b6:	08 95       	ret

000010b8 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    10b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <analog_reference>
    10bc:	08 95       	ret

000010be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <turnOffPWM+0x24>
    10c2:	28 f4       	brcc	.+10     	; 0x10ce <turnOffPWM+0x10>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	99 f0       	breq	.+38     	; 0x10ee <turnOffPWM+0x30>
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	a1 f0       	breq	.+40     	; 0x10f4 <turnOffPWM+0x36>
    10cc:	08 95       	ret
    10ce:	87 30       	cpi	r24, 0x07	; 7
    10d0:	a9 f0       	breq	.+42     	; 0x10fc <turnOffPWM+0x3e>
    10d2:	88 30       	cpi	r24, 0x08	; 8
    10d4:	b9 f0       	breq	.+46     	; 0x1104 <turnOffPWM+0x46>
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	d1 f4       	brne	.+52     	; 0x110e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10de:	8f 7d       	andi	r24, 0xDF	; 223
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    10e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10e6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10ec:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10ee:	84 b5       	in	r24, 0x24	; 36
    10f0:	8f 77       	andi	r24, 0x7F	; 127
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10f4:	84 b5       	in	r24, 0x24	; 36
    10f6:	8f 7d       	andi	r24, 0xDF	; 223
    10f8:	84 bd       	out	0x24, r24	; 36
    10fa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1100:	8f 77       	andi	r24, 0x7F	; 127
    1102:	03 c0       	rjmp	.+6      	; 0x110a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1104:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    110e:	08 95       	ret

00001110 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e4 58       	subi	r30, 0x84	; 132
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    111e:	fc 01       	movw	r30, r24
    1120:	e0 57       	subi	r30, 0x70	; 112
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1126:	88 23       	and	r24, r24
    1128:	61 f1       	breq	.+88     	; 0x1182 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	fc 01       	movw	r30, r24
    1132:	e2 55       	subi	r30, 0x52	; 82
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	c5 91       	lpm	r28, Z+
    1138:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    113a:	fc 01       	movw	r30, r24
    113c:	ec 55       	subi	r30, 0x5C	; 92
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	a5 91       	lpm	r26, Z+
    1142:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1144:	61 11       	cpse	r22, r1
    1146:	09 c0       	rjmp	.+18     	; 0x115a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1148:	9f b7       	in	r25, 0x3f	; 63
                cli();
    114a:	f8 94       	cli
		*reg &= ~bit;
    114c:	88 81       	ld	r24, Y
    114e:	20 95       	com	r18
    1150:	82 23       	and	r24, r18
    1152:	88 83       	st	Y, r24
		*out &= ~bit;
    1154:	ec 91       	ld	r30, X
    1156:	2e 23       	and	r18, r30
    1158:	0b c0       	rjmp	.+22     	; 0x1170 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    115a:	62 30       	cpi	r22, 0x02	; 2
    115c:	61 f4       	brne	.+24     	; 0x1176 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    115e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1160:	f8 94       	cli
		*reg &= ~bit;
    1162:	88 81       	ld	r24, Y
    1164:	32 2f       	mov	r19, r18
    1166:	30 95       	com	r19
    1168:	83 23       	and	r24, r19
    116a:	88 83       	st	Y, r24
		*out |= bit;
    116c:	ec 91       	ld	r30, X
    116e:	2e 2b       	or	r18, r30
    1170:	2c 93       	st	X, r18
		SREG = oldSREG;
    1172:	9f bf       	out	0x3f, r25	; 63
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1176:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1178:	f8 94       	cli
		*reg |= bit;
    117a:	e8 81       	ld	r30, Y
    117c:	2e 2b       	or	r18, r30
    117e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1180:	8f bf       	out	0x3f, r24	; 63
	}
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	f9 01       	movw	r30, r18
    1194:	e8 59       	subi	r30, 0x98	; 152
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    119a:	f9 01       	movw	r30, r18
    119c:	e4 58       	subi	r30, 0x84	; 132
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11a2:	f9 01       	movw	r30, r18
    11a4:	e0 57       	subi	r30, 0x70	; 112
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11aa:	cc 23       	and	r28, r28
    11ac:	c1 f0       	breq	.+48     	; 0x11de <digitalWrite+0x56>
    11ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11b0:	81 11       	cpse	r24, r1
    11b2:	0e 94 5f 08 	call	0x10be	; 0x10be <turnOffPWM>

	out = portOutputRegister(port);
    11b6:	ec 2f       	mov	r30, r28
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ec 55       	subi	r30, 0x5C	; 92
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	a5 91       	lpm	r26, Z+
    11c4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11c8:	f8 94       	cli

	if (val == LOW) {
    11ca:	11 11       	cpse	r17, r1
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <digitalWrite+0x4e>
		*out &= ~bit;
    11ce:	8c 91       	ld	r24, X
    11d0:	d0 95       	com	r29
    11d2:	d8 23       	and	r29, r24
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <digitalWrite+0x52>
	} else {
		*out |= bit;
    11d6:	ec 91       	ld	r30, X
    11d8:	de 2b       	or	r29, r30
    11da:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11dc:	9f bf       	out	0x3f, r25	; 63
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	08 95       	ret

000011e6 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    11e6:	08 95       	ret

000011e8 <_ZN6StringD1Ev>:
    11e8:	fc 01       	movw	r30, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <free>

000011f2 <_ZN6String10invalidateEv>:
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	88 81       	ld	r24, Y
    11fa:	99 81       	ldd	r25, Y+1	; 0x01
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	11 f0       	breq	.+4      	; 0x1204 <_ZN6String10invalidateEv+0x12>
    1200:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <free>
    1204:	19 82       	std	Y+1, r1	; 0x01
    1206:	18 82       	st	Y, r1
    1208:	1d 82       	std	Y+5, r1	; 0x05
    120a:	1c 82       	std	Y+4, r1	; 0x04
    120c:	1b 82       	std	Y+3, r1	; 0x03
    120e:	1a 82       	std	Y+2, r1	; 0x02
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_ZN6String12changeBufferEj>:
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	8b 01       	movw	r16, r22
    1222:	6f 5f       	subi	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	88 81       	ld	r24, Y
    1228:	99 81       	ldd	r25, Y+1	; 0x01
    122a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <realloc>
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	31 f0       	breq	.+12     	; 0x123e <_ZN6String12changeBufferEj+0x28>
    1232:	99 83       	std	Y+1, r25	; 0x01
    1234:	88 83       	st	Y, r24
    1236:	1b 83       	std	Y+3, r17	; 0x03
    1238:	0a 83       	std	Y+2, r16	; 0x02
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <_ZN6String12changeBufferEj+0x2a>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <_ZN6String7reserveEj>:
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
    1250:	88 81       	ld	r24, Y
    1252:	99 81       	ldd	r25, Y+1	; 0x01
    1254:	89 2b       	or	r24, r25
    1256:	29 f0       	breq	.+10     	; 0x1262 <_ZN6String7reserveEj+0x18>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	86 17       	cp	r24, r22
    125e:	97 07       	cpc	r25, r23
    1260:	60 f4       	brcc	.+24     	; 0x127a <_ZN6String7reserveEj+0x30>
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN6String12changeBufferEj>
    1268:	88 23       	and	r24, r24
    126a:	41 f0       	breq	.+16     	; 0x127c <_ZN6String7reserveEj+0x32>
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	89 2b       	or	r24, r25
    1272:	19 f4       	brne	.+6      	; 0x127a <_ZN6String7reserveEj+0x30>
    1274:	e8 81       	ld	r30, Y
    1276:	f9 81       	ldd	r31, Y+1	; 0x01
    1278:	10 82       	st	Z, r1
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <_ZN6String4copyEPKcj>:
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	7b 01       	movw	r14, r22
    1292:	8a 01       	movw	r16, r20
    1294:	ba 01       	movw	r22, r20
    1296:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN6String7reserveEj>
    129a:	81 11       	cpse	r24, r1
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <_ZN6String4copyEPKcj+0x24>
    129e:	ce 01       	movw	r24, r28
    12a0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN6String10invalidateEv>
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <_ZN6String4copyEPKcj+0x32>
    12a6:	1d 83       	std	Y+5, r17	; 0x05
    12a8:	0c 83       	std	Y+4, r16	; 0x04
    12aa:	b7 01       	movw	r22, r14
    12ac:	88 81       	ld	r24, Y
    12ae:	99 81       	ldd	r25, Y+1	; 0x01
    12b0:	0e 94 c2 14 	call	0x2984	; 0x2984 <strcpy>
    12b4:	ce 01       	movw	r24, r28
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	08 95       	ret

000012c4 <_ZN6StringC1EPKc>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	11 82       	std	Z+1, r1	; 0x01
    12c8:	10 82       	st	Z, r1
    12ca:	13 82       	std	Z+3, r1	; 0x03
    12cc:	12 82       	std	Z+2, r1	; 0x02
    12ce:	15 82       	std	Z+5, r1	; 0x05
    12d0:	14 82       	std	Z+4, r1	; 0x04
    12d2:	61 15       	cp	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	51 f0       	breq	.+20     	; 0x12ec <_ZN6StringC1EPKc+0x28>
    12d8:	fb 01       	movw	r30, r22
    12da:	01 90       	ld	r0, Z+
    12dc:	00 20       	and	r0, r0
    12de:	e9 f7       	brne	.-6      	; 0x12da <_ZN6StringC1EPKc+0x16>
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	af 01       	movw	r20, r30
    12e4:	46 1b       	sub	r20, r22
    12e6:	57 0b       	sbc	r21, r23
    12e8:	0c 94 41 09 	jmp	0x1282	; 0x1282 <_ZN6String4copyEPKcj>
    12ec:	08 95       	ret

000012ee <_ZN6String4moveERS_>:
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	8c 01       	movw	r16, r24
    12f8:	eb 01       	movw	r28, r22
    12fa:	fc 01       	movw	r30, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	d1 f0       	breq	.+52     	; 0x1338 <_ZN6String4moveERS_+0x4a>
    1304:	68 81       	ld	r22, Y
    1306:	79 81       	ldd	r23, Y+1	; 0x01
    1308:	61 15       	cp	r22, r1
    130a:	71 05       	cpc	r23, r1
    130c:	99 f0       	breq	.+38     	; 0x1334 <_ZN6String4moveERS_+0x46>
    130e:	23 ef       	ldi	r18, 0xF3	; 243
    1310:	38 e0       	ldi	r19, 0x08	; 8
    1312:	23 2b       	or	r18, r19
    1314:	79 f0       	breq	.+30     	; 0x1334 <_ZN6String4moveERS_+0x46>
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	3d 81       	ldd	r19, Y+5	; 0x05
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	40 f0       	brcs	.+16     	; 0x1334 <_ZN6String4moveERS_+0x46>
    1324:	0e 94 c2 14 	call	0x2984	; 0x2984 <strcpy>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	f8 01       	movw	r30, r16
    132e:	95 83       	std	Z+5, r25	; 0x05
    1330:	84 83       	std	Z+4, r24	; 0x04
    1332:	13 c0       	rjmp	.+38     	; 0x135a <_ZN6String4moveERS_+0x6c>
    1334:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <free>
    1338:	88 81       	ld	r24, Y
    133a:	99 81       	ldd	r25, Y+1	; 0x01
    133c:	f8 01       	movw	r30, r16
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	93 83       	std	Z+3, r25	; 0x03
    1348:	82 83       	std	Z+2, r24	; 0x02
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	95 83       	std	Z+5, r25	; 0x05
    1350:	84 83       	std	Z+4, r24	; 0x04
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	18 82       	st	Y, r1
    1356:	1b 82       	std	Y+3, r1	; 0x03
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	1d 82       	std	Y+5, r1	; 0x05
    135c:	1c 82       	std	Y+4, r1	; 0x04
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <_ZN6StringaSERKS_>:
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
    136e:	fb 01       	movw	r30, r22
    1370:	86 17       	cp	r24, r22
    1372:	97 07       	cpc	r25, r23
    1374:	61 f0       	breq	.+24     	; 0x138e <_ZN6StringaSERKS_+0x26>
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	61 15       	cp	r22, r1
    137c:	71 05       	cpc	r23, r1
    137e:	29 f0       	breq	.+10     	; 0x138a <_ZN6StringaSERKS_+0x22>
    1380:	44 81       	ldd	r20, Z+4	; 0x04
    1382:	55 81       	ldd	r21, Z+5	; 0x05
    1384:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN6String4copyEPKcj>
    1388:	02 c0       	rjmp	.+4      	; 0x138e <_ZN6StringaSERKS_+0x26>
    138a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN6String10invalidateEv>
    138e:	ce 01       	movw	r24, r28
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <_ZN6StringC1ERKS_>:
    1396:	fc 01       	movw	r30, r24
    1398:	11 82       	std	Z+1, r1	; 0x01
    139a:	10 82       	st	Z, r1
    139c:	13 82       	std	Z+3, r1	; 0x03
    139e:	12 82       	std	Z+2, r1	; 0x02
    13a0:	15 82       	std	Z+5, r1	; 0x05
    13a2:	14 82       	std	Z+4, r1	; 0x04
    13a4:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <_ZN6StringaSERKS_>

000013a8 <_ZN6StringaSEOS_>:
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	86 17       	cp	r24, r22
    13b0:	97 07       	cpc	r25, r23
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <_ZN6StringaSEOS_+0x10>
    13b4:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN6String4moveERS_>
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN6StringaSEPKc>:
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
    13c6:	61 15       	cp	r22, r1
    13c8:	71 05       	cpc	r23, r1
    13ca:	59 f0       	breq	.+22     	; 0x13e2 <_ZN6StringaSEPKc+0x22>
    13cc:	fb 01       	movw	r30, r22
    13ce:	01 90       	ld	r0, Z+
    13d0:	00 20       	and	r0, r0
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <_ZN6StringaSEPKc+0xe>
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	af 01       	movw	r20, r30
    13d8:	46 1b       	sub	r20, r22
    13da:	57 0b       	sbc	r21, r23
    13dc:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN6String4copyEPKcj>
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <_ZN6StringaSEPKc+0x26>
    13e2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN6String10invalidateEv>
    13e6:	ce 01       	movw	r24, r28
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	7c 01       	movw	r14, r24
    1402:	6b 01       	movw	r12, r22
    1404:	8a 01       	movw	r16, r20
    1406:	e9 01       	movw	r28, r18
	if (left > right) {
    1408:	24 17       	cp	r18, r20
    140a:	35 07       	cpc	r19, r21
    140c:	20 f4       	brcc	.+8      	; 0x1416 <_ZNK6String9substringEjj+0x28>
    140e:	81 2f       	mov	r24, r17
    1410:	89 01       	movw	r16, r18
    1412:	c4 2f       	mov	r28, r20
    1414:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1416:	63 e3       	ldi	r22, 0x33	; 51
    1418:	72 e0       	ldi	r23, 0x02	; 2
    141a:	c7 01       	movw	r24, r14
    141c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    1420:	d6 01       	movw	r26, r12
    1422:	14 96       	adiw	r26, 0x04	; 4
    1424:	8d 91       	ld	r24, X+
    1426:	9c 91       	ld	r25, X
    1428:	15 97       	sbiw	r26, 0x05	; 5
    142a:	08 17       	cp	r16, r24
    142c:	19 07       	cpc	r17, r25
    142e:	c8 f4       	brcc	.+50     	; 0x1462 <_ZNK6String9substringEjj+0x74>
    1430:	8c 17       	cp	r24, r28
    1432:	9d 07       	cpc	r25, r29
    1434:	08 f4       	brcc	.+2      	; 0x1438 <_ZNK6String9substringEjj+0x4a>
    1436:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1438:	d6 01       	movw	r26, r12
    143a:	ed 91       	ld	r30, X+
    143c:	fc 91       	ld	r31, X
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	ec 0f       	add	r30, r28
    1442:	fd 1f       	adc	r31, r29
    1444:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1446:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1448:	6d 91       	ld	r22, X+
    144a:	7c 91       	ld	r23, X
    144c:	60 0f       	add	r22, r16
    144e:	71 1f       	adc	r23, r17
    1450:	c7 01       	movw	r24, r14
    1452:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1456:	d6 01       	movw	r26, r12
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	ec 0f       	add	r30, r28
    145e:	fd 1f       	adc	r31, r29
    1460:	b0 82       	st	Z, r11
	return out;
}
    1462:	c7 01       	movw	r24, r14
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	08 95       	ret

00001478 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1478:	fc 01       	movw	r30, r24
    147a:	13 82       	std	Z+3, r1	; 0x03
    147c:	12 82       	std	Z+2, r1	; 0x02
    147e:	84 e4       	ldi	r24, 0x44	; 68
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	12 8e       	std	Z+26, r1	; 0x1a
    1488:	14 8a       	std	Z+20, r1	; 0x14
    148a:	8f e0       	ldi	r24, 0x0F	; 15
    148c:	84 83       	std	Z+4, r24	; 0x04
    148e:	8e e0       	ldi	r24, 0x0E	; 14
    1490:	85 83       	std	Z+5, r24	; 0x05
    1492:	8d e0       	ldi	r24, 0x0D	; 13
    1494:	86 83       	std	Z+6, r24	; 0x06
    1496:	8c e0       	ldi	r24, 0x0C	; 12
    1498:	87 83       	std	Z+7, r24	; 0x07
    149a:	8b e0       	ldi	r24, 0x0B	; 11
    149c:	80 87       	std	Z+8, r24	; 0x08
    149e:	8a e0       	ldi	r24, 0x0A	; 10
    14a0:	81 87       	std	Z+9, r24	; 0x09
    14a2:	89 e0       	ldi	r24, 0x09	; 9
    14a4:	82 87       	std	Z+10, r24	; 0x0a
    14a6:	17 86       	std	Z+15, r1	; 0x0f
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 8b       	std	Z+16, r24	; 0x10
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	81 8b       	std	Z+17, r24	; 0x11
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	82 8b       	std	Z+18, r24	; 0x12
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	83 8b       	std	Z+19, r24	; 0x13
    14b8:	08 95       	ret

000014ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	96 2f       	mov	r25, r22
    14be:	82 8d       	ldd	r24, Z+26	; 0x1a
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	21 f0       	breq	.+8      	; 0x14cc <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    14c4:	cf 01       	movw	r24, r30
    14c6:	4b 96       	adiw	r24, 0x1b	; 27
    14c8:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    14cc:	64 2f       	mov	r22, r20
    14ce:	89 2f       	mov	r24, r25
    14d0:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <digitalWrite>

000014d4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	d6 2f       	mov	r29, r22
    14de:	8c 01       	movw	r16, r24
    14e0:	05 5e       	subi	r16, 0xE5	; 229
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	c1 e0       	ldi	r28, 0x01	; 1
    14e6:	62 fb       	bst	r22, 2
    14e8:	44 27       	eor	r20, r20
    14ea:	40 f9       	bld	r20, 0
    14ec:	4c 27       	eor	r20, r28
    14ee:	68 e0       	ldi	r22, 0x08	; 8
    14f0:	c8 01       	movw	r24, r16
    14f2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    14f6:	d1 fb       	bst	r29, 1
    14f8:	44 27       	eor	r20, r20
    14fa:	40 f9       	bld	r20, 0
    14fc:	4c 27       	eor	r20, r28
    14fe:	67 e0       	ldi	r22, 0x07	; 7
    1500:	c8 01       	movw	r24, r16
    1502:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1506:	4d 2f       	mov	r20, r29
    1508:	41 70       	andi	r20, 0x01	; 1
    150a:	4c 27       	eor	r20, r28
    150c:	66 e0       	ldi	r22, 0x06	; 6
    150e:	c8 01       	movw	r24, r16
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_ZN17Adafruit_MCP2301712digitalWriteEhh>

0000151c <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    151c:	fc 01       	movw	r30, r24
    151e:	96 2f       	mov	r25, r22
    1520:	82 8d       	ldd	r24, Z+26	; 0x1a
    1522:	8f 3f       	cpi	r24, 0xFF	; 255
    1524:	21 f0       	breq	.+8      	; 0x152e <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1526:	cf 01       	movw	r24, r30
    1528:	4b 96       	adiw	r24, 0x1b	; 27
    152a:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    152e:	64 2f       	mov	r22, r20
    1530:	89 2f       	mov	r24, r25
    1532:	0c 94 88 08 	jmp	0x1110	; 0x1110 <pinMode>

00001536 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	ec 01       	movw	r28, r24
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	6e 81       	ldd	r22, Y+6	; 0x06
    1540:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	6e 81       	ldd	r22, Y+6	; 0x06
    1550:	ce 01       	movw	r24, r28
    1552:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	6e 81       	ldd	r22, Y+6	; 0x06
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1568:	84 e6       	ldi	r24, 0x64	; 100
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	0c 94 16 08 	jmp	0x102c	; 0x102c <delayMicroseconds>

00001574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	8c 01       	movw	r16, r24
    158a:	fc 01       	movw	r30, r24
    158c:	82 8d       	ldd	r24, Z+26	; 0x1a
    158e:	98 01       	movw	r18, r16
    1590:	29 5f       	subi	r18, 0xF9	; 249
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	79 01       	movw	r14, r18
    1596:	c6 2f       	mov	r28, r22
    1598:	d0 e0       	ldi	r29, 0x00	; 0
    159a:	8f 3f       	cpi	r24, 0xFF	; 255
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    159e:	73 c0       	rjmp	.+230    	; 0x1686 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    15a0:	68 01       	movw	r12, r16
    15a2:	3b e1       	ldi	r19, 0x1B	; 27
    15a4:	c3 0e       	add	r12, r19
    15a6:	d1 1c       	adc	r13, r1
    15a8:	c6 01       	movw	r24, r12
    15aa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    15ae:	f7 01       	movw	r30, r14
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	a1 e0       	ldi	r26, 0x01	; 1
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	b1 90       	ld	r11, Z+
    15ba:	ee 24       	eor	r14, r14
    15bc:	e3 94       	inc	r14
    15be:	f1 2c       	mov	r15, r1
    15c0:	bd 01       	movw	r22, r26
    15c2:	0b 2c       	mov	r0, r11
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    15ce:	60 95       	com	r22
    15d0:	70 95       	com	r23
    15d2:	86 23       	and	r24, r22
    15d4:	97 23       	and	r25, r23
    15d6:	9e 01       	movw	r18, r28
    15d8:	04 2e       	mov	r0, r20
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    15dc:	35 95       	asr	r19
    15de:	27 95       	ror	r18
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    15e4:	21 70       	andi	r18, 0x01	; 1
    15e6:	33 27       	eor	r19, r19
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	ba 94       	dec	r11
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    15f2:	82 2b       	or	r24, r18
    15f4:	93 2b       	or	r25, r19
    15f6:	4f 5f       	subi	r20, 0xFF	; 255
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	44 30       	cpi	r20, 0x04	; 4
    15fc:	51 05       	cpc	r21, r1
    15fe:	e1 f6       	brne	.-72     	; 0x15b8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    1600:	e7 01       	movw	r28, r14
    1602:	f8 01       	movw	r30, r16
    1604:	06 80       	ldd	r0, Z+6	; 0x06
    1606:	02 c0       	rjmp	.+4      	; 0x160c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1608:	cc 0f       	add	r28, r28
    160a:	dd 1f       	adc	r29, r29
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    1610:	c0 95       	com	r28
    1612:	d0 95       	com	r29
    1614:	c8 23       	and	r28, r24
    1616:	d9 23       	and	r29, r25
    1618:	be 01       	movw	r22, r28
    161a:	c6 01       	movw	r24, r12
    161c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    1628:	c7 01       	movw	r24, r14
    162a:	f8 01       	movw	r30, r16
    162c:	06 80       	ldd	r0, Z+6	; 0x06
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1638:	c8 2b       	or	r28, r24
    163a:	d9 2b       	or	r29, r25
    163c:	be 01       	movw	r22, r28
    163e:	c6 01       	movw	r24, r12
    1640:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    164c:	b7 01       	movw	r22, r14
    164e:	f8 01       	movw	r30, r16
    1650:	06 80       	ldd	r0, Z+6	; 0x06
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    165c:	60 95       	com	r22
    165e:	70 95       	com	r23
    1660:	6c 23       	and	r22, r28
    1662:	7d 23       	and	r23, r29
    1664:	c6 01       	movw	r24, r12
    1666:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    166a:	84 e6       	ldi	r24, 0x64	; 100
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	af 90       	pop	r10
    1682:	0c 94 16 08 	jmp	0x102c	; 0x102c <delayMicroseconds>
    1686:	c1 2c       	mov	r12, r1
    1688:	d1 2c       	mov	r13, r1
    168a:	57 01       	movw	r10, r14
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	f7 01       	movw	r30, r14
    1690:	61 91       	ld	r22, Z+
    1692:	7f 01       	movw	r14, r30
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    169a:	ae 01       	movw	r20, r28
    169c:	0c 2c       	mov	r0, r12
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    16a0:	55 95       	asr	r21
    16a2:	47 95       	ror	r20
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    16a8:	41 70       	andi	r20, 0x01	; 1
    16aa:	f5 01       	movw	r30, r10
    16ac:	60 81       	ld	r22, Z
    16ae:	c8 01       	movw	r24, r16
    16b0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    16b4:	ff ef       	ldi	r31, 0xFF	; 255
    16b6:	cf 1a       	sub	r12, r31
    16b8:	df 0a       	sbc	r13, r31
    16ba:	24 e0       	ldi	r18, 0x04	; 4
    16bc:	c2 16       	cp	r12, r18
    16be:	d1 04       	cpc	r13, r1
    16c0:	21 f7       	brne	.-56     	; 0x168a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    16c2:	c8 01       	movw	r24, r16
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000016dc <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    16dc:	af 92       	push	r10
    16de:	bf 92       	push	r11
    16e0:	cf 92       	push	r12
    16e2:	df 92       	push	r13
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	ec 01       	movw	r28, r24
    16f2:	5c 01       	movw	r10, r24
    16f4:	87 e0       	ldi	r24, 0x07	; 7
    16f6:	a8 0e       	add	r10, r24
    16f8:	b1 1c       	adc	r11, r1
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	e6 2e       	mov	r14, r22
    1700:	f1 2c       	mov	r15, r1
    1702:	65 01       	movw	r12, r10
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	f5 01       	movw	r30, r10
    1708:	61 91       	ld	r22, Z+
    170a:	5f 01       	movw	r10, r30
    170c:	ce 01       	movw	r24, r28
    170e:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1712:	a7 01       	movw	r20, r14
    1714:	00 2e       	mov	r0, r16
    1716:	02 c0       	rjmp	.+4      	; 0x171c <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1718:	55 95       	asr	r21
    171a:	47 95       	ror	r20
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    1720:	41 70       	andi	r20, 0x01	; 1
    1722:	f6 01       	movw	r30, r12
    1724:	60 81       	ld	r22, Z
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    172c:	0f 5f       	subi	r16, 0xFF	; 255
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	08 30       	cpi	r16, 0x08	; 8
    1732:	11 05       	cpc	r17, r1
    1734:	31 f7       	brne	.-52     	; 0x1702 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1736:	ce 01       	movw	r24, r28
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001750 <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ec 01       	movw	r28, r24
    1758:	16 2f       	mov	r17, r22
    175a:	6c 81       	ldd	r22, Y+4	; 0x04
    175c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1760:	6d 81       	ldd	r22, Y+5	; 0x05
    1762:	6f 3f       	cpi	r22, 0xFF	; 255
    1764:	21 f0       	breq	.+8      	; 0x176e <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	ce 01       	movw	r24, r28
    176a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    176e:	8c 89       	ldd	r24, Y+20	; 0x14
    1770:	61 2f       	mov	r22, r17
    1772:	84 ff       	sbrs	r24, 4
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1776:	ce 01       	movw	r24, r28
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	75 95       	asr	r23
    1788:	67 95       	ror	r22
    178a:	8a 95       	dec	r24
    178c:	e1 f7       	brne	.-8      	; 0x1786 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1794:	61 2f       	mov	r22, r17
    1796:	ce 01       	movw	r24, r28
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000017a2 <_ZN21Adafruit_RGBLCDShield7commandEh>:
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <_ZN21Adafruit_RGBLCDShield4sendEhh>

000017a8 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>
    17ae:	80 ed       	ldi	r24, 0xD0	; 208
    17b0:	97 e0       	ldi	r25, 0x07	; 7
    17b2:	0c 94 16 08 	jmp	0x102c	; 0x102c <delayMicroseconds>

000017b6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	28 97       	sbiw	r28, 0x08	; 8
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	9c 01       	movw	r18, r24
    17cc:	88 e0       	ldi	r24, 0x08	; 8
    17ce:	eb e0       	ldi	r30, 0x0B	; 11
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	de 01       	movw	r26, r28
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	8a 95       	dec	r24
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    17de:	f9 01       	movw	r30, r18
    17e0:	80 8d       	ldd	r24, Z+24	; 0x18
    17e2:	84 17       	cp	r24, r20
    17e4:	10 f4       	brcc	.+4      	; 0x17ea <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    17e6:	4f ef       	ldi	r20, 0xFF	; 255
    17e8:	48 0f       	add	r20, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	31 96       	adiw	r30, 0x01	; 1
    17ee:	e4 0f       	add	r30, r20
    17f0:	f1 1d       	adc	r31, r1
    17f2:	e4 0f       	add	r30, r20
    17f4:	f1 1d       	adc	r31, r1
    17f6:	90 81       	ld	r25, Z
    17f8:	69 0f       	add	r22, r25
    17fa:	60 68       	ori	r22, 0x80	; 128
    17fc:	c9 01       	movw	r24, r18
    17fe:	28 96       	adiw	r28, 0x08	; 8
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001812 <_ZN21Adafruit_RGBLCDShield7displayEv>:
    1812:	fc 01       	movw	r30, r24
    1814:	65 89       	ldd	r22, Z+21	; 0x15
    1816:	26 2f       	mov	r18, r22
    1818:	24 60       	ori	r18, 0x04	; 4
    181a:	25 8b       	std	Z+21, r18	; 0x15
    181c:	6c 60       	ori	r22, 0x0C	; 12
    181e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>

00001822 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ec 01       	movw	r28, r24
    183c:	d4 2e       	mov	r13, r20
    183e:	c2 2e       	mov	r12, r18
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	8f 3f       	cpi	r24, 0xFF	; 255
    1844:	41 f4       	brne	.+16     	; 0x1856 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8d 15       	cp	r24, r13
    184a:	08 f0       	brcs	.+2      	; 0x184e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    184c:	5e c0       	rjmp	.+188    	; 0x190a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    184e:	8c 89       	ldd	r24, Y+20	; 0x14
    1850:	88 60       	ori	r24, 0x08	; 8
    1852:	8c 8b       	std	Y+20, r24	; 0x14
    1854:	5a c0       	rjmp	.+180    	; 0x190a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1856:	8a e3       	ldi	r24, 0x3A	; 58
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <_ZN7TwoWire5beginEv>
    185e:	8e 01       	movw	r16, r28
    1860:	05 5e       	subi	r16, 0xE5	; 229
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	c8 01       	movw	r24, r16
    1866:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN17Adafruit_MCP230175beginEv>
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	68 e0       	ldi	r22, 0x08	; 8
    186e:	c8 01       	movw	r24, r16
    1870:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	66 e0       	ldi	r22, 0x06	; 6
    1878:	c8 01       	movw	r24, r16
    187a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	67 e0       	ldi	r22, 0x07	; 7
    1882:	c8 01       	movw	r24, r16
    1884:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    1890:	6d 81       	ldd	r22, Y+5	; 0x05
    1892:	66 23       	and	r22, r22
    1894:	21 f0       	breq	.+8      	; 0x189e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	6c 81       	ldd	r22, Y+4	; 0x04
    18a2:	c8 01       	movw	r24, r16
    18a4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	6e 81       	ldd	r22, Y+6	; 0x06
    18ac:	c8 01       	movw	r24, r16
    18ae:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    18b2:	7e 01       	movw	r14, r28
    18b4:	e7 e0       	ldi	r30, 0x07	; 7
    18b6:	ee 0e       	add	r14, r30
    18b8:	f1 1c       	adc	r15, r1
    18ba:	5e 01       	movw	r10, r28
    18bc:	fb e0       	ldi	r31, 0x0B	; 11
    18be:	af 0e       	add	r10, r31
    18c0:	b1 1c       	adc	r11, r1
    18c2:	f7 01       	movw	r30, r14
    18c4:	61 91       	ld	r22, Z+
    18c6:	7f 01       	movw	r14, r30
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	c8 01       	movw	r24, r16
    18cc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    18d0:	ea 14       	cp	r14, r10
    18d2:	fb 04       	cpc	r15, r11
    18d4:	b1 f7       	brne	.-20     	; 0x18c2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    18d6:	7e 01       	movw	r14, r28
    18d8:	ff e0       	ldi	r31, 0x0F	; 15
    18da:	ef 0e       	add	r14, r31
    18dc:	f1 1c       	adc	r15, r1
    18de:	5e 01       	movw	r10, r28
    18e0:	84 e1       	ldi	r24, 0x14	; 20
    18e2:	a8 0e       	add	r10, r24
    18e4:	b1 1c       	adc	r11, r1
    18e6:	47 01       	movw	r8, r14
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	f7 01       	movw	r30, r14
    18ec:	61 91       	ld	r22, Z+
    18ee:	7f 01       	movw	r14, r30
    18f0:	c8 01       	movw	r24, r16
    18f2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN17Adafruit_MCP230177pinModeEhh>
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	f4 01       	movw	r30, r8
    18fa:	60 81       	ld	r22, Z
    18fc:	c8 01       	movw	r24, r16
    18fe:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN17Adafruit_MCP230176pullUpEhh>
    1902:	ea 14       	cp	r14, r10
    1904:	fb 04       	cpc	r15, r11
    1906:	79 f7       	brne	.-34     	; 0x18e6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    1908:	9e cf       	rjmp	.-196    	; 0x1846 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    190a:	d8 8e       	std	Y+24, r13	; 0x18
    190c:	19 8e       	std	Y+25, r1	; 0x19
    190e:	cc 20       	and	r12, r12
    1910:	31 f0       	breq	.+12     	; 0x191e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	df 12       	cpse	r13, r31
    1916:	03 c0       	rjmp	.+6      	; 0x191e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1918:	8c 89       	ldd	r24, Y+20	; 0x14
    191a:	84 60       	ori	r24, 0x04	; 4
    191c:	8c 8b       	std	Y+20, r24	; 0x14
    191e:	80 e5       	ldi	r24, 0x50	; 80
    1920:	93 ec       	ldi	r25, 0xC3	; 195
    1922:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	6c 81       	ldd	r22, Y+4	; 0x04
    192a:	ce 01       	movw	r24, r28
    192c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	6e 81       	ldd	r22, Y+6	; 0x06
    1934:	ce 01       	movw	r24, r28
    1936:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    193a:	6d 81       	ldd	r22, Y+5	; 0x05
    193c:	6f 3f       	cpi	r22, 0xFF	; 255
    193e:	21 f0       	breq	.+8      	; 0x1948 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1948:	6c 89       	ldd	r22, Y+20	; 0x14
    194a:	64 fd       	sbrc	r22, 4
    194c:	1d c0       	rjmp	.+58     	; 0x1988 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    194e:	63 e0       	ldi	r22, 0x03	; 3
    1950:	ce 01       	movw	r24, r28
    1952:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1956:	84 e9       	ldi	r24, 0x94	; 148
    1958:	91 e1       	ldi	r25, 0x11	; 17
    195a:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    195e:	63 e0       	ldi	r22, 0x03	; 3
    1960:	ce 01       	movw	r24, r28
    1962:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1966:	84 e9       	ldi	r24, 0x94	; 148
    1968:	91 e1       	ldi	r25, 0x11	; 17
    196a:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    196e:	63 e0       	ldi	r22, 0x03	; 3
    1970:	ce 01       	movw	r24, r28
    1972:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1976:	86 e9       	ldi	r24, 0x96	; 150
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    197e:	62 e0       	ldi	r22, 0x02	; 2
    1980:	ce 01       	movw	r24, r28
    1982:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1988:	60 62       	ori	r22, 0x20	; 32
    198a:	ce 01       	movw	r24, r28
    198c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>
    1990:	84 e9       	ldi	r24, 0x94	; 148
    1992:	91 e1       	ldi	r25, 0x11	; 17
    1994:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    1998:	6c 89       	ldd	r22, Y+20	; 0x14
    199a:	60 62       	ori	r22, 0x20	; 32
    199c:	ce 01       	movw	r24, r28
    199e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>
    19a2:	86 e9       	ldi	r24, 0x96	; 150
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 16 08 	call	0x102c	; 0x102c <delayMicroseconds>
    19aa:	6c 89       	ldd	r22, Y+20	; 0x14
    19ac:	60 62       	ori	r22, 0x20	; 32
    19ae:	ce 01       	movw	r24, r28
    19b0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>
    19b4:	6c 89       	ldd	r22, Y+20	; 0x14
    19b6:	60 62       	ori	r22, 0x20	; 32
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	8d 8b       	std	Y+21, r24	; 0x15
    19c2:	ce 01       	movw	r24, r28
    19c4:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN21Adafruit_RGBLCDShield7displayEv>
    19c8:	ce 01       	movw	r24, r28
    19ca:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN21Adafruit_RGBLCDShield5clearEv>
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	8e 8b       	std	Y+22, r24	; 0x16
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	ce 01       	movw	r24, r28
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_ZN21Adafruit_RGBLCDShield7commandEh>

000019f2 <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	08 95       	ret

000019fe <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	7c 01       	movw	r14, r24
    1a0e:	2f e0       	ldi	r18, 0x0F	; 15
    1a10:	e2 0e       	add	r14, r18
    1a12:	f1 1c       	adc	r15, r1
    1a14:	c0 e0       	ldi	r28, 0x00	; 0
    1a16:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    1a18:	2f e1       	ldi	r18, 0x1F	; 31
    1a1a:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1a1c:	8c 01       	movw	r16, r24
    1a1e:	05 5e       	subi	r16, 0xE5	; 229
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	f7 01       	movw	r30, r14
    1a24:	61 91       	ld	r22, Z+
    1a26:	7f 01       	movw	r14, r30
    1a28:	c8 01       	movw	r24, r16
    1a2a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN17Adafruit_MCP2301711digitalReadEh>
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	0c 2e       	mov	r0, r28
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    1a3e:	20 95       	com	r18
    1a40:	30 95       	com	r19
    1a42:	d2 22       	and	r13, r18
    1a44:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    1a46:	c5 30       	cpi	r28, 0x05	; 5
    1a48:	d1 05       	cpc	r29, r1
    1a4a:	59 f7       	brne	.-42     	; 0x1a22 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    1a4c:	8d 2d       	mov	r24, r13
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	df 90       	pop	r13
    1a5c:	08 95       	ret

00001a5e <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    1a5e:	68 2f       	mov	r22, r24
    1a60:	8a e3       	ldi	r24, 0x3A	; 58
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_ZN7TwoWire5writeEh>

00001a68 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1a6e:	68 30       	cpi	r22, 0x08	; 8
    1a70:	08 f0       	brcs	.+2      	; 0x1a74 <_ZN17Adafruit_MCP230175beginEh+0xc>
    1a72:	67 e0       	ldi	r22, 0x07	; 7
    1a74:	68 83       	st	Y, r22

  WIRE.begin();
    1a76:	8a e3       	ldi	r24, 0x3A	; 58
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a7e:	68 81       	ld	r22, Y
    1a80:	60 62       	ori	r22, 0x20	; 32
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	8a e3       	ldi	r24, 0x3A	; 58
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1a98:	8a e3       	ldi	r24, 0x3A	; 58
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1aa0:	68 81       	ld	r22, Y
    1aa2:	60 62       	ori	r22, 0x20	; 32
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	8a e3       	ldi	r24, 0x3A	; 58
    1aa8:	93 e0       	ldi	r25, 0x03	; 3
    1aaa:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1aba:	8a e3       	ldi	r24, 0x3A	; 58
    1abc:	93 e0       	ldi	r25, 0x03	; 3
}
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    1ac2:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>

00001ac6 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <_ZN17Adafruit_MCP230175beginEh>

00001acc <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	d6 2f       	mov	r29, r22
    1ad2:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	60 81       	ld	r22, Z
    1ad8:	60 62       	ori	r22, 0x20	; 32
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	8a e3       	ldi	r24, 0x3A	; 58
    1ade:	93 e0       	ldi	r25, 0x03	; 3
    1ae0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1ae4:	82 e1       	ldi	r24, 0x12	; 18
    1ae6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1aea:	8d 2f       	mov	r24, r29
    1aec:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(ba >> 8);
    1af0:	8c 2f       	mov	r24, r28
    1af2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1af6:	8a e3       	ldi	r24, 0x3A	; 58
    1af8:	93 e0       	ldi	r25, 0x03	; 3
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    1afe:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>

00001b02 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	8c 01       	movw	r16, r24
    1b0e:	c6 2f       	mov	r28, r22
    1b10:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1b12:	60 31       	cpi	r22, 0x10	; 16
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    1b16:	51 c0       	rjmp	.+162    	; 0x1bba <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    1b18:	68 30       	cpi	r22, 0x08	; 8
    1b1a:	20 f0       	brcs	.+8      	; 0x1b24 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    1b1c:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    1b1e:	ff 24       	eor	r15, r15
    1b20:	f3 94       	inc	r15
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1b24:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b26:	f8 01       	movw	r30, r16
    1b28:	60 81       	ld	r22, Z
    1b2a:	60 62       	ori	r22, 0x20	; 32
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	8a e3       	ldi	r24, 0x3A	; 58
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1b36:	8f 2d       	mov	r24, r15
    1b38:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1b3c:	8a e3       	ldi	r24, 0x3A	; 58
    1b3e:	93 e0       	ldi	r25, 0x03	; 3
    1b40:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b44:	f8 01       	movw	r30, r16
    1b46:	60 81       	ld	r22, Z
    1b48:	60 62       	ori	r22, 0x20	; 32
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	8a e3       	ldi	r24, 0x3A	; 58
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b58:	8a e3       	ldi	r24, 0x3A	; 58
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1b64:	d1 11       	cpse	r29, r1
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1b68:	a9 01       	movw	r20, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1b6c:	44 0f       	add	r20, r20
    1b6e:	55 1f       	adc	r21, r21
    1b70:	ca 95       	dec	r28
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1b74:	ea 01       	movw	r28, r20
    1b76:	c8 2b       	or	r28, r24
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ca 95       	dec	r28
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1b86:	ef 01       	movw	r28, r30
    1b88:	c0 95       	com	r28
    1b8a:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	60 81       	ld	r22, Z
    1b90:	60 62       	ori	r22, 0x20	; 32
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	8a e3       	ldi	r24, 0x3A	; 58
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1b9c:	8f 2d       	mov	r24, r15
    1b9e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(iodir);	
    1ba2:	8c 2f       	mov	r24, r28
    1ba4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1ba8:	8a e3       	ldi	r24, 0x3A	; 58
    1baa:	93 e0       	ldi	r25, 0x03	; 3
}
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1bb6:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	08 95       	ret

00001bc6 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bcc:	68 81       	ld	r22, Y
    1bce:	60 62       	ori	r22, 0x20	; 32
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	8a e3       	ldi	r24, 0x3A	; 58
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1bda:	82 e1       	ldi	r24, 0x12	; 18
    1bdc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1be0:	8a e3       	ldi	r24, 0x3A	; 58
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1be8:	68 81       	ld	r22, Y
    1bea:	60 62       	ori	r22, 0x20	; 32
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	42 e0       	ldi	r20, 0x02	; 2
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	8a e3       	ldi	r24, 0x3A	; 58
    1bf4:	93 e0       	ldi	r25, 0x03	; 3
    1bf6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1bfa:	8a e3       	ldi	r24, 0x3A	; 58
    1bfc:	93 e0       	ldi	r25, 0x03	; 3
    1bfe:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
    1c02:	c8 2f       	mov	r28, r24
    1c04:	8a e3       	ldi	r24, 0x3A	; 58
    1c06:	93 e0       	ldi	r25, 0x03	; 3
    1c08:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1c10:	8c 2b       	or	r24, r28
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	8c 01       	movw	r16, r24
    1c22:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1c24:	60 31       	cpi	r22, 0x10	; 16
    1c26:	58 f5       	brcc	.+86     	; 0x1c7e <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1c28:	68 30       	cpi	r22, 0x08	; 8
    1c2a:	18 f0       	brcs	.+6      	; 0x1c32 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1c2c:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1c2e:	d3 e1       	ldi	r29, 0x13	; 19
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1c32:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c34:	f8 01       	movw	r30, r16
    1c36:	60 81       	ld	r22, Z
    1c38:	60 62       	ori	r22, 0x20	; 32
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	8a e3       	ldi	r24, 0x3A	; 58
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1c44:	8d 2f       	mov	r24, r29
    1c46:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1c4a:	8a e3       	ldi	r24, 0x3A	; 58
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1c52:	f8 01       	movw	r30, r16
    1c54:	60 81       	ld	r22, Z
    1c56:	60 62       	ori	r22, 0x20	; 32
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	8a e3       	ldi	r24, 0x3A	; 58
    1c60:	93 e0       	ldi	r25, 0x03	; 3
    1c62:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c66:	8a e3       	ldi	r24, 0x3A	; 58
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1c6e:	99 27       	eor	r25, r25
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1c72:	95 95       	asr	r25
    1c74:	87 95       	ror	r24
    1c76:	ca 95       	dec	r28
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1c7a:	81 70       	andi	r24, 0x01	; 1
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	08 95       	ret

00001c8a <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	8c 01       	movw	r16, r24
    1c96:	c6 2f       	mov	r28, r22
    1c98:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1c9a:	60 31       	cpi	r22, 0x10	; 16
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1c9e:	52 c0       	rjmp	.+164    	; 0x1d44 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1ca0:	68 30       	cpi	r22, 0x08	; 8
    1ca2:	20 f0       	brcs	.+8      	; 0x1cac <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1ca4:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1ca6:	9d e0       	ldi	r25, 0x0D	; 13
    1ca8:	f9 2e       	mov	r15, r25
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	60 81       	ld	r22, Z
    1cb4:	60 62       	ori	r22, 0x20	; 32
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	8a e3       	ldi	r24, 0x3A	; 58
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1cc0:	8f 2d       	mov	r24, r15
    1cc2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1cc6:	8a e3       	ldi	r24, 0x3A	; 58
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1cce:	f8 01       	movw	r30, r16
    1cd0:	60 81       	ld	r22, Z
    1cd2:	60 62       	ori	r22, 0x20	; 32
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	8a e3       	ldi	r24, 0x3A	; 58
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1ce2:	8a e3       	ldi	r24, 0x3A	; 58
    1ce4:	93 e0       	ldi	r25, 0x03	; 3
    1ce6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1cee:	d1 30       	cpi	r29, 0x01	; 1
    1cf0:	49 f4       	brne	.+18     	; 0x1d04 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1cf6:	44 0f       	add	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	ca 95       	dec	r28
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1cfe:	ea 01       	movw	r28, r20
    1d00:	c8 2b       	or	r28, r24
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1d04:	f9 01       	movw	r30, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	ca 95       	dec	r28
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1d10:	ef 01       	movw	r28, r30
    1d12:	c0 95       	com	r28
    1d14:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1d16:	f8 01       	movw	r30, r16
    1d18:	60 81       	ld	r22, Z
    1d1a:	60 62       	ori	r22, 0x20	; 32
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	8a e3       	ldi	r24, 0x3A	; 58
    1d20:	93 e0       	ldi	r25, 0x03	; 3
    1d22:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1d26:	8f 2d       	mov	r24, r15
    1d28:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(gppu);	
    1d2c:	8c 2f       	mov	r24, r28
    1d2e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1d32:	8a e3       	ldi	r24, 0x3A	; 58
    1d34:	93 e0       	ldi	r25, 0x03	; 3
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1d40:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
}
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	08 95       	ret

00001d50 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	8c 01       	movw	r16, r24
    1d5e:	c6 2f       	mov	r28, r22
    1d60:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1d62:	60 31       	cpi	r22, 0x10	; 16
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1d66:	56 c0       	rjmp	.+172    	; 0x1e14 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1d68:	68 30       	cpi	r22, 0x08	; 8
    1d6a:	28 f0       	brcs	.+10     	; 0x1d76 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1d6c:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1d6e:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1d70:	93 e1       	ldi	r25, 0x13	; 19
    1d72:	f9 2e       	mov	r15, r25
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1d76:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1d78:	82 e1       	ldi	r24, 0x12	; 18
    1d7a:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	60 81       	ld	r22, Z
    1d80:	60 62       	ori	r22, 0x20	; 32
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	8a e3       	ldi	r24, 0x3A	; 58
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1d8c:	8d 2f       	mov	r24, r29
    1d8e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1d92:	8a e3       	ldi	r24, 0x3A	; 58
    1d94:	93 e0       	ldi	r25, 0x03	; 3
    1d96:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	60 81       	ld	r22, Z
    1d9e:	60 62       	ori	r22, 0x20	; 32
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	8a e3       	ldi	r24, 0x3A	; 58
    1da8:	93 e0       	ldi	r25, 0x03	; 3
    1daa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1dae:	8a e3       	ldi	r24, 0x3A	; 58
    1db0:	93 e0       	ldi	r25, 0x03	; 3
    1db2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1db6:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1db8:	21 e0       	ldi	r18, 0x01	; 1
    1dba:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1dbc:	ef 12       	cpse	r14, r31
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1dc4:	44 0f       	add	r20, r20
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	ca 95       	dec	r28
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1dcc:	ea 01       	movw	r28, r20
    1dce:	c8 2b       	or	r28, r24
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1dd2:	f9 01       	movw	r30, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	ca 95       	dec	r28
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1dde:	ef 01       	movw	r28, r30
    1de0:	c0 95       	com	r28
    1de2:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1de4:	f8 01       	movw	r30, r16
    1de6:	60 81       	ld	r22, Z
    1de8:	60 62       	ori	r22, 0x20	; 32
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	8a e3       	ldi	r24, 0x3A	; 58
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1df4:	8f 2d       	mov	r24, r15
    1df6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  wiresend(gpio);	
    1dfa:	8c 2f       	mov	r24, r28
    1dfc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZL8wiresendh>
  WIRE.endTransmission();
    1e00:	8a e3       	ldi	r24, 0x3A	; 58
    1e02:	93 e0       	ldi	r25, 0x03	; 3
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1e10:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN7TwoWire15endTransmissionEv>
}
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	ff 90       	pop	r15
    1e1e:	ef 90       	pop	r14
    1e20:	08 95       	ret

00001e22 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1e22:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1e2c:	82 1b       	sub	r24, r18
    1e2e:	91 09       	sbc	r25, r1
    1e30:	08 95       	ret

00001e32 <_ZN7TwoWire4readEv>:
    1e32:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1e36:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1e3a:	98 17       	cp	r25, r24
    1e3c:	50 f4       	brcc	.+20     	; 0x1e52 <_ZN7TwoWire4readEv+0x20>
    1e3e:	e9 2f       	mov	r30, r25
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	e0 59       	subi	r30, 0x90	; 144
    1e44:	fc 4f       	sbci	r31, 0xFC	; 252
    1e46:	20 81       	ld	r18, Z
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	9f 5f       	subi	r25, 0xFF	; 255
    1e4c:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <_ZN7TwoWire4readEv+0x24>
    1e52:	2f ef       	ldi	r18, 0xFF	; 255
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	c9 01       	movw	r24, r18
    1e58:	08 95       	ret

00001e5a <_ZN7TwoWire4peekEv>:
    1e5a:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1e5e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1e62:	e8 17       	cp	r30, r24
    1e64:	30 f4       	brcc	.+12     	; 0x1e72 <_ZN7TwoWire4peekEv+0x18>
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	e0 59       	subi	r30, 0x90	; 144
    1e6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e6c:	80 81       	ld	r24, Z
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	08 95       	ret
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	08 95       	ret

00001e78 <_ZN7TwoWire5flushEv>:
    1e78:	08 95       	ret

00001e7a <_ZN7TwoWire16onReceiveServiceEPhi>:
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	ec 01       	movw	r28, r24
    1e80:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <_ZN7TwoWire14user_onReceiveE>
    1e84:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <_ZN7TwoWire14user_onReceiveE+0x1>
    1e88:	30 97       	sbiw	r30, 0x00	; 0
    1e8a:	f1 f0       	breq	.+60     	; 0x1ec8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1e8c:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1e90:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1e94:	98 17       	cp	r25, r24
    1e96:	c0 f0       	brcs	.+48     	; 0x1ec8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	29 2f       	mov	r18, r25
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	26 17       	cp	r18, r22
    1ea0:	37 07       	cpc	r19, r23
    1ea2:	54 f4       	brge	.+20     	; 0x1eb8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1ea4:	de 01       	movw	r26, r28
    1ea6:	a2 0f       	add	r26, r18
    1ea8:	b3 1f       	adc	r27, r19
    1eaa:	4c 91       	ld	r20, X
    1eac:	d9 01       	movw	r26, r18
    1eae:	a0 59       	subi	r26, 0x90	; 144
    1eb0:	bc 4f       	sbci	r27, 0xFC	; 252
    1eb2:	4c 93       	st	X, r20
    1eb4:	9f 5f       	subi	r25, 0xFF	; 255
    1eb6:	f1 cf       	rjmp	.-30     	; 0x1e9a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1eb8:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1ebc:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	09 94       	ijmp
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	08 95       	ret

00001ece <_ZN7TwoWire16onRequestServiceEv>:
    1ece:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <_ZN7TwoWire14user_onRequestE>
    1ed2:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <_ZN7TwoWire14user_onRequestE+0x1>
    1ed6:	30 97       	sbiw	r30, 0x00	; 0
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1eda:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    1ede:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    1ee2:	09 94       	ijmp
    1ee4:	08 95       	ret

00001ee6 <_ZN7TwoWire5writeEPKhj>:
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	7c 01       	movw	r14, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8a 01       	movw	r16, r20
    1efc:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <_ZN7TwoWire12transmittingE>
    1f00:	22 23       	and	r18, r18
    1f02:	89 f0       	breq	.+34     	; 0x1f26 <_ZN7TwoWire5writeEPKhj+0x40>
    1f04:	eb 01       	movw	r28, r22
    1f06:	6b 01       	movw	r12, r22
    1f08:	c4 0e       	add	r12, r20
    1f0a:	d5 1e       	adc	r13, r21
    1f0c:	cc 15       	cp	r28, r12
    1f0e:	dd 05       	cpc	r29, r13
    1f10:	69 f0       	breq	.+26     	; 0x1f2c <_ZN7TwoWire5writeEPKhj+0x46>
    1f12:	69 91       	ld	r22, Y+
    1f14:	d7 01       	movw	r26, r14
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	f0 81       	ld	r31, Z
    1f1e:	e0 2d       	mov	r30, r0
    1f20:	c7 01       	movw	r24, r14
    1f22:	09 95       	icall
    1f24:	f3 cf       	rjmp	.-26     	; 0x1f0c <_ZN7TwoWire5writeEPKhj+0x26>
    1f26:	64 2f       	mov	r22, r20
    1f28:	0e 94 3b 11 	call	0x2276	; 0x2276 <twi_transmit>
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	08 95       	ret

00001f40 <_ZN7TwoWire5writeEh>:
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	1f 92       	push	r1
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	69 83       	std	Y+1, r22	; 0x01
    1f4c:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <_ZN7TwoWire12transmittingE>
    1f50:	22 23       	and	r18, r18
    1f52:	d1 f0       	breq	.+52     	; 0x1f88 <_ZN7TwoWire5writeEh+0x48>
    1f54:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    1f58:	20 32       	cpi	r18, 0x20	; 32
    1f5a:	40 f0       	brcs	.+16     	; 0x1f6c <_ZN7TwoWire5writeEh+0x2c>
    1f5c:	21 e0       	ldi	r18, 0x01	; 1
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	fc 01       	movw	r30, r24
    1f62:	33 83       	std	Z+3, r19	; 0x03
    1f64:	22 83       	std	Z+2, r18	; 0x02
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	15 c0       	rjmp	.+42     	; 0x1f96 <_ZN7TwoWire5writeEh+0x56>
    1f6c:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    1f70:	e8 2f       	mov	r30, r24
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	e3 5b       	subi	r30, 0xB3	; 179
    1f76:	fc 4f       	sbci	r31, 0xFC	; 252
    1f78:	99 81       	ldd	r25, Y+1	; 0x01
    1f7a:	90 83       	st	Z, r25
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    1f82:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <_ZN7TwoWire5writeEh+0x52>
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 3b 11 	call	0x2276	; 0x2276 <twi_transmit>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0f 90       	pop	r0
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <_ZN7TwoWireC1Ev>:
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    1fa2:	12 82       	std	Z+2, r1	; 0x02
    1fa4:	88 ee       	ldi	r24, 0xE8	; 232
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	84 83       	std	Z+4, r24	; 0x04
    1fae:	95 83       	std	Z+5, r25	; 0x05
    1fb0:	a6 83       	std	Z+6, r26	; 0x06
    1fb2:	b7 83       	std	Z+7, r27	; 0x07
    1fb4:	80 e5       	ldi	r24, 0x50	; 80
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	08 95       	ret

00001fbe <_ZN7TwoWire5beginEv>:
    1fbe:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    1fc2:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    1fc6:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    1fca:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    1fce:	0e 94 7f 10 	call	0x20fe	; 0x20fe <twi_init>
    1fd2:	87 e6       	ldi	r24, 0x67	; 103
    1fd4:	9f e0       	ldi	r25, 0x0F	; 15
    1fd6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <twi_attachSlaveTxEvent>
    1fda:	8d e3       	ldi	r24, 0x3D	; 61
    1fdc:	9f e0       	ldi	r25, 0x0F	; 15
    1fde:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <twi_attachSlaveRxEvent>

00001fe2 <_ZN7TwoWire17beginTransmissionEh>:
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_ZN7TwoWire12transmittingE>
    1fe8:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <_ZN7TwoWire9txAddressE>
    1fec:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    1ff0:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    1ff4:	08 95       	ret

00001ff6 <_ZN7TwoWire17beginTransmissionEi>:
    1ff6:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <_ZN7TwoWire17beginTransmissionEh>

00001ffa <_ZN7TwoWire15endTransmissionEh>:
    1ffa:	0f 93       	push	r16
    1ffc:	06 2f       	mov	r16, r22
    1ffe:	21 e0       	ldi	r18, 0x01	; 1
    2000:	40 91 4b 03 	lds	r20, 0x034B	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    2004:	6d e4       	ldi	r22, 0x4D	; 77
    2006:	73 e0       	ldi	r23, 0x03	; 3
    2008:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ZN7TwoWire9txAddressE>
    200c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <twi_writeTo>
    2010:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_ZN7TwoWire13txBufferIndexE>
    2014:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <_ZN7TwoWire14txBufferLengthE>
    2018:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire12transmittingE>
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <_ZN7TwoWire11requestFromEhhmhh>:
    2020:	4f 92       	push	r4
    2022:	5f 92       	push	r5
    2024:	6f 92       	push	r6
    2026:	7f 92       	push	r7
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	5c 01       	movw	r10, r24
    203c:	f6 2e       	mov	r15, r22
    203e:	d4 2f       	mov	r29, r20
    2040:	28 01       	movw	r4, r16
    2042:	39 01       	movw	r6, r18
    2044:	ee 20       	and	r14, r14
    2046:	21 f1       	breq	.+72     	; 0x2090 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2048:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN7TwoWire17beginTransmissionEh>
    204c:	ce 2d       	mov	r28, r14
    204e:	c4 30       	cpi	r28, 0x04	; 4
    2050:	08 f0       	brcs	.+2      	; 0x2054 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2052:	c3 e0       	ldi	r28, 0x03	; 3
    2054:	c1 50       	subi	r28, 0x01	; 1
    2056:	c0 f0       	brcs	.+48     	; 0x2088 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2058:	28 e0       	ldi	r18, 0x08	; 8
    205a:	c2 9f       	mul	r28, r18
    205c:	c0 01       	movw	r24, r0
    205e:	11 24       	eor	r1, r1
    2060:	a3 01       	movw	r20, r6
    2062:	92 01       	movw	r18, r4
    2064:	04 c0       	rjmp	.+8      	; 0x206e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2066:	56 95       	lsr	r21
    2068:	47 95       	ror	r20
    206a:	37 95       	ror	r19
    206c:	27 95       	ror	r18
    206e:	8a 95       	dec	r24
    2070:	d2 f7       	brpl	.-12     	; 0x2066 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2072:	ca 01       	movw	r24, r20
    2074:	b9 01       	movw	r22, r18
    2076:	d5 01       	movw	r26, r10
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	01 90       	ld	r0, Z+
    207e:	f0 81       	ld	r31, Z
    2080:	e0 2d       	mov	r30, r0
    2082:	c5 01       	movw	r24, r10
    2084:	09 95       	icall
    2086:	e6 cf       	rjmp	.-52     	; 0x2054 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	c5 01       	movw	r24, r10
    208c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN7TwoWire15endTransmissionEh>
    2090:	4d 2f       	mov	r20, r29
    2092:	d1 32       	cpi	r29, 0x21	; 33
    2094:	08 f0       	brcs	.+2      	; 0x2098 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	2c 2d       	mov	r18, r12
    209a:	60 e7       	ldi	r22, 0x70	; 112
    209c:	73 e0       	ldi	r23, 0x03	; 3
    209e:	8f 2d       	mov	r24, r15
    20a0:	0e 94 9d 10 	call	0x213a	; 0x213a <twi_readFrom>
    20a4:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZN7TwoWire13rxBufferIndexE>
    20a8:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_ZN7TwoWire14rxBufferLengthE>
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	08 95       	ret

000020c8 <_ZN7TwoWire11requestFromEhhh>:
    20c8:	cf 92       	push	r12
    20ca:	ef 92       	push	r14
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	c2 2e       	mov	r12, r18
    20d2:	e1 2c       	mov	r14, r1
    20d4:	00 e0       	ldi	r16, 0x00	; 0
    20d6:	10 e0       	ldi	r17, 0x00	; 0
    20d8:	98 01       	movw	r18, r16
    20da:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN7TwoWire11requestFromEhhmhh>
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ef 90       	pop	r14
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <_ZN7TwoWire11requestFromEii>:
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <_ZN7TwoWire11requestFromEhhh>

000020ee <_ZN7TwoWire15endTransmissionEv>:
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_ZN7TwoWire15endTransmissionEh>

000020f4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    20f4:	8a e3       	ldi	r24, 0x3A	; 58
    20f6:	93 e0       	ldi	r25, 0x03	; 3
    20f8:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <_ZN7TwoWireC1Ev>

000020fc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    20fc:	08 95       	ret

000020fe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20fe:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_state>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <twi_sendStop>
    2108:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <twi_inRepStart>
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	82 e1       	ldi	r24, 0x12	; 18
    2110:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	83 e1       	ldi	r24, 0x13	; 19
    2118:	0e 94 c4 08 	call	0x1188	; 0x1188 <digitalWrite>
    211c:	e9 eb       	ldi	r30, 0xB9	; 185
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8e 7f       	andi	r24, 0xFE	; 254
    2124:	80 83       	st	Z, r24
    2126:	80 81       	ld	r24, Z
    2128:	8d 7f       	andi	r24, 0xFD	; 253
    212a:	80 83       	st	Z, r24
    212c:	88 e4       	ldi	r24, 0x48	; 72
    212e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2132:	85 e4       	ldi	r24, 0x45	; 69
    2134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2138:	08 95       	ret

0000213a <twi_readFrom>:
    213a:	41 32       	cpi	r20, 0x21	; 33
    213c:	08 f0       	brcs	.+2      	; 0x2140 <twi_readFrom+0x6>
    213e:	43 c0       	rjmp	.+134    	; 0x21c6 <twi_readFrom+0x8c>
    2140:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <twi_state>
    2144:	91 11       	cpse	r25, r1
    2146:	fc cf       	rjmp	.-8      	; 0x2140 <twi_readFrom+0x6>
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <twi_state>
    214e:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <twi_sendStop>
    2152:	2f ef       	ldi	r18, 0xFF	; 255
    2154:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <twi_error>
    2158:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_masterBufferIndex>
    215c:	24 0f       	add	r18, r20
    215e:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <twi_masterBufferLength>
    2162:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <twi_slarw>
    2166:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <twi_slarw>
    216a:	88 0f       	add	r24, r24
    216c:	89 2b       	or	r24, r25
    216e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <twi_slarw>
    2172:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_inRepStart>
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	61 f4       	brne	.+24     	; 0x2192 <twi_readFrom+0x58>
    217a:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <twi_inRepStart>
    217e:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <twi_slarw>
    2182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2186:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    218a:	83 fd       	sbrc	r24, 3
    218c:	f8 cf       	rjmp	.-16     	; 0x217e <twi_readFrom+0x44>
    218e:	85 ec       	ldi	r24, 0xC5	; 197
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <twi_readFrom+0x5a>
    2192:	85 ee       	ldi	r24, 0xE5	; 229
    2194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2198:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_state>
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	e1 f3       	breq	.-8      	; 0x2198 <twi_readFrom+0x5e>
    21a0:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    21a4:	84 17       	cp	r24, r20
    21a6:	10 f4       	brcc	.+4      	; 0x21ac <twi_readFrom+0x72>
    21a8:	40 91 d5 03 	lds	r20, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    21ac:	a6 ed       	ldi	r26, 0xD6	; 214
    21ae:	b3 e0       	ldi	r27, 0x03	; 3
    21b0:	96 2f       	mov	r25, r22
    21b2:	fb 01       	movw	r30, r22
    21b4:	8e 2f       	mov	r24, r30
    21b6:	89 1b       	sub	r24, r25
    21b8:	84 17       	cp	r24, r20
    21ba:	18 f4       	brcc	.+6      	; 0x21c2 <twi_readFrom+0x88>
    21bc:	8d 91       	ld	r24, X+
    21be:	81 93       	st	Z+, r24
    21c0:	f9 cf       	rjmp	.-14     	; 0x21b4 <twi_readFrom+0x7a>
    21c2:	84 2f       	mov	r24, r20
    21c4:	08 95       	ret
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	08 95       	ret

000021ca <twi_writeTo>:
    21ca:	0f 93       	push	r16
    21cc:	41 32       	cpi	r20, 0x21	; 33
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <twi_writeTo+0x8>
    21d0:	4a c0       	rjmp	.+148    	; 0x2266 <twi_writeTo+0x9c>
    21d2:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <twi_state>
    21d6:	91 11       	cpse	r25, r1
    21d8:	fc cf       	rjmp	.-8      	; 0x21d2 <twi_writeTo+0x8>
    21da:	32 e0       	ldi	r19, 0x02	; 2
    21dc:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <twi_state>
    21e0:	00 93 fb 03 	sts	0x03FB, r16	; 0x8003fb <twi_sendStop>
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	30 93 90 03 	sts	0x0390, r19	; 0x800390 <twi_error>
    21ea:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_masterBufferIndex>
    21ee:	40 93 d4 03 	sts	0x03D4, r20	; 0x8003d4 <twi_masterBufferLength>
    21f2:	56 2f       	mov	r21, r22
    21f4:	a6 ed       	ldi	r26, 0xD6	; 214
    21f6:	b3 e0       	ldi	r27, 0x03	; 3
    21f8:	fb 01       	movw	r30, r22
    21fa:	3e 2f       	mov	r19, r30
    21fc:	35 1b       	sub	r19, r21
    21fe:	34 17       	cp	r19, r20
    2200:	18 f4       	brcc	.+6      	; 0x2208 <twi_writeTo+0x3e>
    2202:	31 91       	ld	r19, Z+
    2204:	3d 93       	st	X+, r19
    2206:	f9 cf       	rjmp	.-14     	; 0x21fa <twi_writeTo+0x30>
    2208:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <twi_slarw>
    220c:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <twi_slarw>
    2210:	88 0f       	add	r24, r24
    2212:	83 2b       	or	r24, r19
    2214:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <twi_slarw>
    2218:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_inRepStart>
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	61 f4       	brne	.+24     	; 0x2238 <twi_writeTo+0x6e>
    2220:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <twi_inRepStart>
    2224:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <twi_slarw>
    2228:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    222c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2230:	83 fd       	sbrc	r24, 3
    2232:	f8 cf       	rjmp	.-16     	; 0x2224 <twi_writeTo+0x5a>
    2234:	85 ec       	ldi	r24, 0xC5	; 197
    2236:	01 c0       	rjmp	.+2      	; 0x223a <twi_writeTo+0x70>
    2238:	85 ee       	ldi	r24, 0xE5	; 229
    223a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    223e:	22 23       	and	r18, r18
    2240:	21 f0       	breq	.+8      	; 0x224a <twi_writeTo+0x80>
    2242:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_state>
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	d1 f3       	breq	.-12     	; 0x223e <twi_writeTo+0x74>
    224a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <twi_error>
    224e:	8f 3f       	cpi	r24, 0xFF	; 255
    2250:	79 f0       	breq	.+30     	; 0x2270 <twi_writeTo+0xa6>
    2252:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <twi_error>
    2256:	80 32       	cpi	r24, 0x20	; 32
    2258:	41 f0       	breq	.+16     	; 0x226a <twi_writeTo+0xa0>
    225a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <twi_error>
    225e:	80 33       	cpi	r24, 0x30	; 48
    2260:	31 f0       	breq	.+12     	; 0x226e <twi_writeTo+0xa4>
    2262:	94 e0       	ldi	r25, 0x04	; 4
    2264:	05 c0       	rjmp	.+10     	; 0x2270 <twi_writeTo+0xa6>
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <twi_writeTo+0xa6>
    226a:	92 e0       	ldi	r25, 0x02	; 2
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <twi_writeTo+0xa6>
    226e:	93 e0       	ldi	r25, 0x03	; 3
    2270:	89 2f       	mov	r24, r25
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <twi_transmit>:
    2276:	40 91 b2 03 	lds	r20, 0x03B2	; 0x8003b2 <twi_txBufferLength>
    227a:	26 2f       	mov	r18, r22
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	24 0f       	add	r18, r20
    2280:	31 1d       	adc	r19, r1
    2282:	21 32       	cpi	r18, 0x21	; 33
    2284:	31 05       	cpc	r19, r1
    2286:	dc f4       	brge	.+54     	; 0x22be <twi_transmit+0x48>
    2288:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <twi_state>
    228c:	24 30       	cpi	r18, 0x04	; 4
    228e:	c9 f4       	brne	.+50     	; 0x22c2 <twi_transmit+0x4c>
    2290:	fc 01       	movw	r30, r24
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	86 17       	cp	r24, r22
    2298:	58 f4       	brcc	.+22     	; 0x22b0 <twi_transmit+0x3a>
    229a:	30 91 b2 03 	lds	r19, 0x03B2	; 0x8003b2 <twi_txBufferLength>
    229e:	21 91       	ld	r18, Z+
    22a0:	dc 01       	movw	r26, r24
    22a2:	ac 54       	subi	r26, 0x4C	; 76
    22a4:	bc 4f       	sbci	r27, 0xFC	; 252
    22a6:	a3 0f       	add	r26, r19
    22a8:	b1 1d       	adc	r27, r1
    22aa:	2c 93       	st	X, r18
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	f3 cf       	rjmp	.-26     	; 0x2296 <twi_transmit+0x20>
    22b0:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_txBufferLength>
    22b4:	68 0f       	add	r22, r24
    22b6:	60 93 b2 03 	sts	0x03B2, r22	; 0x8003b2 <twi_txBufferLength>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	08 95       	ret
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	08 95       	ret
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	08 95       	ret

000022c6 <twi_attachSlaveRxEvent>:
    22c6:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <twi_onSlaveReceive+0x1>
    22ca:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <twi_onSlaveReceive>
    22ce:	08 95       	ret

000022d0 <twi_attachSlaveTxEvent>:
    22d0:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <twi_onSlaveTransmit+0x1>
    22d4:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <twi_onSlaveTransmit>
    22d8:	08 95       	ret

000022da <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    22da:	85 ed       	ldi	r24, 0xD5	; 213
    22dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    22e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22e4:	84 fd       	sbrc	r24, 4
    22e6:	fc cf       	rjmp	.-8      	; 0x22e0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    22e8:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_state>
    22ec:	08 95       	ret

000022ee <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    22ee:	85 ec       	ldi	r24, 0xC5	; 197
    22f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    22f4:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_state>
    22f8:	08 95       	ret

000022fa <__vector_24>:
}

ISR(TWI_vect)
{
    22fa:	1f 92       	push	r1
    22fc:	0f 92       	push	r0
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	0f 92       	push	r0
    2302:	11 24       	eor	r1, r1
    2304:	2f 93       	push	r18
    2306:	3f 93       	push	r19
    2308:	4f 93       	push	r20
    230a:	5f 93       	push	r21
    230c:	6f 93       	push	r22
    230e:	7f 93       	push	r23
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	ef 93       	push	r30
    231a:	ff 93       	push	r31
  switch(TW_STATUS){
    231c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2320:	88 7f       	andi	r24, 0xF8	; 248
    2322:	80 36       	cpi	r24, 0x60	; 96
    2324:	09 f4       	brne	.+2      	; 0x2328 <__vector_24+0x2e>
    2326:	9e c0       	rjmp	.+316    	; 0x2464 <__vector_24+0x16a>
    2328:	78 f5       	brcc	.+94     	; 0x2388 <__vector_24+0x8e>
    232a:	88 32       	cpi	r24, 0x28	; 40
    232c:	09 f4       	brne	.+2      	; 0x2330 <__vector_24+0x36>
    232e:	5d c0       	rjmp	.+186    	; 0x23ea <__vector_24+0xf0>
    2330:	90 f4       	brcc	.+36     	; 0x2356 <__vector_24+0x5c>
    2332:	80 31       	cpi	r24, 0x10	; 16
    2334:	09 f4       	brne	.+2      	; 0x2338 <__vector_24+0x3e>
    2336:	56 c0       	rjmp	.+172    	; 0x23e4 <__vector_24+0xea>
    2338:	38 f4       	brcc	.+14     	; 0x2348 <__vector_24+0x4e>
    233a:	88 23       	and	r24, r24
    233c:	09 f4       	brne	.+2      	; 0x2340 <__vector_24+0x46>
    233e:	f5 c0       	rjmp	.+490    	; 0x252a <__vector_24+0x230>
    2340:	88 30       	cpi	r24, 0x08	; 8
    2342:	09 f4       	brne	.+2      	; 0x2346 <__vector_24+0x4c>
    2344:	4f c0       	rjmp	.+158    	; 0x23e4 <__vector_24+0xea>
    2346:	f5 c0       	rjmp	.+490    	; 0x2532 <__vector_24+0x238>
    2348:	88 31       	cpi	r24, 0x18	; 24
    234a:	09 f4       	brne	.+2      	; 0x234e <__vector_24+0x54>
    234c:	4e c0       	rjmp	.+156    	; 0x23ea <__vector_24+0xf0>
    234e:	80 32       	cpi	r24, 0x20	; 32
    2350:	09 f4       	brne	.+2      	; 0x2354 <__vector_24+0x5a>
    2352:	5f c0       	rjmp	.+190    	; 0x2412 <__vector_24+0x118>
    2354:	ee c0       	rjmp	.+476    	; 0x2532 <__vector_24+0x238>
    2356:	80 34       	cpi	r24, 0x40	; 64
    2358:	09 f4       	brne	.+2      	; 0x235c <__vector_24+0x62>
    235a:	6a c0       	rjmp	.+212    	; 0x2430 <__vector_24+0x136>
    235c:	58 f4       	brcc	.+22     	; 0x2374 <__vector_24+0x7a>
    235e:	80 33       	cpi	r24, 0x30	; 48
    2360:	09 f4       	brne	.+2      	; 0x2364 <__vector_24+0x6a>
    2362:	57 c0       	rjmp	.+174    	; 0x2412 <__vector_24+0x118>
    2364:	88 33       	cpi	r24, 0x38	; 56
    2366:	09 f0       	breq	.+2      	; 0x236a <__vector_24+0x70>
    2368:	e4 c0       	rjmp	.+456    	; 0x2532 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    236a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <twi_error>
      twi_releaseBus();
    236e:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_releaseBus>
      break;
    2372:	df c0       	rjmp	.+446    	; 0x2532 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2374:	80 35       	cpi	r24, 0x50	; 80
    2376:	09 f4       	brne	.+2      	; 0x237a <__vector_24+0x80>
    2378:	4f c0       	rjmp	.+158    	; 0x2418 <__vector_24+0x11e>
    237a:	88 35       	cpi	r24, 0x58	; 88
    237c:	09 f4       	brne	.+2      	; 0x2380 <__vector_24+0x86>
    237e:	5d c0       	rjmp	.+186    	; 0x243a <__vector_24+0x140>
    2380:	88 34       	cpi	r24, 0x48	; 72
    2382:	09 f0       	breq	.+2      	; 0x2386 <__vector_24+0x8c>
    2384:	d6 c0       	rjmp	.+428    	; 0x2532 <__vector_24+0x238>
    2386:	d3 c0       	rjmp	.+422    	; 0x252e <__vector_24+0x234>
    2388:	88 39       	cpi	r24, 0x98	; 152
    238a:	09 f4       	brne	.+2      	; 0x238e <__vector_24+0x94>
    238c:	c4 c0       	rjmp	.+392    	; 0x2516 <__vector_24+0x21c>
    238e:	a8 f4       	brcc	.+42     	; 0x23ba <__vector_24+0xc0>
    2390:	88 37       	cpi	r24, 0x78	; 120
    2392:	09 f4       	brne	.+2      	; 0x2396 <__vector_24+0x9c>
    2394:	67 c0       	rjmp	.+206    	; 0x2464 <__vector_24+0x16a>
    2396:	38 f4       	brcc	.+14     	; 0x23a6 <__vector_24+0xac>
    2398:	88 36       	cpi	r24, 0x68	; 104
    239a:	09 f4       	brne	.+2      	; 0x239e <__vector_24+0xa4>
    239c:	63 c0       	rjmp	.+198    	; 0x2464 <__vector_24+0x16a>
    239e:	80 37       	cpi	r24, 0x70	; 112
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__vector_24+0xaa>
    23a2:	60 c0       	rjmp	.+192    	; 0x2464 <__vector_24+0x16a>
    23a4:	c6 c0       	rjmp	.+396    	; 0x2532 <__vector_24+0x238>
    23a6:	88 38       	cpi	r24, 0x88	; 136
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_24+0xb2>
    23aa:	b5 c0       	rjmp	.+362    	; 0x2516 <__vector_24+0x21c>
    23ac:	80 39       	cpi	r24, 0x90	; 144
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <__vector_24+0xb8>
    23b0:	5f c0       	rjmp	.+190    	; 0x2470 <__vector_24+0x176>
    23b2:	80 38       	cpi	r24, 0x80	; 128
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <__vector_24+0xbe>
    23b6:	bd c0       	rjmp	.+378    	; 0x2532 <__vector_24+0x238>
    23b8:	5b c0       	rjmp	.+182    	; 0x2470 <__vector_24+0x176>
    23ba:	80 3b       	cpi	r24, 0xB0	; 176
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__vector_24+0xc6>
    23be:	83 c0       	rjmp	.+262    	; 0x24c6 <__vector_24+0x1cc>
    23c0:	38 f4       	brcc	.+14     	; 0x23d0 <__vector_24+0xd6>
    23c2:	80 3a       	cpi	r24, 0xA0	; 160
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <__vector_24+0xce>
    23c6:	66 c0       	rjmp	.+204    	; 0x2494 <__vector_24+0x19a>
    23c8:	88 3a       	cpi	r24, 0xA8	; 168
    23ca:	09 f4       	brne	.+2      	; 0x23ce <__vector_24+0xd4>
    23cc:	7c c0       	rjmp	.+248    	; 0x24c6 <__vector_24+0x1cc>
    23ce:	b1 c0       	rjmp	.+354    	; 0x2532 <__vector_24+0x238>
    23d0:	80 3c       	cpi	r24, 0xC0	; 192
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <__vector_24+0xdc>
    23d4:	a4 c0       	rjmp	.+328    	; 0x251e <__vector_24+0x224>
    23d6:	88 3c       	cpi	r24, 0xC8	; 200
    23d8:	09 f4       	brne	.+2      	; 0x23dc <__vector_24+0xe2>
    23da:	a1 c0       	rjmp	.+322    	; 0x251e <__vector_24+0x224>
    23dc:	88 3b       	cpi	r24, 0xB8	; 184
    23de:	09 f4       	brne	.+2      	; 0x23e2 <__vector_24+0xe8>
    23e0:	87 c0       	rjmp	.+270    	; 0x24f0 <__vector_24+0x1f6>
    23e2:	a7 c0       	rjmp	.+334    	; 0x2532 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    23e4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <twi_slarw>
    23e8:	10 c0       	rjmp	.+32     	; 0x240a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    23ea:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    23ee:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_masterBufferLength>
    23f2:	98 17       	cp	r25, r24
    23f4:	70 f5       	brcc	.+92     	; 0x2452 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    23f6:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	8e 0f       	add	r24, r30
    23fe:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_masterBufferIndex>
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	ea 52       	subi	r30, 0x2A	; 42
    2406:	fc 4f       	sbci	r31, 0xFC	; 252
    2408:	80 81       	ld	r24, Z
    240a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    240e:	85 ec       	ldi	r24, 0xC5	; 197
    2410:	83 c0       	rjmp	.+262    	; 0x2518 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2412:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <twi_error>
    2416:	8b c0       	rjmp	.+278    	; 0x252e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2418:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	8e 0f       	add	r24, r30
    2420:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_masterBufferIndex>
    2424:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	ea 52       	subi	r30, 0x2A	; 42
    242c:	fc 4f       	sbci	r31, 0xFC	; 252
    242e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2430:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    2434:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_masterBufferLength>
    2438:	6b c0       	rjmp	.+214    	; 0x2510 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    243a:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_masterBufferIndex>
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	8e 0f       	add	r24, r30
    2442:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_masterBufferIndex>
    2446:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ea 52       	subi	r30, 0x2A	; 42
    244e:	fc 4f       	sbci	r31, 0xFC	; 252
    2450:	80 83       	st	Z, r24
	if (twi_sendStop)
    2452:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <twi_sendStop>
    2456:	81 11       	cpse	r24, r1
    2458:	6a c0       	rjmp	.+212    	; 0x252e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2460:	84 ea       	ldi	r24, 0xA4	; 164
    2462:	5e c0       	rjmp	.+188    	; 0x2520 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    246a:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <twi_rxBufferIndex>
    246e:	cf cf       	rjmp	.-98     	; 0x240e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2470:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_rxBufferIndex>
    2474:	80 32       	cpi	r24, 0x20	; 32
    2476:	08 f0       	brcs	.+2      	; 0x247a <__vector_24+0x180>
    2478:	4e c0       	rjmp	.+156    	; 0x2516 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    247a:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <twi_rxBufferIndex>
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	8e 0f       	add	r24, r30
    2482:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <twi_rxBufferIndex>
    2486:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	ee 56       	subi	r30, 0x6E	; 110
    248e:	fc 4f       	sbci	r31, 0xFC	; 252
    2490:	80 83       	st	Z, r24
    2492:	bd cf       	rjmp	.-134    	; 0x240e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2494:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2498:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_rxBufferIndex>
    249c:	80 32       	cpi	r24, 0x20	; 32
    249e:	30 f4       	brcc	.+12     	; 0x24ac <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    24a0:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <twi_rxBufferIndex>
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	ee 56       	subi	r30, 0x6E	; 110
    24a8:	fc 4f       	sbci	r31, 0xFC	; 252
    24aa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    24ac:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <twi_rxBufferIndex>
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <twi_onSlaveReceive>
    24b6:	f0 91 f7 03 	lds	r31, 0x03F7	; 0x8003f7 <twi_onSlaveReceive+0x1>
    24ba:	82 e9       	ldi	r24, 0x92	; 146
    24bc:	93 e0       	ldi	r25, 0x03	; 3
    24be:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    24c0:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <twi_rxBufferIndex>
      break;
    24c4:	36 c0       	rjmp	.+108    	; 0x2532 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    24c6:	84 e0       	ldi	r24, 0x04	; 4
    24c8:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    24cc:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    24d0:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    24d4:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <twi_onSlaveTransmit>
    24d8:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <twi_onSlaveTransmit+0x1>
    24dc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    24de:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_txBufferLength>
    24e2:	81 11       	cpse	r24, r1
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    24ec:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    24f0:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_txBufferIndex>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	8e 0f       	add	r24, r30
    24f8:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_txBufferIndex>
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	ec 54       	subi	r30, 0x4C	; 76
    2500:	fc 4f       	sbci	r31, 0xFC	; 252
    2502:	80 81       	ld	r24, Z
    2504:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2508:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <twi_txBufferIndex>
    250c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_txBufferLength>
    2510:	98 17       	cp	r25, r24
    2512:	08 f4       	brcc	.+2      	; 0x2516 <__vector_24+0x21c>
    2514:	7c cf       	rjmp	.-264    	; 0x240e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2516:	85 e8       	ldi	r24, 0x85	; 133
    2518:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    251e:	85 ec       	ldi	r24, 0xC5	; 197
    2520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2524:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_state>
      break;
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    252a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <twi_error>
      twi_stop();
    252e:	0e 94 6d 11 	call	0x22da	; 0x22da <twi_stop>
      break;
  }
}
    2532:	ff 91       	pop	r31
    2534:	ef 91       	pop	r30
    2536:	bf 91       	pop	r27
    2538:	af 91       	pop	r26
    253a:	9f 91       	pop	r25
    253c:	8f 91       	pop	r24
    253e:	7f 91       	pop	r23
    2540:	6f 91       	pop	r22
    2542:	5f 91       	pop	r21
    2544:	4f 91       	pop	r20
    2546:	3f 91       	pop	r19
    2548:	2f 91       	pop	r18
    254a:	0f 90       	pop	r0
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	0f 90       	pop	r0
    2550:	1f 90       	pop	r1
    2552:	18 95       	reti

00002554 <__udivmodsi4>:
    2554:	a1 e2       	ldi	r26, 0x21	; 33
    2556:	1a 2e       	mov	r1, r26
    2558:	aa 1b       	sub	r26, r26
    255a:	bb 1b       	sub	r27, r27
    255c:	fd 01       	movw	r30, r26
    255e:	0d c0       	rjmp	.+26     	; 0x257a <__udivmodsi4_ep>

00002560 <__udivmodsi4_loop>:
    2560:	aa 1f       	adc	r26, r26
    2562:	bb 1f       	adc	r27, r27
    2564:	ee 1f       	adc	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	a2 17       	cp	r26, r18
    256a:	b3 07       	cpc	r27, r19
    256c:	e4 07       	cpc	r30, r20
    256e:	f5 07       	cpc	r31, r21
    2570:	20 f0       	brcs	.+8      	; 0x257a <__udivmodsi4_ep>
    2572:	a2 1b       	sub	r26, r18
    2574:	b3 0b       	sbc	r27, r19
    2576:	e4 0b       	sbc	r30, r20
    2578:	f5 0b       	sbc	r31, r21

0000257a <__udivmodsi4_ep>:
    257a:	66 1f       	adc	r22, r22
    257c:	77 1f       	adc	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	1a 94       	dec	r1
    2584:	69 f7       	brne	.-38     	; 0x2560 <__udivmodsi4_loop>
    2586:	60 95       	com	r22
    2588:	70 95       	com	r23
    258a:	80 95       	com	r24
    258c:	90 95       	com	r25
    258e:	9b 01       	movw	r18, r22
    2590:	ac 01       	movw	r20, r24
    2592:	bd 01       	movw	r22, r26
    2594:	cf 01       	movw	r24, r30
    2596:	08 95       	ret

00002598 <__tablejump2__>:
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	05 90       	lpm	r0, Z+
    259e:	f4 91       	lpm	r31, Z
    25a0:	e0 2d       	mov	r30, r0
    25a2:	09 94       	ijmp

000025a4 <malloc>:
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	91 05       	cpc	r25, r1
    25b0:	10 f4       	brcc	.+4      	; 0x25b6 <malloc+0x12>
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <__flp>
    25ba:	f0 91 01 04 	lds	r31, 0x0401	; 0x800401 <__flp+0x1>
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	30 97       	sbiw	r30, 0x00	; 0
    25c8:	19 f1       	breq	.+70     	; 0x2610 <malloc+0x6c>
    25ca:	40 81       	ld	r20, Z
    25cc:	51 81       	ldd	r21, Z+1	; 0x01
    25ce:	02 81       	ldd	r16, Z+2	; 0x02
    25d0:	13 81       	ldd	r17, Z+3	; 0x03
    25d2:	48 17       	cp	r20, r24
    25d4:	59 07       	cpc	r21, r25
    25d6:	c8 f0       	brcs	.+50     	; 0x260a <malloc+0x66>
    25d8:	84 17       	cp	r24, r20
    25da:	95 07       	cpc	r25, r21
    25dc:	69 f4       	brne	.+26     	; 0x25f8 <malloc+0x54>
    25de:	10 97       	sbiw	r26, 0x00	; 0
    25e0:	31 f0       	breq	.+12     	; 0x25ee <malloc+0x4a>
    25e2:	12 96       	adiw	r26, 0x02	; 2
    25e4:	0c 93       	st	X, r16
    25e6:	12 97       	sbiw	r26, 0x02	; 2
    25e8:	13 96       	adiw	r26, 0x03	; 3
    25ea:	1c 93       	st	X, r17
    25ec:	27 c0       	rjmp	.+78     	; 0x263c <malloc+0x98>
    25ee:	00 93 00 04 	sts	0x0400, r16	; 0x800400 <__flp>
    25f2:	10 93 01 04 	sts	0x0401, r17	; 0x800401 <__flp+0x1>
    25f6:	22 c0       	rjmp	.+68     	; 0x263c <malloc+0x98>
    25f8:	21 15       	cp	r18, r1
    25fa:	31 05       	cpc	r19, r1
    25fc:	19 f0       	breq	.+6      	; 0x2604 <malloc+0x60>
    25fe:	42 17       	cp	r20, r18
    2600:	53 07       	cpc	r21, r19
    2602:	18 f4       	brcc	.+6      	; 0x260a <malloc+0x66>
    2604:	9a 01       	movw	r18, r20
    2606:	bd 01       	movw	r22, r26
    2608:	ef 01       	movw	r28, r30
    260a:	df 01       	movw	r26, r30
    260c:	f8 01       	movw	r30, r16
    260e:	db cf       	rjmp	.-74     	; 0x25c6 <malloc+0x22>
    2610:	21 15       	cp	r18, r1
    2612:	31 05       	cpc	r19, r1
    2614:	f9 f0       	breq	.+62     	; 0x2654 <malloc+0xb0>
    2616:	28 1b       	sub	r18, r24
    2618:	39 0b       	sbc	r19, r25
    261a:	24 30       	cpi	r18, 0x04	; 4
    261c:	31 05       	cpc	r19, r1
    261e:	80 f4       	brcc	.+32     	; 0x2640 <malloc+0x9c>
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	61 15       	cp	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	21 f0       	breq	.+8      	; 0x2632 <malloc+0x8e>
    262a:	fb 01       	movw	r30, r22
    262c:	93 83       	std	Z+3, r25	; 0x03
    262e:	82 83       	std	Z+2, r24	; 0x02
    2630:	04 c0       	rjmp	.+8      	; 0x263a <malloc+0x96>
    2632:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__flp+0x1>
    2636:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__flp>
    263a:	fe 01       	movw	r30, r28
    263c:	32 96       	adiw	r30, 0x02	; 2
    263e:	44 c0       	rjmp	.+136    	; 0x26c8 <malloc+0x124>
    2640:	fe 01       	movw	r30, r28
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	81 93       	st	Z+, r24
    2648:	91 93       	st	Z+, r25
    264a:	22 50       	subi	r18, 0x02	; 2
    264c:	31 09       	sbc	r19, r1
    264e:	39 83       	std	Y+1, r19	; 0x01
    2650:	28 83       	st	Y, r18
    2652:	3a c0       	rjmp	.+116    	; 0x26c8 <malloc+0x124>
    2654:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <__brkval>
    2658:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <__brkval+0x1>
    265c:	23 2b       	or	r18, r19
    265e:	41 f4       	brne	.+16     	; 0x2670 <malloc+0xcc>
    2660:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2664:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2668:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <__brkval+0x1>
    266c:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <__brkval>
    2670:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2674:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2678:	21 15       	cp	r18, r1
    267a:	31 05       	cpc	r19, r1
    267c:	41 f4       	brne	.+16     	; 0x268e <malloc+0xea>
    267e:	2d b7       	in	r18, 0x3d	; 61
    2680:	3e b7       	in	r19, 0x3e	; 62
    2682:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2686:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    268a:	24 1b       	sub	r18, r20
    268c:	35 0b       	sbc	r19, r21
    268e:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <__brkval>
    2692:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <__brkval+0x1>
    2696:	e2 17       	cp	r30, r18
    2698:	f3 07       	cpc	r31, r19
    269a:	a0 f4       	brcc	.+40     	; 0x26c4 <malloc+0x120>
    269c:	2e 1b       	sub	r18, r30
    269e:	3f 0b       	sbc	r19, r31
    26a0:	28 17       	cp	r18, r24
    26a2:	39 07       	cpc	r19, r25
    26a4:	78 f0       	brcs	.+30     	; 0x26c4 <malloc+0x120>
    26a6:	ac 01       	movw	r20, r24
    26a8:	4e 5f       	subi	r20, 0xFE	; 254
    26aa:	5f 4f       	sbci	r21, 0xFF	; 255
    26ac:	24 17       	cp	r18, r20
    26ae:	35 07       	cpc	r19, r21
    26b0:	48 f0       	brcs	.+18     	; 0x26c4 <malloc+0x120>
    26b2:	4e 0f       	add	r20, r30
    26b4:	5f 1f       	adc	r21, r31
    26b6:	50 93 ff 03 	sts	0x03FF, r21	; 0x8003ff <__brkval+0x1>
    26ba:	40 93 fe 03 	sts	0x03FE, r20	; 0x8003fe <__brkval>
    26be:	81 93       	st	Z+, r24
    26c0:	91 93       	st	Z+, r25
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <malloc+0x124>
    26c4:	e0 e0       	ldi	r30, 0x00	; 0
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	cf 01       	movw	r24, r30
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	08 95       	ret

000026d4 <free>:
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	09 f4       	brne	.+2      	; 0x26de <free+0xa>
    26dc:	81 c0       	rjmp	.+258    	; 0x27e0 <free+0x10c>
    26de:	fc 01       	movw	r30, r24
    26e0:	32 97       	sbiw	r30, 0x02	; 2
    26e2:	13 82       	std	Z+3, r1	; 0x03
    26e4:	12 82       	std	Z+2, r1	; 0x02
    26e6:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <__flp>
    26ea:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <__flp+0x1>
    26ee:	10 97       	sbiw	r26, 0x00	; 0
    26f0:	81 f4       	brne	.+32     	; 0x2712 <free+0x3e>
    26f2:	20 81       	ld	r18, Z
    26f4:	31 81       	ldd	r19, Z+1	; 0x01
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <__brkval>
    26fe:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <__brkval+0x1>
    2702:	28 17       	cp	r18, r24
    2704:	39 07       	cpc	r19, r25
    2706:	51 f5       	brne	.+84     	; 0x275c <free+0x88>
    2708:	f0 93 ff 03 	sts	0x03FF, r31	; 0x8003ff <__brkval+0x1>
    270c:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <__brkval>
    2710:	67 c0       	rjmp	.+206    	; 0x27e0 <free+0x10c>
    2712:	ed 01       	movw	r28, r26
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	ce 17       	cp	r28, r30
    271a:	df 07       	cpc	r29, r31
    271c:	40 f4       	brcc	.+16     	; 0x272e <free+0x5a>
    271e:	4a 81       	ldd	r20, Y+2	; 0x02
    2720:	5b 81       	ldd	r21, Y+3	; 0x03
    2722:	9e 01       	movw	r18, r28
    2724:	41 15       	cp	r20, r1
    2726:	51 05       	cpc	r21, r1
    2728:	f1 f0       	breq	.+60     	; 0x2766 <free+0x92>
    272a:	ea 01       	movw	r28, r20
    272c:	f5 cf       	rjmp	.-22     	; 0x2718 <free+0x44>
    272e:	d3 83       	std	Z+3, r29	; 0x03
    2730:	c2 83       	std	Z+2, r28	; 0x02
    2732:	40 81       	ld	r20, Z
    2734:	51 81       	ldd	r21, Z+1	; 0x01
    2736:	84 0f       	add	r24, r20
    2738:	95 1f       	adc	r25, r21
    273a:	c8 17       	cp	r28, r24
    273c:	d9 07       	cpc	r29, r25
    273e:	59 f4       	brne	.+22     	; 0x2756 <free+0x82>
    2740:	88 81       	ld	r24, Y
    2742:	99 81       	ldd	r25, Y+1	; 0x01
    2744:	84 0f       	add	r24, r20
    2746:	95 1f       	adc	r25, r21
    2748:	02 96       	adiw	r24, 0x02	; 2
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	93 83       	std	Z+3, r25	; 0x03
    2754:	82 83       	std	Z+2, r24	; 0x02
    2756:	21 15       	cp	r18, r1
    2758:	31 05       	cpc	r19, r1
    275a:	29 f4       	brne	.+10     	; 0x2766 <free+0x92>
    275c:	f0 93 01 04 	sts	0x0401, r31	; 0x800401 <__flp+0x1>
    2760:	e0 93 00 04 	sts	0x0400, r30	; 0x800400 <__flp>
    2764:	3d c0       	rjmp	.+122    	; 0x27e0 <free+0x10c>
    2766:	e9 01       	movw	r28, r18
    2768:	fb 83       	std	Y+3, r31	; 0x03
    276a:	ea 83       	std	Y+2, r30	; 0x02
    276c:	49 91       	ld	r20, Y+
    276e:	59 91       	ld	r21, Y+
    2770:	c4 0f       	add	r28, r20
    2772:	d5 1f       	adc	r29, r21
    2774:	ec 17       	cp	r30, r28
    2776:	fd 07       	cpc	r31, r29
    2778:	61 f4       	brne	.+24     	; 0x2792 <free+0xbe>
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	84 0f       	add	r24, r20
    2780:	95 1f       	adc	r25, r21
    2782:	02 96       	adiw	r24, 0x02	; 2
    2784:	e9 01       	movw	r28, r18
    2786:	99 83       	std	Y+1, r25	; 0x01
    2788:	88 83       	st	Y, r24
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	9b 83       	std	Y+3, r25	; 0x03
    2790:	8a 83       	std	Y+2, r24	; 0x02
    2792:	e0 e0       	ldi	r30, 0x00	; 0
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	12 96       	adiw	r26, 0x02	; 2
    2798:	8d 91       	ld	r24, X+
    279a:	9c 91       	ld	r25, X
    279c:	13 97       	sbiw	r26, 0x03	; 3
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	19 f0       	breq	.+6      	; 0x27a8 <free+0xd4>
    27a2:	fd 01       	movw	r30, r26
    27a4:	dc 01       	movw	r26, r24
    27a6:	f7 cf       	rjmp	.-18     	; 0x2796 <free+0xc2>
    27a8:	8d 91       	ld	r24, X+
    27aa:	9c 91       	ld	r25, X
    27ac:	11 97       	sbiw	r26, 0x01	; 1
    27ae:	9d 01       	movw	r18, r26
    27b0:	2e 5f       	subi	r18, 0xFE	; 254
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <__brkval>
    27bc:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <__brkval+0x1>
    27c0:	28 17       	cp	r18, r24
    27c2:	39 07       	cpc	r19, r25
    27c4:	69 f4       	brne	.+26     	; 0x27e0 <free+0x10c>
    27c6:	30 97       	sbiw	r30, 0x00	; 0
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <free+0x100>
    27ca:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <__flp+0x1>
    27ce:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <__flp>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <free+0x104>
    27d4:	13 82       	std	Z+3, r1	; 0x03
    27d6:	12 82       	std	Z+2, r1	; 0x02
    27d8:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <__brkval+0x1>
    27dc:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <__brkval>
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	08 95       	ret

000027e6 <realloc>:
    27e6:	a0 e0       	ldi	r26, 0x00	; 0
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e9 ef       	ldi	r30, 0xF9	; 249
    27ec:	f3 e1       	ldi	r31, 0x13	; 19
    27ee:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x8>
    27f2:	ec 01       	movw	r28, r24
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	21 f4       	brne	.+8      	; 0x2800 <realloc+0x1a>
    27f8:	cb 01       	movw	r24, r22
    27fa:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <malloc>
    27fe:	b4 c0       	rjmp	.+360    	; 0x2968 <realloc+0x182>
    2800:	fc 01       	movw	r30, r24
    2802:	e6 0f       	add	r30, r22
    2804:	f7 1f       	adc	r31, r23
    2806:	9c 01       	movw	r18, r24
    2808:	22 50       	subi	r18, 0x02	; 2
    280a:	31 09       	sbc	r19, r1
    280c:	e2 17       	cp	r30, r18
    280e:	f3 07       	cpc	r31, r19
    2810:	08 f4       	brcc	.+2      	; 0x2814 <realloc+0x2e>
    2812:	a8 c0       	rjmp	.+336    	; 0x2964 <realloc+0x17e>
    2814:	d9 01       	movw	r26, r18
    2816:	0d 91       	ld	r16, X+
    2818:	1c 91       	ld	r17, X
    281a:	11 97       	sbiw	r26, 0x01	; 1
    281c:	06 17       	cp	r16, r22
    281e:	17 07       	cpc	r17, r23
    2820:	b0 f0       	brcs	.+44     	; 0x284e <realloc+0x68>
    2822:	05 30       	cpi	r16, 0x05	; 5
    2824:	11 05       	cpc	r17, r1
    2826:	08 f4       	brcc	.+2      	; 0x282a <realloc+0x44>
    2828:	9b c0       	rjmp	.+310    	; 0x2960 <realloc+0x17a>
    282a:	c8 01       	movw	r24, r16
    282c:	04 97       	sbiw	r24, 0x04	; 4
    282e:	86 17       	cp	r24, r22
    2830:	97 07       	cpc	r25, r23
    2832:	08 f4       	brcc	.+2      	; 0x2836 <realloc+0x50>
    2834:	95 c0       	rjmp	.+298    	; 0x2960 <realloc+0x17a>
    2836:	02 50       	subi	r16, 0x02	; 2
    2838:	11 09       	sbc	r17, r1
    283a:	06 1b       	sub	r16, r22
    283c:	17 0b       	sbc	r17, r23
    283e:	01 93       	st	Z+, r16
    2840:	11 93       	st	Z+, r17
    2842:	6d 93       	st	X+, r22
    2844:	7c 93       	st	X, r23
    2846:	cf 01       	movw	r24, r30
    2848:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <free>
    284c:	89 c0       	rjmp	.+274    	; 0x2960 <realloc+0x17a>
    284e:	5b 01       	movw	r10, r22
    2850:	a0 1a       	sub	r10, r16
    2852:	b1 0a       	sbc	r11, r17
    2854:	4c 01       	movw	r8, r24
    2856:	80 0e       	add	r8, r16
    2858:	91 1e       	adc	r9, r17
    285a:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <__flp>
    285e:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <__flp+0x1>
    2862:	61 2c       	mov	r6, r1
    2864:	71 2c       	mov	r7, r1
    2866:	e1 2c       	mov	r14, r1
    2868:	f1 2c       	mov	r15, r1
    286a:	10 97       	sbiw	r26, 0x00	; 0
    286c:	09 f4       	brne	.+2      	; 0x2870 <realloc+0x8a>
    286e:	46 c0       	rjmp	.+140    	; 0x28fc <realloc+0x116>
    2870:	8d 91       	ld	r24, X+
    2872:	9c 91       	ld	r25, X
    2874:	11 97       	sbiw	r26, 0x01	; 1
    2876:	a8 15       	cp	r26, r8
    2878:	b9 05       	cpc	r27, r9
    287a:	b1 f5       	brne	.+108    	; 0x28e8 <realloc+0x102>
    287c:	6c 01       	movw	r12, r24
    287e:	42 e0       	ldi	r20, 0x02	; 2
    2880:	c4 0e       	add	r12, r20
    2882:	d1 1c       	adc	r13, r1
    2884:	ca 14       	cp	r12, r10
    2886:	db 04       	cpc	r13, r11
    2888:	78 f1       	brcs	.+94     	; 0x28e8 <realloc+0x102>
    288a:	4c 01       	movw	r8, r24
    288c:	8a 18       	sub	r8, r10
    288e:	9b 08       	sbc	r9, r11
    2890:	64 01       	movw	r12, r8
    2892:	42 e0       	ldi	r20, 0x02	; 2
    2894:	c4 0e       	add	r12, r20
    2896:	d1 1c       	adc	r13, r1
    2898:	12 96       	adiw	r26, 0x02	; 2
    289a:	bc 90       	ld	r11, X
    289c:	12 97       	sbiw	r26, 0x02	; 2
    289e:	13 96       	adiw	r26, 0x03	; 3
    28a0:	ac 91       	ld	r26, X
    28a2:	b5 e0       	ldi	r27, 0x05	; 5
    28a4:	cb 16       	cp	r12, r27
    28a6:	d1 04       	cpc	r13, r1
    28a8:	40 f0       	brcs	.+16     	; 0x28ba <realloc+0xd4>
    28aa:	b2 82       	std	Z+2, r11	; 0x02
    28ac:	a3 83       	std	Z+3, r26	; 0x03
    28ae:	91 82       	std	Z+1, r9	; 0x01
    28b0:	80 82       	st	Z, r8
    28b2:	d9 01       	movw	r26, r18
    28b4:	6d 93       	st	X+, r22
    28b6:	7c 93       	st	X, r23
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <realloc+0xe6>
    28ba:	0e 5f       	subi	r16, 0xFE	; 254
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	80 0f       	add	r24, r16
    28c0:	91 1f       	adc	r25, r17
    28c2:	f9 01       	movw	r30, r18
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	eb 2d       	mov	r30, r11
    28ca:	fa 2f       	mov	r31, r26
    28cc:	e1 14       	cp	r14, r1
    28ce:	f1 04       	cpc	r15, r1
    28d0:	31 f0       	breq	.+12     	; 0x28de <realloc+0xf8>
    28d2:	d7 01       	movw	r26, r14
    28d4:	13 96       	adiw	r26, 0x03	; 3
    28d6:	fc 93       	st	X, r31
    28d8:	ee 93       	st	-X, r30
    28da:	12 97       	sbiw	r26, 0x02	; 2
    28dc:	41 c0       	rjmp	.+130    	; 0x2960 <realloc+0x17a>
    28de:	f0 93 01 04 	sts	0x0401, r31	; 0x800401 <__flp+0x1>
    28e2:	e0 93 00 04 	sts	0x0400, r30	; 0x800400 <__flp>
    28e6:	3c c0       	rjmp	.+120    	; 0x2960 <realloc+0x17a>
    28e8:	68 16       	cp	r6, r24
    28ea:	79 06       	cpc	r7, r25
    28ec:	08 f4       	brcc	.+2      	; 0x28f0 <realloc+0x10a>
    28ee:	3c 01       	movw	r6, r24
    28f0:	7d 01       	movw	r14, r26
    28f2:	12 96       	adiw	r26, 0x02	; 2
    28f4:	0d 90       	ld	r0, X+
    28f6:	bc 91       	ld	r27, X
    28f8:	a0 2d       	mov	r26, r0
    28fa:	b7 cf       	rjmp	.-146    	; 0x286a <realloc+0x84>
    28fc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <__brkval>
    2900:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <__brkval+0x1>
    2904:	88 16       	cp	r8, r24
    2906:	99 06       	cpc	r9, r25
    2908:	e1 f4       	brne	.+56     	; 0x2942 <realloc+0x15c>
    290a:	66 16       	cp	r6, r22
    290c:	77 06       	cpc	r7, r23
    290e:	c8 f4       	brcc	.+50     	; 0x2942 <realloc+0x15c>
    2910:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2914:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	41 f4       	brne	.+16     	; 0x292c <realloc+0x146>
    291c:	8d b7       	in	r24, 0x3d	; 61
    291e:	9e b7       	in	r25, 0x3e	; 62
    2920:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2924:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2928:	84 1b       	sub	r24, r20
    292a:	95 0b       	sbc	r25, r21
    292c:	e8 17       	cp	r30, r24
    292e:	f9 07       	cpc	r31, r25
    2930:	c8 f4       	brcc	.+50     	; 0x2964 <realloc+0x17e>
    2932:	f0 93 ff 03 	sts	0x03FF, r31	; 0x8003ff <__brkval+0x1>
    2936:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <__brkval>
    293a:	f9 01       	movw	r30, r18
    293c:	71 83       	std	Z+1, r23	; 0x01
    293e:	60 83       	st	Z, r22
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <realloc+0x17a>
    2942:	cb 01       	movw	r24, r22
    2944:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <malloc>
    2948:	7c 01       	movw	r14, r24
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	59 f0       	breq	.+22     	; 0x2964 <realloc+0x17e>
    294e:	a8 01       	movw	r20, r16
    2950:	be 01       	movw	r22, r28
    2952:	0e 94 b9 14 	call	0x2972	; 0x2972 <memcpy>
    2956:	ce 01       	movw	r24, r28
    2958:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <free>
    295c:	c7 01       	movw	r24, r14
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <realloc+0x182>
    2960:	ce 01       	movw	r24, r28
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <realloc+0x182>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	ee e0       	ldi	r30, 0x0E	; 14
    296e:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x8>

00002972 <memcpy>:
    2972:	fb 01       	movw	r30, r22
    2974:	dc 01       	movw	r26, r24
    2976:	02 c0       	rjmp	.+4      	; 0x297c <memcpy+0xa>
    2978:	01 90       	ld	r0, Z+
    297a:	0d 92       	st	X+, r0
    297c:	41 50       	subi	r20, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	d8 f7       	brcc	.-10     	; 0x2978 <memcpy+0x6>
    2982:	08 95       	ret

00002984 <strcpy>:
    2984:	fb 01       	movw	r30, r22
    2986:	dc 01       	movw	r26, r24
    2988:	01 90       	ld	r0, Z+
    298a:	0d 92       	st	X+, r0
    298c:	00 20       	and	r0, r0
    298e:	e1 f7       	brne	.-8      	; 0x2988 <strcpy+0x4>
    2990:	08 95       	ret

00002992 <sprintf>:
    2992:	ae e0       	ldi	r26, 0x0E	; 14
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef ec       	ldi	r30, 0xCF	; 207
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__prologue_saves__+0x1c>
    299e:	0d 89       	ldd	r16, Y+21	; 0x15
    29a0:	1e 89       	ldd	r17, Y+22	; 0x16
    29a2:	86 e0       	ldi	r24, 0x06	; 6
    29a4:	8c 83       	std	Y+4, r24	; 0x04
    29a6:	1a 83       	std	Y+2, r17	; 0x02
    29a8:	09 83       	std	Y+1, r16	; 0x01
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f e7       	ldi	r25, 0x7F	; 127
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	ae 01       	movw	r20, r28
    29b4:	47 5e       	subi	r20, 0xE7	; 231
    29b6:	5f 4f       	sbci	r21, 0xFF	; 255
    29b8:	6f 89       	ldd	r22, Y+23	; 0x17
    29ba:	78 8d       	ldd	r23, Y+24	; 0x18
    29bc:	ce 01       	movw	r24, r28
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <vfprintf>
    29c4:	ef 81       	ldd	r30, Y+7	; 0x07
    29c6:	f8 85       	ldd	r31, Y+8	; 0x08
    29c8:	e0 0f       	add	r30, r16
    29ca:	f1 1f       	adc	r31, r17
    29cc:	10 82       	st	Z, r1
    29ce:	2e 96       	adiw	r28, 0x0e	; 14
    29d0:	e4 e0       	ldi	r30, 0x04	; 4
    29d2:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__epilogue_restores__+0x1c>

000029d6 <vfprintf>:
    29d6:	ab e0       	ldi	r26, 0x0B	; 11
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e1 ef       	ldi	r30, 0xF1	; 241
    29dc:	f4 e1       	ldi	r31, 0x14	; 20
    29de:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__>
    29e2:	6c 01       	movw	r12, r24
    29e4:	7b 01       	movw	r14, r22
    29e6:	8a 01       	movw	r16, r20
    29e8:	fc 01       	movw	r30, r24
    29ea:	17 82       	std	Z+7, r1	; 0x07
    29ec:	16 82       	std	Z+6, r1	; 0x06
    29ee:	83 81       	ldd	r24, Z+3	; 0x03
    29f0:	81 ff       	sbrs	r24, 1
    29f2:	cc c1       	rjmp	.+920    	; 0x2d8c <vfprintf+0x3b6>
    29f4:	ce 01       	movw	r24, r28
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	3c 01       	movw	r6, r24
    29fa:	f6 01       	movw	r30, r12
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	f7 01       	movw	r30, r14
    2a00:	93 fd       	sbrc	r25, 3
    2a02:	85 91       	lpm	r24, Z+
    2a04:	93 ff       	sbrs	r25, 3
    2a06:	81 91       	ld	r24, Z+
    2a08:	7f 01       	movw	r14, r30
    2a0a:	88 23       	and	r24, r24
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <vfprintf+0x3a>
    2a0e:	ba c1       	rjmp	.+884    	; 0x2d84 <vfprintf+0x3ae>
    2a10:	85 32       	cpi	r24, 0x25	; 37
    2a12:	39 f4       	brne	.+14     	; 0x2a22 <vfprintf+0x4c>
    2a14:	93 fd       	sbrc	r25, 3
    2a16:	85 91       	lpm	r24, Z+
    2a18:	93 ff       	sbrs	r25, 3
    2a1a:	81 91       	ld	r24, Z+
    2a1c:	7f 01       	movw	r14, r30
    2a1e:	85 32       	cpi	r24, 0x25	; 37
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <vfprintf+0x56>
    2a22:	b6 01       	movw	r22, r12
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2a2a:	e7 cf       	rjmp	.-50     	; 0x29fa <vfprintf+0x24>
    2a2c:	91 2c       	mov	r9, r1
    2a2e:	21 2c       	mov	r2, r1
    2a30:	31 2c       	mov	r3, r1
    2a32:	ff e1       	ldi	r31, 0x1F	; 31
    2a34:	f3 15       	cp	r31, r3
    2a36:	d8 f0       	brcs	.+54     	; 0x2a6e <vfprintf+0x98>
    2a38:	8b 32       	cpi	r24, 0x2B	; 43
    2a3a:	79 f0       	breq	.+30     	; 0x2a5a <vfprintf+0x84>
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <vfprintf+0x76>
    2a3e:	80 32       	cpi	r24, 0x20	; 32
    2a40:	79 f0       	breq	.+30     	; 0x2a60 <vfprintf+0x8a>
    2a42:	83 32       	cpi	r24, 0x23	; 35
    2a44:	a1 f4       	brne	.+40     	; 0x2a6e <vfprintf+0x98>
    2a46:	23 2d       	mov	r18, r3
    2a48:	20 61       	ori	r18, 0x10	; 16
    2a4a:	1d c0       	rjmp	.+58     	; 0x2a86 <vfprintf+0xb0>
    2a4c:	8d 32       	cpi	r24, 0x2D	; 45
    2a4e:	61 f0       	breq	.+24     	; 0x2a68 <vfprintf+0x92>
    2a50:	80 33       	cpi	r24, 0x30	; 48
    2a52:	69 f4       	brne	.+26     	; 0x2a6e <vfprintf+0x98>
    2a54:	23 2d       	mov	r18, r3
    2a56:	21 60       	ori	r18, 0x01	; 1
    2a58:	16 c0       	rjmp	.+44     	; 0x2a86 <vfprintf+0xb0>
    2a5a:	83 2d       	mov	r24, r3
    2a5c:	82 60       	ori	r24, 0x02	; 2
    2a5e:	38 2e       	mov	r3, r24
    2a60:	e3 2d       	mov	r30, r3
    2a62:	e4 60       	ori	r30, 0x04	; 4
    2a64:	3e 2e       	mov	r3, r30
    2a66:	2a c0       	rjmp	.+84     	; 0x2abc <vfprintf+0xe6>
    2a68:	f3 2d       	mov	r31, r3
    2a6a:	f8 60       	ori	r31, 0x08	; 8
    2a6c:	1d c0       	rjmp	.+58     	; 0x2aa8 <vfprintf+0xd2>
    2a6e:	37 fc       	sbrc	r3, 7
    2a70:	2d c0       	rjmp	.+90     	; 0x2acc <vfprintf+0xf6>
    2a72:	20 ed       	ldi	r18, 0xD0	; 208
    2a74:	28 0f       	add	r18, r24
    2a76:	2a 30       	cpi	r18, 0x0A	; 10
    2a78:	40 f0       	brcs	.+16     	; 0x2a8a <vfprintf+0xb4>
    2a7a:	8e 32       	cpi	r24, 0x2E	; 46
    2a7c:	b9 f4       	brne	.+46     	; 0x2aac <vfprintf+0xd6>
    2a7e:	36 fc       	sbrc	r3, 6
    2a80:	81 c1       	rjmp	.+770    	; 0x2d84 <vfprintf+0x3ae>
    2a82:	23 2d       	mov	r18, r3
    2a84:	20 64       	ori	r18, 0x40	; 64
    2a86:	32 2e       	mov	r3, r18
    2a88:	19 c0       	rjmp	.+50     	; 0x2abc <vfprintf+0xe6>
    2a8a:	36 fe       	sbrs	r3, 6
    2a8c:	06 c0       	rjmp	.+12     	; 0x2a9a <vfprintf+0xc4>
    2a8e:	8a e0       	ldi	r24, 0x0A	; 10
    2a90:	98 9e       	mul	r9, r24
    2a92:	20 0d       	add	r18, r0
    2a94:	11 24       	eor	r1, r1
    2a96:	92 2e       	mov	r9, r18
    2a98:	11 c0       	rjmp	.+34     	; 0x2abc <vfprintf+0xe6>
    2a9a:	ea e0       	ldi	r30, 0x0A	; 10
    2a9c:	2e 9e       	mul	r2, r30
    2a9e:	20 0d       	add	r18, r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	22 2e       	mov	r2, r18
    2aa4:	f3 2d       	mov	r31, r3
    2aa6:	f0 62       	ori	r31, 0x20	; 32
    2aa8:	3f 2e       	mov	r3, r31
    2aaa:	08 c0       	rjmp	.+16     	; 0x2abc <vfprintf+0xe6>
    2aac:	8c 36       	cpi	r24, 0x6C	; 108
    2aae:	21 f4       	brne	.+8      	; 0x2ab8 <vfprintf+0xe2>
    2ab0:	83 2d       	mov	r24, r3
    2ab2:	80 68       	ori	r24, 0x80	; 128
    2ab4:	38 2e       	mov	r3, r24
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <vfprintf+0xe6>
    2ab8:	88 36       	cpi	r24, 0x68	; 104
    2aba:	41 f4       	brne	.+16     	; 0x2acc <vfprintf+0xf6>
    2abc:	f7 01       	movw	r30, r14
    2abe:	93 fd       	sbrc	r25, 3
    2ac0:	85 91       	lpm	r24, Z+
    2ac2:	93 ff       	sbrs	r25, 3
    2ac4:	81 91       	ld	r24, Z+
    2ac6:	7f 01       	movw	r14, r30
    2ac8:	81 11       	cpse	r24, r1
    2aca:	b3 cf       	rjmp	.-154    	; 0x2a32 <vfprintf+0x5c>
    2acc:	98 2f       	mov	r25, r24
    2ace:	9f 7d       	andi	r25, 0xDF	; 223
    2ad0:	95 54       	subi	r25, 0x45	; 69
    2ad2:	93 30       	cpi	r25, 0x03	; 3
    2ad4:	28 f4       	brcc	.+10     	; 0x2ae0 <vfprintf+0x10a>
    2ad6:	0c 5f       	subi	r16, 0xFC	; 252
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	9f e3       	ldi	r25, 0x3F	; 63
    2adc:	99 83       	std	Y+1, r25	; 0x01
    2ade:	0d c0       	rjmp	.+26     	; 0x2afa <vfprintf+0x124>
    2ae0:	83 36       	cpi	r24, 0x63	; 99
    2ae2:	31 f0       	breq	.+12     	; 0x2af0 <vfprintf+0x11a>
    2ae4:	83 37       	cpi	r24, 0x73	; 115
    2ae6:	71 f0       	breq	.+28     	; 0x2b04 <vfprintf+0x12e>
    2ae8:	83 35       	cpi	r24, 0x53	; 83
    2aea:	09 f0       	breq	.+2      	; 0x2aee <vfprintf+0x118>
    2aec:	59 c0       	rjmp	.+178    	; 0x2ba0 <vfprintf+0x1ca>
    2aee:	21 c0       	rjmp	.+66     	; 0x2b32 <vfprintf+0x15c>
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 81       	ld	r24, Z
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	0e 5f       	subi	r16, 0xFE	; 254
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	88 24       	eor	r8, r8
    2afc:	83 94       	inc	r8
    2afe:	91 2c       	mov	r9, r1
    2b00:	53 01       	movw	r10, r6
    2b02:	13 c0       	rjmp	.+38     	; 0x2b2a <vfprintf+0x154>
    2b04:	28 01       	movw	r4, r16
    2b06:	f2 e0       	ldi	r31, 0x02	; 2
    2b08:	4f 0e       	add	r4, r31
    2b0a:	51 1c       	adc	r5, r1
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	a0 80       	ld	r10, Z
    2b10:	b1 80       	ldd	r11, Z+1	; 0x01
    2b12:	36 fe       	sbrs	r3, 6
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <vfprintf+0x146>
    2b16:	69 2d       	mov	r22, r9
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <vfprintf+0x14a>
    2b1c:	6f ef       	ldi	r22, 0xFF	; 255
    2b1e:	7f ef       	ldi	r23, 0xFF	; 255
    2b20:	c5 01       	movw	r24, r10
    2b22:	0e 94 d7 16 	call	0x2dae	; 0x2dae <strnlen>
    2b26:	4c 01       	movw	r8, r24
    2b28:	82 01       	movw	r16, r4
    2b2a:	f3 2d       	mov	r31, r3
    2b2c:	ff 77       	andi	r31, 0x7F	; 127
    2b2e:	3f 2e       	mov	r3, r31
    2b30:	16 c0       	rjmp	.+44     	; 0x2b5e <vfprintf+0x188>
    2b32:	28 01       	movw	r4, r16
    2b34:	22 e0       	ldi	r18, 0x02	; 2
    2b36:	42 0e       	add	r4, r18
    2b38:	51 1c       	adc	r5, r1
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	a0 80       	ld	r10, Z
    2b3e:	b1 80       	ldd	r11, Z+1	; 0x01
    2b40:	36 fe       	sbrs	r3, 6
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <vfprintf+0x174>
    2b44:	69 2d       	mov	r22, r9
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <vfprintf+0x178>
    2b4a:	6f ef       	ldi	r22, 0xFF	; 255
    2b4c:	7f ef       	ldi	r23, 0xFF	; 255
    2b4e:	c5 01       	movw	r24, r10
    2b50:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <strnlen_P>
    2b54:	4c 01       	movw	r8, r24
    2b56:	f3 2d       	mov	r31, r3
    2b58:	f0 68       	ori	r31, 0x80	; 128
    2b5a:	3f 2e       	mov	r3, r31
    2b5c:	82 01       	movw	r16, r4
    2b5e:	33 fc       	sbrc	r3, 3
    2b60:	1b c0       	rjmp	.+54     	; 0x2b98 <vfprintf+0x1c2>
    2b62:	82 2d       	mov	r24, r2
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	88 16       	cp	r8, r24
    2b68:	99 06       	cpc	r9, r25
    2b6a:	b0 f4       	brcc	.+44     	; 0x2b98 <vfprintf+0x1c2>
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	80 e2       	ldi	r24, 0x20	; 32
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2b76:	2a 94       	dec	r2
    2b78:	f4 cf       	rjmp	.-24     	; 0x2b62 <vfprintf+0x18c>
    2b7a:	f5 01       	movw	r30, r10
    2b7c:	37 fc       	sbrc	r3, 7
    2b7e:	85 91       	lpm	r24, Z+
    2b80:	37 fe       	sbrs	r3, 7
    2b82:	81 91       	ld	r24, Z+
    2b84:	5f 01       	movw	r10, r30
    2b86:	b6 01       	movw	r22, r12
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2b8e:	21 10       	cpse	r2, r1
    2b90:	2a 94       	dec	r2
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	82 1a       	sub	r8, r18
    2b96:	91 08       	sbc	r9, r1
    2b98:	81 14       	cp	r8, r1
    2b9a:	91 04       	cpc	r9, r1
    2b9c:	71 f7       	brne	.-36     	; 0x2b7a <vfprintf+0x1a4>
    2b9e:	e8 c0       	rjmp	.+464    	; 0x2d70 <vfprintf+0x39a>
    2ba0:	84 36       	cpi	r24, 0x64	; 100
    2ba2:	11 f0       	breq	.+4      	; 0x2ba8 <vfprintf+0x1d2>
    2ba4:	89 36       	cpi	r24, 0x69	; 105
    2ba6:	41 f5       	brne	.+80     	; 0x2bf8 <vfprintf+0x222>
    2ba8:	f8 01       	movw	r30, r16
    2baa:	37 fe       	sbrs	r3, 7
    2bac:	07 c0       	rjmp	.+14     	; 0x2bbc <vfprintf+0x1e6>
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	0c 5f       	subi	r16, 0xFC	; 252
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	08 c0       	rjmp	.+16     	; 0x2bcc <vfprintf+0x1f6>
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	07 2e       	mov	r0, r23
    2bc2:	00 0c       	add	r0, r0
    2bc4:	88 0b       	sbc	r24, r24
    2bc6:	99 0b       	sbc	r25, r25
    2bc8:	0e 5f       	subi	r16, 0xFE	; 254
    2bca:	1f 4f       	sbci	r17, 0xFF	; 255
    2bcc:	f3 2d       	mov	r31, r3
    2bce:	ff 76       	andi	r31, 0x6F	; 111
    2bd0:	3f 2e       	mov	r3, r31
    2bd2:	97 ff       	sbrs	r25, 7
    2bd4:	09 c0       	rjmp	.+18     	; 0x2be8 <vfprintf+0x212>
    2bd6:	90 95       	com	r25
    2bd8:	80 95       	com	r24
    2bda:	70 95       	com	r23
    2bdc:	61 95       	neg	r22
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	8f 4f       	sbci	r24, 0xFF	; 255
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	f0 68       	ori	r31, 0x80	; 128
    2be6:	3f 2e       	mov	r3, r31
    2be8:	2a e0       	ldi	r18, 0x0A	; 10
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	a3 01       	movw	r20, r6
    2bee:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__ultoa_invert>
    2bf2:	88 2e       	mov	r8, r24
    2bf4:	86 18       	sub	r8, r6
    2bf6:	45 c0       	rjmp	.+138    	; 0x2c82 <vfprintf+0x2ac>
    2bf8:	85 37       	cpi	r24, 0x75	; 117
    2bfa:	31 f4       	brne	.+12     	; 0x2c08 <vfprintf+0x232>
    2bfc:	23 2d       	mov	r18, r3
    2bfe:	2f 7e       	andi	r18, 0xEF	; 239
    2c00:	b2 2e       	mov	r11, r18
    2c02:	2a e0       	ldi	r18, 0x0A	; 10
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	25 c0       	rjmp	.+74     	; 0x2c52 <vfprintf+0x27c>
    2c08:	93 2d       	mov	r25, r3
    2c0a:	99 7f       	andi	r25, 0xF9	; 249
    2c0c:	b9 2e       	mov	r11, r25
    2c0e:	8f 36       	cpi	r24, 0x6F	; 111
    2c10:	c1 f0       	breq	.+48     	; 0x2c42 <vfprintf+0x26c>
    2c12:	18 f4       	brcc	.+6      	; 0x2c1a <vfprintf+0x244>
    2c14:	88 35       	cpi	r24, 0x58	; 88
    2c16:	79 f0       	breq	.+30     	; 0x2c36 <vfprintf+0x260>
    2c18:	b5 c0       	rjmp	.+362    	; 0x2d84 <vfprintf+0x3ae>
    2c1a:	80 37       	cpi	r24, 0x70	; 112
    2c1c:	19 f0       	breq	.+6      	; 0x2c24 <vfprintf+0x24e>
    2c1e:	88 37       	cpi	r24, 0x78	; 120
    2c20:	21 f0       	breq	.+8      	; 0x2c2a <vfprintf+0x254>
    2c22:	b0 c0       	rjmp	.+352    	; 0x2d84 <vfprintf+0x3ae>
    2c24:	e9 2f       	mov	r30, r25
    2c26:	e0 61       	ori	r30, 0x10	; 16
    2c28:	be 2e       	mov	r11, r30
    2c2a:	b4 fe       	sbrs	r11, 4
    2c2c:	0d c0       	rjmp	.+26     	; 0x2c48 <vfprintf+0x272>
    2c2e:	fb 2d       	mov	r31, r11
    2c30:	f4 60       	ori	r31, 0x04	; 4
    2c32:	bf 2e       	mov	r11, r31
    2c34:	09 c0       	rjmp	.+18     	; 0x2c48 <vfprintf+0x272>
    2c36:	34 fe       	sbrs	r3, 4
    2c38:	0a c0       	rjmp	.+20     	; 0x2c4e <vfprintf+0x278>
    2c3a:	29 2f       	mov	r18, r25
    2c3c:	26 60       	ori	r18, 0x06	; 6
    2c3e:	b2 2e       	mov	r11, r18
    2c40:	06 c0       	rjmp	.+12     	; 0x2c4e <vfprintf+0x278>
    2c42:	28 e0       	ldi	r18, 0x08	; 8
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	05 c0       	rjmp	.+10     	; 0x2c52 <vfprintf+0x27c>
    2c48:	20 e1       	ldi	r18, 0x10	; 16
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <vfprintf+0x27c>
    2c4e:	20 e1       	ldi	r18, 0x10	; 16
    2c50:	32 e0       	ldi	r19, 0x02	; 2
    2c52:	f8 01       	movw	r30, r16
    2c54:	b7 fe       	sbrs	r11, 7
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <vfprintf+0x290>
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	0c 5f       	subi	r16, 0xFC	; 252
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <vfprintf+0x29c>
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 5f       	subi	r16, 0xFE	; 254
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	a3 01       	movw	r20, r6
    2c74:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__ultoa_invert>
    2c78:	88 2e       	mov	r8, r24
    2c7a:	86 18       	sub	r8, r6
    2c7c:	fb 2d       	mov	r31, r11
    2c7e:	ff 77       	andi	r31, 0x7F	; 127
    2c80:	3f 2e       	mov	r3, r31
    2c82:	36 fe       	sbrs	r3, 6
    2c84:	0d c0       	rjmp	.+26     	; 0x2ca0 <vfprintf+0x2ca>
    2c86:	23 2d       	mov	r18, r3
    2c88:	2e 7f       	andi	r18, 0xFE	; 254
    2c8a:	a2 2e       	mov	r10, r18
    2c8c:	89 14       	cp	r8, r9
    2c8e:	58 f4       	brcc	.+22     	; 0x2ca6 <vfprintf+0x2d0>
    2c90:	34 fe       	sbrs	r3, 4
    2c92:	0b c0       	rjmp	.+22     	; 0x2caa <vfprintf+0x2d4>
    2c94:	32 fc       	sbrc	r3, 2
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <vfprintf+0x2d4>
    2c98:	83 2d       	mov	r24, r3
    2c9a:	8e 7e       	andi	r24, 0xEE	; 238
    2c9c:	a8 2e       	mov	r10, r24
    2c9e:	05 c0       	rjmp	.+10     	; 0x2caa <vfprintf+0x2d4>
    2ca0:	b8 2c       	mov	r11, r8
    2ca2:	a3 2c       	mov	r10, r3
    2ca4:	03 c0       	rjmp	.+6      	; 0x2cac <vfprintf+0x2d6>
    2ca6:	b8 2c       	mov	r11, r8
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <vfprintf+0x2d6>
    2caa:	b9 2c       	mov	r11, r9
    2cac:	a4 fe       	sbrs	r10, 4
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <vfprintf+0x2f8>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e8 0d       	add	r30, r8
    2cb4:	f1 1d       	adc	r31, r1
    2cb6:	80 81       	ld	r24, Z
    2cb8:	80 33       	cpi	r24, 0x30	; 48
    2cba:	21 f4       	brne	.+8      	; 0x2cc4 <vfprintf+0x2ee>
    2cbc:	9a 2d       	mov	r25, r10
    2cbe:	99 7e       	andi	r25, 0xE9	; 233
    2cc0:	a9 2e       	mov	r10, r25
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <vfprintf+0x300>
    2cc4:	a2 fe       	sbrs	r10, 2
    2cc6:	06 c0       	rjmp	.+12     	; 0x2cd4 <vfprintf+0x2fe>
    2cc8:	b3 94       	inc	r11
    2cca:	b3 94       	inc	r11
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <vfprintf+0x300>
    2cce:	8a 2d       	mov	r24, r10
    2cd0:	86 78       	andi	r24, 0x86	; 134
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <vfprintf+0x300>
    2cd4:	b3 94       	inc	r11
    2cd6:	a3 fc       	sbrc	r10, 3
    2cd8:	11 c0       	rjmp	.+34     	; 0x2cfc <vfprintf+0x326>
    2cda:	a0 fe       	sbrs	r10, 0
    2cdc:	06 c0       	rjmp	.+12     	; 0x2cea <vfprintf+0x314>
    2cde:	b2 14       	cp	r11, r2
    2ce0:	88 f4       	brcc	.+34     	; 0x2d04 <vfprintf+0x32e>
    2ce2:	28 0c       	add	r2, r8
    2ce4:	92 2c       	mov	r9, r2
    2ce6:	9b 18       	sub	r9, r11
    2ce8:	0e c0       	rjmp	.+28     	; 0x2d06 <vfprintf+0x330>
    2cea:	b2 14       	cp	r11, r2
    2cec:	60 f4       	brcc	.+24     	; 0x2d06 <vfprintf+0x330>
    2cee:	b6 01       	movw	r22, r12
    2cf0:	80 e2       	ldi	r24, 0x20	; 32
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2cf8:	b3 94       	inc	r11
    2cfa:	f7 cf       	rjmp	.-18     	; 0x2cea <vfprintf+0x314>
    2cfc:	b2 14       	cp	r11, r2
    2cfe:	18 f4       	brcc	.+6      	; 0x2d06 <vfprintf+0x330>
    2d00:	2b 18       	sub	r2, r11
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <vfprintf+0x332>
    2d04:	98 2c       	mov	r9, r8
    2d06:	21 2c       	mov	r2, r1
    2d08:	a4 fe       	sbrs	r10, 4
    2d0a:	10 c0       	rjmp	.+32     	; 0x2d2c <vfprintf+0x356>
    2d0c:	b6 01       	movw	r22, r12
    2d0e:	80 e3       	ldi	r24, 0x30	; 48
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2d16:	a2 fe       	sbrs	r10, 2
    2d18:	17 c0       	rjmp	.+46     	; 0x2d48 <vfprintf+0x372>
    2d1a:	a1 fc       	sbrc	r10, 1
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <vfprintf+0x34e>
    2d1e:	88 e7       	ldi	r24, 0x78	; 120
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <vfprintf+0x352>
    2d24:	88 e5       	ldi	r24, 0x58	; 88
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	b6 01       	movw	r22, r12
    2d2a:	0c c0       	rjmp	.+24     	; 0x2d44 <vfprintf+0x36e>
    2d2c:	8a 2d       	mov	r24, r10
    2d2e:	86 78       	andi	r24, 0x86	; 134
    2d30:	59 f0       	breq	.+22     	; 0x2d48 <vfprintf+0x372>
    2d32:	a1 fe       	sbrs	r10, 1
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <vfprintf+0x364>
    2d36:	8b e2       	ldi	r24, 0x2B	; 43
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <vfprintf+0x366>
    2d3a:	80 e2       	ldi	r24, 0x20	; 32
    2d3c:	a7 fc       	sbrc	r10, 7
    2d3e:	8d e2       	ldi	r24, 0x2D	; 45
    2d40:	b6 01       	movw	r22, r12
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2d48:	89 14       	cp	r8, r9
    2d4a:	38 f4       	brcc	.+14     	; 0x2d5a <vfprintf+0x384>
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	80 e3       	ldi	r24, 0x30	; 48
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2d56:	9a 94       	dec	r9
    2d58:	f7 cf       	rjmp	.-18     	; 0x2d48 <vfprintf+0x372>
    2d5a:	8a 94       	dec	r8
    2d5c:	f3 01       	movw	r30, r6
    2d5e:	e8 0d       	add	r30, r8
    2d60:	f1 1d       	adc	r31, r1
    2d62:	80 81       	ld	r24, Z
    2d64:	b6 01       	movw	r22, r12
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2d6c:	81 10       	cpse	r8, r1
    2d6e:	f5 cf       	rjmp	.-22     	; 0x2d5a <vfprintf+0x384>
    2d70:	22 20       	and	r2, r2
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <vfprintf+0x3a0>
    2d74:	42 ce       	rjmp	.-892    	; 0x29fa <vfprintf+0x24>
    2d76:	b6 01       	movw	r22, r12
    2d78:	80 e2       	ldi	r24, 0x20	; 32
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fputc>
    2d80:	2a 94       	dec	r2
    2d82:	f6 cf       	rjmp	.-20     	; 0x2d70 <vfprintf+0x39a>
    2d84:	f6 01       	movw	r30, r12
    2d86:	86 81       	ldd	r24, Z+6	; 0x06
    2d88:	97 81       	ldd	r25, Z+7	; 0x07
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <vfprintf+0x3ba>
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	9f ef       	ldi	r25, 0xFF	; 255
    2d90:	2b 96       	adiw	r28, 0x0b	; 11
    2d92:	e2 e1       	ldi	r30, 0x12	; 18
    2d94:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__>

00002d98 <strnlen_P>:
    2d98:	fc 01       	movw	r30, r24
    2d9a:	05 90       	lpm	r0, Z+
    2d9c:	61 50       	subi	r22, 0x01	; 1
    2d9e:	70 40       	sbci	r23, 0x00	; 0
    2da0:	01 10       	cpse	r0, r1
    2da2:	d8 f7       	brcc	.-10     	; 0x2d9a <strnlen_P+0x2>
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	8e 0f       	add	r24, r30
    2daa:	9f 1f       	adc	r25, r31
    2dac:	08 95       	ret

00002dae <strnlen>:
    2dae:	fc 01       	movw	r30, r24
    2db0:	61 50       	subi	r22, 0x01	; 1
    2db2:	70 40       	sbci	r23, 0x00	; 0
    2db4:	01 90       	ld	r0, Z+
    2db6:	01 10       	cpse	r0, r1
    2db8:	d8 f7       	brcc	.-10     	; 0x2db0 <strnlen+0x2>
    2dba:	80 95       	com	r24
    2dbc:	90 95       	com	r25
    2dbe:	8e 0f       	add	r24, r30
    2dc0:	9f 1f       	adc	r25, r31
    2dc2:	08 95       	ret

00002dc4 <fputc>:
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	fb 01       	movw	r30, r22
    2dce:	23 81       	ldd	r18, Z+3	; 0x03
    2dd0:	21 fd       	sbrc	r18, 1
    2dd2:	03 c0       	rjmp	.+6      	; 0x2dda <fputc+0x16>
    2dd4:	8f ef       	ldi	r24, 0xFF	; 255
    2dd6:	9f ef       	ldi	r25, 0xFF	; 255
    2dd8:	2c c0       	rjmp	.+88     	; 0x2e32 <fputc+0x6e>
    2dda:	22 ff       	sbrs	r18, 2
    2ddc:	16 c0       	rjmp	.+44     	; 0x2e0a <fputc+0x46>
    2dde:	46 81       	ldd	r20, Z+6	; 0x06
    2de0:	57 81       	ldd	r21, Z+7	; 0x07
    2de2:	24 81       	ldd	r18, Z+4	; 0x04
    2de4:	35 81       	ldd	r19, Z+5	; 0x05
    2de6:	42 17       	cp	r20, r18
    2de8:	53 07       	cpc	r21, r19
    2dea:	44 f4       	brge	.+16     	; 0x2dfc <fputc+0x38>
    2dec:	a0 81       	ld	r26, Z
    2dee:	b1 81       	ldd	r27, Z+1	; 0x01
    2df0:	9d 01       	movw	r18, r26
    2df2:	2f 5f       	subi	r18, 0xFF	; 255
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	31 83       	std	Z+1, r19	; 0x01
    2df8:	20 83       	st	Z, r18
    2dfa:	8c 93       	st	X, r24
    2dfc:	26 81       	ldd	r18, Z+6	; 0x06
    2dfe:	37 81       	ldd	r19, Z+7	; 0x07
    2e00:	2f 5f       	subi	r18, 0xFF	; 255
    2e02:	3f 4f       	sbci	r19, 0xFF	; 255
    2e04:	37 83       	std	Z+7, r19	; 0x07
    2e06:	26 83       	std	Z+6, r18	; 0x06
    2e08:	14 c0       	rjmp	.+40     	; 0x2e32 <fputc+0x6e>
    2e0a:	8b 01       	movw	r16, r22
    2e0c:	ec 01       	movw	r28, r24
    2e0e:	fb 01       	movw	r30, r22
    2e10:	00 84       	ldd	r0, Z+8	; 0x08
    2e12:	f1 85       	ldd	r31, Z+9	; 0x09
    2e14:	e0 2d       	mov	r30, r0
    2e16:	09 95       	icall
    2e18:	89 2b       	or	r24, r25
    2e1a:	e1 f6       	brne	.-72     	; 0x2dd4 <fputc+0x10>
    2e1c:	d8 01       	movw	r26, r16
    2e1e:	16 96       	adiw	r26, 0x06	; 6
    2e20:	8d 91       	ld	r24, X+
    2e22:	9c 91       	ld	r25, X
    2e24:	17 97       	sbiw	r26, 0x07	; 7
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	17 96       	adiw	r26, 0x07	; 7
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24
    2e2e:	16 97       	sbiw	r26, 0x06	; 6
    2e30:	ce 01       	movw	r24, r28
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret

00002e3c <__ultoa_invert>:
    2e3c:	fa 01       	movw	r30, r20
    2e3e:	aa 27       	eor	r26, r26
    2e40:	28 30       	cpi	r18, 0x08	; 8
    2e42:	51 f1       	breq	.+84     	; 0x2e98 <__ultoa_invert+0x5c>
    2e44:	20 31       	cpi	r18, 0x10	; 16
    2e46:	81 f1       	breq	.+96     	; 0x2ea8 <__ultoa_invert+0x6c>
    2e48:	e8 94       	clt
    2e4a:	6f 93       	push	r22
    2e4c:	6e 7f       	andi	r22, 0xFE	; 254
    2e4e:	6e 5f       	subi	r22, 0xFE	; 254
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	8f 4f       	sbci	r24, 0xFF	; 255
    2e54:	9f 4f       	sbci	r25, 0xFF	; 255
    2e56:	af 4f       	sbci	r26, 0xFF	; 255
    2e58:	b1 e0       	ldi	r27, 0x01	; 1
    2e5a:	3e d0       	rcall	.+124    	; 0x2ed8 <__ultoa_invert+0x9c>
    2e5c:	b4 e0       	ldi	r27, 0x04	; 4
    2e5e:	3c d0       	rcall	.+120    	; 0x2ed8 <__ultoa_invert+0x9c>
    2e60:	67 0f       	add	r22, r23
    2e62:	78 1f       	adc	r23, r24
    2e64:	89 1f       	adc	r24, r25
    2e66:	9a 1f       	adc	r25, r26
    2e68:	a1 1d       	adc	r26, r1
    2e6a:	68 0f       	add	r22, r24
    2e6c:	79 1f       	adc	r23, r25
    2e6e:	8a 1f       	adc	r24, r26
    2e70:	91 1d       	adc	r25, r1
    2e72:	a1 1d       	adc	r26, r1
    2e74:	6a 0f       	add	r22, r26
    2e76:	71 1d       	adc	r23, r1
    2e78:	81 1d       	adc	r24, r1
    2e7a:	91 1d       	adc	r25, r1
    2e7c:	a1 1d       	adc	r26, r1
    2e7e:	20 d0       	rcall	.+64     	; 0x2ec0 <__ultoa_invert+0x84>
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__ultoa_invert+0x48>
    2e82:	68 94       	set
    2e84:	3f 91       	pop	r19
    2e86:	2a e0       	ldi	r18, 0x0A	; 10
    2e88:	26 9f       	mul	r18, r22
    2e8a:	11 24       	eor	r1, r1
    2e8c:	30 19       	sub	r19, r0
    2e8e:	30 5d       	subi	r19, 0xD0	; 208
    2e90:	31 93       	st	Z+, r19
    2e92:	de f6       	brtc	.-74     	; 0x2e4a <__ultoa_invert+0xe>
    2e94:	cf 01       	movw	r24, r30
    2e96:	08 95       	ret
    2e98:	46 2f       	mov	r20, r22
    2e9a:	47 70       	andi	r20, 0x07	; 7
    2e9c:	40 5d       	subi	r20, 0xD0	; 208
    2e9e:	41 93       	st	Z+, r20
    2ea0:	b3 e0       	ldi	r27, 0x03	; 3
    2ea2:	0f d0       	rcall	.+30     	; 0x2ec2 <__ultoa_invert+0x86>
    2ea4:	c9 f7       	brne	.-14     	; 0x2e98 <__ultoa_invert+0x5c>
    2ea6:	f6 cf       	rjmp	.-20     	; 0x2e94 <__ultoa_invert+0x58>
    2ea8:	46 2f       	mov	r20, r22
    2eaa:	4f 70       	andi	r20, 0x0F	; 15
    2eac:	40 5d       	subi	r20, 0xD0	; 208
    2eae:	4a 33       	cpi	r20, 0x3A	; 58
    2eb0:	18 f0       	brcs	.+6      	; 0x2eb8 <__ultoa_invert+0x7c>
    2eb2:	49 5d       	subi	r20, 0xD9	; 217
    2eb4:	31 fd       	sbrc	r19, 1
    2eb6:	40 52       	subi	r20, 0x20	; 32
    2eb8:	41 93       	st	Z+, r20
    2eba:	02 d0       	rcall	.+4      	; 0x2ec0 <__ultoa_invert+0x84>
    2ebc:	a9 f7       	brne	.-22     	; 0x2ea8 <__ultoa_invert+0x6c>
    2ebe:	ea cf       	rjmp	.-44     	; 0x2e94 <__ultoa_invert+0x58>
    2ec0:	b4 e0       	ldi	r27, 0x04	; 4
    2ec2:	a6 95       	lsr	r26
    2ec4:	97 95       	ror	r25
    2ec6:	87 95       	ror	r24
    2ec8:	77 95       	ror	r23
    2eca:	67 95       	ror	r22
    2ecc:	ba 95       	dec	r27
    2ece:	c9 f7       	brne	.-14     	; 0x2ec2 <__ultoa_invert+0x86>
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	61 05       	cpc	r22, r1
    2ed4:	71 05       	cpc	r23, r1
    2ed6:	08 95       	ret
    2ed8:	9b 01       	movw	r18, r22
    2eda:	ac 01       	movw	r20, r24
    2edc:	0a 2e       	mov	r0, r26
    2ede:	06 94       	lsr	r0
    2ee0:	57 95       	ror	r21
    2ee2:	47 95       	ror	r20
    2ee4:	37 95       	ror	r19
    2ee6:	27 95       	ror	r18
    2ee8:	ba 95       	dec	r27
    2eea:	c9 f7       	brne	.-14     	; 0x2ede <__ultoa_invert+0xa2>
    2eec:	62 0f       	add	r22, r18
    2eee:	73 1f       	adc	r23, r19
    2ef0:	84 1f       	adc	r24, r20
    2ef2:	95 1f       	adc	r25, r21
    2ef4:	a0 1d       	adc	r26, r0
    2ef6:	08 95       	ret

00002ef8 <__prologue_saves__>:
    2ef8:	2f 92       	push	r2
    2efa:	3f 92       	push	r3
    2efc:	4f 92       	push	r4
    2efe:	5f 92       	push	r5
    2f00:	6f 92       	push	r6
    2f02:	7f 92       	push	r7
    2f04:	8f 92       	push	r8
    2f06:	9f 92       	push	r9
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	ca 1b       	sub	r28, r26
    2f22:	db 0b       	sbc	r29, r27
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	09 94       	ijmp

00002f30 <__epilogue_restores__>:
    2f30:	2a 88       	ldd	r2, Y+18	; 0x12
    2f32:	39 88       	ldd	r3, Y+17	; 0x11
    2f34:	48 88       	ldd	r4, Y+16	; 0x10
    2f36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f42:	b9 84       	ldd	r11, Y+9	; 0x09
    2f44:	c8 84       	ldd	r12, Y+8	; 0x08
    2f46:	df 80       	ldd	r13, Y+7	; 0x07
    2f48:	ee 80       	ldd	r14, Y+6	; 0x06
    2f4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f50:	aa 81       	ldd	r26, Y+2	; 0x02
    2f52:	b9 81       	ldd	r27, Y+1	; 0x01
    2f54:	ce 0f       	add	r28, r30
    2f56:	d1 1d       	adc	r29, r1
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	ed 01       	movw	r28, r26
    2f64:	08 95       	ret

00002f66 <__do_global_dtors>:
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	cf e5       	ldi	r28, 0x5F	; 95
    2f6a:	d0 e0       	ldi	r29, 0x00	; 0
    2f6c:	04 c0       	rjmp	.+8      	; 0x2f76 <__do_global_dtors+0x10>
    2f6e:	fe 01       	movw	r30, r28
    2f70:	0e 94 cc 12 	call	0x2598	; 0x2598 <__tablejump2__>
    2f74:	21 96       	adiw	r28, 0x01	; 1
    2f76:	c0 36       	cpi	r28, 0x60	; 96
    2f78:	d1 07       	cpc	r29, r17
    2f7a:	c9 f7       	brne	.-14     	; 0x2f6e <__do_global_dtors+0x8>
    2f7c:	f8 94       	cli

00002f7e <__stop_program>:
    2f7e:	ff cf       	rjmp	.-2      	; 0x2f7e <__stop_program>
