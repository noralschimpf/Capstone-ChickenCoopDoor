
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  00002e2a  00002ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  00800274  00800274  00003032  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000958  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014ec3  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033e1  00000000  00000000  000188eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004fca  00000000  00000000  0001bccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e0c  00000000  00000000  00020c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038d1  00000000  00000000  00022aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a902  00000000  00000000  00026375  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  00030c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_1>
       8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_18>
      4c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	ee 03       	fmulsu	r22, r22
      ba:	b1 05       	cpc	r27, r1
      bc:	cf 0f       	add	r28, r31

000000be <__ctors_end>:
      be:	fe 03       	fmulsu	r23, r22

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	12 e0       	ldi	r17, 0x02	; 2
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	ea e2       	ldi	r30, 0x2A	; 42
      d4:	fe e2       	ldi	r31, 0x2E	; 46
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a4 37       	cpi	r26, 0x74	; 116
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	24 e0       	ldi	r18, 0x04	; 4
      e4:	a4 e7       	ldi	r26, 0x74	; 116
      e6:	b2 e0       	ldi	r27, 0x02	; 2
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	ad 32       	cpi	r26, 0x2D	; 45
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 21 12 	call	0x2442	; 0x2442 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 df 05 	call	0xbbe	; 0xbbe <main>
     10c:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN7DisplayD1Ev>:
	lcd.clear();
	this->selectDisplay(MENU_MAIN,false);
} //Display

// default destructor
Display::~Display()
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24
     11a:	c6 96       	adiw	r24, 0x36	; 54
     11c:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
     120:	ce 01       	movw	r24, r28
     122:	c0 96       	adiw	r24, 0x30	; 48
{
} //~Display
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
	lcd.clear();
	this->selectDisplay(MENU_MAIN,false);
} //Display

// default destructor
Display::~Display()
     128:	0c 94 49 08 	jmp	0x1092	; 0x1092 <_ZN6StringD1Ev>

0000012c <_ZN7Display8print2lnE6StringS0_>:
{
} //~Display

void Display::print2ln(String strTop, String strBot)
{
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	7b 01       	movw	r14, r22
     13c:	8a 01       	movw	r16, r20
	lcd.clear();
     13e:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield5clearEv>
	lcd.setCursor(0,0);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	ce 01       	movw	r24, r28
     148:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strTop);
     14c:	b7 01       	movw	r22, r14
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     154:	41 e0       	ldi	r20, 0x01	; 1
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strBot);
     15e:	b8 01       	movw	r22, r16
     160:	ce 01       	movw	r24, r28
     162:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN5Print5printERK6String>
	lcd.setCursor(0,0);
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	ce 01       	movw	r24, r28
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print(strTop);
	lcd.setCursor(0,1);
	lcd.print(strBot);
	lcd.setCursor(0,0);
     178:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000017c <_ZN7Display11refreshLineEv>:
}

int Display::refreshLine()
{
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	2c 97       	sbiw	r28, 0x0c	; 12
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	8c 01       	movw	r16, r24
	String strToPrint;
     196:	68 e4       	ldi	r22, 0x48	; 72
     198:	72 e0       	ldi	r23, 0x02	; 2
     19a:	ce 01       	movw	r24, r28
     19c:	07 96       	adiw	r24, 0x07	; 7
     19e:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
	switch (inScrollRow)
     1a2:	f8 01       	movw	r30, r16
     1a4:	82 a5       	ldd	r24, Z+42	; 0x2a
     1a6:	93 a5       	ldd	r25, Z+43	; 0x2b
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	19 f0       	breq	.+6      	; 0x1b2 <_ZN7Display11refreshLineEv+0x36>
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	41 f0       	breq	.+16     	; 0x1c0 <_ZN7Display11refreshLineEv+0x44>
     1b0:	0e c0       	rjmp	.+28     	; 0x1ce <_ZN7Display11refreshLineEv+0x52>
	{
		case 0:
		strToPrint = strTopLine;
     1b2:	b8 01       	movw	r22, r16
     1b4:	60 5d       	subi	r22, 0xD0	; 208
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	ce 01       	movw	r24, r28
     1ba:	07 96       	adiw	r24, 0x07	; 7
     1bc:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN6StringaSERKS_>
		case 1:
		strToPrint = strBotLine;
     1c0:	b8 01       	movw	r22, r16
     1c2:	6a 5c       	subi	r22, 0xCA	; 202
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	ce 01       	movw	r24, r28
     1c8:	07 96       	adiw	r24, 0x07	; 7
     1ca:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN6StringaSERKS_>
	}
	
	//reset out-of-bounds section indices
	if (inScrollSectionPrinted>inScrollTotalSections){inScrollSectionPrinted=0;}
     1ce:	f8 01       	movw	r30, r16
     1d0:	46 a5       	ldd	r20, Z+46	; 0x2e
     1d2:	57 a5       	ldd	r21, Z+47	; 0x2f
     1d4:	84 a5       	ldd	r24, Z+44	; 0x2c
     1d6:	95 a5       	ldd	r25, Z+45	; 0x2d
     1d8:	48 17       	cp	r20, r24
     1da:	59 07       	cpc	r21, r25
     1dc:	14 f4       	brge	.+4      	; 0x1e2 <_ZN7Display11refreshLineEv+0x66>
     1de:	15 a6       	std	Z+45, r1	; 0x2d
     1e0:	14 a6       	std	Z+44, r1	; 0x2c
	
	//print selected section
	if(inScrollSectionPrinted==inScrollTotalSections){strToPrint=strToPrint.substring(inScrollSectionPrinted*16);}
     1e2:	f8 01       	movw	r30, r16
     1e4:	24 a5       	ldd	r18, Z+44	; 0x2c
     1e6:	35 a5       	ldd	r19, Z+45	; 0x2d
     1e8:	42 17       	cp	r20, r18
     1ea:	53 07       	cpc	r21, r19
     1ec:	41 f4       	brne	.+16     	; 0x1fe <_ZN7Display11refreshLineEv+0x82>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     1ee:	2b 85       	ldd	r18, Y+11	; 0x0b
     1f0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1f2:	94 e0       	ldi	r25, 0x04	; 4
     1f4:	44 0f       	add	r20, r20
     1f6:	55 1f       	adc	r21, r21
     1f8:	9a 95       	dec	r25
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZN7Display11refreshLineEv+0x78>
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <_ZN7Display11refreshLineEv+0x96>
	else {strToPrint=strToPrint.substring(inScrollSectionPrinted*16,(inScrollSectionPrinted+1)*16);}
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	84 e0       	ldi	r24, 0x04	; 4
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <_ZN7Display11refreshLineEv+0x88>
     20c:	a9 01       	movw	r20, r18
     20e:	40 51       	subi	r20, 0x10	; 16
     210:	51 09       	sbc	r21, r1
     212:	be 01       	movw	r22, r28
     214:	69 5f       	subi	r22, 0xF9	; 249
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	ce 01       	movw	r24, r28
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZNK6String9substringEjj>
     220:	be 01       	movw	r22, r28
     222:	6f 5f       	subi	r22, 0xFF	; 255
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	ce 01       	movw	r24, r28
     228:	07 96       	adiw	r24, 0x07	; 7
     22a:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN6StringaSEOS_>
     22e:	ce 01       	movw	r24, r28
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
	lcd.setCursor(0,inScrollRow);
     236:	f8 01       	movw	r30, r16
     238:	42 a5       	ldd	r20, Z+42	; 0x2a
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	c8 01       	movw	r24, r16
     23e:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strToPrint);
     242:	be 01       	movw	r22, r28
     244:	69 5f       	subi	r22, 0xF9	; 249
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	c8 01       	movw	r24, r16
     24a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN5Print5printERK6String>
	lcd.setCursor(0,0);
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	c8 01       	movw	r24, r16
     254:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	
	return inScrollSectionPrinted+1;
     258:	f8 01       	movw	r30, r16
     25a:	04 a5       	ldd	r16, Z+44	; 0x2c
     25c:	15 a5       	ldd	r17, Z+45	; 0x2d
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd.setCursor(0,0);
}

int Display::refreshLine()
{
	String strToPrint;
     262:	ce 01       	movw	r24, r28
     264:	07 96       	adiw	r24, 0x07	; 7
     266:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
	lcd.setCursor(0,inScrollRow);
	lcd.print(strToPrint);
	lcd.setCursor(0,0);
	
	return inScrollSectionPrinted+1;
}
     26a:	c8 01       	movw	r24, r16
     26c:	2c 96       	adiw	r28, 0x0c	; 12
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:

void Display::setCurrentDisplay(String _top, String _bot, int _backlight, int NextStates[5],int _scrollTotal, int _scrollRow, bool _refresh)
//Sets new Display values
{
     282:	4f 92       	push	r4
     284:	5f 92       	push	r5
     286:	6f 92       	push	r6
     288:	7f 92       	push	r7
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2c 97       	sbiw	r28, 0x0c	; 12
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
     2b2:	4c 01       	movw	r8, r24
     2b4:	3b 01       	movw	r6, r22
     2b6:	2a 01       	movw	r4, r20
     2b8:	b2 2e       	mov	r11, r18
	strTopLine = _top;
     2ba:	c0 96       	adiw	r24, 0x30	; 48
     2bc:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN6StringaSERKS_>
	strBotLine = _bot;
     2c0:	b2 01       	movw	r22, r4
     2c2:	c4 01       	movw	r24, r8
     2c4:	c6 96       	adiw	r24, 0x36	; 54
     2c6:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN6StringaSERKS_>
	
	inScrollTotalSections = _scrollTotal;
     2ca:	f4 01       	movw	r30, r8
     2cc:	f7 a6       	std	Z+47, r15	; 0x2f
     2ce:	e6 a6       	std	Z+46, r14	; 0x2e
	inScrollRow = _scrollRow;
     2d0:	d3 a6       	std	Z+43, r13	; 0x2b
     2d2:	c2 a6       	std	Z+42, r12	; 0x2a
	
	inNext[SELECT] = NextStates[0];
     2d4:	f8 01       	movw	r30, r16
     2d6:	80 81       	ld	r24, Z
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	f4 01       	movw	r30, r8
     2dc:	97 8f       	std	Z+31, r25	; 0x1f
     2de:	86 8f       	std	Z+30, r24	; 0x1e
	inNext[UP] = NextStates[1];
     2e0:	f8 01       	movw	r30, r16
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	f4 01       	movw	r30, r8
     2e8:	91 a3       	std	Z+33, r25	; 0x21
     2ea:	80 a3       	std	Z+32, r24	; 0x20
	inNext[DOWN] = NextStates[2];
     2ec:	f8 01       	movw	r30, r16
     2ee:	84 81       	ldd	r24, Z+4	; 0x04
     2f0:	95 81       	ldd	r25, Z+5	; 0x05
     2f2:	f4 01       	movw	r30, r8
     2f4:	93 a3       	std	Z+35, r25	; 0x23
     2f6:	82 a3       	std	Z+34, r24	; 0x22
	inNext[LEFT] = NextStates[3];
     2f8:	f8 01       	movw	r30, r16
     2fa:	86 81       	ldd	r24, Z+6	; 0x06
     2fc:	97 81       	ldd	r25, Z+7	; 0x07
     2fe:	f4 01       	movw	r30, r8
     300:	95 a3       	std	Z+37, r25	; 0x25
     302:	84 a3       	std	Z+36, r24	; 0x24
	inNext[RIGHT] = NextStates[4];
     304:	f8 01       	movw	r30, r16
     306:	80 85       	ldd	r24, Z+8	; 0x08
     308:	91 85       	ldd	r25, Z+9	; 0x09
     30a:	f4 01       	movw	r30, r8
     30c:	97 a3       	std	Z+39, r25	; 0x27
     30e:	86 a3       	std	Z+38, r24	; 0x26
	
	lcd.setBacklight(_backlight);
     310:	6b 2d       	mov	r22, r11
     312:	c4 01       	movw	r24, r8
     314:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
	blnIsRefreshed = _refresh;
     318:	f4 01       	movw	r30, r8
     31a:	a4 ae       	std	Z+60, r10	; 0x3c
	if (!_refresh)
     31c:	a1 10       	cpse	r10, r1
     31e:	1e c0       	rjmp	.+60     	; 0x35c <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
	{
		inScrollSectionPrinted = 0;
     320:	15 a6       	std	Z+45, r1	; 0x2d
     322:	14 a6       	std	Z+44, r1	; 0x2c
		this->print2ln(_top,_bot);
     324:	b2 01       	movw	r22, r4
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN6StringC1ERKS_>
     32e:	b3 01       	movw	r22, r6
     330:	ce 01       	movw	r24, r28
     332:	07 96       	adiw	r24, 0x07	; 7
     334:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN6StringC1ERKS_>
     338:	ae 01       	movw	r20, r28
     33a:	4f 5f       	subi	r20, 0xFF	; 255
     33c:	5f 4f       	sbci	r21, 0xFF	; 255
     33e:	be 01       	movw	r22, r28
     340:	69 5f       	subi	r22, 0xF9	; 249
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	c4 01       	movw	r24, r8
     346:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7Display8print2lnE6StringS0_>
     34a:	ce 01       	movw	r24, r28
     34c:	07 96       	adiw	r24, 0x07	; 7
     34e:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
     352:	ce 01       	movw	r24, r28
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
	}
	else
	{
		inScrollSectionPrinted = this->refreshLine();
     35c:	c4 01       	movw	r24, r8
     35e:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN7Display11refreshLineEv>
     362:	f4 01       	movw	r30, r8
     364:	95 a7       	std	Z+45, r25	; 0x2d
     366:	84 a7       	std	Z+44, r24	; 0x2c
	}
}
     368:	2c 96       	adiw	r28, 0x0c	; 12
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	08 95       	ret

00000396 <_ZN7Display13selectDisplayEibPcS0_>:

void Display::selectDisplay(int inCurrentMenu, bool blnIsRefresh, char *strArg1,char *strArg2)
//Selects which menu will be displayed. Complete possibilities are present here
{
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	ac 97       	sbiw	r28, 0x2c	; 44
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	4c 01       	movw	r8, r24
     3be:	c8 01       	movw	r24, r16
	if(blnIsRefresh) {refreshLine();}
     3c0:	44 23       	and	r20, r20
     3c2:	21 f0       	breq	.+8      	; 0x3cc <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3c4:	c4 01       	movw	r24, r8
     3c6:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN7Display11refreshLineEv>
     3ca:	9e c0       	rjmp	.+316    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     3cc:	8e 01       	movw	r16, r28
     3ce:	0f 5f       	subi	r16, 0xFF	; 255
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
		char strTemp [32];
		int inNextStates[5];
		switch(inCurrentMenu)
     3d2:	62 30       	cpi	r22, 0x02	; 2
     3d4:	71 05       	cpc	r23, r1
     3d6:	59 f1       	breq	.+86     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3d8:	ec f4       	brge	.+58     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3da:	61 15       	cp	r22, r1
     3dc:	71 05       	cpc	r23, r1
     3de:	09 f4       	brne	.+2      	; 0x3e2 <_ZN7Display13selectDisplayEibPcS0_+0x4c>
     3e0:	59 c0       	rjmp	.+178    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	71 05       	cpc	r23, r1
     3e6:	09 f0       	breq	.+2      	; 0x3ea <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3e8:	55 c0       	rjmp	.+170    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	else {selectDisplay(inCurrent,true);}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     3ea:	1a 82       	std	Y+2, r1	; 0x02
     3ec:	19 82       	std	Y+1, r1	; 0x01
	arr[1] = b;
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	8b 83       	std	Y+3, r24	; 0x03
	arr[2] = c;
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	arr[3] = d;
     3fa:	98 87       	std	Y+8, r25	; 0x08
     3fc:	8f 83       	std	Y+7, r24	; 0x07
	arr[4] = e;
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	89 87       	std	Y+9, r24	; 0x09
				setCurrentDisplay("Main Menu","Up:Open DnCloseLft:Day Rt:Night",GREEN,
					inNextStates,1,1);
				break;
			case MENU_OPEN:
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Opening Door","Sel:Escape",YELLOW,inNextStates);
     402:	6d e3       	ldi	r22, 0x3D	; 61
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	ce 01       	movw	r24, r28
     408:	81 96       	adiw	r24, 0x21	; 33
     40a:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     40e:	68 e4       	ldi	r22, 0x48	; 72
     410:	71 e0       	ldi	r23, 0x01	; 1
     412:	21 c0       	rjmp	.+66     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	if(blnIsRefresh) {refreshLine();}
	else
	{
		char strTemp [32];
		int inNextStates[5];
		switch(inCurrentMenu)
     414:	63 30       	cpi	r22, 0x03	; 3
     416:	71 05       	cpc	r23, r1
     418:	59 f1       	breq	.+86     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     41a:	64 30       	cpi	r22, 0x04	; 4
     41c:	71 05       	cpc	r23, r1
     41e:	d1 f5       	brne	.+116    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Day Mode        Tmp:%s Lht:%s",strArg1,strArg2);
				break;
			case MENU_NIGHT:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%s Lht:%s",strArg1,strArg2);
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	3f 93       	push	r19
     426:	2f 93       	push	r18
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	27 c0       	rjmp	.+78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	else {selectDisplay(inCurrent,true);}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     42e:	1a 82       	std	Y+2, r1	; 0x02
     430:	19 82       	std	Y+1, r1	; 0x01
	arr[1] = b;
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	8b 83       	std	Y+3, r24	; 0x03
	arr[2] = c;
     43a:	9e 83       	std	Y+6, r25	; 0x06
     43c:	8d 83       	std	Y+5, r24	; 0x05
	arr[3] = d;
     43e:	98 87       	std	Y+8, r25	; 0x08
     440:	8f 83       	std	Y+7, r24	; 0x07
	arr[4] = e;
     442:	9a 87       	std	Y+10, r25	; 0x0a
     444:	89 87       	std	Y+9, r24	; 0x09
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Opening Door","Sel:Escape",YELLOW,inNextStates);
				break;
			case MENU_CLOSE:
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Closing Door","Sel:Escape",YELLOW,inNextStates);
     446:	6d e3       	ldi	r22, 0x3D	; 61
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	ce 01       	movw	r24, r28
     44c:	81 96       	adiw	r24, 0x21	; 33
     44e:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     452:	65 e5       	ldi	r22, 0x55	; 85
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	ce 01       	movw	r24, r28
     458:	87 96       	adiw	r24, 0x27	; 39
     45a:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     45e:	a1 2c       	mov	r10, r1
     460:	cc 24       	eor	r12, r12
     462:	ca 94       	dec	r12
     464:	dc 2c       	mov	r13, r12
     466:	e1 2c       	mov	r14, r1
     468:	f1 2c       	mov	r15, r1
     46a:	23 e0       	ldi	r18, 0x03	; 3
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	3b c0       	rjmp	.+118    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				break;
			case MENU_DAY:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Day Mode        Tmp:%s Lht:%s",strArg1,strArg2);
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	3f 93       	push	r19
     476:	2f 93       	push	r18
     478:	82 e6       	ldi	r24, 0x62	; 98
     47a:	91 e0       	ldi	r25, 0x01	; 1
				break;
			case MENU_NIGHT:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%s Lht:%s",strArg1,strArg2);
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	1f 93       	push	r17
     482:	0f 93       	push	r16
     484:	0e 94 1e 14 	call	0x283c	; 0x283c <sprintf>
				break;
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	3a c0       	rjmp	.+116    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	else {selectDisplay(inCurrent,true);}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	arr[1] = b;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9c 83       	std	Y+4, r25	; 0x04
     4a2:	8b 83       	std	Y+3, r24	; 0x03
	arr[2] = c;
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
	arr[3] = d;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	98 87       	std	Y+8, r25	; 0x08
     4b2:	8f 83       	std	Y+7, r24	; 0x07
	arr[4] = e;
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9a 87       	std	Y+10, r25	; 0x0a
     4ba:	89 87       	std	Y+9, r24	; 0x09
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%s Lht:%s",strArg1,strArg2);
				break;
			default:
				assignStates(inNextStates,-1,MENU_OPEN,MENU_CLOSE,MENU_DAY,MENU_NIGHT);
				setCurrentDisplay("Main Menu","Up:Open DnCloseLft:Day Rt:Night",GREEN, inNextStates,1,1);
     4bc:	63 e1       	ldi	r22, 0x13	; 19
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	ce 01       	movw	r24, r28
     4c2:	81 96       	adiw	r24, 0x21	; 33
     4c4:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     4c8:	63 e3       	ldi	r22, 0x33	; 51
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	ce 01       	movw	r24, r28
     4ce:	87 96       	adiw	r24, 0x27	; 39
     4d0:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     4d4:	a1 2c       	mov	r10, r1
     4d6:	cc 24       	eor	r12, r12
     4d8:	c3 94       	inc	r12
     4da:	d1 2c       	mov	r13, r1
     4dc:	ee 24       	eor	r14, r14
     4de:	e3 94       	inc	r14
     4e0:	f1 2c       	mov	r15, r1
     4e2:	22 e0       	ldi	r18, 0x02	; 2
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	ae 01       	movw	r20, r28
     4e8:	4f 5d       	subi	r20, 0xDF	; 223
     4ea:	5f 4f       	sbci	r21, 0xFF	; 255
     4ec:	be 01       	movw	r22, r28
     4ee:	69 5d       	subi	r22, 0xD9	; 217
     4f0:	7f 4f       	sbci	r23, 0xFF	; 255
     4f2:	c4 01       	movw	r24, r8
     4f4:	0e 94 41 01 	call	0x282	; 0x282 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     4f8:	ce 01       	movw	r24, r28
     4fa:	87 96       	adiw	r24, 0x27	; 39
     4fc:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
     500:	ce 01       	movw	r24, r28
     502:	81 96       	adiw	r24, 0x21	; 33
     504:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
				break;
		}
		
	}
	
}
     508:	ac 96       	adiw	r28, 0x2c	; 44
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	08 95       	ret

0000052c <_ZN7DisplayC1Ev>:

#include "Display.h"
#include "constant_parameters.h"

// default constructor
Display::Display()
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	6c 97       	sbiw	r28, 0x1c	; 28
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	7c 01       	movw	r14, r24
     54a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN21Adafruit_RGBLCDShieldC1Ev>
     54e:	68 e4       	ldi	r22, 0x48	; 72
     550:	72 e0       	ldi	r23, 0x02	; 2
     552:	c7 01       	movw	r24, r14
     554:	c0 96       	adiw	r24, 0x30	; 48
     556:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
     55a:	68 e4       	ldi	r22, 0x48	; 72
     55c:	72 e0       	ldi	r23, 0x02	; 2
     55e:	c7 01       	movw	r24, r14
     560:	c6 96       	adiw	r24, 0x36	; 54
     562:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
{
	lcd = Adafruit_RGBLCDShield();
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN21Adafruit_RGBLCDShieldC1Ev>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	f7 01       	movw	r30, r14
     574:	93 83       	std	Z+3, r25	; 0x03
     576:	82 83       	std	Z+2, r24	; 0x02
#define BUTTON_LEFT 0x10
#define BUTTON_RIGHT 0x02
#define BUTTON_SELECT 0x01


class Adafruit_RGBLCDShield : public Print {
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	84 83       	std	Z+4, r24	; 0x04
     57c:	8e 81       	ldd	r24, Y+6	; 0x06
     57e:	85 83       	std	Z+5, r24	; 0x05
     580:	8f 81       	ldd	r24, Y+7	; 0x07
     582:	86 83       	std	Z+6, r24	; 0x06
     584:	37 96       	adiw	r30, 0x07	; 7
     586:	de 01       	movw	r26, r28
     588:	18 96       	adiw	r26, 0x08	; 8
     58a:	c7 01       	movw	r24, r14
     58c:	0f 96       	adiw	r24, 0x0f	; 15
     58e:	2d 91       	ld	r18, X+
     590:	21 93       	st	Z+, r18
     592:	e8 17       	cp	r30, r24
     594:	f9 07       	cpc	r31, r25
     596:	d9 f7       	brne	.-10     	; 0x58e <_ZN7DisplayC1Ev+0x62>
     598:	de 01       	movw	r26, r28
     59a:	50 96       	adiw	r26, 0x10	; 16
     59c:	c7 01       	movw	r24, r14
     59e:	44 96       	adiw	r24, 0x14	; 20
     5a0:	2d 91       	ld	r18, X+
     5a2:	21 93       	st	Z+, r18
     5a4:	e8 17       	cp	r30, r24
     5a6:	f9 07       	cpc	r31, r25
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <_ZN7DisplayC1Ev+0x74>
     5aa:	8d 89       	ldd	r24, Y+21	; 0x15
     5ac:	f7 01       	movw	r30, r14
     5ae:	84 8b       	std	Z+20, r24	; 0x14
     5b0:	8e 89       	ldd	r24, Y+22	; 0x16
     5b2:	85 8b       	std	Z+21, r24	; 0x15
     5b4:	8f 89       	ldd	r24, Y+23	; 0x17
     5b6:	86 8b       	std	Z+22, r24	; 0x16
     5b8:	88 8d       	ldd	r24, Y+24	; 0x18
     5ba:	87 8b       	std	Z+23, r24	; 0x17
     5bc:	89 8d       	ldd	r24, Y+25	; 0x19
     5be:	80 8f       	std	Z+24, r24	; 0x18
     5c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5c2:	81 8f       	std	Z+25, r24	; 0x19
     5c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5c6:	82 8f       	std	Z+26, r24	; 0x1a
     5c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ca:	83 8f       	std	Z+27, r24	; 0x1b
	lcd.begin(16,2);
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	42 e0       	ldi	r20, 0x02	; 2
     5d0:	60 e1       	ldi	r22, 0x10	; 16
     5d2:	c7 01       	movw	r24, r14
     5d4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN21Adafruit_RGBLCDShield5beginEhhh>
	lcd.clear();
     5d8:	c7 01       	movw	r24, r14
     5da:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield5clearEv>
	this->selectDisplay(MENU_MAIN,false);
     5de:	08 e4       	ldi	r16, 0x48	; 72
     5e0:	12 e0       	ldi	r17, 0x02	; 2
     5e2:	98 01       	movw	r18, r16
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	c7 01       	movw	r24, r14
     5ec:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN7Display13selectDisplayEibPcS0_>
} //Display
     5f0:	6c 96       	adiw	r28, 0x1c	; 28
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	08 95       	ret

0000060a <_ZN7Display21UpdateMenuFromButtonsEv>:
	
}

void Display::UpdateMenuFromButtons()
//Reads buttons and alters for initialized menu directions
{
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
	uint8_t buttons = lcd.readButtons();
     614:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
	if((buttons & BUTTON_SELECT) && inNext[SELECT] != -1){selectDisplay(inNext[SELECT],false);}
     618:	80 ff       	sbrs	r24, 0
     61a:	06 c0       	rjmp	.+12     	; 0x628 <_ZN7Display21UpdateMenuFromButtonsEv+0x1e>
     61c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     61e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     620:	6f 3f       	cpi	r22, 0xFF	; 255
     622:	9f ef       	ldi	r25, 0xFF	; 255
     624:	79 07       	cpc	r23, r25
     626:	01 f5       	brne	.+64     	; 0x668 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
	else if((buttons & BUTTON_UP) && inNext[UP] != -1){selectDisplay(inNext[UP],false);}
     628:	83 ff       	sbrs	r24, 3
     62a:	06 c0       	rjmp	.+12     	; 0x638 <_ZN7Display21UpdateMenuFromButtonsEv+0x2e>
     62c:	68 a1       	ldd	r22, Y+32	; 0x20
     62e:	79 a1       	ldd	r23, Y+33	; 0x21
     630:	6f 3f       	cpi	r22, 0xFF	; 255
     632:	9f ef       	ldi	r25, 0xFF	; 255
     634:	79 07       	cpc	r23, r25
     636:	c1 f4       	brne	.+48     	; 0x668 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
	else if((buttons & BUTTON_DOWN) && inNext[DOWN] != -1){selectDisplay(inNext[DOWN],false);}
     638:	82 ff       	sbrs	r24, 2
     63a:	06 c0       	rjmp	.+12     	; 0x648 <_ZN7Display21UpdateMenuFromButtonsEv+0x3e>
     63c:	6a a1       	ldd	r22, Y+34	; 0x22
     63e:	7b a1       	ldd	r23, Y+35	; 0x23
     640:	6f 3f       	cpi	r22, 0xFF	; 255
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	79 07       	cpc	r23, r25
     646:	81 f4       	brne	.+32     	; 0x668 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
	else if((buttons & BUTTON_LEFT) && inNext[LEFT] != -1){selectDisplay(inNext[LEFT],false);}
     648:	84 ff       	sbrs	r24, 4
     64a:	06 c0       	rjmp	.+12     	; 0x658 <_ZN7Display21UpdateMenuFromButtonsEv+0x4e>
     64c:	6c a1       	ldd	r22, Y+36	; 0x24
     64e:	7d a1       	ldd	r23, Y+37	; 0x25
     650:	6f 3f       	cpi	r22, 0xFF	; 255
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	79 07       	cpc	r23, r25
     656:	41 f4       	brne	.+16     	; 0x668 <_ZN7Display21UpdateMenuFromButtonsEv+0x5e>
	else if((buttons & BUTTON_RIGHT) && inNext[RIGHT] != -1){selectDisplay(inNext[RIGHT],false);}
     658:	81 ff       	sbrs	r24, 1
     65a:	12 c0       	rjmp	.+36     	; 0x680 <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     65c:	6e a1       	ldd	r22, Y+38	; 0x26
     65e:	7f a1       	ldd	r23, Y+39	; 0x27
     660:	6f 3f       	cpi	r22, 0xFF	; 255
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	78 07       	cpc	r23, r24
     666:	61 f0       	breq	.+24     	; 0x680 <_ZN7Display21UpdateMenuFromButtonsEv+0x76>
     668:	08 e4       	ldi	r16, 0x48	; 72
     66a:	12 e0       	ldi	r17, 0x02	; 2
     66c:	98 01       	movw	r18, r16
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	ce 01       	movw	r24, r28
     672:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN7Display13selectDisplayEibPcS0_>
	else {selectDisplay(inCurrent,true);}
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret
}

void Display::selectDisplay(int inCurrentMenu, bool blnIsRefresh, char *strArg1,char *strArg2)
//Selects which menu will be displayed. Complete possibilities are present here
{
	if(blnIsRefresh) {refreshLine();}
     680:	ce 01       	movw	r24, r28
	else if((buttons & BUTTON_UP) && inNext[UP] != -1){selectDisplay(inNext[UP],false);}
	else if((buttons & BUTTON_DOWN) && inNext[DOWN] != -1){selectDisplay(inNext[DOWN],false);}
	else if((buttons & BUTTON_LEFT) && inNext[LEFT] != -1){selectDisplay(inNext[LEFT],false);}
	else if((buttons & BUTTON_RIGHT) && inNext[RIGHT] != -1){selectDisplay(inNext[RIGHT],false);}
	else {selectDisplay(inCurrent,true);}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
}

void Display::selectDisplay(int inCurrentMenu, bool blnIsRefresh, char *strArg1,char *strArg2)
//Selects which menu will be displayed. Complete possibilities are present here
{
	if(blnIsRefresh) {refreshLine();}
     68a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_ZN7Display11refreshLineEv>

0000068e <setup>:
    default:
      Serial.println("ERR CheckLight: Invalid TimeOfDay Arg Passed");
      return false;
  }

}
     68e:	26 e0       	ldi	r18, 0x06	; 6
     690:	40 e8       	ldi	r20, 0x80	; 128
     692:	55 e2       	ldi	r21, 0x25	; 37
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	8f eb       	ldi	r24, 0xBF	; 191
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN14HardwareSerial5beginEmh>
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	8a e0       	ldi	r24, 0x0A	; 10
     6a4:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	89 e0       	ldi	r24, 0x09	; 9
     6ac:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	60 ee       	ldi	r22, 0xE0	; 224
     6be:	73 e0       	ldi	r23, 0x03	; 3
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 52 06 	call	0xca4	; 0xca4 <attachInterrupt>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 b1 07 	call	0xf62	; 0xf62 <analogReference>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <isOkay>
     6d2:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <isClosing>
     6d6:	08 95       	ret

000006d8 <loop>:
     6d8:	84 e7       	ldi	r24, 0x74	; 116
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN7Display21UpdateMenuFromButtonsEv>
     6e0:	68 eb       	ldi	r22, 0xB8	; 184
     6e2:	7b e0       	ldi	r23, 0x0B	; 11
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay>
     6ec:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <isOkay>
     6f0:	81 11       	cpse	r24, r1
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <loop+0x22>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <isOkay>
     6fa:	08 95       	ret

000006fc <_Z14openDoorActioni>:
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	8a e0       	ldi	r24, 0x0A	; 10
     706:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	89 e0       	ldi	r24, 0x09	; 9
     70e:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     712:	65 eb       	ldi	r22, 0xB5	; 181
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	8f eb       	ldi	r24, 0xBF	; 191
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN5Print7printlnEPKc>
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	8a e0       	ldi	r24, 0x0A	; 10
     722:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	89 e0       	ldi	r24, 0x09	; 9
     72a:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     72e:	c8 ef       	ldi	r28, 0xF8	; 248
     730:	da e2       	ldi	r29, 0x2A	; 42
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <isOkay>
     738:	88 23       	and	r24, r24
     73a:	b9 f0       	breq	.+46     	; 0x76a <_Z14openDoorActioni+0x6e>
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay>
     748:	84 e7       	ldi	r24, 0x74	; 116
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN7Display21UpdateMenuFromButtonsEv>
     750:	11 23       	and	r17, r17
     752:	49 f0       	breq	.+18     	; 0x766 <_Z14openDoorActioni+0x6a>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	8a e0       	ldi	r24, 0x0A	; 10
     758:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     764:	02 c0       	rjmp	.+4      	; 0x76a <_Z14openDoorActioni+0x6e>
     766:	21 97       	sbiw	r28, 0x01	; 1
     768:	29 f7       	brne	.-54     	; 0x734 <_Z14openDoorActioni+0x38>
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	89 e0       	ldi	r24, 0x09	; 9
     776:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8a e0       	ldi	r24, 0x0A	; 10
     77e:	0e 94 dd 07 	call	0xfba	; 0xfba <pinMode>
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	89 e0       	ldi	r24, 0x09	; 9
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0c 94 dd 07 	jmp	0xfba	; 0xfba <pinMode>

00000790 <_Z13emergencyOpenv>:
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	89 e0       	ldi	r24, 0x09	; 9
     794:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
     7a0:	64 ee       	ldi	r22, 0xE4	; 228
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	8f eb       	ldi	r24, 0xBF	; 191
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN5Print7printlnEPKc>
     7ac:	88 ee       	ldi	r24, 0xE8	; 232
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z14openDoorActioni>
     7b4:	6e ee       	ldi	r22, 0xEE	; 238
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	8f eb       	ldi	r24, 0xBF	; 191
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <_ZN5Print7printlnEPKc>

000007c0 <_Z17LimitSwitchActivev>:
     7c0:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <isOkay>
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	72 e0       	ldi	r23, 0x02	; 2
     7c8:	8f eb       	ldi	r24, 0xBF	; 191
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN5Print7printlnEPKc>
     7d0:	0e 94 c8 03 	call	0x790	; 0x790 <_Z13emergencyOpenv>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <isOkay>
     7da:	08 95       	ret

000007dc <_GLOBAL__sub_I_Temperature>:
double Temperature = 0;
int Light = 0;
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     7dc:	68 e4       	ldi	r22, 0x48	; 72
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	89 eb       	ldi	r24, 0xB9	; 185
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
String line2;
     7e8:	68 e4       	ldi	r22, 0x48	; 72
     7ea:	72 e0       	ldi	r23, 0x02	; 2
     7ec:	83 eb       	ldi	r24, 0xB3	; 179
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
char lghtstr[4];
char tempstr[4];
char sac[64];


Display dspMainDoor;
     7f4:	84 e7       	ldi	r24, 0x74	; 116
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0c 94 96 02 	jmp	0x52c	; 0x52c <_ZN7DisplayC1Ev>

000007fc <_GLOBAL__sub_D_Temperature>:
     7fc:	84 e7       	ldi	r24, 0x74	; 116
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7DisplayD1Ev>
int Light = 0;
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
String line2;
     804:	83 eb       	ldi	r24, 0xB3	; 179
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6StringD1Ev>
double Temperature = 0;
int Light = 0;
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     80c:	89 eb       	ldi	r24, 0xB9	; 185
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0c 94 49 08 	jmp	0x1092	; 0x1092 <_ZN6StringD1Ev>

00000814 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     814:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     816:	91 8d       	ldd	r25, Z+25	; 0x19
     818:	22 8d       	ldd	r18, Z+26	; 0x1a
     81a:	89 2f       	mov	r24, r25
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	80 5c       	subi	r24, 0xC0	; 192
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	82 1b       	sub	r24, r18
     824:	91 09       	sbc	r25, r1
}
     826:	8f 73       	andi	r24, 0x3F	; 63
     828:	99 27       	eor	r25, r25
     82a:	08 95       	ret

0000082c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     82c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     82e:	91 8d       	ldd	r25, Z+25	; 0x19
     830:	82 8d       	ldd	r24, Z+26	; 0x1a
     832:	98 17       	cp	r25, r24
     834:	31 f0       	breq	.+12     	; 0x842 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     836:	82 8d       	ldd	r24, Z+26	; 0x1a
     838:	e8 0f       	add	r30, r24
     83a:	f1 1d       	adc	r31, r1
     83c:	85 8d       	ldd	r24, Z+29	; 0x1d
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     846:	08 95       	ret

00000848 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     848:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     84a:	91 8d       	ldd	r25, Z+25	; 0x19
     84c:	82 8d       	ldd	r24, Z+26	; 0x1a
     84e:	98 17       	cp	r25, r24
     850:	61 f0       	breq	.+24     	; 0x86a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     852:	82 8d       	ldd	r24, Z+26	; 0x1a
     854:	df 01       	movw	r26, r30
     856:	a8 0f       	add	r26, r24
     858:	b1 1d       	adc	r27, r1
     85a:	5d 96       	adiw	r26, 0x1d	; 29
     85c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     85e:	92 8d       	ldd	r25, Z+26	; 0x1a
     860:	9f 5f       	subi	r25, 0xFF	; 255
     862:	9f 73       	andi	r25, 0x3F	; 63
     864:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     86e:	08 95       	ret

00000870 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     870:	fc 01       	movw	r30, r24
     872:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     874:	44 8d       	ldd	r20, Z+28	; 0x1c
     876:	25 2f       	mov	r18, r21
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	84 2f       	mov	r24, r20
     87c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     87e:	82 1b       	sub	r24, r18
     880:	93 0b       	sbc	r25, r19
     882:	54 17       	cp	r21, r20
     884:	10 f0       	brcs	.+4      	; 0x88a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     886:	cf 96       	adiw	r24, 0x3f	; 63
     888:	08 95       	ret
  return tail - head - 1;
     88a:	01 97       	sbiw	r24, 0x01	; 1
}
     88c:	08 95       	ret

0000088e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     88e:	87 ea       	ldi	r24, 0xA7	; 167
     890:	95 e0       	ldi	r25, 0x05	; 5
     892:	89 2b       	or	r24, r25
     894:	49 f0       	breq	.+18     	; 0x8a8 <_Z14serialEventRunv+0x1a>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	89 2b       	or	r24, r25
     89c:	29 f0       	breq	.+10     	; 0x8a8 <_Z14serialEventRunv+0x1a>
     89e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z17Serial0_availablev>
     8a2:	81 11       	cpse	r24, r1
     8a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     8a8:	08 95       	ret

000008aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8aa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8ac:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ae:	df 01       	movw	r26, r30
     8b0:	a8 0f       	add	r26, r24
     8b2:	b1 1d       	adc	r27, r1
     8b4:	a3 5a       	subi	r26, 0xA3	; 163
     8b6:	bf 4f       	sbci	r27, 0xFF	; 255
     8b8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	8f 73       	andi	r24, 0x3F	; 63
     8c2:	99 27       	eor	r25, r25
     8c4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8c6:	a6 89       	ldd	r26, Z+22	; 0x16
     8c8:	b7 89       	ldd	r27, Z+23	; 0x17
     8ca:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8cc:	a0 89       	ldd	r26, Z+16	; 0x10
     8ce:	b1 89       	ldd	r27, Z+17	; 0x11
     8d0:	8c 91       	ld	r24, X
     8d2:	83 70       	andi	r24, 0x03	; 3
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     8d8:	93 8d       	ldd	r25, Z+27	; 0x1b
     8da:	84 8d       	ldd	r24, Z+28	; 0x1c
     8dc:	98 13       	cpse	r25, r24
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8e0:	02 88       	ldd	r0, Z+18	; 0x12
     8e2:	f3 89       	ldd	r31, Z+19	; 0x13
     8e4:	e0 2d       	mov	r30, r0
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 7d       	andi	r24, 0xDF	; 223
     8ea:	80 83       	st	Z, r24
     8ec:	08 95       	ret

000008ee <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ec 01       	movw	r28, r24
  _written = true;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     900:	9b 8d       	ldd	r25, Y+27	; 0x1b
     902:	8c 8d       	ldd	r24, Y+28	; 0x1c
     904:	98 13       	cpse	r25, r24
     906:	05 c0       	rjmp	.+10     	; 0x912 <__stack+0x13>
     908:	e8 89       	ldd	r30, Y+16	; 0x10
     90a:	f9 89       	ldd	r31, Y+17	; 0x11
     90c:	80 81       	ld	r24, Z
     90e:	85 fd       	sbrc	r24, 5
     910:	26 c0       	rjmp	.+76     	; 0x95e <__stack+0x5f>
     912:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     914:	0b 8d       	ldd	r16, Y+27	; 0x1b
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	0f 73       	andi	r16, 0x3F	; 63
     91e:	11 27       	eor	r17, r17
     920:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     922:	8c 8d       	ldd	r24, Y+28	; 0x1c
     924:	e8 12       	cpse	r14, r24
     926:	0c c0       	rjmp	.+24     	; 0x940 <__stack+0x41>
    if (bit_is_clear(SREG, SREG_I)) {
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	07 fc       	sbrc	r0, 7
     92c:	fa cf       	rjmp	.-12     	; 0x922 <__stack+0x23>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     92e:	e8 89       	ldd	r30, Y+16	; 0x10
     930:	f9 89       	ldd	r31, Y+17	; 0x11
     932:	80 81       	ld	r24, Z
     934:	85 ff       	sbrs	r24, 5
     936:	f5 cf       	rjmp	.-22     	; 0x922 <__stack+0x23>
	_tx_udr_empty_irq();
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     93e:	f1 cf       	rjmp	.-30     	; 0x922 <__stack+0x23>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     940:	8b 8d       	ldd	r24, Y+27	; 0x1b
     942:	fe 01       	movw	r30, r28
     944:	e8 0f       	add	r30, r24
     946:	f1 1d       	adc	r31, r1
     948:	e3 5a       	subi	r30, 0xA3	; 163
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     94e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     950:	f8 94       	cli
    _tx_buffer_head = i;
     952:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     954:	ea 89       	ldd	r30, Y+18	; 0x12
     956:	fb 89       	ldd	r31, Y+19	; 0x13
     958:	80 81       	ld	r24, Z
     95a:	80 62       	ori	r24, 0x20	; 32
     95c:	0a c0       	rjmp	.+20     	; 0x972 <__stack+0x73>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     95e:	9f b7       	in	r25, 0x3f	; 63
     960:	f8 94       	cli
      *_udr = c;
     962:	ee 89       	ldd	r30, Y+22	; 0x16
     964:	ff 89       	ldd	r31, Y+23	; 0x17
     966:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     968:	e8 89       	ldd	r30, Y+16	; 0x10
     96a:	f9 89       	ldd	r31, Y+17	; 0x11
     96c:	80 81       	ld	r24, Z
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	80 64       	ori	r24, 0x40	; 64
     972:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     974:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     98e:	88 8d       	ldd	r24, Y+24	; 0x18
     990:	88 23       	and	r24, r24
     992:	c9 f0       	breq	.+50     	; 0x9c6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     994:	ea 89       	ldd	r30, Y+18	; 0x12
     996:	fb 89       	ldd	r31, Y+19	; 0x13
     998:	80 81       	ld	r24, Z
     99a:	85 fd       	sbrc	r24, 5
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <_ZN14HardwareSerial5flushEv+0x20>
     99e:	a8 89       	ldd	r26, Y+16	; 0x10
     9a0:	b9 89       	ldd	r27, Y+17	; 0x11
     9a2:	8c 91       	ld	r24, X
     9a4:	86 fd       	sbrc	r24, 6
     9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	07 fc       	sbrc	r0, 7
     9ac:	f5 cf       	rjmp	.-22     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
     9ae:	80 81       	ld	r24, Z
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	f2 cf       	rjmp	.-28     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9b4:	a8 89       	ldd	r26, Y+16	; 0x10
     9b6:	b9 89       	ldd	r27, Y+17	; 0x11
     9b8:	8c 91       	ld	r24, X
     9ba:	85 ff       	sbrs	r24, 5
     9bc:	ed cf       	rjmp	.-38     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9be:	ce 01       	movw	r24, r28
     9c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9c4:	e7 cf       	rjmp	.-50     	; 0x994 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
     9dc:	6a 01       	movw	r12, r20
     9de:	7b 01       	movw	r14, r22
     9e0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9e2:	e8 89       	ldd	r30, Y+16	; 0x10
     9e4:	f9 89       	ldd	r31, Y+17	; 0x11
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9ea:	41 15       	cp	r20, r1
     9ec:	51 4e       	sbci	r21, 0xE1	; 225
     9ee:	61 05       	cpc	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	b1 f0       	breq	.+44     	; 0xa20 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	79 e0       	ldi	r23, 0x09	; 9
     9f8:	8d e3       	ldi	r24, 0x3D	; 61
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__udivmodsi4>
     a04:	da 01       	movw	r26, r20
     a06:	c9 01       	movw	r24, r18
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	a1 09       	sbc	r26, r1
     a0c:	b1 09       	sbc	r27, r1
     a0e:	b6 95       	lsr	r27
     a10:	a7 95       	ror	r26
     a12:	97 95       	ror	r25
     a14:	87 95       	ror	r24
     a16:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a18:	21 15       	cp	r18, r1
     a1a:	80 e1       	ldi	r24, 0x10	; 16
     a1c:	38 07       	cpc	r19, r24
     a1e:	a8 f0       	brcs	.+42     	; 0xa4a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a20:	e8 89       	ldd	r30, Y+16	; 0x10
     a22:	f9 89       	ldd	r31, Y+17	; 0x11
     a24:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a26:	60 e8       	ldi	r22, 0x80	; 128
     a28:	74 e8       	ldi	r23, 0x84	; 132
     a2a:	8e e1       	ldi	r24, 0x1E	; 30
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a7 01       	movw	r20, r14
     a30:	96 01       	movw	r18, r12
     a32:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__udivmodsi4>
     a36:	da 01       	movw	r26, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	a1 09       	sbc	r26, r1
     a3e:	b1 09       	sbc	r27, r1
     a40:	b6 95       	lsr	r27
     a42:	a7 95       	ror	r26
     a44:	97 95       	ror	r25
     a46:	87 95       	ror	r24
     a48:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a4a:	ec 85       	ldd	r30, Y+12	; 0x0c
     a4c:	fd 85       	ldd	r31, Y+13	; 0x0d
     a4e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a50:	ee 85       	ldd	r30, Y+14	; 0x0e
     a52:	ff 85       	ldd	r31, Y+15	; 0x0f
     a54:	20 83       	st	Z, r18

  _written = false;
     a56:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a58:	ec 89       	ldd	r30, Y+20	; 0x14
     a5a:	fd 89       	ldd	r31, Y+21	; 0x15
     a5c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a5e:	ea 89       	ldd	r30, Y+18	; 0x12
     a60:	fb 89       	ldd	r31, Y+19	; 0x13
     a62:	80 81       	ld	r24, Z
     a64:	80 61       	ori	r24, 0x10	; 16
     a66:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a68:	ea 89       	ldd	r30, Y+18	; 0x12
     a6a:	fb 89       	ldd	r31, Y+19	; 0x13
     a6c:	80 81       	ld	r24, Z
     a6e:	88 60       	ori	r24, 0x08	; 8
     a70:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a72:	ea 89       	ldd	r30, Y+18	; 0x12
     a74:	fb 89       	ldd	r31, Y+19	; 0x13
     a76:	80 81       	ld	r24, Z
     a78:	80 68       	ori	r24, 0x80	; 128
     a7a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a7c:	ea 89       	ldd	r30, Y+18	; 0x12
     a7e:	fb 89       	ldd	r31, Y+19	; 0x13
     a80:	80 81       	ld	r24, Z
     a82:	8f 7d       	andi	r24, 0xDF	; 223
     a84:	80 83       	st	Z, r24
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	08 95       	ret

00000a9c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     a9c:	08 95       	ret

00000a9e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ab2:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <Serial+0x10>
     ab6:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <Serial+0x11>
     aba:	80 81       	ld	r24, Z
     abc:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <Serial+0x16>
     ac0:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <Serial+0x17>
     ac4:	82 fd       	sbrc	r24, 2
     ac6:	12 c0       	rjmp	.+36     	; 0xaec <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ac8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     aca:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <Serial+0x19>
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ad2:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <Serial+0x1a>
     ad6:	82 17       	cp	r24, r18
     ad8:	51 f0       	breq	.+20     	; 0xaee <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     ada:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <Serial+0x19>
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	e1 54       	subi	r30, 0x41	; 65
     ae2:	fd 4f       	sbci	r31, 0xFD	; 253
     ae4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ae6:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <Serial+0x19>
     aea:	01 c0       	rjmp	.+2      	; 0xaee <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     aec:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     b24:	8f eb       	ldi	r24, 0xBF	; 191
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b4e:	8f eb       	ldi	r24, 0xBF	; 191
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN14HardwareSerial9availableEv>
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	89 2b       	or	r24, r25
     b5a:	09 f4       	brne	.+2      	; 0xb5e <_Z17Serial0_availablev+0x10>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
}
     b5e:	82 2f       	mov	r24, r18
     b60:	08 95       	ret

00000b62 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b62:	ef eb       	ldi	r30, 0xBF	; 191
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	13 82       	std	Z+3, r1	; 0x03
     b68:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b6a:	88 ee       	ldi	r24, 0xE8	; 232
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	84 83       	std	Z+4, r24	; 0x04
     b74:	95 83       	std	Z+5, r25	; 0x05
     b76:	a6 83       	std	Z+6, r26	; 0x06
     b78:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b7a:	88 e3       	ldi	r24, 0x38	; 56
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	80 83       	st	Z, r24
     b82:	85 ec       	ldi	r24, 0xC5	; 197
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	95 87       	std	Z+13, r25	; 0x0d
     b88:	84 87       	std	Z+12, r24	; 0x0c
     b8a:	84 ec       	ldi	r24, 0xC4	; 196
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	97 87       	std	Z+15, r25	; 0x0f
     b90:	86 87       	std	Z+14, r24	; 0x0e
     b92:	80 ec       	ldi	r24, 0xC0	; 192
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	91 8b       	std	Z+17, r25	; 0x11
     b98:	80 8b       	std	Z+16, r24	; 0x10
     b9a:	81 ec       	ldi	r24, 0xC1	; 193
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	93 8b       	std	Z+19, r25	; 0x13
     ba0:	82 8b       	std	Z+18, r24	; 0x12
     ba2:	82 ec       	ldi	r24, 0xC2	; 194
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	95 8b       	std	Z+21, r25	; 0x15
     ba8:	84 8b       	std	Z+20, r24	; 0x14
     baa:	86 ec       	ldi	r24, 0xC6	; 198
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	97 8b       	std	Z+23, r25	; 0x17
     bb0:	86 8b       	std	Z+22, r24	; 0x16
     bb2:	11 8e       	std	Z+25, r1	; 0x19
     bb4:	12 8e       	std	Z+26, r1	; 0x1a
     bb6:	13 8e       	std	Z+27, r1	; 0x1b
     bb8:	14 8e       	std	Z+28, r1	; 0x1c
     bba:	08 95       	ret

00000bbc <initVariant>:
     bbc:	08 95       	ret

00000bbe <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bbe:	0e 94 76 07 	call	0xeec	; 0xeec <init>

	initVariant();
     bc2:	0e 94 de 05 	call	0xbbc	; 0xbbc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     bc6:	0e 94 47 03 	call	0x68e	; 0x68e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bca:	c7 e4       	ldi	r28, 0x47	; 71
     bcc:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     bce:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <loop>
		if (serialEventRun) serialEventRun();
     bd2:	20 97       	sbiw	r28, 0x00	; 0
     bd4:	e1 f3       	breq	.-8      	; 0xbce <main+0x10>
     bd6:	0e 94 47 04 	call	0x88e	; 0x88e <_Z14serialEventRunv>
     bda:	f9 cf       	rjmp	.-14     	; 0xbce <main+0x10>

00000bdc <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	6c 01       	movw	r12, r24
     bee:	7a 01       	movw	r14, r20
     bf0:	8b 01       	movw	r16, r22
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	ce 15       	cp	r28, r14
     bf8:	df 05       	cpc	r29, r15
     bfa:	81 f0       	breq	.+32     	; 0xc1c <_ZN5Print5writeEPKhj+0x40>
     bfc:	d8 01       	movw	r26, r16
     bfe:	6d 91       	ld	r22, X+
     c00:	8d 01       	movw	r16, r26
     c02:	d6 01       	movw	r26, r12
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	c6 01       	movw	r24, r12
     c10:	09 95       	icall
     c12:	89 2b       	or	r24, r25
     c14:	11 f0       	breq	.+4      	; 0xc1a <_ZN5Print5writeEPKhj+0x3e>
     c16:	21 96       	adiw	r28, 0x01	; 1
     c18:	ee cf       	rjmp	.-36     	; 0xbf6 <_ZN5Print5writeEPKhj+0x1a>
     c1a:	7e 01       	movw	r14, r28
     c1c:	c7 01       	movw	r24, r14
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	08 95       	ret

00000c30 <_ZN5Print5writeEPKc>:
     c30:	61 15       	cp	r22, r1
     c32:	71 05       	cpc	r23, r1
     c34:	79 f0       	breq	.+30     	; 0xc54 <_ZN5Print5writeEPKc+0x24>
     c36:	fb 01       	movw	r30, r22
     c38:	01 90       	ld	r0, Z+
     c3a:	00 20       	and	r0, r0
     c3c:	e9 f7       	brne	.-6      	; 0xc38 <_ZN5Print5writeEPKc+0x8>
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	af 01       	movw	r20, r30
     c42:	46 1b       	sub	r20, r22
     c44:	57 0b       	sbc	r21, r23
     c46:	dc 01       	movw	r26, r24
     c48:	ed 91       	ld	r30, X+
     c4a:	fc 91       	ld	r31, X
     c4c:	02 80       	ldd	r0, Z+2	; 0x02
     c4e:	f3 81       	ldd	r31, Z+3	; 0x03
     c50:	e0 2d       	mov	r30, r0
     c52:	09 94       	ijmp
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	08 95       	ret

00000c5a <_ZN5Print5printERK6String>:
     c5a:	db 01       	movw	r26, r22
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	4d 91       	ld	r20, X+
     c60:	5c 91       	ld	r21, X
     c62:	15 97       	sbiw	r26, 0x05	; 5
     c64:	6d 91       	ld	r22, X+
     c66:	7c 91       	ld	r23, X
     c68:	dc 01       	movw	r26, r24
     c6a:	ed 91       	ld	r30, X+
     c6c:	fc 91       	ld	r31, X
     c6e:	02 80       	ldd	r0, Z+2	; 0x02
     c70:	f3 81       	ldd	r31, Z+3	; 0x03
     c72:	e0 2d       	mov	r30, r0
     c74:	09 94       	ijmp

00000c76 <_ZN5Print7printlnEv>:
     c76:	66 e4       	ldi	r22, 0x46	; 70
     c78:	72 e0       	ldi	r23, 0x02	; 2
     c7a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_ZN5Print5writeEPKc>

00000c7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     c88:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN5Print5writeEPKc>
     c8c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN5Print7printlnEv>
  return n;
}
     c94:	80 0f       	add	r24, r16
     c96:	91 1f       	adc	r25, r17
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     ca2:	08 95       	ret

00000ca4 <attachInterrupt>:
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	e8 f4       	brcc	.+58     	; 0xce2 <attachInterrupt+0x3e>
     ca8:	e8 2f       	mov	r30, r24
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	ea 5f       	subi	r30, 0xFA	; 250
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	71 83       	std	Z+1, r23	; 0x01
     cb6:	60 83       	st	Z, r22
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	41 f0       	breq	.+16     	; 0xccc <attachInterrupt+0x28>
     cbc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cc0:	8c 7f       	andi	r24, 0xFC	; 252
     cc2:	48 2b       	or	r20, r24
     cc4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cc8:	e8 9a       	sbi	0x1d, 0	; 29
     cca:	08 95       	ret
     ccc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cd0:	83 7f       	andi	r24, 0xF3	; 243
     cd2:	44 0f       	add	r20, r20
     cd4:	55 1f       	adc	r21, r21
     cd6:	44 0f       	add	r20, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	48 2b       	or	r20, r24
     cdc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ce0:	e9 9a       	sbi	0x1d, 1	; 29
     ce2:	08 95       	ret

00000ce4 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
     d06:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
     d0a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
     d0e:	09 95       	icall
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
     d58:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
     d5c:	09 95       	icall
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     d80:	1f 92       	push	r1
     d82:	0f 92       	push	r0
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	0f 92       	push	r0
     d88:	11 24       	eor	r1, r1
     d8a:	2f 93       	push	r18
     d8c:	3f 93       	push	r19
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <timer0_millis>
     d9a:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <timer0_millis+0x1>
     d9e:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <timer0_millis+0x2>
     da2:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <timer0_millis+0x3>
     da6:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <timer0_fract>
     daa:	23 e0       	ldi	r18, 0x03	; 3
     dac:	23 0f       	add	r18, r19
     dae:	2d 37       	cpi	r18, 0x7D	; 125
     db0:	20 f4       	brcc	.+8      	; 0xdba <__vector_16+0x3a>
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	a1 1d       	adc	r26, r1
     db6:	b1 1d       	adc	r27, r1
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <__vector_16+0x44>
     dba:	26 e8       	ldi	r18, 0x86	; 134
     dbc:	23 0f       	add	r18, r19
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	a1 1d       	adc	r26, r1
     dc2:	b1 1d       	adc	r27, r1
     dc4:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <timer0_fract>
     dc8:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <timer0_millis>
     dcc:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <timer0_millis+0x1>
     dd0:	a0 93 5f 03 	sts	0x035F, r26	; 0x80035f <timer0_millis+0x2>
     dd4:	b0 93 60 03 	sts	0x0360, r27	; 0x800360 <timer0_millis+0x3>
     dd8:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
     ddc:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
     de0:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
     de4:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	a1 1d       	adc	r26, r1
     dec:	b1 1d       	adc	r27, r1
     dee:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_overflow_count>
     df2:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_overflow_count+0x1>
     df6:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_overflow_count+0x2>
     dfa:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_overflow_count+0x3>
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e14:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e16:	f8 94       	cli
	m = timer0_overflow_count;
     e18:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
     e1c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
     e20:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
     e24:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e28:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e2a:	a8 9b       	sbis	0x15, 0	; 21
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <micros+0x24>
     e2e:	2f 3f       	cpi	r18, 0xFF	; 255
     e30:	19 f0       	breq	.+6      	; 0xe38 <micros+0x24>
		m++;
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	a1 1d       	adc	r26, r1
     e36:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e38:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e3a:	ba 2f       	mov	r27, r26
     e3c:	a9 2f       	mov	r26, r25
     e3e:	98 2f       	mov	r25, r24
     e40:	88 27       	eor	r24, r24
     e42:	82 0f       	add	r24, r18
     e44:	91 1d       	adc	r25, r1
     e46:	a1 1d       	adc	r26, r1
     e48:	b1 1d       	adc	r27, r1
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	42 e0       	ldi	r20, 0x02	; 2
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	4a 95       	dec	r20
     e5a:	d1 f7       	brne	.-12     	; 0xe50 <micros+0x3c>
}
     e5c:	08 95       	ret

00000e5e <delay>:

void delay(unsigned long ms)
{
     e5e:	8f 92       	push	r8
     e60:	9f 92       	push	r9
     e62:	af 92       	push	r10
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	6b 01       	movw	r12, r22
     e70:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e72:	0e 94 0a 07 	call	0xe14	; 0xe14 <micros>
     e76:	4b 01       	movw	r8, r22
     e78:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e7a:	c1 14       	cp	r12, r1
     e7c:	d1 04       	cpc	r13, r1
     e7e:	e1 04       	cpc	r14, r1
     e80:	f1 04       	cpc	r15, r1
     e82:	01 f1       	breq	.+64     	; 0xec4 <delay+0x66>
		yield();
     e84:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e88:	0e 94 0a 07 	call	0xe14	; 0xe14 <micros>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	88 19       	sub	r24, r8
     e92:	99 09       	sbc	r25, r9
     e94:	aa 09       	sbc	r26, r10
     e96:	bb 09       	sbc	r27, r11
     e98:	88 3e       	cpi	r24, 0xE8	; 232
     e9a:	93 40       	sbci	r25, 0x03	; 3
     e9c:	a1 05       	cpc	r26, r1
     e9e:	b1 05       	cpc	r27, r1
     ea0:	60 f3       	brcs	.-40     	; 0xe7a <delay+0x1c>
			ms--;
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	c2 1a       	sub	r12, r18
     ea6:	d1 08       	sbc	r13, r1
     ea8:	e1 08       	sbc	r14, r1
     eaa:	f1 08       	sbc	r15, r1
			start += 1000;
     eac:	88 ee       	ldi	r24, 0xE8	; 232
     eae:	88 0e       	add	r8, r24
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	98 1e       	adc	r9, r24
     eb4:	a1 1c       	adc	r10, r1
     eb6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     eb8:	c1 14       	cp	r12, r1
     eba:	d1 04       	cpc	r13, r1
     ebc:	e1 04       	cpc	r14, r1
     ebe:	f1 04       	cpc	r15, r1
     ec0:	19 f7       	brne	.-58     	; 0xe88 <delay+0x2a>
     ec2:	db cf       	rjmp	.-74     	; 0xe7a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	af 90       	pop	r10
     ed0:	9f 90       	pop	r9
     ed2:	8f 90       	pop	r8
     ed4:	08 95       	ret

00000ed6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	38 f0       	brcs	.+14     	; 0xeea <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     ee4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <delayMicroseconds+0x10>
     eea:	08 95       	ret

00000eec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     eec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     eee:	84 b5       	in	r24, 0x24	; 36
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ef4:	84 b5       	in	r24, 0x24	; 36
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     efa:	85 b5       	in	r24, 0x25	; 37
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f00:	85 b5       	in	r24, 0x25	; 37
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f06:	ee e6       	ldi	r30, 0x6E	; 110
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f10:	e1 e8       	ldi	r30, 0x81	; 129
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f16:	80 81       	ld	r24, Z
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f1c:	80 81       	ld	r24, Z
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f22:	e0 e8       	ldi	r30, 0x80	; 128
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f2c:	e1 eb       	ldi	r30, 0xB1	; 177
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f36:	e0 eb       	ldi	r30, 0xB0	; 176
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f40:	ea e7       	ldi	r30, 0x7A	; 122
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f4a:	80 81       	ld	r24, Z
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f50:	80 81       	ld	r24, Z
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f60:	08 95       	ret

00000f62 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     f62:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <analog_reference>
     f66:	08 95       	ret

00000f68 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	81 f0       	breq	.+32     	; 0xf8c <turnOffPWM+0x24>
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <turnOffPWM+0x10>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	99 f0       	breq	.+38     	; 0xf98 <turnOffPWM+0x30>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	a1 f0       	breq	.+40     	; 0xf9e <turnOffPWM+0x36>
     f76:	08 95       	ret
     f78:	87 30       	cpi	r24, 0x07	; 7
     f7a:	a9 f0       	breq	.+42     	; 0xfa6 <turnOffPWM+0x3e>
     f7c:	88 30       	cpi	r24, 0x08	; 8
     f7e:	b9 f0       	breq	.+46     	; 0xfae <turnOffPWM+0x46>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	d1 f4       	brne	.+52     	; 0xfb8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f84:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f88:	8f 7d       	andi	r24, 0xDF	; 223
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f8c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f90:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f96:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f98:	84 b5       	in	r24, 0x24	; 36
     f9a:	8f 77       	andi	r24, 0x7F	; 127
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f9e:	84 b5       	in	r24, 0x24	; 36
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	84 bd       	out	0x24, r24	; 36
     fa4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     fa6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     faa:	8f 77       	andi	r24, 0x7F	; 127
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     fae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb8:	08 95       	ret

00000fba <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	e4 58       	subi	r30, 0x84	; 132
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     fc8:	fc 01       	movw	r30, r24
     fca:	e0 57       	subi	r30, 0x70	; 112
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     fd0:	88 23       	and	r24, r24
     fd2:	61 f1       	breq	.+88     	; 0x102c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 55       	subi	r30, 0x52	; 82
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	c5 91       	lpm	r28, Z+
     fe2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fe4:	fc 01       	movw	r30, r24
     fe6:	ec 55       	subi	r30, 0x5C	; 92
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	a5 91       	lpm	r26, Z+
     fec:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     fee:	61 11       	cpse	r22, r1
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ff2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ff4:	f8 94       	cli
		*reg &= ~bit;
     ff6:	88 81       	ld	r24, Y
     ff8:	20 95       	com	r18
     ffa:	82 23       	and	r24, r18
     ffc:	88 83       	st	Y, r24
		*out &= ~bit;
     ffe:	ec 91       	ld	r30, X
    1000:	2e 23       	and	r18, r30
    1002:	0b c0       	rjmp	.+22     	; 0x101a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1004:	62 30       	cpi	r22, 0x02	; 2
    1006:	61 f4       	brne	.+24     	; 0x1020 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1008:	9f b7       	in	r25, 0x3f	; 63
                cli();
    100a:	f8 94       	cli
		*reg &= ~bit;
    100c:	88 81       	ld	r24, Y
    100e:	32 2f       	mov	r19, r18
    1010:	30 95       	com	r19
    1012:	83 23       	and	r24, r19
    1014:	88 83       	st	Y, r24
		*out |= bit;
    1016:	ec 91       	ld	r30, X
    1018:	2e 2b       	or	r18, r30
    101a:	2c 93       	st	X, r18
		SREG = oldSREG;
    101c:	9f bf       	out	0x3f, r25	; 63
    101e:	06 c0       	rjmp	.+12     	; 0x102c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1020:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1022:	f8 94       	cli
		*reg |= bit;
    1024:	e8 81       	ld	r30, Y
    1026:	2e 2b       	or	r18, r30
    1028:	28 83       	st	Y, r18
		SREG = oldSREG;
    102a:	8f bf       	out	0x3f, r24	; 63
	}
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	e8 59       	subi	r30, 0x98	; 152
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1044:	f9 01       	movw	r30, r18
    1046:	e4 58       	subi	r30, 0x84	; 132
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    104c:	f9 01       	movw	r30, r18
    104e:	e0 57       	subi	r30, 0x70	; 112
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1054:	cc 23       	and	r28, r28
    1056:	c1 f0       	breq	.+48     	; 0x1088 <digitalWrite+0x56>
    1058:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    105a:	81 11       	cpse	r24, r1
    105c:	0e 94 b4 07 	call	0xf68	; 0xf68 <turnOffPWM>

	out = portOutputRegister(port);
    1060:	ec 2f       	mov	r30, r28
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ec 55       	subi	r30, 0x5C	; 92
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	a5 91       	lpm	r26, Z+
    106e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1070:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1072:	f8 94       	cli

	if (val == LOW) {
    1074:	11 11       	cpse	r17, r1
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <digitalWrite+0x4e>
		*out &= ~bit;
    1078:	8c 91       	ld	r24, X
    107a:	d0 95       	com	r29
    107c:	d8 23       	and	r29, r24
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1080:	ec 91       	ld	r30, X
    1082:	de 2b       	or	r29, r30
    1084:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1086:	9f bf       	out	0x3f, r25	; 63
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	08 95       	ret

00001090 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    1090:	08 95       	ret

00001092 <_ZN6StringD1Ev>:
    1092:	fc 01       	movw	r30, r24
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	0c 94 bf 12 	jmp	0x257e	; 0x257e <free>

0000109c <_ZN6String10invalidateEv>:
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	88 81       	ld	r24, Y
    10a4:	99 81       	ldd	r25, Y+1	; 0x01
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	11 f0       	breq	.+4      	; 0x10ae <_ZN6String10invalidateEv+0x12>
    10aa:	0e 94 bf 12 	call	0x257e	; 0x257e <free>
    10ae:	19 82       	std	Y+1, r1	; 0x01
    10b0:	18 82       	st	Y, r1
    10b2:	1d 82       	std	Y+5, r1	; 0x05
    10b4:	1c 82       	std	Y+4, r1	; 0x04
    10b6:	1b 82       	std	Y+3, r1	; 0x03
    10b8:	1a 82       	std	Y+2, r1	; 0x02
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <_ZN6String12changeBufferEj>:
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	ec 01       	movw	r28, r24
    10ca:	8b 01       	movw	r16, r22
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	88 81       	ld	r24, Y
    10d2:	99 81       	ldd	r25, Y+1	; 0x01
    10d4:	0e 94 48 13 	call	0x2690	; 0x2690 <realloc>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	31 f0       	breq	.+12     	; 0x10e8 <_ZN6String12changeBufferEj+0x28>
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	88 83       	st	Y, r24
    10e0:	1b 83       	std	Y+3, r17	; 0x03
    10e2:	0a 83       	std	Y+2, r16	; 0x02
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <_ZN6String12changeBufferEj+0x2a>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <_ZN6String7reserveEj>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
    10fa:	88 81       	ld	r24, Y
    10fc:	99 81       	ldd	r25, Y+1	; 0x01
    10fe:	89 2b       	or	r24, r25
    1100:	29 f0       	breq	.+10     	; 0x110c <_ZN6String7reserveEj+0x18>
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	86 17       	cp	r24, r22
    1108:	97 07       	cpc	r25, r23
    110a:	60 f4       	brcc	.+24     	; 0x1124 <_ZN6String7reserveEj+0x30>
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN6String12changeBufferEj>
    1112:	88 23       	and	r24, r24
    1114:	41 f0       	breq	.+16     	; 0x1126 <_ZN6String7reserveEj+0x32>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	89 2b       	or	r24, r25
    111c:	19 f4       	brne	.+6      	; 0x1124 <_ZN6String7reserveEj+0x30>
    111e:	e8 81       	ld	r30, Y
    1120:	f9 81       	ldd	r31, Y+1	; 0x01
    1122:	10 82       	st	Z, r1
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <_ZN6String4copyEPKcj>:
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
    113a:	7b 01       	movw	r14, r22
    113c:	8a 01       	movw	r16, r20
    113e:	ba 01       	movw	r22, r20
    1140:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN6String7reserveEj>
    1144:	81 11       	cpse	r24, r1
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <_ZN6String4copyEPKcj+0x24>
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6String10invalidateEv>
    114e:	07 c0       	rjmp	.+14     	; 0x115e <_ZN6String4copyEPKcj+0x32>
    1150:	1d 83       	std	Y+5, r17	; 0x05
    1152:	0c 83       	std	Y+4, r16	; 0x04
    1154:	b7 01       	movw	r22, r14
    1156:	88 81       	ld	r24, Y
    1158:	99 81       	ldd	r25, Y+1	; 0x01
    115a:	0e 94 17 14 	call	0x282e	; 0x282e <strcpy>
    115e:	ce 01       	movw	r24, r28
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	08 95       	ret

0000116e <_ZN6StringC1EPKc>:
    116e:	fc 01       	movw	r30, r24
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
    1174:	13 82       	std	Z+3, r1	; 0x03
    1176:	12 82       	std	Z+2, r1	; 0x02
    1178:	15 82       	std	Z+5, r1	; 0x05
    117a:	14 82       	std	Z+4, r1	; 0x04
    117c:	61 15       	cp	r22, r1
    117e:	71 05       	cpc	r23, r1
    1180:	51 f0       	breq	.+20     	; 0x1196 <_ZN6StringC1EPKc+0x28>
    1182:	fb 01       	movw	r30, r22
    1184:	01 90       	ld	r0, Z+
    1186:	00 20       	and	r0, r0
    1188:	e9 f7       	brne	.-6      	; 0x1184 <_ZN6StringC1EPKc+0x16>
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	af 01       	movw	r20, r30
    118e:	46 1b       	sub	r20, r22
    1190:	57 0b       	sbc	r21, r23
    1192:	0c 94 96 08 	jmp	0x112c	; 0x112c <_ZN6String4copyEPKcj>
    1196:	08 95       	ret

00001198 <_ZN6String4moveERS_>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	8c 01       	movw	r16, r24
    11a2:	eb 01       	movw	r28, r22
    11a4:	fc 01       	movw	r30, r24
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	d1 f0       	breq	.+52     	; 0x11e2 <_ZN6String4moveERS_+0x4a>
    11ae:	68 81       	ld	r22, Y
    11b0:	79 81       	ldd	r23, Y+1	; 0x01
    11b2:	61 15       	cp	r22, r1
    11b4:	71 05       	cpc	r23, r1
    11b6:	99 f0       	breq	.+38     	; 0x11de <_ZN6String4moveERS_+0x46>
    11b8:	28 e4       	ldi	r18, 0x48	; 72
    11ba:	38 e0       	ldi	r19, 0x08	; 8
    11bc:	23 2b       	or	r18, r19
    11be:	79 f0       	breq	.+30     	; 0x11de <_ZN6String4moveERS_+0x46>
    11c0:	42 81       	ldd	r20, Z+2	; 0x02
    11c2:	53 81       	ldd	r21, Z+3	; 0x03
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	42 17       	cp	r20, r18
    11ca:	53 07       	cpc	r21, r19
    11cc:	40 f0       	brcs	.+16     	; 0x11de <_ZN6String4moveERS_+0x46>
    11ce:	0e 94 17 14 	call	0x282e	; 0x282e <strcpy>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	f8 01       	movw	r30, r16
    11d8:	95 83       	std	Z+5, r25	; 0x05
    11da:	84 83       	std	Z+4, r24	; 0x04
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <_ZN6String4moveERS_+0x6c>
    11de:	0e 94 bf 12 	call	0x257e	; 0x257e <free>
    11e2:	88 81       	ld	r24, Y
    11e4:	99 81       	ldd	r25, Y+1	; 0x01
    11e6:	f8 01       	movw	r30, r16
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	93 83       	std	Z+3, r25	; 0x03
    11f2:	82 83       	std	Z+2, r24	; 0x02
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	95 83       	std	Z+5, r25	; 0x05
    11fa:	84 83       	std	Z+4, r24	; 0x04
    11fc:	19 82       	std	Y+1, r1	; 0x01
    11fe:	18 82       	st	Y, r1
    1200:	1b 82       	std	Y+3, r1	; 0x03
    1202:	1a 82       	std	Y+2, r1	; 0x02
    1204:	1d 82       	std	Y+5, r1	; 0x05
    1206:	1c 82       	std	Y+4, r1	; 0x04
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <_ZN6StringaSERKS_>:
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	fb 01       	movw	r30, r22
    121a:	86 17       	cp	r24, r22
    121c:	97 07       	cpc	r25, r23
    121e:	61 f0       	breq	.+24     	; 0x1238 <_ZN6StringaSERKS_+0x26>
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	61 15       	cp	r22, r1
    1226:	71 05       	cpc	r23, r1
    1228:	29 f0       	breq	.+10     	; 0x1234 <_ZN6StringaSERKS_+0x22>
    122a:	44 81       	ldd	r20, Z+4	; 0x04
    122c:	55 81       	ldd	r21, Z+5	; 0x05
    122e:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN6String4copyEPKcj>
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <_ZN6StringaSERKS_+0x26>
    1234:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6String10invalidateEv>
    1238:	ce 01       	movw	r24, r28
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <_ZN6StringC1ERKS_>:
    1240:	fc 01       	movw	r30, r24
    1242:	11 82       	std	Z+1, r1	; 0x01
    1244:	10 82       	st	Z, r1
    1246:	13 82       	std	Z+3, r1	; 0x03
    1248:	12 82       	std	Z+2, r1	; 0x02
    124a:	15 82       	std	Z+5, r1	; 0x05
    124c:	14 82       	std	Z+4, r1	; 0x04
    124e:	0c 94 09 09 	jmp	0x1212	; 0x1212 <_ZN6StringaSERKS_>

00001252 <_ZN6StringaSEOS_>:
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
    1258:	86 17       	cp	r24, r22
    125a:	97 07       	cpc	r25, r23
    125c:	11 f0       	breq	.+4      	; 0x1262 <_ZN6StringaSEOS_+0x10>
    125e:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN6String4moveERS_>
    1262:	ce 01       	movw	r24, r28
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <_ZN6StringaSEPKc>:
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	59 f0       	breq	.+22     	; 0x128c <_ZN6StringaSEPKc+0x22>
    1276:	fb 01       	movw	r30, r22
    1278:	01 90       	ld	r0, Z+
    127a:	00 20       	and	r0, r0
    127c:	e9 f7       	brne	.-6      	; 0x1278 <_ZN6StringaSEPKc+0xe>
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	af 01       	movw	r20, r30
    1282:	46 1b       	sub	r20, r22
    1284:	57 0b       	sbc	r21, r23
    1286:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN6String4copyEPKcj>
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <_ZN6StringaSEPKc+0x26>
    128c:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6String10invalidateEv>
    1290:	ce 01       	movw	r24, r28
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    1298:	bf 92       	push	r11
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	7c 01       	movw	r14, r24
    12ac:	6b 01       	movw	r12, r22
    12ae:	8a 01       	movw	r16, r20
    12b0:	e9 01       	movw	r28, r18
	if (left > right) {
    12b2:	24 17       	cp	r18, r20
    12b4:	35 07       	cpc	r19, r21
    12b6:	20 f4       	brcc	.+8      	; 0x12c0 <_ZNK6String9substringEjj+0x28>
    12b8:	81 2f       	mov	r24, r17
    12ba:	89 01       	movw	r16, r18
    12bc:	c4 2f       	mov	r28, r20
    12be:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    12c0:	68 e4       	ldi	r22, 0x48	; 72
    12c2:	72 e0       	ldi	r23, 0x02	; 2
    12c4:	c7 01       	movw	r24, r14
    12c6:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6StringC1EPKc>
	if (left >= len) return out;
    12ca:	d6 01       	movw	r26, r12
    12cc:	14 96       	adiw	r26, 0x04	; 4
    12ce:	8d 91       	ld	r24, X+
    12d0:	9c 91       	ld	r25, X
    12d2:	15 97       	sbiw	r26, 0x05	; 5
    12d4:	08 17       	cp	r16, r24
    12d6:	19 07       	cpc	r17, r25
    12d8:	c8 f4       	brcc	.+50     	; 0x130c <_ZNK6String9substringEjj+0x74>
    12da:	8c 17       	cp	r24, r28
    12dc:	9d 07       	cpc	r25, r29
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <_ZNK6String9substringEjj+0x4a>
    12e0:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    12e2:	d6 01       	movw	r26, r12
    12e4:	ed 91       	ld	r30, X+
    12e6:	fc 91       	ld	r31, X
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	ec 0f       	add	r30, r28
    12ec:	fd 1f       	adc	r31, r29
    12ee:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    12f0:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    12f2:	6d 91       	ld	r22, X+
    12f4:	7c 91       	ld	r23, X
    12f6:	60 0f       	add	r22, r16
    12f8:	71 1f       	adc	r23, r17
    12fa:	c7 01       	movw	r24, r14
    12fc:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1300:	d6 01       	movw	r26, r12
    1302:	ed 91       	ld	r30, X+
    1304:	fc 91       	ld	r31, X
    1306:	ec 0f       	add	r30, r28
    1308:	fd 1f       	adc	r31, r29
    130a:	b0 82       	st	Z, r11
	return out;
}
    130c:	c7 01       	movw	r24, r14
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	08 95       	ret

00001322 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1322:	fc 01       	movw	r30, r24
    1324:	13 82       	std	Z+3, r1	; 0x03
    1326:	12 82       	std	Z+2, r1	; 0x02
    1328:	89 e5       	ldi	r24, 0x59	; 89
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
    1330:	12 8e       	std	Z+26, r1	; 0x1a
    1332:	14 8a       	std	Z+20, r1	; 0x14
    1334:	8f e0       	ldi	r24, 0x0F	; 15
    1336:	84 83       	std	Z+4, r24	; 0x04
    1338:	8e e0       	ldi	r24, 0x0E	; 14
    133a:	85 83       	std	Z+5, r24	; 0x05
    133c:	8d e0       	ldi	r24, 0x0D	; 13
    133e:	86 83       	std	Z+6, r24	; 0x06
    1340:	8c e0       	ldi	r24, 0x0C	; 12
    1342:	87 83       	std	Z+7, r24	; 0x07
    1344:	8b e0       	ldi	r24, 0x0B	; 11
    1346:	80 87       	std	Z+8, r24	; 0x08
    1348:	8a e0       	ldi	r24, 0x0A	; 10
    134a:	81 87       	std	Z+9, r24	; 0x09
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	82 87       	std	Z+10, r24	; 0x0a
    1350:	17 86       	std	Z+15, r1	; 0x0f
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 8b       	std	Z+16, r24	; 0x10
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	81 8b       	std	Z+17, r24	; 0x11
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	82 8b       	std	Z+18, r24	; 0x12
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	83 8b       	std	Z+19, r24	; 0x13
    1362:	08 95       	ret

00001364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    1364:	fc 01       	movw	r30, r24
    1366:	96 2f       	mov	r25, r22
    1368:	82 8d       	ldd	r24, Z+26	; 0x1a
    136a:	8f 3f       	cpi	r24, 0xFF	; 255
    136c:	21 f0       	breq	.+8      	; 0x1376 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    136e:	cf 01       	movw	r24, r30
    1370:	4b 96       	adiw	r24, 0x1b	; 27
    1372:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1376:	64 2f       	mov	r22, r20
    1378:	89 2f       	mov	r24, r25
    137a:	0c 94 19 08 	jmp	0x1032	; 0x1032 <digitalWrite>

0000137e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	d6 2f       	mov	r29, r22
    1388:	8c 01       	movw	r16, r24
    138a:	05 5e       	subi	r16, 0xE5	; 229
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	c1 e0       	ldi	r28, 0x01	; 1
    1390:	62 fb       	bst	r22, 2
    1392:	44 27       	eor	r20, r20
    1394:	40 f9       	bld	r20, 0
    1396:	4c 27       	eor	r20, r28
    1398:	68 e0       	ldi	r22, 0x08	; 8
    139a:	c8 01       	movw	r24, r16
    139c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    13a0:	d1 fb       	bst	r29, 1
    13a2:	44 27       	eor	r20, r20
    13a4:	40 f9       	bld	r20, 0
    13a6:	4c 27       	eor	r20, r28
    13a8:	67 e0       	ldi	r22, 0x07	; 7
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    13b0:	4d 2f       	mov	r20, r29
    13b2:	41 70       	andi	r20, 0x01	; 1
    13b4:	4c 27       	eor	r20, r28
    13b6:	66 e0       	ldi	r22, 0x06	; 6
    13b8:	c8 01       	movw	r24, r16
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <_ZN17Adafruit_MCP2301712digitalWriteEhh>

000013c6 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    13c6:	fc 01       	movw	r30, r24
    13c8:	96 2f       	mov	r25, r22
    13ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    13cc:	8f 3f       	cpi	r24, 0xFF	; 255
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    13d0:	cf 01       	movw	r24, r30
    13d2:	4b 96       	adiw	r24, 0x1b	; 27
    13d4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    13d8:	64 2f       	mov	r22, r20
    13da:	89 2f       	mov	r24, r25
    13dc:	0c 94 dd 07 	jmp	0xfba	; 0xfba <pinMode>

000013e0 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	6e 81       	ldd	r22, Y+6	; 0x06
    13ea:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	6e 81       	ldd	r22, Y+6	; 0x06
    13fa:	ce 01       	movw	r24, r28
    13fc:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	6e 81       	ldd	r22, Y+6	; 0x06
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1412:	84 e6       	ldi	r24, 0x64	; 100
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <delayMicroseconds>

0000141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	8c 01       	movw	r16, r24
    1434:	fc 01       	movw	r30, r24
    1436:	82 8d       	ldd	r24, Z+26	; 0x1a
    1438:	98 01       	movw	r18, r16
    143a:	29 5f       	subi	r18, 0xF9	; 249
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	79 01       	movw	r14, r18
    1440:	c6 2f       	mov	r28, r22
    1442:	d0 e0       	ldi	r29, 0x00	; 0
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	09 f4       	brne	.+2      	; 0x144a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    1448:	73 c0       	rjmp	.+230    	; 0x1530 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    144a:	68 01       	movw	r12, r16
    144c:	3b e1       	ldi	r19, 0x1B	; 27
    144e:	c3 0e       	add	r12, r19
    1450:	d1 1c       	adc	r13, r1
    1452:	c6 01       	movw	r24, r12
    1454:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    1458:	f7 01       	movw	r30, r14
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	a1 e0       	ldi	r26, 0x01	; 1
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	b1 90       	ld	r11, Z+
    1464:	ee 24       	eor	r14, r14
    1466:	e3 94       	inc	r14
    1468:	f1 2c       	mov	r15, r1
    146a:	bd 01       	movw	r22, r26
    146c:	0b 2c       	mov	r0, r11
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    1478:	60 95       	com	r22
    147a:	70 95       	com	r23
    147c:	86 23       	and	r24, r22
    147e:	97 23       	and	r25, r23
    1480:	9e 01       	movw	r18, r28
    1482:	04 2e       	mov	r0, r20
    1484:	02 c0       	rjmp	.+4      	; 0x148a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1486:	35 95       	asr	r19
    1488:	27 95       	ror	r18
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    148e:	21 70       	andi	r18, 0x01	; 1
    1490:	33 27       	eor	r19, r19
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	ba 94       	dec	r11
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    149c:	82 2b       	or	r24, r18
    149e:	93 2b       	or	r25, r19
    14a0:	4f 5f       	subi	r20, 0xFF	; 255
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	44 30       	cpi	r20, 0x04	; 4
    14a6:	51 05       	cpc	r21, r1
    14a8:	e1 f6       	brne	.-72     	; 0x1462 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    14aa:	e7 01       	movw	r28, r14
    14ac:	f8 01       	movw	r30, r16
    14ae:	06 80       	ldd	r0, Z+6	; 0x06
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    14b2:	cc 0f       	add	r28, r28
    14b4:	dd 1f       	adc	r29, r29
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    14ba:	c0 95       	com	r28
    14bc:	d0 95       	com	r29
    14be:	c8 23       	and	r28, r24
    14c0:	d9 23       	and	r29, r25
    14c2:	be 01       	movw	r22, r28
    14c4:	c6 01       	movw	r24, r12
    14c6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    14d2:	c7 01       	movw	r24, r14
    14d4:	f8 01       	movw	r30, r16
    14d6:	06 80       	ldd	r0, Z+6	; 0x06
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    14e2:	c8 2b       	or	r28, r24
    14e4:	d9 2b       	or	r29, r25
    14e6:	be 01       	movw	r22, r28
    14e8:	c6 01       	movw	r24, r12
    14ea:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    14f6:	b7 01       	movw	r22, r14
    14f8:	f8 01       	movw	r30, r16
    14fa:	06 80       	ldd	r0, Z+6	; 0x06
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    1506:	60 95       	com	r22
    1508:	70 95       	com	r23
    150a:	6c 23       	and	r22, r28
    150c:	7d 23       	and	r23, r29
    150e:	c6 01       	movw	r24, r12
    1510:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1514:	84 e6       	ldi	r24, 0x64	; 100
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <delayMicroseconds>
    1530:	c1 2c       	mov	r12, r1
    1532:	d1 2c       	mov	r13, r1
    1534:	57 01       	movw	r10, r14
    1536:	41 e0       	ldi	r20, 0x01	; 1
    1538:	f7 01       	movw	r30, r14
    153a:	61 91       	ld	r22, Z+
    153c:	7f 01       	movw	r14, r30
    153e:	c8 01       	movw	r24, r16
    1540:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1544:	ae 01       	movw	r20, r28
    1546:	0c 2c       	mov	r0, r12
    1548:	02 c0       	rjmp	.+4      	; 0x154e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    1552:	41 70       	andi	r20, 0x01	; 1
    1554:	f5 01       	movw	r30, r10
    1556:	60 81       	ld	r22, Z
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    155e:	ff ef       	ldi	r31, 0xFF	; 255
    1560:	cf 1a       	sub	r12, r31
    1562:	df 0a       	sbc	r13, r31
    1564:	24 e0       	ldi	r18, 0x04	; 4
    1566:	c2 16       	cp	r12, r18
    1568:	d1 04       	cpc	r13, r1
    156a:	21 f7       	brne	.-56     	; 0x1534 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    156c:	c8 01       	movw	r24, r16
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
    157e:	bf 90       	pop	r11
    1580:	af 90       	pop	r10
    1582:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001586 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	ec 01       	movw	r28, r24
    159c:	5c 01       	movw	r10, r24
    159e:	87 e0       	ldi	r24, 0x07	; 7
    15a0:	a8 0e       	add	r10, r24
    15a2:	b1 1c       	adc	r11, r1
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	e6 2e       	mov	r14, r22
    15aa:	f1 2c       	mov	r15, r1
    15ac:	65 01       	movw	r12, r10
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	f5 01       	movw	r30, r10
    15b2:	61 91       	ld	r22, Z+
    15b4:	5f 01       	movw	r10, r30
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    15bc:	a7 01       	movw	r20, r14
    15be:	00 2e       	mov	r0, r16
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    15ca:	41 70       	andi	r20, 0x01	; 1
    15cc:	f6 01       	movw	r30, r12
    15ce:	60 81       	ld	r22, Z
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    15d6:	0f 5f       	subi	r16, 0xFF	; 255
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	08 30       	cpi	r16, 0x08	; 8
    15dc:	11 05       	cpc	r17, r1
    15de:	31 f7       	brne	.-52     	; 0x15ac <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    15e0:	ce 01       	movw	r24, r28
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	cf 90       	pop	r12
    15f2:	bf 90       	pop	r11
    15f4:	af 90       	pop	r10
    15f6:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

000015fa <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    1602:	16 2f       	mov	r17, r22
    1604:	6c 81       	ldd	r22, Y+4	; 0x04
    1606:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    160a:	6d 81       	ldd	r22, Y+5	; 0x05
    160c:	6f 3f       	cpi	r22, 0xFF	; 255
    160e:	21 f0       	breq	.+8      	; 0x1618 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	ce 01       	movw	r24, r28
    1614:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1618:	8c 89       	ldd	r24, Y+20	; 0x14
    161a:	61 2f       	mov	r22, r17
    161c:	84 ff       	sbrs	r24, 4
    161e:	06 c0       	rjmp	.+12     	; 0x162c <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1620:	ce 01       	movw	r24, r28
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	84 e0       	ldi	r24, 0x04	; 4
    1630:	75 95       	asr	r23
    1632:	67 95       	ror	r22
    1634:	8a 95       	dec	r24
    1636:	e1 f7       	brne	.-8      	; 0x1630 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    163e:	61 2f       	mov	r22, r17
    1640:	ce 01       	movw	r24, r28
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

0000164c <_ZN21Adafruit_RGBLCDShield7commandEh>:
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <_ZN21Adafruit_RGBLCDShield4sendEhh>

00001652 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>
    1658:	80 ed       	ldi	r24, 0xD0	; 208
    165a:	97 e0       	ldi	r25, 0x07	; 7
    165c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <delayMicroseconds>

00001660 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	28 97       	sbiw	r28, 0x08	; 8
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	9c 01       	movw	r18, r24
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	eb e0       	ldi	r30, 0x0B	; 11
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	de 01       	movw	r26, r28
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	01 90       	ld	r0, Z+
    1682:	0d 92       	st	X+, r0
    1684:	8a 95       	dec	r24
    1686:	e1 f7       	brne	.-8      	; 0x1680 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    1688:	f9 01       	movw	r30, r18
    168a:	80 8d       	ldd	r24, Z+24	; 0x18
    168c:	84 17       	cp	r24, r20
    168e:	10 f4       	brcc	.+4      	; 0x1694 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    1690:	4f ef       	ldi	r20, 0xFF	; 255
    1692:	48 0f       	add	r20, r24
    1694:	fe 01       	movw	r30, r28
    1696:	31 96       	adiw	r30, 0x01	; 1
    1698:	e4 0f       	add	r30, r20
    169a:	f1 1d       	adc	r31, r1
    169c:	e4 0f       	add	r30, r20
    169e:	f1 1d       	adc	r31, r1
    16a0:	90 81       	ld	r25, Z
    16a2:	69 0f       	add	r22, r25
    16a4:	60 68       	ori	r22, 0x80	; 128
    16a6:	c9 01       	movw	r24, r18
    16a8:	28 96       	adiw	r28, 0x08	; 8
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>

000016bc <_ZN21Adafruit_RGBLCDShield7displayEv>:
    16bc:	fc 01       	movw	r30, r24
    16be:	65 89       	ldd	r22, Z+21	; 0x15
    16c0:	26 2f       	mov	r18, r22
    16c2:	24 60       	ori	r18, 0x04	; 4
    16c4:	25 8b       	std	Z+21, r18	; 0x15
    16c6:	6c 60       	ori	r22, 0x0C	; 12
    16c8:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>

000016cc <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    16e6:	d4 2e       	mov	r13, r20
    16e8:	c2 2e       	mov	r12, r18
    16ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ec:	8f 3f       	cpi	r24, 0xFF	; 255
    16ee:	41 f4       	brne	.+16     	; 0x1700 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	8d 15       	cp	r24, r13
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    16f6:	5e c0       	rjmp	.+188    	; 0x17b4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    16f8:	8c 89       	ldd	r24, Y+20	; 0x14
    16fa:	88 60       	ori	r24, 0x08	; 8
    16fc:	8c 8b       	std	Y+20, r24	; 0x14
    16fe:	5a c0       	rjmp	.+180    	; 0x17b4 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1700:	85 e6       	ldi	r24, 0x65	; 101
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7TwoWire5beginEv>
    1708:	8e 01       	movw	r16, r28
    170a:	05 5e       	subi	r16, 0xE5	; 229
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	c8 01       	movw	r24, r16
    1710:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN17Adafruit_MCP230175beginEv>
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	68 e0       	ldi	r22, 0x08	; 8
    1718:	c8 01       	movw	r24, r16
    171a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	66 e0       	ldi	r22, 0x06	; 6
    1722:	c8 01       	movw	r24, r16
    1724:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	67 e0       	ldi	r22, 0x07	; 7
    172c:	c8 01       	movw	r24, r16
    172e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    1732:	67 e0       	ldi	r22, 0x07	; 7
    1734:	ce 01       	movw	r24, r28
    1736:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    173a:	6d 81       	ldd	r22, Y+5	; 0x05
    173c:	66 23       	and	r22, r22
    173e:	21 f0       	breq	.+8      	; 0x1748 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	c8 01       	movw	r24, r16
    1744:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	6c 81       	ldd	r22, Y+4	; 0x04
    174c:	c8 01       	movw	r24, r16
    174e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	6e 81       	ldd	r22, Y+6	; 0x06
    1756:	c8 01       	movw	r24, r16
    1758:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    175c:	7e 01       	movw	r14, r28
    175e:	e7 e0       	ldi	r30, 0x07	; 7
    1760:	ee 0e       	add	r14, r30
    1762:	f1 1c       	adc	r15, r1
    1764:	5e 01       	movw	r10, r28
    1766:	fb e0       	ldi	r31, 0x0B	; 11
    1768:	af 0e       	add	r10, r31
    176a:	b1 1c       	adc	r11, r1
    176c:	f7 01       	movw	r30, r14
    176e:	61 91       	ld	r22, Z+
    1770:	7f 01       	movw	r14, r30
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	c8 01       	movw	r24, r16
    1776:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    177a:	ea 14       	cp	r14, r10
    177c:	fb 04       	cpc	r15, r11
    177e:	b1 f7       	brne	.-20     	; 0x176c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    1780:	7e 01       	movw	r14, r28
    1782:	ff e0       	ldi	r31, 0x0F	; 15
    1784:	ef 0e       	add	r14, r31
    1786:	f1 1c       	adc	r15, r1
    1788:	5e 01       	movw	r10, r28
    178a:	84 e1       	ldi	r24, 0x14	; 20
    178c:	a8 0e       	add	r10, r24
    178e:	b1 1c       	adc	r11, r1
    1790:	47 01       	movw	r8, r14
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	f7 01       	movw	r30, r14
    1796:	61 91       	ld	r22, Z+
    1798:	7f 01       	movw	r14, r30
    179a:	c8 01       	movw	r24, r16
    179c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN17Adafruit_MCP230177pinModeEhh>
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	f4 01       	movw	r30, r8
    17a4:	60 81       	ld	r22, Z
    17a6:	c8 01       	movw	r24, r16
    17a8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN17Adafruit_MCP230176pullUpEhh>
    17ac:	ea 14       	cp	r14, r10
    17ae:	fb 04       	cpc	r15, r11
    17b0:	79 f7       	brne	.-34     	; 0x1790 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    17b2:	9e cf       	rjmp	.-196    	; 0x16f0 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    17b4:	d8 8e       	std	Y+24, r13	; 0x18
    17b6:	19 8e       	std	Y+25, r1	; 0x19
    17b8:	cc 20       	and	r12, r12
    17ba:	31 f0       	breq	.+12     	; 0x17c8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    17bc:	f1 e0       	ldi	r31, 0x01	; 1
    17be:	df 12       	cpse	r13, r31
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    17c2:	8c 89       	ldd	r24, Y+20	; 0x14
    17c4:	84 60       	ori	r24, 0x04	; 4
    17c6:	8c 8b       	std	Y+20, r24	; 0x14
    17c8:	80 e5       	ldi	r24, 0x50	; 80
    17ca:	93 ec       	ldi	r25, 0xC3	; 195
    17cc:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	6c 81       	ldd	r22, Y+4	; 0x04
    17d4:	ce 01       	movw	r24, r28
    17d6:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	6e 81       	ldd	r22, Y+6	; 0x06
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17e4:	6d 81       	ldd	r22, Y+5	; 0x05
    17e6:	6f 3f       	cpi	r22, 0xFF	; 255
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    17f2:	6c 89       	ldd	r22, Y+20	; 0x14
    17f4:	64 fd       	sbrc	r22, 4
    17f6:	1d c0       	rjmp	.+58     	; 0x1832 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    17f8:	63 e0       	ldi	r22, 0x03	; 3
    17fa:	ce 01       	movw	r24, r28
    17fc:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1800:	84 e9       	ldi	r24, 0x94	; 148
    1802:	91 e1       	ldi	r25, 0x11	; 17
    1804:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1808:	63 e0       	ldi	r22, 0x03	; 3
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1810:	84 e9       	ldi	r24, 0x94	; 148
    1812:	91 e1       	ldi	r25, 0x11	; 17
    1814:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1818:	63 e0       	ldi	r22, 0x03	; 3
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1820:	86 e9       	ldi	r24, 0x96	; 150
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1828:	62 e0       	ldi	r22, 0x02	; 2
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1830:	16 c0       	rjmp	.+44     	; 0x185e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1832:	60 62       	ori	r22, 0x20	; 32
    1834:	ce 01       	movw	r24, r28
    1836:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>
    183a:	84 e9       	ldi	r24, 0x94	; 148
    183c:	91 e1       	ldi	r25, 0x11	; 17
    183e:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1842:	6c 89       	ldd	r22, Y+20	; 0x14
    1844:	60 62       	ori	r22, 0x20	; 32
    1846:	ce 01       	movw	r24, r28
    1848:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>
    184c:	86 e9       	ldi	r24, 0x96	; 150
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 6b 07 	call	0xed6	; 0xed6 <delayMicroseconds>
    1854:	6c 89       	ldd	r22, Y+20	; 0x14
    1856:	60 62       	ori	r22, 0x20	; 32
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>
    185e:	6c 89       	ldd	r22, Y+20	; 0x14
    1860:	60 62       	ori	r22, 0x20	; 32
    1862:	ce 01       	movw	r24, r28
    1864:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	8d 8b       	std	Y+21, r24	; 0x15
    186c:	ce 01       	movw	r24, r28
    186e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN21Adafruit_RGBLCDShield7displayEv>
    1872:	ce 01       	movw	r24, r28
    1874:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN21Adafruit_RGBLCDShield5clearEv>
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	8e 8b       	std	Y+22, r24	; 0x16
    187c:	66 e0       	ldi	r22, 0x06	; 6
    187e:	ce 01       	movw	r24, r28
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	9f 90       	pop	r9
    1896:	8f 90       	pop	r8
    1898:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_ZN21Adafruit_RGBLCDShield7commandEh>

0000189c <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	08 95       	ret

000018a8 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    18a8:	df 92       	push	r13
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	7c 01       	movw	r14, r24
    18b8:	2f e0       	ldi	r18, 0x0F	; 15
    18ba:	e2 0e       	add	r14, r18
    18bc:	f1 1c       	adc	r15, r1
    18be:	c0 e0       	ldi	r28, 0x00	; 0
    18c0:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    18c2:	2f e1       	ldi	r18, 0x1F	; 31
    18c4:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    18c6:	8c 01       	movw	r16, r24
    18c8:	05 5e       	subi	r16, 0xE5	; 229
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	f7 01       	movw	r30, r14
    18ce:	61 91       	ld	r22, Z+
    18d0:	7f 01       	movw	r14, r30
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN17Adafruit_MCP2301711digitalReadEh>
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	0c 2e       	mov	r0, r28
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    18e0:	22 0f       	add	r18, r18
    18e2:	33 1f       	adc	r19, r19
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    18e8:	20 95       	com	r18
    18ea:	30 95       	com	r19
    18ec:	d2 22       	and	r13, r18
    18ee:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    18f0:	c5 30       	cpi	r28, 0x05	; 5
    18f2:	d1 05       	cpc	r29, r1
    18f4:	59 f7       	brne	.-42     	; 0x18cc <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    18f6:	8d 2d       	mov	r24, r13
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	08 95       	ret

00001908 <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    1908:	68 2f       	mov	r22, r24
    190a:	85 e6       	ldi	r24, 0x65	; 101
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <_ZN7TwoWire5writeEh>

00001912 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1918:	68 30       	cpi	r22, 0x08	; 8
    191a:	08 f0       	brcs	.+2      	; 0x191e <_ZN17Adafruit_MCP230175beginEh+0xc>
    191c:	67 e0       	ldi	r22, 0x07	; 7
    191e:	68 83       	st	Y, r22

  WIRE.begin();
    1920:	85 e6       	ldi	r24, 0x65	; 101
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1928:	68 81       	ld	r22, Y
    192a:	60 62       	ori	r22, 0x20	; 32
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	85 e6       	ldi	r24, 0x65	; 101
    1930:	93 e0       	ldi	r25, 0x03	; 3
    1932:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1942:	85 e6       	ldi	r24, 0x65	; 101
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    194a:	68 81       	ld	r22, Y
    194c:	60 62       	ori	r22, 0x20	; 32
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	85 e6       	ldi	r24, 0x65	; 101
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1964:	85 e6       	ldi	r24, 0x65	; 101
    1966:	93 e0       	ldi	r25, 0x03	; 3
}
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    196c:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>

00001970 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <_ZN17Adafruit_MCP230175beginEh>

00001976 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	d6 2f       	mov	r29, r22
    197c:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    197e:	fc 01       	movw	r30, r24
    1980:	60 81       	ld	r22, Z
    1982:	60 62       	ori	r22, 0x20	; 32
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	85 e6       	ldi	r24, 0x65	; 101
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    198e:	82 e1       	ldi	r24, 0x12	; 18
    1990:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1994:	8d 2f       	mov	r24, r29
    1996:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(ba >> 8);
    199a:	8c 2f       	mov	r24, r28
    199c:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    19a0:	85 e6       	ldi	r24, 0x65	; 101
    19a2:	93 e0       	ldi	r25, 0x03	; 3
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    19a8:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>

000019ac <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	8c 01       	movw	r16, r24
    19b8:	c6 2f       	mov	r28, r22
    19ba:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    19bc:	60 31       	cpi	r22, 0x10	; 16
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    19c0:	51 c0       	rjmp	.+162    	; 0x1a64 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    19c2:	68 30       	cpi	r22, 0x08	; 8
    19c4:	20 f0       	brcs	.+8      	; 0x19ce <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    19c6:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    19c8:	ff 24       	eor	r15, r15
    19ca:	f3 94       	inc	r15
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    19ce:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    19d0:	f8 01       	movw	r30, r16
    19d2:	60 81       	ld	r22, Z
    19d4:	60 62       	ori	r22, 0x20	; 32
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	85 e6       	ldi	r24, 0x65	; 101
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    19e0:	8f 2d       	mov	r24, r15
    19e2:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    19e6:	85 e6       	ldi	r24, 0x65	; 101
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    19ee:	f8 01       	movw	r30, r16
    19f0:	60 81       	ld	r22, Z
    19f2:	60 62       	ori	r22, 0x20	; 32
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	85 e6       	ldi	r24, 0x65	; 101
    19fc:	93 e0       	ldi	r25, 0x03	; 3
    19fe:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1a02:	85 e6       	ldi	r24, 0x65	; 101
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1a0a:	21 e0       	ldi	r18, 0x01	; 1
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1a0e:	d1 11       	cpse	r29, r1
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1a16:	44 0f       	add	r20, r20
    1a18:	55 1f       	adc	r21, r21
    1a1a:	ca 95       	dec	r28
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1a1e:	ea 01       	movw	r28, r20
    1a20:	c8 2b       	or	r28, r24
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1a24:	f9 01       	movw	r30, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	ca 95       	dec	r28
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1a30:	ef 01       	movw	r28, r30
    1a32:	c0 95       	com	r28
    1a34:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a36:	f8 01       	movw	r30, r16
    1a38:	60 81       	ld	r22, Z
    1a3a:	60 62       	ori	r22, 0x20	; 32
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	85 e6       	ldi	r24, 0x65	; 101
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1a46:	8f 2d       	mov	r24, r15
    1a48:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(iodir);	
    1a4c:	8c 2f       	mov	r24, r28
    1a4e:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a52:	85 e6       	ldi	r24, 0x65	; 101
    1a54:	93 e0       	ldi	r25, 0x03	; 3
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1a60:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	08 95       	ret

00001a70 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1a76:	68 81       	ld	r22, Y
    1a78:	60 62       	ori	r22, 0x20	; 32
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	85 e6       	ldi	r24, 0x65	; 101
    1a7e:	93 e0       	ldi	r25, 0x03	; 3
    1a80:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1a84:	82 e1       	ldi	r24, 0x12	; 18
    1a86:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1a8a:	85 e6       	ldi	r24, 0x65	; 101
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1a92:	68 81       	ld	r22, Y
    1a94:	60 62       	ori	r22, 0x20	; 32
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	42 e0       	ldi	r20, 0x02	; 2
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	85 e6       	ldi	r24, 0x65	; 101
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1aa4:	85 e6       	ldi	r24, 0x65	; 101
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
    1aac:	c8 2f       	mov	r28, r24
    1aae:	85 e6       	ldi	r24, 0x65	; 101
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1aba:	8c 2b       	or	r24, r28
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	8c 01       	movw	r16, r24
    1acc:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1ace:	60 31       	cpi	r22, 0x10	; 16
    1ad0:	58 f5       	brcc	.+86     	; 0x1b28 <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1ad2:	68 30       	cpi	r22, 0x08	; 8
    1ad4:	18 f0       	brcs	.+6      	; 0x1adc <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1ad6:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1ad8:	d3 e1       	ldi	r29, 0x13	; 19
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1adc:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ade:	f8 01       	movw	r30, r16
    1ae0:	60 81       	ld	r22, Z
    1ae2:	60 62       	ori	r22, 0x20	; 32
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	85 e6       	ldi	r24, 0x65	; 101
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
    1aea:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1aee:	8d 2f       	mov	r24, r29
    1af0:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1af4:	85 e6       	ldi	r24, 0x65	; 101
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1afc:	f8 01       	movw	r30, r16
    1afe:	60 81       	ld	r22, Z
    1b00:	60 62       	ori	r22, 0x20	; 32
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	85 e6       	ldi	r24, 0x65	; 101
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b10:	85 e6       	ldi	r24, 0x65	; 101
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1b18:	99 27       	eor	r25, r25
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1b1c:	95 95       	asr	r25
    1b1e:	87 95       	ror	r24
    1b20:	ca 95       	dec	r28
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1b28:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	8c 01       	movw	r16, r24
    1b40:	c6 2f       	mov	r28, r22
    1b42:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1b44:	60 31       	cpi	r22, 0x10	; 16
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1b48:	52 c0       	rjmp	.+164    	; 0x1bee <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1b4a:	68 30       	cpi	r22, 0x08	; 8
    1b4c:	20 f0       	brcs	.+8      	; 0x1b56 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1b4e:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1b50:	9d e0       	ldi	r25, 0x0D	; 13
    1b52:	f9 2e       	mov	r15, r25
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1b56:	8c e0       	ldi	r24, 0x0C	; 12
    1b58:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	60 81       	ld	r22, Z
    1b5e:	60 62       	ori	r22, 0x20	; 32
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	85 e6       	ldi	r24, 0x65	; 101
    1b64:	93 e0       	ldi	r25, 0x03	; 3
    1b66:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1b6a:	8f 2d       	mov	r24, r15
    1b6c:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1b70:	85 e6       	ldi	r24, 0x65	; 101
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1b78:	f8 01       	movw	r30, r16
    1b7a:	60 81       	ld	r22, Z
    1b7c:	60 62       	ori	r22, 0x20	; 32
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	85 e6       	ldi	r24, 0x65	; 101
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1b8c:	85 e6       	ldi	r24, 0x65	; 101
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1b98:	d1 30       	cpi	r29, 0x01	; 1
    1b9a:	49 f4       	brne	.+18     	; 0x1bae <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    1ba0:	44 0f       	add	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	ca 95       	dec	r28
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    1ba8:	ea 01       	movw	r28, r20
    1baa:	c8 2b       	or	r28, r24
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    1bae:	f9 01       	movw	r30, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	ca 95       	dec	r28
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    1bba:	ef 01       	movw	r28, r30
    1bbc:	c0 95       	com	r28
    1bbe:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	60 81       	ld	r22, Z
    1bc4:	60 62       	ori	r22, 0x20	; 32
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	85 e6       	ldi	r24, 0x65	; 101
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    1bd0:	8f 2d       	mov	r24, r15
    1bd2:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(gppu);	
    1bd6:	8c 2f       	mov	r24, r28
    1bd8:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1bdc:	85 e6       	ldi	r24, 0x65	; 101
    1bde:	93 e0       	ldi	r25, 0x03	; 3
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    1bea:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	08 95       	ret

00001bfa <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	8c 01       	movw	r16, r24
    1c08:	c6 2f       	mov	r28, r22
    1c0a:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    1c0c:	60 31       	cpi	r22, 0x10	; 16
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    1c10:	56 c0       	rjmp	.+172    	; 0x1cbe <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    1c12:	68 30       	cpi	r22, 0x08	; 8
    1c14:	28 f0       	brcs	.+10     	; 0x1c20 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1c16:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    1c18:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    1c1a:	93 e1       	ldi	r25, 0x13	; 19
    1c1c:	f9 2e       	mov	r15, r25
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    1c20:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    1c22:	82 e1       	ldi	r24, 0x12	; 18
    1c24:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c26:	f8 01       	movw	r30, r16
    1c28:	60 81       	ld	r22, Z
    1c2a:	60 62       	ori	r22, 0x20	; 32
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	85 e6       	ldi	r24, 0x65	; 101
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    1c36:	8d 2f       	mov	r24, r29
    1c38:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1c3c:	85 e6       	ldi	r24, 0x65	; 101
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1c44:	f8 01       	movw	r30, r16
    1c46:	60 81       	ld	r22, Z
    1c48:	60 62       	ori	r22, 0x20	; 32
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	85 e6       	ldi	r24, 0x65	; 101
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1c58:	85 e6       	ldi	r24, 0x65	; 101
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1c60:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    1c62:	21 e0       	ldi	r18, 0x01	; 1
    1c64:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    1c66:	ef 12       	cpse	r14, r31
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    1c6e:	44 0f       	add	r20, r20
    1c70:	55 1f       	adc	r21, r21
    1c72:	ca 95       	dec	r28
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    1c76:	ea 01       	movw	r28, r20
    1c78:	c8 2b       	or	r28, r24
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    1c7c:	f9 01       	movw	r30, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	ca 95       	dec	r28
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    1c88:	ef 01       	movw	r28, r30
    1c8a:	c0 95       	com	r28
    1c8c:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1c8e:	f8 01       	movw	r30, r16
    1c90:	60 81       	ld	r22, Z
    1c92:	60 62       	ori	r22, 0x20	; 32
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	85 e6       	ldi	r24, 0x65	; 101
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    1c9e:	8f 2d       	mov	r24, r15
    1ca0:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  wiresend(gpio);	
    1ca4:	8c 2f       	mov	r24, r28
    1ca6:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZL8wiresendh>
  WIRE.endTransmission();
    1caa:	85 e6       	ldi	r24, 0x65	; 101
    1cac:	93 e0       	ldi	r25, 0x03	; 3
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    1cba:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_ZN7TwoWire15endTransmissionEv>
}
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	08 95       	ret

00001ccc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1ccc:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1cd6:	82 1b       	sub	r24, r18
    1cd8:	91 09       	sbc	r25, r1
    1cda:	08 95       	ret

00001cdc <_ZN7TwoWire4readEv>:
    1cdc:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1ce0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1ce4:	98 17       	cp	r25, r24
    1ce6:	50 f4       	brcc	.+20     	; 0x1cfc <_ZN7TwoWire4readEv+0x20>
    1ce8:	e9 2f       	mov	r30, r25
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	e5 56       	subi	r30, 0x65	; 101
    1cee:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf0:	20 81       	ld	r18, Z
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	9f 5f       	subi	r25, 0xFF	; 255
    1cf6:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <_ZN7TwoWire4readEv+0x24>
    1cfc:	2f ef       	ldi	r18, 0xFF	; 255
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	c9 01       	movw	r24, r18
    1d02:	08 95       	ret

00001d04 <_ZN7TwoWire4peekEv>:
    1d04:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1d08:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1d0c:	e8 17       	cp	r30, r24
    1d0e:	30 f4       	brcc	.+12     	; 0x1d1c <_ZN7TwoWire4peekEv+0x18>
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	e5 56       	subi	r30, 0x65	; 101
    1d14:	fc 4f       	sbci	r31, 0xFC	; 252
    1d16:	80 81       	ld	r24, Z
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	08 95       	ret
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	9f ef       	ldi	r25, 0xFF	; 255
    1d20:	08 95       	ret

00001d22 <_ZN7TwoWire5flushEv>:
    1d22:	08 95       	ret

00001d24 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	ec 01       	movw	r28, r24
    1d2a:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <_ZN7TwoWire14user_onReceiveE>
    1d2e:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <_ZN7TwoWire14user_onReceiveE+0x1>
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	f1 f0       	breq	.+60     	; 0x1d72 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d36:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1d3a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1d3e:	98 17       	cp	r25, r24
    1d40:	c0 f0       	brcs	.+48     	; 0x1d72 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	29 2f       	mov	r18, r25
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	26 17       	cp	r18, r22
    1d4a:	37 07       	cpc	r19, r23
    1d4c:	54 f4       	brge	.+20     	; 0x1d62 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1d4e:	de 01       	movw	r26, r28
    1d50:	a2 0f       	add	r26, r18
    1d52:	b3 1f       	adc	r27, r19
    1d54:	4c 91       	ld	r20, X
    1d56:	d9 01       	movw	r26, r18
    1d58:	a5 56       	subi	r26, 0x65	; 101
    1d5a:	bc 4f       	sbci	r27, 0xFC	; 252
    1d5c:	4c 93       	st	X, r20
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	f1 cf       	rjmp	.-30     	; 0x1d44 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1d62:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1d66:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	09 94       	ijmp
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	08 95       	ret

00001d78 <_ZN7TwoWire16onRequestServiceEv>:
    1d78:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <_ZN7TwoWire14user_onRequestE>
    1d7c:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <_ZN7TwoWire14user_onRequestE+0x1>
    1d80:	30 97       	sbiw	r30, 0x00	; 0
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <_ZN7TwoWire16onRequestServiceEv+0x16>
    1d84:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1d88:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1d8c:	09 94       	ijmp
    1d8e:	08 95       	ret

00001d90 <_ZN7TwoWire5writeEPKhj>:
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	7c 01       	movw	r14, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8a 01       	movw	r16, r20
    1da6:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <_ZN7TwoWire12transmittingE>
    1daa:	22 23       	and	r18, r18
    1dac:	89 f0       	breq	.+34     	; 0x1dd0 <_ZN7TwoWire5writeEPKhj+0x40>
    1dae:	eb 01       	movw	r28, r22
    1db0:	6b 01       	movw	r12, r22
    1db2:	c4 0e       	add	r12, r20
    1db4:	d5 1e       	adc	r13, r21
    1db6:	cc 15       	cp	r28, r12
    1db8:	dd 05       	cpc	r29, r13
    1dba:	69 f0       	breq	.+26     	; 0x1dd6 <_ZN7TwoWire5writeEPKhj+0x46>
    1dbc:	69 91       	ld	r22, Y+
    1dbe:	d7 01       	movw	r26, r14
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	f0 81       	ld	r31, Z
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	c7 01       	movw	r24, r14
    1dcc:	09 95       	icall
    1dce:	f3 cf       	rjmp	.-26     	; 0x1db6 <_ZN7TwoWire5writeEPKhj+0x26>
    1dd0:	64 2f       	mov	r22, r20
    1dd2:	0e 94 90 10 	call	0x2120	; 0x2120 <twi_transmit>
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

00001dea <_ZN7TwoWire5writeEh>:
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	1f 92       	push	r1
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	69 83       	std	Y+1, r22	; 0x01
    1df6:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <_ZN7TwoWire12transmittingE>
    1dfa:	22 23       	and	r18, r18
    1dfc:	d1 f0       	breq	.+52     	; 0x1e32 <_ZN7TwoWire5writeEh+0x48>
    1dfe:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1e02:	20 32       	cpi	r18, 0x20	; 32
    1e04:	40 f0       	brcs	.+16     	; 0x1e16 <_ZN7TwoWire5writeEh+0x2c>
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	33 83       	std	Z+3, r19	; 0x03
    1e0e:	22 83       	std	Z+2, r18	; 0x02
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	15 c0       	rjmp	.+42     	; 0x1e40 <_ZN7TwoWire5writeEh+0x56>
    1e16:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1e1a:	e8 2f       	mov	r30, r24
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	e8 58       	subi	r30, 0x88	; 136
    1e20:	fc 4f       	sbci	r31, 0xFC	; 252
    1e22:	99 81       	ldd	r25, Y+1	; 0x01
    1e24:	90 83       	st	Z, r25
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1e2c:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <_ZN7TwoWire5writeEh+0x52>
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 90 10 	call	0x2120	; 0x2120 <twi_transmit>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0f 90       	pop	r0
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	08 95       	ret

00001e48 <_ZN7TwoWireC1Ev>:
    1e48:	fc 01       	movw	r30, r24
    1e4a:	13 82       	std	Z+3, r1	; 0x03
    1e4c:	12 82       	std	Z+2, r1	; 0x02
    1e4e:	88 ee       	ldi	r24, 0xE8	; 232
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	a0 e0       	ldi	r26, 0x00	; 0
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	84 83       	std	Z+4, r24	; 0x04
    1e58:	95 83       	std	Z+5, r25	; 0x05
    1e5a:	a6 83       	std	Z+6, r26	; 0x06
    1e5c:	b7 83       	std	Z+7, r27	; 0x07
    1e5e:	85 e6       	ldi	r24, 0x65	; 101
    1e60:	92 e0       	ldi	r25, 0x02	; 2
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	08 95       	ret

00001e68 <_ZN7TwoWire5beginEv>:
    1e68:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1e6c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1e70:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1e74:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1e78:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <twi_init>
    1e7c:	8c eb       	ldi	r24, 0xBC	; 188
    1e7e:	9e e0       	ldi	r25, 0x0E	; 14
    1e80:	0e 94 bd 10 	call	0x217a	; 0x217a <twi_attachSlaveTxEvent>
    1e84:	82 e9       	ldi	r24, 0x92	; 146
    1e86:	9e e0       	ldi	r25, 0x0E	; 14
    1e88:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <twi_attachSlaveRxEvent>

00001e8c <_ZN7TwoWire17beginTransmissionEh>:
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <_ZN7TwoWire12transmittingE>
    1e92:	60 93 98 03 	sts	0x0398, r22	; 0x800398 <_ZN7TwoWire9txAddressE>
    1e96:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1e9a:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1e9e:	08 95       	ret

00001ea0 <_ZN7TwoWire17beginTransmissionEi>:
    1ea0:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_ZN7TwoWire17beginTransmissionEh>

00001ea4 <_ZN7TwoWire15endTransmissionEh>:
    1ea4:	0f 93       	push	r16
    1ea6:	06 2f       	mov	r16, r22
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1eae:	68 e7       	ldi	r22, 0x78	; 120
    1eb0:	73 e0       	ldi	r23, 0x03	; 3
    1eb2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN7TwoWire9txAddressE>
    1eb6:	0e 94 3a 10 	call	0x2074	; 0x2074 <twi_writeTo>
    1eba:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire13txBufferIndexE>
    1ebe:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_ZN7TwoWire14txBufferLengthE>
    1ec2:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_ZN7TwoWire12transmittingE>
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <_ZN7TwoWire11requestFromEhhmhh>:
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	5c 01       	movw	r10, r24
    1ee6:	f6 2e       	mov	r15, r22
    1ee8:	d4 2f       	mov	r29, r20
    1eea:	28 01       	movw	r4, r16
    1eec:	39 01       	movw	r6, r18
    1eee:	ee 20       	and	r14, r14
    1ef0:	21 f1       	breq	.+72     	; 0x1f3a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1ef2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_ZN7TwoWire17beginTransmissionEh>
    1ef6:	ce 2d       	mov	r28, r14
    1ef8:	c4 30       	cpi	r28, 0x04	; 4
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1efc:	c3 e0       	ldi	r28, 0x03	; 3
    1efe:	c1 50       	subi	r28, 0x01	; 1
    1f00:	c0 f0       	brcs	.+48     	; 0x1f32 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1f02:	28 e0       	ldi	r18, 0x08	; 8
    1f04:	c2 9f       	mul	r28, r18
    1f06:	c0 01       	movw	r24, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	a3 01       	movw	r20, r6
    1f0c:	92 01       	movw	r18, r4
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1f10:	56 95       	lsr	r21
    1f12:	47 95       	ror	r20
    1f14:	37 95       	ror	r19
    1f16:	27 95       	ror	r18
    1f18:	8a 95       	dec	r24
    1f1a:	d2 f7       	brpl	.-12     	; 0x1f10 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	b9 01       	movw	r22, r18
    1f20:	d5 01       	movw	r26, r10
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	01 90       	ld	r0, Z+
    1f28:	f0 81       	ld	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	09 95       	icall
    1f30:	e6 cf       	rjmp	.-52     	; 0x1efe <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	c5 01       	movw	r24, r10
    1f36:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN7TwoWire15endTransmissionEh>
    1f3a:	4d 2f       	mov	r20, r29
    1f3c:	d1 32       	cpi	r29, 0x21	; 33
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1f40:	40 e2       	ldi	r20, 0x20	; 32
    1f42:	2c 2d       	mov	r18, r12
    1f44:	6b e9       	ldi	r22, 0x9B	; 155
    1f46:	73 e0       	ldi	r23, 0x03	; 3
    1f48:	8f 2d       	mov	r24, r15
    1f4a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <twi_readFrom>
    1f4e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire13rxBufferIndexE>
    1f52:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZN7TwoWire14rxBufferLengthE>
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	cf 90       	pop	r12
    1f64:	bf 90       	pop	r11
    1f66:	af 90       	pop	r10
    1f68:	7f 90       	pop	r7
    1f6a:	6f 90       	pop	r6
    1f6c:	5f 90       	pop	r5
    1f6e:	4f 90       	pop	r4
    1f70:	08 95       	ret

00001f72 <_ZN7TwoWire11requestFromEhhh>:
    1f72:	cf 92       	push	r12
    1f74:	ef 92       	push	r14
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	c2 2e       	mov	r12, r18
    1f7c:	e1 2c       	mov	r14, r1
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	10 e0       	ldi	r17, 0x00	; 0
    1f82:	98 01       	movw	r18, r16
    1f84:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN7TwoWire11requestFromEhhmhh>
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ef 90       	pop	r14
    1f8e:	cf 90       	pop	r12
    1f90:	08 95       	ret

00001f92 <_ZN7TwoWire11requestFromEii>:
    1f92:	21 e0       	ldi	r18, 0x01	; 1
    1f94:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_ZN7TwoWire11requestFromEhhh>

00001f98 <_ZN7TwoWire15endTransmissionEv>:
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <_ZN7TwoWire15endTransmissionEh>

00001f9e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f9e:	85 e6       	ldi	r24, 0x65	; 101
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <_ZN7TwoWireC1Ev>

00001fa6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1fa6:	08 95       	ret

00001fa8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fa8:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_state>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <twi_sendStop>
    1fb2:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <twi_inRepStart>
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	82 e1       	ldi	r24, 0x12	; 18
    1fba:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	83 e1       	ldi	r24, 0x13	; 19
    1fc2:	0e 94 19 08 	call	0x1032	; 0x1032 <digitalWrite>
    1fc6:	e9 eb       	ldi	r30, 0xB9	; 185
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8e 7f       	andi	r24, 0xFE	; 254
    1fce:	80 83       	st	Z, r24
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8d 7f       	andi	r24, 0xFD	; 253
    1fd4:	80 83       	st	Z, r24
    1fd6:	88 e4       	ldi	r24, 0x48	; 72
    1fd8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1fdc:	85 e4       	ldi	r24, 0x45	; 69
    1fde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fe2:	08 95       	ret

00001fe4 <twi_readFrom>:
    1fe4:	41 32       	cpi	r20, 0x21	; 33
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <twi_readFrom+0x6>
    1fe8:	43 c0       	rjmp	.+134    	; 0x2070 <twi_readFrom+0x8c>
    1fea:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <twi_state>
    1fee:	91 11       	cpse	r25, r1
    1ff0:	fc cf       	rjmp	.-8      	; 0x1fea <twi_readFrom+0x6>
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <twi_state>
    1ff8:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <twi_sendStop>
    1ffc:	2f ef       	ldi	r18, 0xFF	; 255
    1ffe:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <twi_error>
    2002:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_masterBufferIndex>
    2006:	24 0f       	add	r18, r20
    2008:	20 93 ff 03 	sts	0x03FF, r18	; 0x8003ff <twi_masterBufferLength>
    200c:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <twi_slarw>
    2010:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <twi_slarw>
    2014:	88 0f       	add	r24, r24
    2016:	89 2b       	or	r24, r25
    2018:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <twi_slarw>
    201c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <twi_inRepStart>
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	61 f4       	brne	.+24     	; 0x203c <twi_readFrom+0x58>
    2024:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <twi_inRepStart>
    2028:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_slarw>
    202c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2030:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2034:	83 fd       	sbrc	r24, 3
    2036:	f8 cf       	rjmp	.-16     	; 0x2028 <twi_readFrom+0x44>
    2038:	85 ec       	ldi	r24, 0xC5	; 197
    203a:	01 c0       	rjmp	.+2      	; 0x203e <twi_readFrom+0x5a>
    203c:	85 ee       	ldi	r24, 0xE5	; 229
    203e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2042:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_state>
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	e1 f3       	breq	.-8      	; 0x2042 <twi_readFrom+0x5e>
    204a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_masterBufferIndex>
    204e:	84 17       	cp	r24, r20
    2050:	10 f4       	brcc	.+4      	; 0x2056 <twi_readFrom+0x72>
    2052:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <twi_masterBufferIndex>
    2056:	a1 e0       	ldi	r26, 0x01	; 1
    2058:	b4 e0       	ldi	r27, 0x04	; 4
    205a:	96 2f       	mov	r25, r22
    205c:	fb 01       	movw	r30, r22
    205e:	8e 2f       	mov	r24, r30
    2060:	89 1b       	sub	r24, r25
    2062:	84 17       	cp	r24, r20
    2064:	18 f4       	brcc	.+6      	; 0x206c <twi_readFrom+0x88>
    2066:	8d 91       	ld	r24, X+
    2068:	81 93       	st	Z+, r24
    206a:	f9 cf       	rjmp	.-14     	; 0x205e <twi_readFrom+0x7a>
    206c:	84 2f       	mov	r24, r20
    206e:	08 95       	ret
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	08 95       	ret

00002074 <twi_writeTo>:
    2074:	0f 93       	push	r16
    2076:	41 32       	cpi	r20, 0x21	; 33
    2078:	08 f0       	brcs	.+2      	; 0x207c <twi_writeTo+0x8>
    207a:	4a c0       	rjmp	.+148    	; 0x2110 <twi_writeTo+0x9c>
    207c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <twi_state>
    2080:	91 11       	cpse	r25, r1
    2082:	fc cf       	rjmp	.-8      	; 0x207c <twi_writeTo+0x8>
    2084:	32 e0       	ldi	r19, 0x02	; 2
    2086:	30 93 28 04 	sts	0x0428, r19	; 0x800428 <twi_state>
    208a:	00 93 26 04 	sts	0x0426, r16	; 0x800426 <twi_sendStop>
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	30 93 bb 03 	sts	0x03BB, r19	; 0x8003bb <twi_error>
    2094:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_masterBufferIndex>
    2098:	40 93 ff 03 	sts	0x03FF, r20	; 0x8003ff <twi_masterBufferLength>
    209c:	56 2f       	mov	r21, r22
    209e:	a1 e0       	ldi	r26, 0x01	; 1
    20a0:	b4 e0       	ldi	r27, 0x04	; 4
    20a2:	fb 01       	movw	r30, r22
    20a4:	3e 2f       	mov	r19, r30
    20a6:	35 1b       	sub	r19, r21
    20a8:	34 17       	cp	r19, r20
    20aa:	18 f4       	brcc	.+6      	; 0x20b2 <twi_writeTo+0x3e>
    20ac:	31 91       	ld	r19, Z+
    20ae:	3d 93       	st	X+, r19
    20b0:	f9 cf       	rjmp	.-14     	; 0x20a4 <twi_writeTo+0x30>
    20b2:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_slarw>
    20b6:	30 91 27 04 	lds	r19, 0x0427	; 0x800427 <twi_slarw>
    20ba:	88 0f       	add	r24, r24
    20bc:	83 2b       	or	r24, r19
    20be:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <twi_slarw>
    20c2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <twi_inRepStart>
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	61 f4       	brne	.+24     	; 0x20e2 <twi_writeTo+0x6e>
    20ca:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <twi_inRepStart>
    20ce:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_slarw>
    20d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20da:	83 fd       	sbrc	r24, 3
    20dc:	f8 cf       	rjmp	.-16     	; 0x20ce <twi_writeTo+0x5a>
    20de:	85 ec       	ldi	r24, 0xC5	; 197
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <twi_writeTo+0x70>
    20e2:	85 ee       	ldi	r24, 0xE5	; 229
    20e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20e8:	22 23       	and	r18, r18
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <twi_writeTo+0x80>
    20ec:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_state>
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	d1 f3       	breq	.-12     	; 0x20e8 <twi_writeTo+0x74>
    20f4:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_error>
    20f8:	8f 3f       	cpi	r24, 0xFF	; 255
    20fa:	79 f0       	breq	.+30     	; 0x211a <twi_writeTo+0xa6>
    20fc:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_error>
    2100:	80 32       	cpi	r24, 0x20	; 32
    2102:	41 f0       	breq	.+16     	; 0x2114 <twi_writeTo+0xa0>
    2104:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_error>
    2108:	80 33       	cpi	r24, 0x30	; 48
    210a:	31 f0       	breq	.+12     	; 0x2118 <twi_writeTo+0xa4>
    210c:	94 e0       	ldi	r25, 0x04	; 4
    210e:	05 c0       	rjmp	.+10     	; 0x211a <twi_writeTo+0xa6>
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	03 c0       	rjmp	.+6      	; 0x211a <twi_writeTo+0xa6>
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	01 c0       	rjmp	.+2      	; 0x211a <twi_writeTo+0xa6>
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	89 2f       	mov	r24, r25
    211c:	0f 91       	pop	r16
    211e:	08 95       	ret

00002120 <twi_transmit>:
    2120:	40 91 dd 03 	lds	r20, 0x03DD	; 0x8003dd <twi_txBufferLength>
    2124:	26 2f       	mov	r18, r22
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	24 0f       	add	r18, r20
    212a:	31 1d       	adc	r19, r1
    212c:	21 32       	cpi	r18, 0x21	; 33
    212e:	31 05       	cpc	r19, r1
    2130:	dc f4       	brge	.+54     	; 0x2168 <twi_transmit+0x48>
    2132:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <twi_state>
    2136:	24 30       	cpi	r18, 0x04	; 4
    2138:	c9 f4       	brne	.+50     	; 0x216c <twi_transmit+0x4c>
    213a:	fc 01       	movw	r30, r24
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	86 17       	cp	r24, r22
    2142:	58 f4       	brcc	.+22     	; 0x215a <twi_transmit+0x3a>
    2144:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <twi_txBufferLength>
    2148:	21 91       	ld	r18, Z+
    214a:	dc 01       	movw	r26, r24
    214c:	a1 52       	subi	r26, 0x21	; 33
    214e:	bc 4f       	sbci	r27, 0xFC	; 252
    2150:	a3 0f       	add	r26, r19
    2152:	b1 1d       	adc	r27, r1
    2154:	2c 93       	st	X, r18
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	f3 cf       	rjmp	.-26     	; 0x2140 <twi_transmit+0x20>
    215a:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_txBufferLength>
    215e:	68 0f       	add	r22, r24
    2160:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <twi_txBufferLength>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	08 95       	ret
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	08 95       	ret
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	08 95       	ret

00002170 <twi_attachSlaveRxEvent>:
    2170:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <twi_onSlaveReceive+0x1>
    2174:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_onSlaveReceive>
    2178:	08 95       	ret

0000217a <twi_attachSlaveTxEvent>:
    217a:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <twi_onSlaveTransmit+0x1>
    217e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_onSlaveTransmit>
    2182:	08 95       	ret

00002184 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2184:	85 ed       	ldi	r24, 0xD5	; 213
    2186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    218a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    218e:	84 fd       	sbrc	r24, 4
    2190:	fc cf       	rjmp	.-8      	; 0x218a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2192:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_state>
    2196:	08 95       	ret

00002198 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2198:	85 ec       	ldi	r24, 0xC5	; 197
    219a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    219e:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_state>
    21a2:	08 95       	ret

000021a4 <__vector_24>:
}

ISR(TWI_vect)
{
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	0f 92       	push	r0
    21ac:	11 24       	eor	r1, r1
    21ae:	2f 93       	push	r18
    21b0:	3f 93       	push	r19
    21b2:	4f 93       	push	r20
    21b4:	5f 93       	push	r21
    21b6:	6f 93       	push	r22
    21b8:	7f 93       	push	r23
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	ef 93       	push	r30
    21c4:	ff 93       	push	r31
  switch(TW_STATUS){
    21c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    21ca:	88 7f       	andi	r24, 0xF8	; 248
    21cc:	80 36       	cpi	r24, 0x60	; 96
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_24+0x2e>
    21d0:	9e c0       	rjmp	.+316    	; 0x230e <__vector_24+0x16a>
    21d2:	78 f5       	brcc	.+94     	; 0x2232 <__vector_24+0x8e>
    21d4:	88 32       	cpi	r24, 0x28	; 40
    21d6:	09 f4       	brne	.+2      	; 0x21da <__vector_24+0x36>
    21d8:	5d c0       	rjmp	.+186    	; 0x2294 <__vector_24+0xf0>
    21da:	90 f4       	brcc	.+36     	; 0x2200 <__vector_24+0x5c>
    21dc:	80 31       	cpi	r24, 0x10	; 16
    21de:	09 f4       	brne	.+2      	; 0x21e2 <__vector_24+0x3e>
    21e0:	56 c0       	rjmp	.+172    	; 0x228e <__vector_24+0xea>
    21e2:	38 f4       	brcc	.+14     	; 0x21f2 <__vector_24+0x4e>
    21e4:	88 23       	and	r24, r24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_24+0x46>
    21e8:	f5 c0       	rjmp	.+490    	; 0x23d4 <__vector_24+0x230>
    21ea:	88 30       	cpi	r24, 0x08	; 8
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_24+0x4c>
    21ee:	4f c0       	rjmp	.+158    	; 0x228e <__vector_24+0xea>
    21f0:	f5 c0       	rjmp	.+490    	; 0x23dc <__vector_24+0x238>
    21f2:	88 31       	cpi	r24, 0x18	; 24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_24+0x54>
    21f6:	4e c0       	rjmp	.+156    	; 0x2294 <__vector_24+0xf0>
    21f8:	80 32       	cpi	r24, 0x20	; 32
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_24+0x5a>
    21fc:	5f c0       	rjmp	.+190    	; 0x22bc <__vector_24+0x118>
    21fe:	ee c0       	rjmp	.+476    	; 0x23dc <__vector_24+0x238>
    2200:	80 34       	cpi	r24, 0x40	; 64
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_24+0x62>
    2204:	6a c0       	rjmp	.+212    	; 0x22da <__vector_24+0x136>
    2206:	58 f4       	brcc	.+22     	; 0x221e <__vector_24+0x7a>
    2208:	80 33       	cpi	r24, 0x30	; 48
    220a:	09 f4       	brne	.+2      	; 0x220e <__vector_24+0x6a>
    220c:	57 c0       	rjmp	.+174    	; 0x22bc <__vector_24+0x118>
    220e:	88 33       	cpi	r24, 0x38	; 56
    2210:	09 f0       	breq	.+2      	; 0x2214 <__vector_24+0x70>
    2212:	e4 c0       	rjmp	.+456    	; 0x23dc <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2214:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <twi_error>
      twi_releaseBus();
    2218:	0e 94 cc 10 	call	0x2198	; 0x2198 <twi_releaseBus>
      break;
    221c:	df c0       	rjmp	.+446    	; 0x23dc <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    221e:	80 35       	cpi	r24, 0x50	; 80
    2220:	09 f4       	brne	.+2      	; 0x2224 <__vector_24+0x80>
    2222:	4f c0       	rjmp	.+158    	; 0x22c2 <__vector_24+0x11e>
    2224:	88 35       	cpi	r24, 0x58	; 88
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_24+0x86>
    2228:	5d c0       	rjmp	.+186    	; 0x22e4 <__vector_24+0x140>
    222a:	88 34       	cpi	r24, 0x48	; 72
    222c:	09 f0       	breq	.+2      	; 0x2230 <__vector_24+0x8c>
    222e:	d6 c0       	rjmp	.+428    	; 0x23dc <__vector_24+0x238>
    2230:	d3 c0       	rjmp	.+422    	; 0x23d8 <__vector_24+0x234>
    2232:	88 39       	cpi	r24, 0x98	; 152
    2234:	09 f4       	brne	.+2      	; 0x2238 <__vector_24+0x94>
    2236:	c4 c0       	rjmp	.+392    	; 0x23c0 <__vector_24+0x21c>
    2238:	a8 f4       	brcc	.+42     	; 0x2264 <__vector_24+0xc0>
    223a:	88 37       	cpi	r24, 0x78	; 120
    223c:	09 f4       	brne	.+2      	; 0x2240 <__vector_24+0x9c>
    223e:	67 c0       	rjmp	.+206    	; 0x230e <__vector_24+0x16a>
    2240:	38 f4       	brcc	.+14     	; 0x2250 <__vector_24+0xac>
    2242:	88 36       	cpi	r24, 0x68	; 104
    2244:	09 f4       	brne	.+2      	; 0x2248 <__vector_24+0xa4>
    2246:	63 c0       	rjmp	.+198    	; 0x230e <__vector_24+0x16a>
    2248:	80 37       	cpi	r24, 0x70	; 112
    224a:	09 f4       	brne	.+2      	; 0x224e <__vector_24+0xaa>
    224c:	60 c0       	rjmp	.+192    	; 0x230e <__vector_24+0x16a>
    224e:	c6 c0       	rjmp	.+396    	; 0x23dc <__vector_24+0x238>
    2250:	88 38       	cpi	r24, 0x88	; 136
    2252:	09 f4       	brne	.+2      	; 0x2256 <__vector_24+0xb2>
    2254:	b5 c0       	rjmp	.+362    	; 0x23c0 <__vector_24+0x21c>
    2256:	80 39       	cpi	r24, 0x90	; 144
    2258:	09 f4       	brne	.+2      	; 0x225c <__vector_24+0xb8>
    225a:	5f c0       	rjmp	.+190    	; 0x231a <__vector_24+0x176>
    225c:	80 38       	cpi	r24, 0x80	; 128
    225e:	09 f0       	breq	.+2      	; 0x2262 <__vector_24+0xbe>
    2260:	bd c0       	rjmp	.+378    	; 0x23dc <__vector_24+0x238>
    2262:	5b c0       	rjmp	.+182    	; 0x231a <__vector_24+0x176>
    2264:	80 3b       	cpi	r24, 0xB0	; 176
    2266:	09 f4       	brne	.+2      	; 0x226a <__vector_24+0xc6>
    2268:	83 c0       	rjmp	.+262    	; 0x2370 <__vector_24+0x1cc>
    226a:	38 f4       	brcc	.+14     	; 0x227a <__vector_24+0xd6>
    226c:	80 3a       	cpi	r24, 0xA0	; 160
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0xce>
    2270:	66 c0       	rjmp	.+204    	; 0x233e <__vector_24+0x19a>
    2272:	88 3a       	cpi	r24, 0xA8	; 168
    2274:	09 f4       	brne	.+2      	; 0x2278 <__vector_24+0xd4>
    2276:	7c c0       	rjmp	.+248    	; 0x2370 <__vector_24+0x1cc>
    2278:	b1 c0       	rjmp	.+354    	; 0x23dc <__vector_24+0x238>
    227a:	80 3c       	cpi	r24, 0xC0	; 192
    227c:	09 f4       	brne	.+2      	; 0x2280 <__vector_24+0xdc>
    227e:	a4 c0       	rjmp	.+328    	; 0x23c8 <__vector_24+0x224>
    2280:	88 3c       	cpi	r24, 0xC8	; 200
    2282:	09 f4       	brne	.+2      	; 0x2286 <__vector_24+0xe2>
    2284:	a1 c0       	rjmp	.+322    	; 0x23c8 <__vector_24+0x224>
    2286:	88 3b       	cpi	r24, 0xB8	; 184
    2288:	09 f4       	brne	.+2      	; 0x228c <__vector_24+0xe8>
    228a:	87 c0       	rjmp	.+270    	; 0x239a <__vector_24+0x1f6>
    228c:	a7 c0       	rjmp	.+334    	; 0x23dc <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    228e:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_slarw>
    2292:	10 c0       	rjmp	.+32     	; 0x22b4 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2294:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <twi_masterBufferIndex>
    2298:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <twi_masterBufferLength>
    229c:	98 17       	cp	r25, r24
    229e:	70 f5       	brcc	.+92     	; 0x22fc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22a0:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <twi_masterBufferIndex>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	8e 0f       	add	r24, r30
    22a8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_masterBufferIndex>
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ef 5f       	subi	r30, 0xFF	; 255
    22b0:	fb 4f       	sbci	r31, 0xFB	; 251
    22b2:	80 81       	ld	r24, Z
    22b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22b8:	85 ec       	ldi	r24, 0xC5	; 197
    22ba:	83 c0       	rjmp	.+262    	; 0x23c2 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    22bc:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <twi_error>
    22c0:	8b c0       	rjmp	.+278    	; 0x23d8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22c2:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <twi_masterBufferIndex>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	8e 0f       	add	r24, r30
    22ca:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_masterBufferIndex>
    22ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	ef 5f       	subi	r30, 0xFF	; 255
    22d6:	fb 4f       	sbci	r31, 0xFB	; 251
    22d8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22da:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <twi_masterBufferIndex>
    22de:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <twi_masterBufferLength>
    22e2:	6b c0       	rjmp	.+214    	; 0x23ba <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22e4:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <twi_masterBufferIndex>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	8e 0f       	add	r24, r30
    22ec:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_masterBufferIndex>
    22f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ef 5f       	subi	r30, 0xFF	; 255
    22f8:	fb 4f       	sbci	r31, 0xFB	; 251
    22fa:	80 83       	st	Z, r24
	if (twi_sendStop)
    22fc:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <twi_sendStop>
    2300:	81 11       	cpse	r24, r1
    2302:	6a c0       	rjmp	.+212    	; 0x23d8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    230a:	84 ea       	ldi	r24, 0xA4	; 164
    230c:	5e c0       	rjmp	.+188    	; 0x23ca <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2314:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_rxBufferIndex>
    2318:	cf cf       	rjmp	.-98     	; 0x22b8 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    231a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <twi_rxBufferIndex>
    231e:	80 32       	cpi	r24, 0x20	; 32
    2320:	08 f0       	brcs	.+2      	; 0x2324 <__vector_24+0x180>
    2322:	4e c0       	rjmp	.+156    	; 0x23c0 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2324:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <twi_rxBufferIndex>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	8e 0f       	add	r24, r30
    232c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <twi_rxBufferIndex>
    2330:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	e3 54       	subi	r30, 0x43	; 67
    2338:	fc 4f       	sbci	r31, 0xFC	; 252
    233a:	80 83       	st	Z, r24
    233c:	bd cf       	rjmp	.-134    	; 0x22b8 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    233e:	0e 94 cc 10 	call	0x2198	; 0x2198 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2342:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <twi_rxBufferIndex>
    2346:	80 32       	cpi	r24, 0x20	; 32
    2348:	30 f4       	brcc	.+12     	; 0x2356 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    234a:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <twi_rxBufferIndex>
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	e3 54       	subi	r30, 0x43	; 67
    2352:	fc 4f       	sbci	r31, 0xFC	; 252
    2354:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2356:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <twi_rxBufferIndex>
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <twi_onSlaveReceive>
    2360:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <twi_onSlaveReceive+0x1>
    2364:	8d eb       	ldi	r24, 0xBD	; 189
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    236a:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_rxBufferIndex>
      break;
    236e:	36 c0       	rjmp	.+108    	; 0x23dc <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2376:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    237a:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    237e:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_onSlaveTransmit>
    2382:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <twi_onSlaveTransmit+0x1>
    2386:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2388:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_txBufferLength>
    238c:	81 11       	cpse	r24, r1
    238e:	05 c0       	rjmp	.+10     	; 0x239a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2396:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    239a:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <twi_txBufferIndex>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	8e 0f       	add	r24, r30
    23a2:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_txBufferIndex>
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	e1 52       	subi	r30, 0x21	; 33
    23aa:	fc 4f       	sbci	r31, 0xFC	; 252
    23ac:	80 81       	ld	r24, Z
    23ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    23b2:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <twi_txBufferIndex>
    23b6:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_txBufferLength>
    23ba:	98 17       	cp	r25, r24
    23bc:	08 f4       	brcc	.+2      	; 0x23c0 <__vector_24+0x21c>
    23be:	7c cf       	rjmp	.-264    	; 0x22b8 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23c0:	85 e8       	ldi	r24, 0x85	; 133
    23c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23c6:	0a c0       	rjmp	.+20     	; 0x23dc <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23c8:	85 ec       	ldi	r24, 0xC5	; 197
    23ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23ce:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_state>
      break;
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23d4:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <twi_error>
      twi_stop();
    23d8:	0e 94 c2 10 	call	0x2184	; 0x2184 <twi_stop>
      break;
  }
}
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	bf 91       	pop	r27
    23e2:	af 91       	pop	r26
    23e4:	9f 91       	pop	r25
    23e6:	8f 91       	pop	r24
    23e8:	7f 91       	pop	r23
    23ea:	6f 91       	pop	r22
    23ec:	5f 91       	pop	r21
    23ee:	4f 91       	pop	r20
    23f0:	3f 91       	pop	r19
    23f2:	2f 91       	pop	r18
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__udivmodsi4>:
    23fe:	a1 e2       	ldi	r26, 0x21	; 33
    2400:	1a 2e       	mov	r1, r26
    2402:	aa 1b       	sub	r26, r26
    2404:	bb 1b       	sub	r27, r27
    2406:	fd 01       	movw	r30, r26
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__udivmodsi4_ep>

0000240a <__udivmodsi4_loop>:
    240a:	aa 1f       	adc	r26, r26
    240c:	bb 1f       	adc	r27, r27
    240e:	ee 1f       	adc	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	a2 17       	cp	r26, r18
    2414:	b3 07       	cpc	r27, r19
    2416:	e4 07       	cpc	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	20 f0       	brcs	.+8      	; 0x2424 <__udivmodsi4_ep>
    241c:	a2 1b       	sub	r26, r18
    241e:	b3 0b       	sbc	r27, r19
    2420:	e4 0b       	sbc	r30, r20
    2422:	f5 0b       	sbc	r31, r21

00002424 <__udivmodsi4_ep>:
    2424:	66 1f       	adc	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	1a 94       	dec	r1
    242e:	69 f7       	brne	.-38     	; 0x240a <__udivmodsi4_loop>
    2430:	60 95       	com	r22
    2432:	70 95       	com	r23
    2434:	80 95       	com	r24
    2436:	90 95       	com	r25
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	bd 01       	movw	r22, r26
    243e:	cf 01       	movw	r24, r30
    2440:	08 95       	ret

00002442 <__tablejump2__>:
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	05 90       	lpm	r0, Z+
    2448:	f4 91       	lpm	r31, Z
    244a:	e0 2d       	mov	r30, r0
    244c:	09 94       	ijmp

0000244e <malloc>:
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	82 30       	cpi	r24, 0x02	; 2
    2458:	91 05       	cpc	r25, r1
    245a:	10 f4       	brcc	.+4      	; 0x2460 <malloc+0x12>
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <__flp>
    2464:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <__flp+0x1>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	30 97       	sbiw	r30, 0x00	; 0
    2472:	19 f1       	breq	.+70     	; 0x24ba <malloc+0x6c>
    2474:	40 81       	ld	r20, Z
    2476:	51 81       	ldd	r21, Z+1	; 0x01
    2478:	02 81       	ldd	r16, Z+2	; 0x02
    247a:	13 81       	ldd	r17, Z+3	; 0x03
    247c:	48 17       	cp	r20, r24
    247e:	59 07       	cpc	r21, r25
    2480:	c8 f0       	brcs	.+50     	; 0x24b4 <malloc+0x66>
    2482:	84 17       	cp	r24, r20
    2484:	95 07       	cpc	r25, r21
    2486:	69 f4       	brne	.+26     	; 0x24a2 <malloc+0x54>
    2488:	10 97       	sbiw	r26, 0x00	; 0
    248a:	31 f0       	breq	.+12     	; 0x2498 <malloc+0x4a>
    248c:	12 96       	adiw	r26, 0x02	; 2
    248e:	0c 93       	st	X, r16
    2490:	12 97       	sbiw	r26, 0x02	; 2
    2492:	13 96       	adiw	r26, 0x03	; 3
    2494:	1c 93       	st	X, r17
    2496:	27 c0       	rjmp	.+78     	; 0x24e6 <malloc+0x98>
    2498:	00 93 2b 04 	sts	0x042B, r16	; 0x80042b <__flp>
    249c:	10 93 2c 04 	sts	0x042C, r17	; 0x80042c <__flp+0x1>
    24a0:	22 c0       	rjmp	.+68     	; 0x24e6 <malloc+0x98>
    24a2:	21 15       	cp	r18, r1
    24a4:	31 05       	cpc	r19, r1
    24a6:	19 f0       	breq	.+6      	; 0x24ae <malloc+0x60>
    24a8:	42 17       	cp	r20, r18
    24aa:	53 07       	cpc	r21, r19
    24ac:	18 f4       	brcc	.+6      	; 0x24b4 <malloc+0x66>
    24ae:	9a 01       	movw	r18, r20
    24b0:	bd 01       	movw	r22, r26
    24b2:	ef 01       	movw	r28, r30
    24b4:	df 01       	movw	r26, r30
    24b6:	f8 01       	movw	r30, r16
    24b8:	db cf       	rjmp	.-74     	; 0x2470 <malloc+0x22>
    24ba:	21 15       	cp	r18, r1
    24bc:	31 05       	cpc	r19, r1
    24be:	f9 f0       	breq	.+62     	; 0x24fe <malloc+0xb0>
    24c0:	28 1b       	sub	r18, r24
    24c2:	39 0b       	sbc	r19, r25
    24c4:	24 30       	cpi	r18, 0x04	; 4
    24c6:	31 05       	cpc	r19, r1
    24c8:	80 f4       	brcc	.+32     	; 0x24ea <malloc+0x9c>
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	61 15       	cp	r22, r1
    24d0:	71 05       	cpc	r23, r1
    24d2:	21 f0       	breq	.+8      	; 0x24dc <malloc+0x8e>
    24d4:	fb 01       	movw	r30, r22
    24d6:	93 83       	std	Z+3, r25	; 0x03
    24d8:	82 83       	std	Z+2, r24	; 0x02
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <malloc+0x96>
    24dc:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <__flp+0x1>
    24e0:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <__flp>
    24e4:	fe 01       	movw	r30, r28
    24e6:	32 96       	adiw	r30, 0x02	; 2
    24e8:	44 c0       	rjmp	.+136    	; 0x2572 <malloc+0x124>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e2 0f       	add	r30, r18
    24ee:	f3 1f       	adc	r31, r19
    24f0:	81 93       	st	Z+, r24
    24f2:	91 93       	st	Z+, r25
    24f4:	22 50       	subi	r18, 0x02	; 2
    24f6:	31 09       	sbc	r19, r1
    24f8:	39 83       	std	Y+1, r19	; 0x01
    24fa:	28 83       	st	Y, r18
    24fc:	3a c0       	rjmp	.+116    	; 0x2572 <malloc+0x124>
    24fe:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <__brkval>
    2502:	30 91 2a 04 	lds	r19, 0x042A	; 0x80042a <__brkval+0x1>
    2506:	23 2b       	or	r18, r19
    2508:	41 f4       	brne	.+16     	; 0x251a <malloc+0xcc>
    250a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    250e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2512:	30 93 2a 04 	sts	0x042A, r19	; 0x80042a <__brkval+0x1>
    2516:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <__brkval>
    251a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    251e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2522:	21 15       	cp	r18, r1
    2524:	31 05       	cpc	r19, r1
    2526:	41 f4       	brne	.+16     	; 0x2538 <malloc+0xea>
    2528:	2d b7       	in	r18, 0x3d	; 61
    252a:	3e b7       	in	r19, 0x3e	; 62
    252c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2530:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2534:	24 1b       	sub	r18, r20
    2536:	35 0b       	sbc	r19, r21
    2538:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <__brkval>
    253c:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <__brkval+0x1>
    2540:	e2 17       	cp	r30, r18
    2542:	f3 07       	cpc	r31, r19
    2544:	a0 f4       	brcc	.+40     	; 0x256e <malloc+0x120>
    2546:	2e 1b       	sub	r18, r30
    2548:	3f 0b       	sbc	r19, r31
    254a:	28 17       	cp	r18, r24
    254c:	39 07       	cpc	r19, r25
    254e:	78 f0       	brcs	.+30     	; 0x256e <malloc+0x120>
    2550:	ac 01       	movw	r20, r24
    2552:	4e 5f       	subi	r20, 0xFE	; 254
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	24 17       	cp	r18, r20
    2558:	35 07       	cpc	r19, r21
    255a:	48 f0       	brcs	.+18     	; 0x256e <malloc+0x120>
    255c:	4e 0f       	add	r20, r30
    255e:	5f 1f       	adc	r21, r31
    2560:	50 93 2a 04 	sts	0x042A, r21	; 0x80042a <__brkval+0x1>
    2564:	40 93 29 04 	sts	0x0429, r20	; 0x800429 <__brkval>
    2568:	81 93       	st	Z+, r24
    256a:	91 93       	st	Z+, r25
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <malloc+0x124>
    256e:	e0 e0       	ldi	r30, 0x00	; 0
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	cf 01       	movw	r24, r30
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	08 95       	ret

0000257e <free>:
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	09 f4       	brne	.+2      	; 0x2588 <free+0xa>
    2586:	81 c0       	rjmp	.+258    	; 0x268a <free+0x10c>
    2588:	fc 01       	movw	r30, r24
    258a:	32 97       	sbiw	r30, 0x02	; 2
    258c:	13 82       	std	Z+3, r1	; 0x03
    258e:	12 82       	std	Z+2, r1	; 0x02
    2590:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <__flp>
    2594:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <__flp+0x1>
    2598:	10 97       	sbiw	r26, 0x00	; 0
    259a:	81 f4       	brne	.+32     	; 0x25bc <free+0x3e>
    259c:	20 81       	ld	r18, Z
    259e:	31 81       	ldd	r19, Z+1	; 0x01
    25a0:	82 0f       	add	r24, r18
    25a2:	93 1f       	adc	r25, r19
    25a4:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <__brkval>
    25a8:	30 91 2a 04 	lds	r19, 0x042A	; 0x80042a <__brkval+0x1>
    25ac:	28 17       	cp	r18, r24
    25ae:	39 07       	cpc	r19, r25
    25b0:	51 f5       	brne	.+84     	; 0x2606 <free+0x88>
    25b2:	f0 93 2a 04 	sts	0x042A, r31	; 0x80042a <__brkval+0x1>
    25b6:	e0 93 29 04 	sts	0x0429, r30	; 0x800429 <__brkval>
    25ba:	67 c0       	rjmp	.+206    	; 0x268a <free+0x10c>
    25bc:	ed 01       	movw	r28, r26
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	ce 17       	cp	r28, r30
    25c4:	df 07       	cpc	r29, r31
    25c6:	40 f4       	brcc	.+16     	; 0x25d8 <free+0x5a>
    25c8:	4a 81       	ldd	r20, Y+2	; 0x02
    25ca:	5b 81       	ldd	r21, Y+3	; 0x03
    25cc:	9e 01       	movw	r18, r28
    25ce:	41 15       	cp	r20, r1
    25d0:	51 05       	cpc	r21, r1
    25d2:	f1 f0       	breq	.+60     	; 0x2610 <free+0x92>
    25d4:	ea 01       	movw	r28, r20
    25d6:	f5 cf       	rjmp	.-22     	; 0x25c2 <free+0x44>
    25d8:	d3 83       	std	Z+3, r29	; 0x03
    25da:	c2 83       	std	Z+2, r28	; 0x02
    25dc:	40 81       	ld	r20, Z
    25de:	51 81       	ldd	r21, Z+1	; 0x01
    25e0:	84 0f       	add	r24, r20
    25e2:	95 1f       	adc	r25, r21
    25e4:	c8 17       	cp	r28, r24
    25e6:	d9 07       	cpc	r29, r25
    25e8:	59 f4       	brne	.+22     	; 0x2600 <free+0x82>
    25ea:	88 81       	ld	r24, Y
    25ec:	99 81       	ldd	r25, Y+1	; 0x01
    25ee:	84 0f       	add	r24, r20
    25f0:	95 1f       	adc	r25, r21
    25f2:	02 96       	adiw	r24, 0x02	; 2
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	93 83       	std	Z+3, r25	; 0x03
    25fe:	82 83       	std	Z+2, r24	; 0x02
    2600:	21 15       	cp	r18, r1
    2602:	31 05       	cpc	r19, r1
    2604:	29 f4       	brne	.+10     	; 0x2610 <free+0x92>
    2606:	f0 93 2c 04 	sts	0x042C, r31	; 0x80042c <__flp+0x1>
    260a:	e0 93 2b 04 	sts	0x042B, r30	; 0x80042b <__flp>
    260e:	3d c0       	rjmp	.+122    	; 0x268a <free+0x10c>
    2610:	e9 01       	movw	r28, r18
    2612:	fb 83       	std	Y+3, r31	; 0x03
    2614:	ea 83       	std	Y+2, r30	; 0x02
    2616:	49 91       	ld	r20, Y+
    2618:	59 91       	ld	r21, Y+
    261a:	c4 0f       	add	r28, r20
    261c:	d5 1f       	adc	r29, r21
    261e:	ec 17       	cp	r30, r28
    2620:	fd 07       	cpc	r31, r29
    2622:	61 f4       	brne	.+24     	; 0x263c <free+0xbe>
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	84 0f       	add	r24, r20
    262a:	95 1f       	adc	r25, r21
    262c:	02 96       	adiw	r24, 0x02	; 2
    262e:	e9 01       	movw	r28, r18
    2630:	99 83       	std	Y+1, r25	; 0x01
    2632:	88 83       	st	Y, r24
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	9b 83       	std	Y+3, r25	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	e0 e0       	ldi	r30, 0x00	; 0
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	12 96       	adiw	r26, 0x02	; 2
    2642:	8d 91       	ld	r24, X+
    2644:	9c 91       	ld	r25, X
    2646:	13 97       	sbiw	r26, 0x03	; 3
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	19 f0       	breq	.+6      	; 0x2652 <free+0xd4>
    264c:	fd 01       	movw	r30, r26
    264e:	dc 01       	movw	r26, r24
    2650:	f7 cf       	rjmp	.-18     	; 0x2640 <free+0xc2>
    2652:	8d 91       	ld	r24, X+
    2654:	9c 91       	ld	r25, X
    2656:	11 97       	sbiw	r26, 0x01	; 1
    2658:	9d 01       	movw	r18, r26
    265a:	2e 5f       	subi	r18, 0xFE	; 254
    265c:	3f 4f       	sbci	r19, 0xFF	; 255
    265e:	82 0f       	add	r24, r18
    2660:	93 1f       	adc	r25, r19
    2662:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <__brkval>
    2666:	30 91 2a 04 	lds	r19, 0x042A	; 0x80042a <__brkval+0x1>
    266a:	28 17       	cp	r18, r24
    266c:	39 07       	cpc	r19, r25
    266e:	69 f4       	brne	.+26     	; 0x268a <free+0x10c>
    2670:	30 97       	sbiw	r30, 0x00	; 0
    2672:	29 f4       	brne	.+10     	; 0x267e <free+0x100>
    2674:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <__flp+0x1>
    2678:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <__flp>
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <free+0x104>
    267e:	13 82       	std	Z+3, r1	; 0x03
    2680:	12 82       	std	Z+2, r1	; 0x02
    2682:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <__brkval+0x1>
    2686:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <__brkval>
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <realloc>:
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f3 e1       	ldi	r31, 0x13	; 19
    2698:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__prologue_saves__+0x8>
    269c:	ec 01       	movw	r28, r24
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	21 f4       	brne	.+8      	; 0x26aa <realloc+0x1a>
    26a2:	cb 01       	movw	r24, r22
    26a4:	0e 94 27 12 	call	0x244e	; 0x244e <malloc>
    26a8:	b4 c0       	rjmp	.+360    	; 0x2812 <realloc+0x182>
    26aa:	fc 01       	movw	r30, r24
    26ac:	e6 0f       	add	r30, r22
    26ae:	f7 1f       	adc	r31, r23
    26b0:	9c 01       	movw	r18, r24
    26b2:	22 50       	subi	r18, 0x02	; 2
    26b4:	31 09       	sbc	r19, r1
    26b6:	e2 17       	cp	r30, r18
    26b8:	f3 07       	cpc	r31, r19
    26ba:	08 f4       	brcc	.+2      	; 0x26be <realloc+0x2e>
    26bc:	a8 c0       	rjmp	.+336    	; 0x280e <realloc+0x17e>
    26be:	d9 01       	movw	r26, r18
    26c0:	0d 91       	ld	r16, X+
    26c2:	1c 91       	ld	r17, X
    26c4:	11 97       	sbiw	r26, 0x01	; 1
    26c6:	06 17       	cp	r16, r22
    26c8:	17 07       	cpc	r17, r23
    26ca:	b0 f0       	brcs	.+44     	; 0x26f8 <realloc+0x68>
    26cc:	05 30       	cpi	r16, 0x05	; 5
    26ce:	11 05       	cpc	r17, r1
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <realloc+0x44>
    26d2:	9b c0       	rjmp	.+310    	; 0x280a <realloc+0x17a>
    26d4:	c8 01       	movw	r24, r16
    26d6:	04 97       	sbiw	r24, 0x04	; 4
    26d8:	86 17       	cp	r24, r22
    26da:	97 07       	cpc	r25, r23
    26dc:	08 f4       	brcc	.+2      	; 0x26e0 <realloc+0x50>
    26de:	95 c0       	rjmp	.+298    	; 0x280a <realloc+0x17a>
    26e0:	02 50       	subi	r16, 0x02	; 2
    26e2:	11 09       	sbc	r17, r1
    26e4:	06 1b       	sub	r16, r22
    26e6:	17 0b       	sbc	r17, r23
    26e8:	01 93       	st	Z+, r16
    26ea:	11 93       	st	Z+, r17
    26ec:	6d 93       	st	X+, r22
    26ee:	7c 93       	st	X, r23
    26f0:	cf 01       	movw	r24, r30
    26f2:	0e 94 bf 12 	call	0x257e	; 0x257e <free>
    26f6:	89 c0       	rjmp	.+274    	; 0x280a <realloc+0x17a>
    26f8:	5b 01       	movw	r10, r22
    26fa:	a0 1a       	sub	r10, r16
    26fc:	b1 0a       	sbc	r11, r17
    26fe:	4c 01       	movw	r8, r24
    2700:	80 0e       	add	r8, r16
    2702:	91 1e       	adc	r9, r17
    2704:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <__flp>
    2708:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <__flp+0x1>
    270c:	61 2c       	mov	r6, r1
    270e:	71 2c       	mov	r7, r1
    2710:	e1 2c       	mov	r14, r1
    2712:	f1 2c       	mov	r15, r1
    2714:	10 97       	sbiw	r26, 0x00	; 0
    2716:	09 f4       	brne	.+2      	; 0x271a <realloc+0x8a>
    2718:	46 c0       	rjmp	.+140    	; 0x27a6 <realloc+0x116>
    271a:	8d 91       	ld	r24, X+
    271c:	9c 91       	ld	r25, X
    271e:	11 97       	sbiw	r26, 0x01	; 1
    2720:	a8 15       	cp	r26, r8
    2722:	b9 05       	cpc	r27, r9
    2724:	b1 f5       	brne	.+108    	; 0x2792 <realloc+0x102>
    2726:	6c 01       	movw	r12, r24
    2728:	42 e0       	ldi	r20, 0x02	; 2
    272a:	c4 0e       	add	r12, r20
    272c:	d1 1c       	adc	r13, r1
    272e:	ca 14       	cp	r12, r10
    2730:	db 04       	cpc	r13, r11
    2732:	78 f1       	brcs	.+94     	; 0x2792 <realloc+0x102>
    2734:	4c 01       	movw	r8, r24
    2736:	8a 18       	sub	r8, r10
    2738:	9b 08       	sbc	r9, r11
    273a:	64 01       	movw	r12, r8
    273c:	42 e0       	ldi	r20, 0x02	; 2
    273e:	c4 0e       	add	r12, r20
    2740:	d1 1c       	adc	r13, r1
    2742:	12 96       	adiw	r26, 0x02	; 2
    2744:	bc 90       	ld	r11, X
    2746:	12 97       	sbiw	r26, 0x02	; 2
    2748:	13 96       	adiw	r26, 0x03	; 3
    274a:	ac 91       	ld	r26, X
    274c:	b5 e0       	ldi	r27, 0x05	; 5
    274e:	cb 16       	cp	r12, r27
    2750:	d1 04       	cpc	r13, r1
    2752:	40 f0       	brcs	.+16     	; 0x2764 <realloc+0xd4>
    2754:	b2 82       	std	Z+2, r11	; 0x02
    2756:	a3 83       	std	Z+3, r26	; 0x03
    2758:	91 82       	std	Z+1, r9	; 0x01
    275a:	80 82       	st	Z, r8
    275c:	d9 01       	movw	r26, r18
    275e:	6d 93       	st	X+, r22
    2760:	7c 93       	st	X, r23
    2762:	09 c0       	rjmp	.+18     	; 0x2776 <realloc+0xe6>
    2764:	0e 5f       	subi	r16, 0xFE	; 254
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	80 0f       	add	r24, r16
    276a:	91 1f       	adc	r25, r17
    276c:	f9 01       	movw	r30, r18
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
    2772:	eb 2d       	mov	r30, r11
    2774:	fa 2f       	mov	r31, r26
    2776:	e1 14       	cp	r14, r1
    2778:	f1 04       	cpc	r15, r1
    277a:	31 f0       	breq	.+12     	; 0x2788 <realloc+0xf8>
    277c:	d7 01       	movw	r26, r14
    277e:	13 96       	adiw	r26, 0x03	; 3
    2780:	fc 93       	st	X, r31
    2782:	ee 93       	st	-X, r30
    2784:	12 97       	sbiw	r26, 0x02	; 2
    2786:	41 c0       	rjmp	.+130    	; 0x280a <realloc+0x17a>
    2788:	f0 93 2c 04 	sts	0x042C, r31	; 0x80042c <__flp+0x1>
    278c:	e0 93 2b 04 	sts	0x042B, r30	; 0x80042b <__flp>
    2790:	3c c0       	rjmp	.+120    	; 0x280a <realloc+0x17a>
    2792:	68 16       	cp	r6, r24
    2794:	79 06       	cpc	r7, r25
    2796:	08 f4       	brcc	.+2      	; 0x279a <realloc+0x10a>
    2798:	3c 01       	movw	r6, r24
    279a:	7d 01       	movw	r14, r26
    279c:	12 96       	adiw	r26, 0x02	; 2
    279e:	0d 90       	ld	r0, X+
    27a0:	bc 91       	ld	r27, X
    27a2:	a0 2d       	mov	r26, r0
    27a4:	b7 cf       	rjmp	.-146    	; 0x2714 <realloc+0x84>
    27a6:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__brkval>
    27aa:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <__brkval+0x1>
    27ae:	88 16       	cp	r8, r24
    27b0:	99 06       	cpc	r9, r25
    27b2:	e1 f4       	brne	.+56     	; 0x27ec <realloc+0x15c>
    27b4:	66 16       	cp	r6, r22
    27b6:	77 06       	cpc	r7, r23
    27b8:	c8 f4       	brcc	.+50     	; 0x27ec <realloc+0x15c>
    27ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    27be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <realloc+0x146>
    27c6:	8d b7       	in	r24, 0x3d	; 61
    27c8:	9e b7       	in	r25, 0x3e	; 62
    27ca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    27ce:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    27d2:	84 1b       	sub	r24, r20
    27d4:	95 0b       	sbc	r25, r21
    27d6:	e8 17       	cp	r30, r24
    27d8:	f9 07       	cpc	r31, r25
    27da:	c8 f4       	brcc	.+50     	; 0x280e <realloc+0x17e>
    27dc:	f0 93 2a 04 	sts	0x042A, r31	; 0x80042a <__brkval+0x1>
    27e0:	e0 93 29 04 	sts	0x0429, r30	; 0x800429 <__brkval>
    27e4:	f9 01       	movw	r30, r18
    27e6:	71 83       	std	Z+1, r23	; 0x01
    27e8:	60 83       	st	Z, r22
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <realloc+0x17a>
    27ec:	cb 01       	movw	r24, r22
    27ee:	0e 94 27 12 	call	0x244e	; 0x244e <malloc>
    27f2:	7c 01       	movw	r14, r24
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	59 f0       	breq	.+22     	; 0x280e <realloc+0x17e>
    27f8:	a8 01       	movw	r20, r16
    27fa:	be 01       	movw	r22, r28
    27fc:	0e 94 0e 14 	call	0x281c	; 0x281c <memcpy>
    2800:	ce 01       	movw	r24, r28
    2802:	0e 94 bf 12 	call	0x257e	; 0x257e <free>
    2806:	c7 01       	movw	r24, r14
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <realloc+0x182>
    280a:	ce 01       	movw	r24, r28
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <realloc+0x182>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	ee e0       	ldi	r30, 0x0E	; 14
    2818:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__epilogue_restores__+0x8>

0000281c <memcpy>:
    281c:	fb 01       	movw	r30, r22
    281e:	dc 01       	movw	r26, r24
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <memcpy+0xa>
    2822:	01 90       	ld	r0, Z+
    2824:	0d 92       	st	X+, r0
    2826:	41 50       	subi	r20, 0x01	; 1
    2828:	50 40       	sbci	r21, 0x00	; 0
    282a:	d8 f7       	brcc	.-10     	; 0x2822 <memcpy+0x6>
    282c:	08 95       	ret

0000282e <strcpy>:
    282e:	fb 01       	movw	r30, r22
    2830:	dc 01       	movw	r26, r24
    2832:	01 90       	ld	r0, Z+
    2834:	0d 92       	st	X+, r0
    2836:	00 20       	and	r0, r0
    2838:	e1 f7       	brne	.-8      	; 0x2832 <strcpy+0x4>
    283a:	08 95       	ret

0000283c <sprintf>:
    283c:	ae e0       	ldi	r26, 0x0E	; 14
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e4 e2       	ldi	r30, 0x24	; 36
    2842:	f4 e1       	ldi	r31, 0x14	; 20
    2844:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x1c>
    2848:	0d 89       	ldd	r16, Y+21	; 0x15
    284a:	1e 89       	ldd	r17, Y+22	; 0x16
    284c:	86 e0       	ldi	r24, 0x06	; 6
    284e:	8c 83       	std	Y+4, r24	; 0x04
    2850:	1a 83       	std	Y+2, r17	; 0x02
    2852:	09 83       	std	Y+1, r16	; 0x01
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	9f e7       	ldi	r25, 0x7F	; 127
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	ae 01       	movw	r20, r28
    285e:	47 5e       	subi	r20, 0xE7	; 231
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	6f 89       	ldd	r22, Y+23	; 0x17
    2864:	78 8d       	ldd	r23, Y+24	; 0x18
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	0e 94 40 14 	call	0x2880	; 0x2880 <vfprintf>
    286e:	ef 81       	ldd	r30, Y+7	; 0x07
    2870:	f8 85       	ldd	r31, Y+8	; 0x08
    2872:	e0 0f       	add	r30, r16
    2874:	f1 1f       	adc	r31, r17
    2876:	10 82       	st	Z, r1
    2878:	2e 96       	adiw	r28, 0x0e	; 14
    287a:	e4 e0       	ldi	r30, 0x04	; 4
    287c:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x1c>

00002880 <vfprintf>:
    2880:	ab e0       	ldi	r26, 0x0B	; 11
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e6 e4       	ldi	r30, 0x46	; 70
    2886:	f4 e1       	ldi	r31, 0x14	; 20
    2888:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
    288c:	6c 01       	movw	r12, r24
    288e:	7b 01       	movw	r14, r22
    2890:	8a 01       	movw	r16, r20
    2892:	fc 01       	movw	r30, r24
    2894:	17 82       	std	Z+7, r1	; 0x07
    2896:	16 82       	std	Z+6, r1	; 0x06
    2898:	83 81       	ldd	r24, Z+3	; 0x03
    289a:	81 ff       	sbrs	r24, 1
    289c:	cc c1       	rjmp	.+920    	; 0x2c36 <vfprintf+0x3b6>
    289e:	ce 01       	movw	r24, r28
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	3c 01       	movw	r6, r24
    28a4:	f6 01       	movw	r30, r12
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	f7 01       	movw	r30, r14
    28aa:	93 fd       	sbrc	r25, 3
    28ac:	85 91       	lpm	r24, Z+
    28ae:	93 ff       	sbrs	r25, 3
    28b0:	81 91       	ld	r24, Z+
    28b2:	7f 01       	movw	r14, r30
    28b4:	88 23       	and	r24, r24
    28b6:	09 f4       	brne	.+2      	; 0x28ba <vfprintf+0x3a>
    28b8:	ba c1       	rjmp	.+884    	; 0x2c2e <vfprintf+0x3ae>
    28ba:	85 32       	cpi	r24, 0x25	; 37
    28bc:	39 f4       	brne	.+14     	; 0x28cc <vfprintf+0x4c>
    28be:	93 fd       	sbrc	r25, 3
    28c0:	85 91       	lpm	r24, Z+
    28c2:	93 ff       	sbrs	r25, 3
    28c4:	81 91       	ld	r24, Z+
    28c6:	7f 01       	movw	r14, r30
    28c8:	85 32       	cpi	r24, 0x25	; 37
    28ca:	29 f4       	brne	.+10     	; 0x28d6 <vfprintf+0x56>
    28cc:	b6 01       	movw	r22, r12
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    28d4:	e7 cf       	rjmp	.-50     	; 0x28a4 <vfprintf+0x24>
    28d6:	91 2c       	mov	r9, r1
    28d8:	21 2c       	mov	r2, r1
    28da:	31 2c       	mov	r3, r1
    28dc:	ff e1       	ldi	r31, 0x1F	; 31
    28de:	f3 15       	cp	r31, r3
    28e0:	d8 f0       	brcs	.+54     	; 0x2918 <vfprintf+0x98>
    28e2:	8b 32       	cpi	r24, 0x2B	; 43
    28e4:	79 f0       	breq	.+30     	; 0x2904 <vfprintf+0x84>
    28e6:	38 f4       	brcc	.+14     	; 0x28f6 <vfprintf+0x76>
    28e8:	80 32       	cpi	r24, 0x20	; 32
    28ea:	79 f0       	breq	.+30     	; 0x290a <vfprintf+0x8a>
    28ec:	83 32       	cpi	r24, 0x23	; 35
    28ee:	a1 f4       	brne	.+40     	; 0x2918 <vfprintf+0x98>
    28f0:	23 2d       	mov	r18, r3
    28f2:	20 61       	ori	r18, 0x10	; 16
    28f4:	1d c0       	rjmp	.+58     	; 0x2930 <vfprintf+0xb0>
    28f6:	8d 32       	cpi	r24, 0x2D	; 45
    28f8:	61 f0       	breq	.+24     	; 0x2912 <vfprintf+0x92>
    28fa:	80 33       	cpi	r24, 0x30	; 48
    28fc:	69 f4       	brne	.+26     	; 0x2918 <vfprintf+0x98>
    28fe:	23 2d       	mov	r18, r3
    2900:	21 60       	ori	r18, 0x01	; 1
    2902:	16 c0       	rjmp	.+44     	; 0x2930 <vfprintf+0xb0>
    2904:	83 2d       	mov	r24, r3
    2906:	82 60       	ori	r24, 0x02	; 2
    2908:	38 2e       	mov	r3, r24
    290a:	e3 2d       	mov	r30, r3
    290c:	e4 60       	ori	r30, 0x04	; 4
    290e:	3e 2e       	mov	r3, r30
    2910:	2a c0       	rjmp	.+84     	; 0x2966 <vfprintf+0xe6>
    2912:	f3 2d       	mov	r31, r3
    2914:	f8 60       	ori	r31, 0x08	; 8
    2916:	1d c0       	rjmp	.+58     	; 0x2952 <vfprintf+0xd2>
    2918:	37 fc       	sbrc	r3, 7
    291a:	2d c0       	rjmp	.+90     	; 0x2976 <vfprintf+0xf6>
    291c:	20 ed       	ldi	r18, 0xD0	; 208
    291e:	28 0f       	add	r18, r24
    2920:	2a 30       	cpi	r18, 0x0A	; 10
    2922:	40 f0       	brcs	.+16     	; 0x2934 <vfprintf+0xb4>
    2924:	8e 32       	cpi	r24, 0x2E	; 46
    2926:	b9 f4       	brne	.+46     	; 0x2956 <vfprintf+0xd6>
    2928:	36 fc       	sbrc	r3, 6
    292a:	81 c1       	rjmp	.+770    	; 0x2c2e <vfprintf+0x3ae>
    292c:	23 2d       	mov	r18, r3
    292e:	20 64       	ori	r18, 0x40	; 64
    2930:	32 2e       	mov	r3, r18
    2932:	19 c0       	rjmp	.+50     	; 0x2966 <vfprintf+0xe6>
    2934:	36 fe       	sbrs	r3, 6
    2936:	06 c0       	rjmp	.+12     	; 0x2944 <vfprintf+0xc4>
    2938:	8a e0       	ldi	r24, 0x0A	; 10
    293a:	98 9e       	mul	r9, r24
    293c:	20 0d       	add	r18, r0
    293e:	11 24       	eor	r1, r1
    2940:	92 2e       	mov	r9, r18
    2942:	11 c0       	rjmp	.+34     	; 0x2966 <vfprintf+0xe6>
    2944:	ea e0       	ldi	r30, 0x0A	; 10
    2946:	2e 9e       	mul	r2, r30
    2948:	20 0d       	add	r18, r0
    294a:	11 24       	eor	r1, r1
    294c:	22 2e       	mov	r2, r18
    294e:	f3 2d       	mov	r31, r3
    2950:	f0 62       	ori	r31, 0x20	; 32
    2952:	3f 2e       	mov	r3, r31
    2954:	08 c0       	rjmp	.+16     	; 0x2966 <vfprintf+0xe6>
    2956:	8c 36       	cpi	r24, 0x6C	; 108
    2958:	21 f4       	brne	.+8      	; 0x2962 <vfprintf+0xe2>
    295a:	83 2d       	mov	r24, r3
    295c:	80 68       	ori	r24, 0x80	; 128
    295e:	38 2e       	mov	r3, r24
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0xe6>
    2962:	88 36       	cpi	r24, 0x68	; 104
    2964:	41 f4       	brne	.+16     	; 0x2976 <vfprintf+0xf6>
    2966:	f7 01       	movw	r30, r14
    2968:	93 fd       	sbrc	r25, 3
    296a:	85 91       	lpm	r24, Z+
    296c:	93 ff       	sbrs	r25, 3
    296e:	81 91       	ld	r24, Z+
    2970:	7f 01       	movw	r14, r30
    2972:	81 11       	cpse	r24, r1
    2974:	b3 cf       	rjmp	.-154    	; 0x28dc <vfprintf+0x5c>
    2976:	98 2f       	mov	r25, r24
    2978:	9f 7d       	andi	r25, 0xDF	; 223
    297a:	95 54       	subi	r25, 0x45	; 69
    297c:	93 30       	cpi	r25, 0x03	; 3
    297e:	28 f4       	brcc	.+10     	; 0x298a <vfprintf+0x10a>
    2980:	0c 5f       	subi	r16, 0xFC	; 252
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	9f e3       	ldi	r25, 0x3F	; 63
    2986:	99 83       	std	Y+1, r25	; 0x01
    2988:	0d c0       	rjmp	.+26     	; 0x29a4 <vfprintf+0x124>
    298a:	83 36       	cpi	r24, 0x63	; 99
    298c:	31 f0       	breq	.+12     	; 0x299a <vfprintf+0x11a>
    298e:	83 37       	cpi	r24, 0x73	; 115
    2990:	71 f0       	breq	.+28     	; 0x29ae <vfprintf+0x12e>
    2992:	83 35       	cpi	r24, 0x53	; 83
    2994:	09 f0       	breq	.+2      	; 0x2998 <vfprintf+0x118>
    2996:	59 c0       	rjmp	.+178    	; 0x2a4a <vfprintf+0x1ca>
    2998:	21 c0       	rjmp	.+66     	; 0x29dc <vfprintf+0x15c>
    299a:	f8 01       	movw	r30, r16
    299c:	80 81       	ld	r24, Z
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	0e 5f       	subi	r16, 0xFE	; 254
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	88 24       	eor	r8, r8
    29a6:	83 94       	inc	r8
    29a8:	91 2c       	mov	r9, r1
    29aa:	53 01       	movw	r10, r6
    29ac:	13 c0       	rjmp	.+38     	; 0x29d4 <vfprintf+0x154>
    29ae:	28 01       	movw	r4, r16
    29b0:	f2 e0       	ldi	r31, 0x02	; 2
    29b2:	4f 0e       	add	r4, r31
    29b4:	51 1c       	adc	r5, r1
    29b6:	f8 01       	movw	r30, r16
    29b8:	a0 80       	ld	r10, Z
    29ba:	b1 80       	ldd	r11, Z+1	; 0x01
    29bc:	36 fe       	sbrs	r3, 6
    29be:	03 c0       	rjmp	.+6      	; 0x29c6 <vfprintf+0x146>
    29c0:	69 2d       	mov	r22, r9
    29c2:	70 e0       	ldi	r23, 0x00	; 0
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <vfprintf+0x14a>
    29c6:	6f ef       	ldi	r22, 0xFF	; 255
    29c8:	7f ef       	ldi	r23, 0xFF	; 255
    29ca:	c5 01       	movw	r24, r10
    29cc:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <strnlen>
    29d0:	4c 01       	movw	r8, r24
    29d2:	82 01       	movw	r16, r4
    29d4:	f3 2d       	mov	r31, r3
    29d6:	ff 77       	andi	r31, 0x7F	; 127
    29d8:	3f 2e       	mov	r3, r31
    29da:	16 c0       	rjmp	.+44     	; 0x2a08 <vfprintf+0x188>
    29dc:	28 01       	movw	r4, r16
    29de:	22 e0       	ldi	r18, 0x02	; 2
    29e0:	42 0e       	add	r4, r18
    29e2:	51 1c       	adc	r5, r1
    29e4:	f8 01       	movw	r30, r16
    29e6:	a0 80       	ld	r10, Z
    29e8:	b1 80       	ldd	r11, Z+1	; 0x01
    29ea:	36 fe       	sbrs	r3, 6
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <vfprintf+0x174>
    29ee:	69 2d       	mov	r22, r9
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <vfprintf+0x178>
    29f4:	6f ef       	ldi	r22, 0xFF	; 255
    29f6:	7f ef       	ldi	r23, 0xFF	; 255
    29f8:	c5 01       	movw	r24, r10
    29fa:	0e 94 21 16 	call	0x2c42	; 0x2c42 <strnlen_P>
    29fe:	4c 01       	movw	r8, r24
    2a00:	f3 2d       	mov	r31, r3
    2a02:	f0 68       	ori	r31, 0x80	; 128
    2a04:	3f 2e       	mov	r3, r31
    2a06:	82 01       	movw	r16, r4
    2a08:	33 fc       	sbrc	r3, 3
    2a0a:	1b c0       	rjmp	.+54     	; 0x2a42 <vfprintf+0x1c2>
    2a0c:	82 2d       	mov	r24, r2
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	88 16       	cp	r8, r24
    2a12:	99 06       	cpc	r9, r25
    2a14:	b0 f4       	brcc	.+44     	; 0x2a42 <vfprintf+0x1c2>
    2a16:	b6 01       	movw	r22, r12
    2a18:	80 e2       	ldi	r24, 0x20	; 32
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2a20:	2a 94       	dec	r2
    2a22:	f4 cf       	rjmp	.-24     	; 0x2a0c <vfprintf+0x18c>
    2a24:	f5 01       	movw	r30, r10
    2a26:	37 fc       	sbrc	r3, 7
    2a28:	85 91       	lpm	r24, Z+
    2a2a:	37 fe       	sbrs	r3, 7
    2a2c:	81 91       	ld	r24, Z+
    2a2e:	5f 01       	movw	r10, r30
    2a30:	b6 01       	movw	r22, r12
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2a38:	21 10       	cpse	r2, r1
    2a3a:	2a 94       	dec	r2
    2a3c:	21 e0       	ldi	r18, 0x01	; 1
    2a3e:	82 1a       	sub	r8, r18
    2a40:	91 08       	sbc	r9, r1
    2a42:	81 14       	cp	r8, r1
    2a44:	91 04       	cpc	r9, r1
    2a46:	71 f7       	brne	.-36     	; 0x2a24 <vfprintf+0x1a4>
    2a48:	e8 c0       	rjmp	.+464    	; 0x2c1a <vfprintf+0x39a>
    2a4a:	84 36       	cpi	r24, 0x64	; 100
    2a4c:	11 f0       	breq	.+4      	; 0x2a52 <vfprintf+0x1d2>
    2a4e:	89 36       	cpi	r24, 0x69	; 105
    2a50:	41 f5       	brne	.+80     	; 0x2aa2 <vfprintf+0x222>
    2a52:	f8 01       	movw	r30, r16
    2a54:	37 fe       	sbrs	r3, 7
    2a56:	07 c0       	rjmp	.+14     	; 0x2a66 <vfprintf+0x1e6>
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0c 5f       	subi	r16, 0xFC	; 252
    2a62:	1f 4f       	sbci	r17, 0xFF	; 255
    2a64:	08 c0       	rjmp	.+16     	; 0x2a76 <vfprintf+0x1f6>
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	07 2e       	mov	r0, r23
    2a6c:	00 0c       	add	r0, r0
    2a6e:	88 0b       	sbc	r24, r24
    2a70:	99 0b       	sbc	r25, r25
    2a72:	0e 5f       	subi	r16, 0xFE	; 254
    2a74:	1f 4f       	sbci	r17, 0xFF	; 255
    2a76:	f3 2d       	mov	r31, r3
    2a78:	ff 76       	andi	r31, 0x6F	; 111
    2a7a:	3f 2e       	mov	r3, r31
    2a7c:	97 ff       	sbrs	r25, 7
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <vfprintf+0x212>
    2a80:	90 95       	com	r25
    2a82:	80 95       	com	r24
    2a84:	70 95       	com	r23
    2a86:	61 95       	neg	r22
    2a88:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	f0 68       	ori	r31, 0x80	; 128
    2a90:	3f 2e       	mov	r3, r31
    2a92:	2a e0       	ldi	r18, 0x0A	; 10
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	a3 01       	movw	r20, r6
    2a98:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__ultoa_invert>
    2a9c:	88 2e       	mov	r8, r24
    2a9e:	86 18       	sub	r8, r6
    2aa0:	45 c0       	rjmp	.+138    	; 0x2b2c <vfprintf+0x2ac>
    2aa2:	85 37       	cpi	r24, 0x75	; 117
    2aa4:	31 f4       	brne	.+12     	; 0x2ab2 <vfprintf+0x232>
    2aa6:	23 2d       	mov	r18, r3
    2aa8:	2f 7e       	andi	r18, 0xEF	; 239
    2aaa:	b2 2e       	mov	r11, r18
    2aac:	2a e0       	ldi	r18, 0x0A	; 10
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	25 c0       	rjmp	.+74     	; 0x2afc <vfprintf+0x27c>
    2ab2:	93 2d       	mov	r25, r3
    2ab4:	99 7f       	andi	r25, 0xF9	; 249
    2ab6:	b9 2e       	mov	r11, r25
    2ab8:	8f 36       	cpi	r24, 0x6F	; 111
    2aba:	c1 f0       	breq	.+48     	; 0x2aec <vfprintf+0x26c>
    2abc:	18 f4       	brcc	.+6      	; 0x2ac4 <vfprintf+0x244>
    2abe:	88 35       	cpi	r24, 0x58	; 88
    2ac0:	79 f0       	breq	.+30     	; 0x2ae0 <vfprintf+0x260>
    2ac2:	b5 c0       	rjmp	.+362    	; 0x2c2e <vfprintf+0x3ae>
    2ac4:	80 37       	cpi	r24, 0x70	; 112
    2ac6:	19 f0       	breq	.+6      	; 0x2ace <vfprintf+0x24e>
    2ac8:	88 37       	cpi	r24, 0x78	; 120
    2aca:	21 f0       	breq	.+8      	; 0x2ad4 <vfprintf+0x254>
    2acc:	b0 c0       	rjmp	.+352    	; 0x2c2e <vfprintf+0x3ae>
    2ace:	e9 2f       	mov	r30, r25
    2ad0:	e0 61       	ori	r30, 0x10	; 16
    2ad2:	be 2e       	mov	r11, r30
    2ad4:	b4 fe       	sbrs	r11, 4
    2ad6:	0d c0       	rjmp	.+26     	; 0x2af2 <vfprintf+0x272>
    2ad8:	fb 2d       	mov	r31, r11
    2ada:	f4 60       	ori	r31, 0x04	; 4
    2adc:	bf 2e       	mov	r11, r31
    2ade:	09 c0       	rjmp	.+18     	; 0x2af2 <vfprintf+0x272>
    2ae0:	34 fe       	sbrs	r3, 4
    2ae2:	0a c0       	rjmp	.+20     	; 0x2af8 <vfprintf+0x278>
    2ae4:	29 2f       	mov	r18, r25
    2ae6:	26 60       	ori	r18, 0x06	; 6
    2ae8:	b2 2e       	mov	r11, r18
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <vfprintf+0x278>
    2aec:	28 e0       	ldi	r18, 0x08	; 8
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	05 c0       	rjmp	.+10     	; 0x2afc <vfprintf+0x27c>
    2af2:	20 e1       	ldi	r18, 0x10	; 16
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <vfprintf+0x27c>
    2af8:	20 e1       	ldi	r18, 0x10	; 16
    2afa:	32 e0       	ldi	r19, 0x02	; 2
    2afc:	f8 01       	movw	r30, r16
    2afe:	b7 fe       	sbrs	r11, 7
    2b00:	07 c0       	rjmp	.+14     	; 0x2b10 <vfprintf+0x290>
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	0c 5f       	subi	r16, 0xFC	; 252
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	06 c0       	rjmp	.+12     	; 0x2b1c <vfprintf+0x29c>
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 5f       	subi	r16, 0xFE	; 254
    2b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1c:	a3 01       	movw	r20, r6
    2b1e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__ultoa_invert>
    2b22:	88 2e       	mov	r8, r24
    2b24:	86 18       	sub	r8, r6
    2b26:	fb 2d       	mov	r31, r11
    2b28:	ff 77       	andi	r31, 0x7F	; 127
    2b2a:	3f 2e       	mov	r3, r31
    2b2c:	36 fe       	sbrs	r3, 6
    2b2e:	0d c0       	rjmp	.+26     	; 0x2b4a <vfprintf+0x2ca>
    2b30:	23 2d       	mov	r18, r3
    2b32:	2e 7f       	andi	r18, 0xFE	; 254
    2b34:	a2 2e       	mov	r10, r18
    2b36:	89 14       	cp	r8, r9
    2b38:	58 f4       	brcc	.+22     	; 0x2b50 <vfprintf+0x2d0>
    2b3a:	34 fe       	sbrs	r3, 4
    2b3c:	0b c0       	rjmp	.+22     	; 0x2b54 <vfprintf+0x2d4>
    2b3e:	32 fc       	sbrc	r3, 2
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <vfprintf+0x2d4>
    2b42:	83 2d       	mov	r24, r3
    2b44:	8e 7e       	andi	r24, 0xEE	; 238
    2b46:	a8 2e       	mov	r10, r24
    2b48:	05 c0       	rjmp	.+10     	; 0x2b54 <vfprintf+0x2d4>
    2b4a:	b8 2c       	mov	r11, r8
    2b4c:	a3 2c       	mov	r10, r3
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <vfprintf+0x2d6>
    2b50:	b8 2c       	mov	r11, r8
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <vfprintf+0x2d6>
    2b54:	b9 2c       	mov	r11, r9
    2b56:	a4 fe       	sbrs	r10, 4
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <vfprintf+0x2f8>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e8 0d       	add	r30, r8
    2b5e:	f1 1d       	adc	r31, r1
    2b60:	80 81       	ld	r24, Z
    2b62:	80 33       	cpi	r24, 0x30	; 48
    2b64:	21 f4       	brne	.+8      	; 0x2b6e <vfprintf+0x2ee>
    2b66:	9a 2d       	mov	r25, r10
    2b68:	99 7e       	andi	r25, 0xE9	; 233
    2b6a:	a9 2e       	mov	r10, r25
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <vfprintf+0x300>
    2b6e:	a2 fe       	sbrs	r10, 2
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <vfprintf+0x2fe>
    2b72:	b3 94       	inc	r11
    2b74:	b3 94       	inc	r11
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <vfprintf+0x300>
    2b78:	8a 2d       	mov	r24, r10
    2b7a:	86 78       	andi	r24, 0x86	; 134
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <vfprintf+0x300>
    2b7e:	b3 94       	inc	r11
    2b80:	a3 fc       	sbrc	r10, 3
    2b82:	11 c0       	rjmp	.+34     	; 0x2ba6 <vfprintf+0x326>
    2b84:	a0 fe       	sbrs	r10, 0
    2b86:	06 c0       	rjmp	.+12     	; 0x2b94 <vfprintf+0x314>
    2b88:	b2 14       	cp	r11, r2
    2b8a:	88 f4       	brcc	.+34     	; 0x2bae <vfprintf+0x32e>
    2b8c:	28 0c       	add	r2, r8
    2b8e:	92 2c       	mov	r9, r2
    2b90:	9b 18       	sub	r9, r11
    2b92:	0e c0       	rjmp	.+28     	; 0x2bb0 <vfprintf+0x330>
    2b94:	b2 14       	cp	r11, r2
    2b96:	60 f4       	brcc	.+24     	; 0x2bb0 <vfprintf+0x330>
    2b98:	b6 01       	movw	r22, r12
    2b9a:	80 e2       	ldi	r24, 0x20	; 32
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2ba2:	b3 94       	inc	r11
    2ba4:	f7 cf       	rjmp	.-18     	; 0x2b94 <vfprintf+0x314>
    2ba6:	b2 14       	cp	r11, r2
    2ba8:	18 f4       	brcc	.+6      	; 0x2bb0 <vfprintf+0x330>
    2baa:	2b 18       	sub	r2, r11
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <vfprintf+0x332>
    2bae:	98 2c       	mov	r9, r8
    2bb0:	21 2c       	mov	r2, r1
    2bb2:	a4 fe       	sbrs	r10, 4
    2bb4:	10 c0       	rjmp	.+32     	; 0x2bd6 <vfprintf+0x356>
    2bb6:	b6 01       	movw	r22, r12
    2bb8:	80 e3       	ldi	r24, 0x30	; 48
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2bc0:	a2 fe       	sbrs	r10, 2
    2bc2:	17 c0       	rjmp	.+46     	; 0x2bf2 <vfprintf+0x372>
    2bc4:	a1 fc       	sbrc	r10, 1
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <vfprintf+0x34e>
    2bc8:	88 e7       	ldi	r24, 0x78	; 120
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <vfprintf+0x352>
    2bce:	88 e5       	ldi	r24, 0x58	; 88
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	0c c0       	rjmp	.+24     	; 0x2bee <vfprintf+0x36e>
    2bd6:	8a 2d       	mov	r24, r10
    2bd8:	86 78       	andi	r24, 0x86	; 134
    2bda:	59 f0       	breq	.+22     	; 0x2bf2 <vfprintf+0x372>
    2bdc:	a1 fe       	sbrs	r10, 1
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <vfprintf+0x364>
    2be0:	8b e2       	ldi	r24, 0x2B	; 43
    2be2:	01 c0       	rjmp	.+2      	; 0x2be6 <vfprintf+0x366>
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	a7 fc       	sbrc	r10, 7
    2be8:	8d e2       	ldi	r24, 0x2D	; 45
    2bea:	b6 01       	movw	r22, r12
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2bf2:	89 14       	cp	r8, r9
    2bf4:	38 f4       	brcc	.+14     	; 0x2c04 <vfprintf+0x384>
    2bf6:	b6 01       	movw	r22, r12
    2bf8:	80 e3       	ldi	r24, 0x30	; 48
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2c00:	9a 94       	dec	r9
    2c02:	f7 cf       	rjmp	.-18     	; 0x2bf2 <vfprintf+0x372>
    2c04:	8a 94       	dec	r8
    2c06:	f3 01       	movw	r30, r6
    2c08:	e8 0d       	add	r30, r8
    2c0a:	f1 1d       	adc	r31, r1
    2c0c:	80 81       	ld	r24, Z
    2c0e:	b6 01       	movw	r22, r12
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2c16:	81 10       	cpse	r8, r1
    2c18:	f5 cf       	rjmp	.-22     	; 0x2c04 <vfprintf+0x384>
    2c1a:	22 20       	and	r2, r2
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <vfprintf+0x3a0>
    2c1e:	42 ce       	rjmp	.-892    	; 0x28a4 <vfprintf+0x24>
    2c20:	b6 01       	movw	r22, r12
    2c22:	80 e2       	ldi	r24, 0x20	; 32
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <fputc>
    2c2a:	2a 94       	dec	r2
    2c2c:	f6 cf       	rjmp	.-20     	; 0x2c1a <vfprintf+0x39a>
    2c2e:	f6 01       	movw	r30, r12
    2c30:	86 81       	ldd	r24, Z+6	; 0x06
    2c32:	97 81       	ldd	r25, Z+7	; 0x07
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <vfprintf+0x3ba>
    2c36:	8f ef       	ldi	r24, 0xFF	; 255
    2c38:	9f ef       	ldi	r25, 0xFF	; 255
    2c3a:	2b 96       	adiw	r28, 0x0b	; 11
    2c3c:	e2 e1       	ldi	r30, 0x12	; 18
    2c3e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00002c42 <strnlen_P>:
    2c42:	fc 01       	movw	r30, r24
    2c44:	05 90       	lpm	r0, Z+
    2c46:	61 50       	subi	r22, 0x01	; 1
    2c48:	70 40       	sbci	r23, 0x00	; 0
    2c4a:	01 10       	cpse	r0, r1
    2c4c:	d8 f7       	brcc	.-10     	; 0x2c44 <strnlen_P+0x2>
    2c4e:	80 95       	com	r24
    2c50:	90 95       	com	r25
    2c52:	8e 0f       	add	r24, r30
    2c54:	9f 1f       	adc	r25, r31
    2c56:	08 95       	ret

00002c58 <strnlen>:
    2c58:	fc 01       	movw	r30, r24
    2c5a:	61 50       	subi	r22, 0x01	; 1
    2c5c:	70 40       	sbci	r23, 0x00	; 0
    2c5e:	01 90       	ld	r0, Z+
    2c60:	01 10       	cpse	r0, r1
    2c62:	d8 f7       	brcc	.-10     	; 0x2c5a <strnlen+0x2>
    2c64:	80 95       	com	r24
    2c66:	90 95       	com	r25
    2c68:	8e 0f       	add	r24, r30
    2c6a:	9f 1f       	adc	r25, r31
    2c6c:	08 95       	ret

00002c6e <fputc>:
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	fb 01       	movw	r30, r22
    2c78:	23 81       	ldd	r18, Z+3	; 0x03
    2c7a:	21 fd       	sbrc	r18, 1
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <fputc+0x16>
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	9f ef       	ldi	r25, 0xFF	; 255
    2c82:	2c c0       	rjmp	.+88     	; 0x2cdc <fputc+0x6e>
    2c84:	22 ff       	sbrs	r18, 2
    2c86:	16 c0       	rjmp	.+44     	; 0x2cb4 <fputc+0x46>
    2c88:	46 81       	ldd	r20, Z+6	; 0x06
    2c8a:	57 81       	ldd	r21, Z+7	; 0x07
    2c8c:	24 81       	ldd	r18, Z+4	; 0x04
    2c8e:	35 81       	ldd	r19, Z+5	; 0x05
    2c90:	42 17       	cp	r20, r18
    2c92:	53 07       	cpc	r21, r19
    2c94:	44 f4       	brge	.+16     	; 0x2ca6 <fputc+0x38>
    2c96:	a0 81       	ld	r26, Z
    2c98:	b1 81       	ldd	r27, Z+1	; 0x01
    2c9a:	9d 01       	movw	r18, r26
    2c9c:	2f 5f       	subi	r18, 0xFF	; 255
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	31 83       	std	Z+1, r19	; 0x01
    2ca2:	20 83       	st	Z, r18
    2ca4:	8c 93       	st	X, r24
    2ca6:	26 81       	ldd	r18, Z+6	; 0x06
    2ca8:	37 81       	ldd	r19, Z+7	; 0x07
    2caa:	2f 5f       	subi	r18, 0xFF	; 255
    2cac:	3f 4f       	sbci	r19, 0xFF	; 255
    2cae:	37 83       	std	Z+7, r19	; 0x07
    2cb0:	26 83       	std	Z+6, r18	; 0x06
    2cb2:	14 c0       	rjmp	.+40     	; 0x2cdc <fputc+0x6e>
    2cb4:	8b 01       	movw	r16, r22
    2cb6:	ec 01       	movw	r28, r24
    2cb8:	fb 01       	movw	r30, r22
    2cba:	00 84       	ldd	r0, Z+8	; 0x08
    2cbc:	f1 85       	ldd	r31, Z+9	; 0x09
    2cbe:	e0 2d       	mov	r30, r0
    2cc0:	09 95       	icall
    2cc2:	89 2b       	or	r24, r25
    2cc4:	e1 f6       	brne	.-72     	; 0x2c7e <fputc+0x10>
    2cc6:	d8 01       	movw	r26, r16
    2cc8:	16 96       	adiw	r26, 0x06	; 6
    2cca:	8d 91       	ld	r24, X+
    2ccc:	9c 91       	ld	r25, X
    2cce:	17 97       	sbiw	r26, 0x07	; 7
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	17 96       	adiw	r26, 0x07	; 7
    2cd4:	9c 93       	st	X, r25
    2cd6:	8e 93       	st	-X, r24
    2cd8:	16 97       	sbiw	r26, 0x06	; 6
    2cda:	ce 01       	movw	r24, r28
    2cdc:	df 91       	pop	r29
    2cde:	cf 91       	pop	r28
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	08 95       	ret

00002ce6 <__ultoa_invert>:
    2ce6:	fa 01       	movw	r30, r20
    2ce8:	aa 27       	eor	r26, r26
    2cea:	28 30       	cpi	r18, 0x08	; 8
    2cec:	51 f1       	breq	.+84     	; 0x2d42 <__ultoa_invert+0x5c>
    2cee:	20 31       	cpi	r18, 0x10	; 16
    2cf0:	81 f1       	breq	.+96     	; 0x2d52 <__ultoa_invert+0x6c>
    2cf2:	e8 94       	clt
    2cf4:	6f 93       	push	r22
    2cf6:	6e 7f       	andi	r22, 0xFE	; 254
    2cf8:	6e 5f       	subi	r22, 0xFE	; 254
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	af 4f       	sbci	r26, 0xFF	; 255
    2d02:	b1 e0       	ldi	r27, 0x01	; 1
    2d04:	3e d0       	rcall	.+124    	; 0x2d82 <__ultoa_invert+0x9c>
    2d06:	b4 e0       	ldi	r27, 0x04	; 4
    2d08:	3c d0       	rcall	.+120    	; 0x2d82 <__ultoa_invert+0x9c>
    2d0a:	67 0f       	add	r22, r23
    2d0c:	78 1f       	adc	r23, r24
    2d0e:	89 1f       	adc	r24, r25
    2d10:	9a 1f       	adc	r25, r26
    2d12:	a1 1d       	adc	r26, r1
    2d14:	68 0f       	add	r22, r24
    2d16:	79 1f       	adc	r23, r25
    2d18:	8a 1f       	adc	r24, r26
    2d1a:	91 1d       	adc	r25, r1
    2d1c:	a1 1d       	adc	r26, r1
    2d1e:	6a 0f       	add	r22, r26
    2d20:	71 1d       	adc	r23, r1
    2d22:	81 1d       	adc	r24, r1
    2d24:	91 1d       	adc	r25, r1
    2d26:	a1 1d       	adc	r26, r1
    2d28:	20 d0       	rcall	.+64     	; 0x2d6a <__ultoa_invert+0x84>
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <__ultoa_invert+0x48>
    2d2c:	68 94       	set
    2d2e:	3f 91       	pop	r19
    2d30:	2a e0       	ldi	r18, 0x0A	; 10
    2d32:	26 9f       	mul	r18, r22
    2d34:	11 24       	eor	r1, r1
    2d36:	30 19       	sub	r19, r0
    2d38:	30 5d       	subi	r19, 0xD0	; 208
    2d3a:	31 93       	st	Z+, r19
    2d3c:	de f6       	brtc	.-74     	; 0x2cf4 <__ultoa_invert+0xe>
    2d3e:	cf 01       	movw	r24, r30
    2d40:	08 95       	ret
    2d42:	46 2f       	mov	r20, r22
    2d44:	47 70       	andi	r20, 0x07	; 7
    2d46:	40 5d       	subi	r20, 0xD0	; 208
    2d48:	41 93       	st	Z+, r20
    2d4a:	b3 e0       	ldi	r27, 0x03	; 3
    2d4c:	0f d0       	rcall	.+30     	; 0x2d6c <__ultoa_invert+0x86>
    2d4e:	c9 f7       	brne	.-14     	; 0x2d42 <__ultoa_invert+0x5c>
    2d50:	f6 cf       	rjmp	.-20     	; 0x2d3e <__ultoa_invert+0x58>
    2d52:	46 2f       	mov	r20, r22
    2d54:	4f 70       	andi	r20, 0x0F	; 15
    2d56:	40 5d       	subi	r20, 0xD0	; 208
    2d58:	4a 33       	cpi	r20, 0x3A	; 58
    2d5a:	18 f0       	brcs	.+6      	; 0x2d62 <__ultoa_invert+0x7c>
    2d5c:	49 5d       	subi	r20, 0xD9	; 217
    2d5e:	31 fd       	sbrc	r19, 1
    2d60:	40 52       	subi	r20, 0x20	; 32
    2d62:	41 93       	st	Z+, r20
    2d64:	02 d0       	rcall	.+4      	; 0x2d6a <__ultoa_invert+0x84>
    2d66:	a9 f7       	brne	.-22     	; 0x2d52 <__ultoa_invert+0x6c>
    2d68:	ea cf       	rjmp	.-44     	; 0x2d3e <__ultoa_invert+0x58>
    2d6a:	b4 e0       	ldi	r27, 0x04	; 4
    2d6c:	a6 95       	lsr	r26
    2d6e:	97 95       	ror	r25
    2d70:	87 95       	ror	r24
    2d72:	77 95       	ror	r23
    2d74:	67 95       	ror	r22
    2d76:	ba 95       	dec	r27
    2d78:	c9 f7       	brne	.-14     	; 0x2d6c <__ultoa_invert+0x86>
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	61 05       	cpc	r22, r1
    2d7e:	71 05       	cpc	r23, r1
    2d80:	08 95       	ret
    2d82:	9b 01       	movw	r18, r22
    2d84:	ac 01       	movw	r20, r24
    2d86:	0a 2e       	mov	r0, r26
    2d88:	06 94       	lsr	r0
    2d8a:	57 95       	ror	r21
    2d8c:	47 95       	ror	r20
    2d8e:	37 95       	ror	r19
    2d90:	27 95       	ror	r18
    2d92:	ba 95       	dec	r27
    2d94:	c9 f7       	brne	.-14     	; 0x2d88 <__ultoa_invert+0xa2>
    2d96:	62 0f       	add	r22, r18
    2d98:	73 1f       	adc	r23, r19
    2d9a:	84 1f       	adc	r24, r20
    2d9c:	95 1f       	adc	r25, r21
    2d9e:	a0 1d       	adc	r26, r0
    2da0:	08 95       	ret

00002da2 <__prologue_saves__>:
    2da2:	2f 92       	push	r2
    2da4:	3f 92       	push	r3
    2da6:	4f 92       	push	r4
    2da8:	5f 92       	push	r5
    2daa:	6f 92       	push	r6
    2dac:	7f 92       	push	r7
    2dae:	8f 92       	push	r8
    2db0:	9f 92       	push	r9
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	ca 1b       	sub	r28, r26
    2dcc:	db 0b       	sbc	r29, r27
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	09 94       	ijmp

00002dda <__epilogue_restores__>:
    2dda:	2a 88       	ldd	r2, Y+18	; 0x12
    2ddc:	39 88       	ldd	r3, Y+17	; 0x11
    2dde:	48 88       	ldd	r4, Y+16	; 0x10
    2de0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dec:	b9 84       	ldd	r11, Y+9	; 0x09
    2dee:	c8 84       	ldd	r12, Y+8	; 0x08
    2df0:	df 80       	ldd	r13, Y+7	; 0x07
    2df2:	ee 80       	ldd	r14, Y+6	; 0x06
    2df4:	fd 80       	ldd	r15, Y+5	; 0x05
    2df6:	0c 81       	ldd	r16, Y+4	; 0x04
    2df8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfe:	ce 0f       	add	r28, r30
    2e00:	d1 1d       	adc	r29, r1
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	ed 01       	movw	r28, r26
    2e0e:	08 95       	ret

00002e10 <__do_global_dtors>:
    2e10:	10 e0       	ldi	r17, 0x00	; 0
    2e12:	cf e5       	ldi	r28, 0x5F	; 95
    2e14:	d0 e0       	ldi	r29, 0x00	; 0
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <__do_global_dtors+0x10>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	0e 94 21 12 	call	0x2442	; 0x2442 <__tablejump2__>
    2e1e:	21 96       	adiw	r28, 0x01	; 1
    2e20:	c0 36       	cpi	r28, 0x60	; 96
    2e22:	d1 07       	cpc	r29, r17
    2e24:	c9 f7       	brne	.-14     	; 0x2e18 <__do_global_dtors+0x8>
    2e26:	f8 94       	cli

00002e28 <__stop_program>:
    2e28:	ff cf       	rjmp	.-2      	; 0x2e28 <__stop_program>
