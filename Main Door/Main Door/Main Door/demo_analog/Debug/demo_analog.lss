
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c2  00800100  000032ba  0000334e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019f  008002c2  008002c2  00003510  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000356c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c0  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000160d9  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036ae  00000000  00000000  0001a045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000542c  00000000  00000000  0001d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fd8  00000000  00000000  00022b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003aa1  00000000  00000000  00024af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b553  00000000  00000000  00028599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  00033aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__dtors_end>
       4:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_1>
       8:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_2>
       c:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_3>
      10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      14:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_5>
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_16>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_18>
      4c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_19>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_24>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	72 06       	cpc	r7, r18
      c4:	31 08       	sbc	r3, r1
      c6:	17 12       	cpse	r1, r23

000000c8 <__ctors_end>:
      c8:	82 06       	cpc	r8, r18

000000ca <__dtors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	12 e0       	ldi	r17, 0x02	; 2
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	ea eb       	ldi	r30, 0xBA	; 186
      de:	f2 e3       	ldi	r31, 0x32	; 50
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	a2 3c       	cpi	r26, 0xC2	; 194
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
      ec:	24 e0       	ldi	r18, 0x04	; 4
      ee:	a2 ec       	ldi	r26, 0xC2	; 194
      f0:	b2 e0       	ldi	r27, 0x02	; 2
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a1 36       	cpi	r26, 0x61	; 97
      f8:	b2 07       	cpc	r27, r18
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	c4 e6       	ldi	r28, 0x64	; 100
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <__do_global_ctors+0x10>
     104:	21 97       	sbiw	r28, 0x01	; 1
     106:	fe 01       	movw	r30, r28
     108:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__tablejump2__>
     10c:	c1 36       	cpi	r28, 0x61	; 97
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <__do_global_ctors+0x8>
     112:	0e 94 5f 08 	call	0x10be	; 0x10be <main>
     116:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__do_global_dtors>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <_ZN7Display8print2lnE6StringS0_>:
Display::~Display()
{
} //~Display

void Display::print2ln(String strTop, String strBot)
{
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	ec 01       	movw	r28, r24
     12c:	7b 01       	movw	r14, r22
     12e:	8a 01       	movw	r16, r20
	lcd.clear();
     130:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN21Adafruit_RGBLCDShield5clearEv>
	lcd.setCursor(0,0);
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	ce 01       	movw	r24, r28
     13a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strTop);
     13e:	b7 01       	movw	r22, r14
     140:	ce 01       	movw	r24, r28
     142:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     146:	41 e0       	ldi	r20, 0x01	; 1
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	ce 01       	movw	r24, r28
     14c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strBot);
     150:	b8 01       	movw	r22, r16
     152:	ce 01       	movw	r24, r28
     154:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN5Print5printERK6String>
	lcd.setCursor(0,0);
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	ce 01       	movw	r24, r28
}
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	ff 90       	pop	r15
     168:	ef 90       	pop	r14
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print(strTop);
	lcd.setCursor(0,1);
	lcd.print(strBot);
	lcd.setCursor(0,0);
     16a:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000016e <_ZN7Display11refreshLineEv>:
}

int Display::refreshLine()
{
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	2c 97       	sbiw	r28, 0x0c	; 12
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	8c 01       	movw	r16, r24
	String strToPrint;
     188:	67 e9       	ldi	r22, 0x97	; 151
     18a:	72 e0       	ldi	r23, 0x02	; 2
     18c:	ce 01       	movw	r24, r28
     18e:	07 96       	adiw	r24, 0x07	; 7
     190:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
	switch (inScrollRow)
     194:	f8 01       	movw	r30, r16
     196:	82 a5       	ldd	r24, Z+42	; 0x2a
     198:	93 a5       	ldd	r25, Z+43	; 0x2b
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	19 f0       	breq	.+6      	; 0x1a4 <_ZN7Display11refreshLineEv+0x36>
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	41 f0       	breq	.+16     	; 0x1b2 <_ZN7Display11refreshLineEv+0x44>
     1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <_ZN7Display11refreshLineEv+0x52>
	{
		case 0:
		strToPrint = strTopLine;
     1a4:	b8 01       	movw	r22, r16
     1a6:	60 5d       	subi	r22, 0xD0	; 208
     1a8:	7f 4f       	sbci	r23, 0xFF	; 255
     1aa:	ce 01       	movw	r24, r28
     1ac:	07 96       	adiw	r24, 0x07	; 7
     1ae:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN6StringaSERKS_>
		case 1:
		strToPrint = strBotLine;
     1b2:	b8 01       	movw	r22, r16
     1b4:	6a 5c       	subi	r22, 0xCA	; 202
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	ce 01       	movw	r24, r28
     1ba:	07 96       	adiw	r24, 0x07	; 7
     1bc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN6StringaSERKS_>
	}
	
	//reset out-of-bounds section indices
	if (inScrollSectionPrinted>inScrollTotalSections){inScrollSectionPrinted=0;}
     1c0:	f8 01       	movw	r30, r16
     1c2:	46 a5       	ldd	r20, Z+46	; 0x2e
     1c4:	57 a5       	ldd	r21, Z+47	; 0x2f
     1c6:	84 a5       	ldd	r24, Z+44	; 0x2c
     1c8:	95 a5       	ldd	r25, Z+45	; 0x2d
     1ca:	48 17       	cp	r20, r24
     1cc:	59 07       	cpc	r21, r25
     1ce:	14 f4       	brge	.+4      	; 0x1d4 <_ZN7Display11refreshLineEv+0x66>
     1d0:	15 a6       	std	Z+45, r1	; 0x2d
     1d2:	14 a6       	std	Z+44, r1	; 0x2c
	
	//print selected section
	if(inScrollSectionPrinted==inScrollTotalSections){strToPrint=strToPrint.substring(inScrollSectionPrinted*16);}
     1d4:	f8 01       	movw	r30, r16
     1d6:	24 a5       	ldd	r18, Z+44	; 0x2c
     1d8:	35 a5       	ldd	r19, Z+45	; 0x2d
     1da:	42 17       	cp	r20, r18
     1dc:	53 07       	cpc	r21, r19
     1de:	41 f4       	brne	.+16     	; 0x1f0 <_ZN7Display11refreshLineEv+0x82>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     1e0:	2b 85       	ldd	r18, Y+11	; 0x0b
     1e2:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e4:	94 e0       	ldi	r25, 0x04	; 4
     1e6:	44 0f       	add	r20, r20
     1e8:	55 1f       	adc	r21, r21
     1ea:	9a 95       	dec	r25
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <_ZN7Display11refreshLineEv+0x78>
     1ee:	0a c0       	rjmp	.+20     	; 0x204 <_ZN7Display11refreshLineEv+0x96>
	else {strToPrint=strToPrint.substring(inScrollSectionPrinted*16,(inScrollSectionPrinted+1)*16);}
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	22 0f       	add	r18, r18
     1f8:	33 1f       	adc	r19, r19
     1fa:	8a 95       	dec	r24
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <_ZN7Display11refreshLineEv+0x88>
     1fe:	a9 01       	movw	r20, r18
     200:	40 51       	subi	r20, 0x10	; 16
     202:	51 09       	sbc	r21, r1
     204:	be 01       	movw	r22, r28
     206:	69 5f       	subi	r22, 0xF9	; 249
     208:	7f 4f       	sbci	r23, 0xFF	; 255
     20a:	ce 01       	movw	r24, r28
     20c:	01 96       	adiw	r24, 0x01	; 1
     20e:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZNK6String9substringEjj>
     212:	be 01       	movw	r22, r28
     214:	6f 5f       	subi	r22, 0xFF	; 255
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	ce 01       	movw	r24, r28
     21a:	07 96       	adiw	r24, 0x07	; 7
     21c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN6StringaSEOS_>
     220:	ce 01       	movw	r24, r28
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
	lcd.setCursor(0,inScrollRow);
     228:	f8 01       	movw	r30, r16
     22a:	42 a5       	ldd	r20, Z+42	; 0x2a
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	c8 01       	movw	r24, r16
     230:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	lcd.print(strToPrint);
     234:	be 01       	movw	r22, r28
     236:	69 5f       	subi	r22, 0xF9	; 249
     238:	7f 4f       	sbci	r23, 0xFF	; 255
     23a:	c8 01       	movw	r24, r16
     23c:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN5Print5printERK6String>
	lcd.setCursor(0,0);
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	c8 01       	movw	r24, r16
     246:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	
	return inScrollSectionPrinted+1;
     24a:	f8 01       	movw	r30, r16
     24c:	04 a5       	ldd	r16, Z+44	; 0x2c
     24e:	15 a5       	ldd	r17, Z+45	; 0x2d
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd.setCursor(0,0);
}

int Display::refreshLine()
{
	String strToPrint;
     254:	ce 01       	movw	r24, r28
     256:	07 96       	adiw	r24, 0x07	; 7
     258:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
	lcd.setCursor(0,inScrollRow);
	lcd.print(strToPrint);
	lcd.setCursor(0,0);
	
	return inScrollSectionPrinted+1;
}
     25c:	c8 01       	movw	r24, r16
     25e:	2c 96       	adiw	r28, 0x0c	; 12
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>:

void Display::setCurrentDisplay(String _top, String _bot, int _backlight, int NextStates[5],int _scrollTotal, int _scrollRow, bool _refresh)
//Sets new Display values
{
     274:	4f 92       	push	r4
     276:	5f 92       	push	r5
     278:	6f 92       	push	r6
     27a:	7f 92       	push	r7
     27c:	8f 92       	push	r8
     27e:	9f 92       	push	r9
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2c 97       	sbiw	r28, 0x0c	; 12
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	4c 01       	movw	r8, r24
     2a6:	3b 01       	movw	r6, r22
     2a8:	2a 01       	movw	r4, r20
     2aa:	b2 2e       	mov	r11, r18
	strTopLine = _top;
     2ac:	c0 96       	adiw	r24, 0x30	; 48
     2ae:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN6StringaSERKS_>
	strBotLine = _bot;
     2b2:	b2 01       	movw	r22, r4
     2b4:	c4 01       	movw	r24, r8
     2b6:	c6 96       	adiw	r24, 0x36	; 54
     2b8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN6StringaSERKS_>
	
	inScrollTotalSections = _scrollTotal;
     2bc:	f4 01       	movw	r30, r8
     2be:	f7 a6       	std	Z+47, r15	; 0x2f
     2c0:	e6 a6       	std	Z+46, r14	; 0x2e
	inScrollRow = _scrollRow;
     2c2:	d3 a6       	std	Z+43, r13	; 0x2b
     2c4:	c2 a6       	std	Z+42, r12	; 0x2a
	
	inNext[SELECT] = NextStates[0];
     2c6:	f8 01       	movw	r30, r16
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	f4 01       	movw	r30, r8
     2ce:	97 8f       	std	Z+31, r25	; 0x1f
     2d0:	86 8f       	std	Z+30, r24	; 0x1e
	inNext[UP] = NextStates[1];
     2d2:	f8 01       	movw	r30, r16
     2d4:	82 81       	ldd	r24, Z+2	; 0x02
     2d6:	93 81       	ldd	r25, Z+3	; 0x03
     2d8:	f4 01       	movw	r30, r8
     2da:	91 a3       	std	Z+33, r25	; 0x21
     2dc:	80 a3       	std	Z+32, r24	; 0x20
	inNext[DOWN] = NextStates[2];
     2de:	f8 01       	movw	r30, r16
     2e0:	84 81       	ldd	r24, Z+4	; 0x04
     2e2:	95 81       	ldd	r25, Z+5	; 0x05
     2e4:	f4 01       	movw	r30, r8
     2e6:	93 a3       	std	Z+35, r25	; 0x23
     2e8:	82 a3       	std	Z+34, r24	; 0x22
	inNext[LEFT] = NextStates[3];
     2ea:	f8 01       	movw	r30, r16
     2ec:	86 81       	ldd	r24, Z+6	; 0x06
     2ee:	97 81       	ldd	r25, Z+7	; 0x07
     2f0:	f4 01       	movw	r30, r8
     2f2:	95 a3       	std	Z+37, r25	; 0x25
     2f4:	84 a3       	std	Z+36, r24	; 0x24
	inNext[RIGHT] = NextStates[4];
     2f6:	f8 01       	movw	r30, r16
     2f8:	80 85       	ldd	r24, Z+8	; 0x08
     2fa:	91 85       	ldd	r25, Z+9	; 0x09
     2fc:	f4 01       	movw	r30, r8
     2fe:	97 a3       	std	Z+39, r25	; 0x27
     300:	86 a3       	std	Z+38, r24	; 0x26
	
	lcd.setBacklight(_backlight);
     302:	6b 2d       	mov	r22, r11
     304:	c4 01       	movw	r24, r8
     306:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
	blnIsRefreshed = _refresh;
     30a:	f4 01       	movw	r30, r8
     30c:	a4 ae       	std	Z+60, r10	; 0x3c
	if (!_refresh)
     30e:	a1 10       	cpse	r10, r1
     310:	1e c0       	rjmp	.+60     	; 0x34e <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xda>
	{
		inScrollSectionPrinted = 0;
     312:	15 a6       	std	Z+45, r1	; 0x2d
     314:	14 a6       	std	Z+44, r1	; 0x2c
		this->print2ln(_top,_bot);
     316:	b2 01       	movw	r22, r4
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6StringC1ERKS_>
     320:	b3 01       	movw	r22, r6
     322:	ce 01       	movw	r24, r28
     324:	07 96       	adiw	r24, 0x07	; 7
     326:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6StringC1ERKS_>
     32a:	ae 01       	movw	r20, r28
     32c:	4f 5f       	subi	r20, 0xFF	; 255
     32e:	5f 4f       	sbci	r21, 0xFF	; 255
     330:	be 01       	movw	r22, r28
     332:	69 5f       	subi	r22, 0xF9	; 249
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	c4 01       	movw	r24, r8
     338:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN7Display8print2lnE6StringS0_>
     33c:	ce 01       	movw	r24, r28
     33e:	07 96       	adiw	r24, 0x07	; 7
     340:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
     344:	ce 01       	movw	r24, r28
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
     34c:	06 c0       	rjmp	.+12     	; 0x35a <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib+0xe6>
	}
	else
	{
		inScrollSectionPrinted = this->refreshLine();
     34e:	c4 01       	movw	r24, r8
     350:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN7Display11refreshLineEv>
     354:	f4 01       	movw	r30, r8
     356:	95 a7       	std	Z+45, r25	; 0x2d
     358:	84 a7       	std	Z+44, r24	; 0x2c
	}
}
     35a:	2c 96       	adiw	r28, 0x0c	; 12
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	af 90       	pop	r10
     37a:	9f 90       	pop	r9
     37c:	8f 90       	pop	r8
     37e:	7f 90       	pop	r7
     380:	6f 90       	pop	r6
     382:	5f 90       	pop	r5
     384:	4f 90       	pop	r4
     386:	08 95       	ret

00000388 <_ZN7Display13selectDisplayEibPcS0_>:

void Display::selectDisplay(int inCurrentMenu, bool blnIsRefresh, char *strArg1,char *strArg2)
//Selects which menu will be displayed. Complete possibilities are present here
{
     388:	6f 92       	push	r6
     38a:	7f 92       	push	r7
     38c:	8f 92       	push	r8
     38e:	9f 92       	push	r9
     390:	af 92       	push	r10
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	e6 97       	sbiw	r28, 0x36	; 54
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	3c 01       	movw	r6, r24
	if(blnIsRefresh) {refreshLine();}
     3b4:	44 23       	and	r20, r20
     3b6:	19 f0       	breq	.+6      	; 0x3be <_ZN7Display13selectDisplayEibPcS0_+0x36>
     3b8:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN7Display11refreshLineEv>
     3bc:	fa c0       	rjmp	.+500    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	4c 01       	movw	r8, r24
	else
	{
		char strTemp [32];
		int inNextStates[5];
		switch(inCurrentMenu)
     3c4:	62 30       	cpi	r22, 0x02	; 2
     3c6:	71 05       	cpc	r23, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <_ZN7Display13selectDisplayEibPcS0_+0x44>
     3ca:	52 c0       	rjmp	.+164    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3cc:	dc f4       	brge	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ce:	61 15       	cp	r22, r1
     3d0:	71 05       	cpc	r23, r1
     3d2:	39 f1       	breq	.+78     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3d4:	61 30       	cpi	r22, 0x01	; 1
     3d6:	71 05       	cpc	r23, r1
     3d8:	09 f0       	breq	.+2      	; 0x3dc <_ZN7Display13selectDisplayEibPcS0_+0x54>
     3da:	b2 c0       	rjmp	.+356    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
	else {return false;}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     3dc:	1a a2       	std	Y+34, r1	; 0x22
     3de:	19 a2       	std	Y+33, r1	; 0x21
	arr[1] = b;
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	9f ef       	ldi	r25, 0xFF	; 255
     3e4:	9c a3       	std	Y+36, r25	; 0x24
     3e6:	8b a3       	std	Y+35, r24	; 0x23
	arr[2] = c;
     3e8:	9e a3       	std	Y+38, r25	; 0x26
     3ea:	8d a3       	std	Y+37, r24	; 0x25
	arr[3] = d;
     3ec:	98 a7       	std	Y+40, r25	; 0x28
     3ee:	8f a3       	std	Y+39, r24	; 0x27
	arr[4] = e;
     3f0:	9a a7       	std	Y+42, r25	; 0x2a
     3f2:	89 a7       	std	Y+41, r24	; 0x29
				setCurrentDisplay("Main Menu","Up:Open DnClose Lft:Day Rt:Night",GREEN,
					inNextStates,2,1,false);
				break;
			case MENU_OPEN:
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Opening Door","Sel:Escape",YELLOW,inNextStates);
     3f4:	6a e3       	ldi	r22, 0x3A	; 58
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	c4 01       	movw	r24, r8
     3fa:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     3fe:	65 e4       	ldi	r22, 0x45	; 69
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	49 c0       	rjmp	.+146    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	if(blnIsRefresh) {refreshLine();}
	else
	{
		char strTemp [32];
		int inNextStates[5];
		switch(inCurrentMenu)
     404:	63 30       	cpi	r22, 0x03	; 3
     406:	71 05       	cpc	r23, r1
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	55 c0       	rjmp	.+170    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     40c:	64 30       	cpi	r22, 0x04	; 4
     40e:	71 05       	cpc	r23, r1
     410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	96 c0       	rjmp	.+300    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay(strTemp,"Sel:Escape",GREEN,inNextStates,1,0);
				break;
			case MENU_NIGHT:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%sLht:%s",strArg1,strArg2);
     414:	1f 93       	push	r17
     416:	0f 93       	push	r16
     418:	3f 93       	push	r19
     41a:	2f 93       	push	r18
     41c:	8c e7       	ldi	r24, 0x7C	; 124
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	50 c0       	rjmp	.+160    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	else {return false;}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	9f ef       	ldi	r25, 0xFF	; 255
     426:	9a a3       	std	Y+34, r25	; 0x22
     428:	89 a3       	std	Y+33, r24	; 0x21
	arr[1] = b;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9c a3       	std	Y+36, r25	; 0x24
     430:	8b a3       	std	Y+35, r24	; 0x23
	arr[2] = c;
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	9e a3       	std	Y+38, r25	; 0x26
     438:	8d a3       	std	Y+37, r24	; 0x25
	arr[3] = d;
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	98 a7       	std	Y+40, r25	; 0x28
     440:	8f a3       	std	Y+39, r24	; 0x27
	arr[4] = e;
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9a a7       	std	Y+42, r25	; 0x2a
     448:	89 a7       	std	Y+41, r24	; 0x29
		switch(inCurrentMenu)
		//TODO: rework as enums
		{
			case MENU_MAIN:
				assignStates(inNextStates,-1,MENU_OPEN,MENU_CLOSE,MENU_DAY,MENU_NIGHT);
				setCurrentDisplay("Main Menu","Up:Open DnClose Lft:Day Rt:Night",GREEN,
     44a:	6f e0       	ldi	r22, 0x0F	; 15
     44c:	71 e0       	ldi	r23, 0x01	; 1
     44e:	c4 01       	movw	r24, r8
     450:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     454:	60 e3       	ldi	r22, 0x30	; 48
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	ce 01       	movw	r24, r28
     45a:	8b 96       	adiw	r24, 0x2b	; 43
     45c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
					inNextStates,2,1,false);
     460:	a1 2c       	mov	r10, r1
     462:	cc 24       	eor	r12, r12
     464:	c3 94       	inc	r12
     466:	d1 2c       	mov	r13, r1
     468:	52 e0       	ldi	r21, 0x02	; 2
     46a:	e5 2e       	mov	r14, r21
     46c:	f1 2c       	mov	r15, r1
     46e:	8e c0       	rjmp	.+284    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
	else {return false;}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     470:	1a a2       	std	Y+34, r1	; 0x22
     472:	19 a2       	std	Y+33, r1	; 0x21
	arr[1] = b;
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	9c a3       	std	Y+36, r25	; 0x24
     47a:	8b a3       	std	Y+35, r24	; 0x23
	arr[2] = c;
     47c:	9e a3       	std	Y+38, r25	; 0x26
     47e:	8d a3       	std	Y+37, r24	; 0x25
	arr[3] = d;
     480:	98 a7       	std	Y+40, r25	; 0x28
     482:	8f a3       	std	Y+39, r24	; 0x27
	arr[4] = e;
     484:	9a a7       	std	Y+42, r25	; 0x2a
     486:	89 a7       	std	Y+41, r24	; 0x29
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Opening Door","Sel:Escape",YELLOW,inNextStates);
				break;
			case MENU_CLOSE:
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay("Closing Door","Sel:Escape",YELLOW,inNextStates);
     488:	6a e3       	ldi	r22, 0x3A	; 58
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	c4 01       	movw	r24, r8
     48e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     492:	62 e5       	ldi	r22, 0x52	; 82
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	ce 01       	movw	r24, r28
     498:	8b 96       	adiw	r24, 0x2b	; 43
     49a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     49e:	a1 2c       	mov	r10, r1
     4a0:	cc 24       	eor	r12, r12
     4a2:	ca 94       	dec	r12
     4a4:	dc 2c       	mov	r13, r12
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
     4aa:	8e 01       	movw	r16, r28
     4ac:	0f 5d       	subi	r16, 0xDF	; 223
     4ae:	1f 4f       	sbci	r17, 0xFF	; 255
     4b0:	23 e0       	ldi	r18, 0x03	; 3
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	70 c0       	rjmp	.+224    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				break;
			case MENU_DAY:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Day Mode        Tmp:%sLht:%s",strArg1,strArg2);
     4b6:	1f 93       	push	r17
     4b8:	0f 93       	push	r16
     4ba:	3f 93       	push	r19
     4bc:	2f 93       	push	r18
     4be:	8f e5       	ldi	r24, 0x5F	; 95
     4c0:	91 e0       	ldi	r25, 0x01	; 1
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay(strTemp,"Sel:Escape",GREEN,inNextStates,1,0);
				break;
			case MENU_NIGHT:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%sLht:%s",strArg1,strArg2);
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	9f 92       	push	r9
     4c8:	8f 92       	push	r8
     4ca:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <sprintf>
	else {return false;}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     4ce:	1a a2       	std	Y+34, r1	; 0x22
     4d0:	19 a2       	std	Y+33, r1	; 0x21
	arr[1] = b;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	9c a3       	std	Y+36, r25	; 0x24
     4d8:	8b a3       	std	Y+35, r24	; 0x23
	arr[2] = c;
     4da:	9e a3       	std	Y+38, r25	; 0x26
     4dc:	8d a3       	std	Y+37, r24	; 0x25
	arr[3] = d;
     4de:	98 a7       	std	Y+40, r25	; 0x28
     4e0:	8f a3       	std	Y+39, r24	; 0x27
	arr[4] = e;
     4e2:	9a a7       	std	Y+42, r25	; 0x2a
     4e4:	89 a7       	std	Y+41, r24	; 0x29
				break;
			case MENU_NIGHT:
				//TODO: separate temperature readings/calls?
				sprintf(strTemp,"Night Mode      Tmp:%sLht:%s",strArg1,strArg2);
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay(strTemp,"Sel:Escape",GREEN,inNextStates,1,0);
     4e6:	6a e3       	ldi	r22, 0x3A	; 58
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	8b 96       	adiw	r24, 0x2b	; 43
     4ee:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     4f2:	b4 01       	movw	r22, r8
     4f4:	ce 01       	movw	r24, r28
     4f6:	c1 96       	adiw	r24, 0x31	; 49
     4f8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     4fc:	a1 2c       	mov	r10, r1
     4fe:	c1 2c       	mov	r12, r1
     500:	d1 2c       	mov	r13, r1
     502:	ee 24       	eor	r14, r14
     504:	e3 94       	inc	r14
     506:	f1 2c       	mov	r15, r1
     508:	8e 01       	movw	r16, r28
     50a:	0f 5d       	subi	r16, 0xDF	; 223
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	22 e0       	ldi	r18, 0x02	; 2
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	ae 01       	movw	r20, r28
     514:	45 5d       	subi	r20, 0xD5	; 213
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	be 01       	movw	r22, r28
     51a:	6f 5c       	subi	r22, 0xCF	; 207
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	c3 01       	movw	r24, r6
     520:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     524:	ce 01       	movw	r24, r28
     526:	c1 96       	adiw	r24, 0x31	; 49
     528:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
     52c:	ce 01       	movw	r24, r28
     52e:	8b 96       	adiw	r24, 0x2b	; 43
     530:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
				break;
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	39 c0       	rjmp	.+114    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	else {return false;}
}

void Display::assignStates(int arr[5], int a, int b, int c, int d, int e)
{//TODO: NOT THIS
	arr[0] = a;
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	9a a3       	std	Y+34, r25	; 0x22
     546:	89 a3       	std	Y+33, r24	; 0x21
	arr[1] = b;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9c a3       	std	Y+36, r25	; 0x24
     54e:	8b a3       	std	Y+35, r24	; 0x23
	arr[2] = c;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9e a3       	std	Y+38, r25	; 0x26
     556:	8d a3       	std	Y+37, r24	; 0x25
	arr[3] = d;
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	98 a7       	std	Y+40, r25	; 0x28
     55e:	8f a3       	std	Y+39, r24	; 0x27
	arr[4] = e;
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9a a7       	std	Y+42, r25	; 0x2a
     566:	89 a7       	std	Y+41, r24	; 0x29
				assignStates(inNextStates,MENU_MAIN,-1,-1,-1,-1);
				setCurrentDisplay(strTemp,"Sel:Escape",GREEN,inNextStates,1,0);
				break;
			default:
				assignStates(inNextStates,-1,MENU_OPEN,MENU_CLOSE,MENU_DAY,MENU_NIGHT);
				setCurrentDisplay("Main Menu","Up:Open DnCloseLft:Day Rt:Night",GREEN, inNextStates,1,1);
     568:	69 e9       	ldi	r22, 0x99	; 153
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	c4 01       	movw	r24, r8
     56e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     572:	60 e3       	ldi	r22, 0x30	; 48
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	ce 01       	movw	r24, r28
     578:	8b 96       	adiw	r24, 0x2b	; 43
     57a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     57e:	a1 2c       	mov	r10, r1
     580:	cc 24       	eor	r12, r12
     582:	c3 94       	inc	r12
     584:	d1 2c       	mov	r13, r1
     586:	ee 24       	eor	r14, r14
     588:	e3 94       	inc	r14
     58a:	f1 2c       	mov	r15, r1
     58c:	8e 01       	movw	r16, r28
     58e:	0f 5d       	subi	r16, 0xDF	; 223
     590:	1f 4f       	sbci	r17, 0xFF	; 255
     592:	22 e0       	ldi	r18, 0x02	; 2
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	a4 01       	movw	r20, r8
     598:	be 01       	movw	r22, r28
     59a:	65 5d       	subi	r22, 0xD5	; 213
     59c:	7f 4f       	sbci	r23, 0xFF	; 255
     59e:	c3 01       	movw	r24, r6
     5a0:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN7Display17setCurrentDisplayE6StringS0_iPiiib>
     5a4:	ce 01       	movw	r24, r28
     5a6:	8b 96       	adiw	r24, 0x2b	; 43
     5a8:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
     5ac:	c4 01       	movw	r24, r8
     5ae:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
				break;
		}
		
	}
	
}
     5b2:	e6 96       	adiw	r28, 0x36	; 54
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	08 95       	ret

000005da <_ZN7DisplayC1E21Adafruit_RGBLCDShield>:
#include <Arduino.h>
#include "Display.h"
#include "constant_parameters.h"

// default constructor
Display::Display(Adafruit_RGBLCDShield _lcd)
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     5e4:	fb 01       	movw	r30, r22
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	93 81       	ldd	r25, Z+3	; 0x03
     5ea:	9b 83       	std	Y+3, r25	; 0x03
     5ec:	8a 83       	std	Y+2, r24	; 0x02
#define BUTTON_LEFT 0x10
#define BUTTON_RIGHT 0x02
#define BUTTON_SELECT 0x01


class Adafruit_RGBLCDShield : public Print {
     5ee:	88 ea       	ldi	r24, 0xA8	; 168
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	99 83       	std	Y+1, r25	; 0x01
     5f4:	88 83       	st	Y, r24
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	8c 83       	std	Y+4, r24	; 0x04
     5fa:	85 81       	ldd	r24, Z+5	; 0x05
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	86 81       	ldd	r24, Z+6	; 0x06
     600:	8e 83       	std	Y+6, r24	; 0x06
     602:	88 e0       	ldi	r24, 0x08	; 8
     604:	37 96       	adiw	r30, 0x07	; 7
     606:	de 01       	movw	r26, r28
     608:	17 96       	adiw	r26, 0x07	; 7
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	8a 95       	dec	r24
     610:	e1 f7       	brne	.-8      	; 0x60a <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x30>
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	fb 01       	movw	r30, r22
     616:	3f 96       	adiw	r30, 0x0f	; 15
     618:	de 01       	movw	r26, r28
     61a:	1f 96       	adiw	r26, 0x0f	; 15
     61c:	01 90       	ld	r0, Z+
     61e:	0d 92       	st	X+, r0
     620:	8a 95       	dec	r24
     622:	e1 f7       	brne	.-8      	; 0x61c <_ZN7DisplayC1E21Adafruit_RGBLCDShield+0x42>
     624:	fb 01       	movw	r30, r22
     626:	84 89       	ldd	r24, Z+20	; 0x14
     628:	8c 8b       	std	Y+20, r24	; 0x14
     62a:	85 89       	ldd	r24, Z+21	; 0x15
     62c:	8d 8b       	std	Y+21, r24	; 0x15
     62e:	86 89       	ldd	r24, Z+22	; 0x16
     630:	8e 8b       	std	Y+22, r24	; 0x16
     632:	87 89       	ldd	r24, Z+23	; 0x17
     634:	8f 8b       	std	Y+23, r24	; 0x17
     636:	80 8d       	ldd	r24, Z+24	; 0x18
     638:	88 8f       	std	Y+24, r24	; 0x18
     63a:	81 8d       	ldd	r24, Z+25	; 0x19
     63c:	89 8f       	std	Y+25, r24	; 0x19
     63e:	82 8d       	ldd	r24, Z+26	; 0x1a
     640:	8a 8f       	std	Y+26, r24	; 0x1a
     642:	83 8d       	ldd	r24, Z+27	; 0x1b
     644:	8b 8f       	std	Y+27, r24	; 0x1b
	: lcd(_lcd)
     646:	67 e9       	ldi	r22, 0x97	; 151
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	ce 01       	movw	r24, r28
     64c:	c0 96       	adiw	r24, 0x30	; 48
     64e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
     652:	67 e9       	ldi	r22, 0x97	; 151
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	ce 01       	movw	r24, r28
     658:	c6 96       	adiw	r24, 0x36	; 54
     65a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
{
	lcd.begin(16,2);
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	42 e0       	ldi	r20, 0x02	; 2
     662:	60 e1       	ldi	r22, 0x10	; 16
     664:	ce 01       	movw	r24, r28
     666:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN21Adafruit_RGBLCDShield5beginEhhh>
	lcd.clear();
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN21Adafruit_RGBLCDShield5clearEv>
	selectDisplay(MENU_MAIN,false);
     670:	07 e9       	ldi	r16, 0x97	; 151
     672:	12 e0       	ldi	r17, 0x02	; 2
     674:	98 01       	movw	r18, r16
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN7Display13selectDisplayEibPcS0_>
} //Display
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <_ZN7Display21UpdateMenuFromButtonsEm>:
	
}

bool Display::UpdateMenuFromButtons(unsigned long tme)
//Reads buttons and alters for initialized menu directions
{
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	6a 01       	movw	r12, r20
     6a0:	7b 01       	movw	r14, r22
	uint8_t buttons = lcd.readButtons();
     6a2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
	if((buttons & BUTTON_SELECT) && inNext[SELECT] != -1)
     6a6:	80 ff       	sbrs	r24, 0
     6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <_ZN7Display21UpdateMenuFromButtonsEm+0x2a>
     6aa:	6e 8d       	ldd	r22, Y+30	; 0x1e
     6ac:	7f 8d       	ldd	r23, Y+31	; 0x1f
     6ae:	6f 3f       	cpi	r22, 0xFF	; 255
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	72 07       	cpc	r23, r18
     6b4:	01 f5       	brne	.+64     	; 0x6f6 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
	{
		selectDisplay(inNext[SELECT],false);
		return true;
	}
	else if((buttons & BUTTON_UP) && inNext[UP] != -1)
     6b6:	83 ff       	sbrs	r24, 3
     6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <_ZN7Display21UpdateMenuFromButtonsEm+0x3a>
     6ba:	68 a1       	ldd	r22, Y+32	; 0x20
     6bc:	79 a1       	ldd	r23, Y+33	; 0x21
     6be:	6f 3f       	cpi	r22, 0xFF	; 255
     6c0:	9f ef       	ldi	r25, 0xFF	; 255
     6c2:	79 07       	cpc	r23, r25
     6c4:	c1 f4       	brne	.+48     	; 0x6f6 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
	{
		selectDisplay(inNext[UP],false);
		return true;
	}
	else if((buttons & BUTTON_DOWN) && inNext[DOWN] != -1)
     6c6:	82 ff       	sbrs	r24, 2
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <_ZN7Display21UpdateMenuFromButtonsEm+0x4a>
     6ca:	6a a1       	ldd	r22, Y+34	; 0x22
     6cc:	7b a1       	ldd	r23, Y+35	; 0x23
     6ce:	6f 3f       	cpi	r22, 0xFF	; 255
     6d0:	2f ef       	ldi	r18, 0xFF	; 255
     6d2:	72 07       	cpc	r23, r18
     6d4:	81 f4       	brne	.+32     	; 0x6f6 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
	{
		selectDisplay(inNext[DOWN],false);
		return true;
	}
	else if((buttons & BUTTON_LEFT) && inNext[LEFT] != -1)
     6d6:	84 ff       	sbrs	r24, 4
     6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <_ZN7Display21UpdateMenuFromButtonsEm+0x5a>
     6da:	6c a1       	ldd	r22, Y+36	; 0x24
     6dc:	7d a1       	ldd	r23, Y+37	; 0x25
     6de:	6f 3f       	cpi	r22, 0xFF	; 255
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
     6e2:	79 07       	cpc	r23, r25
     6e4:	41 f4       	brne	.+16     	; 0x6f6 <_ZN7Display21UpdateMenuFromButtonsEm+0x6a>
	{
		selectDisplay(inNext[LEFT],false);
		return true;
	}
	else if((buttons & BUTTON_RIGHT) && inNext[RIGHT] != -1)
     6e6:	81 ff       	sbrs	r24, 1
     6e8:	0e c0       	rjmp	.+28     	; 0x706 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
     6ea:	6e a1       	ldd	r22, Y+38	; 0x26
     6ec:	7f a1       	ldd	r23, Y+39	; 0x27
     6ee:	6f 3f       	cpi	r22, 0xFF	; 255
     6f0:	2f ef       	ldi	r18, 0xFF	; 255
     6f2:	72 07       	cpc	r23, r18
     6f4:	41 f0       	breq	.+16     	; 0x706 <_ZN7Display21UpdateMenuFromButtonsEm+0x7a>
	{
		selectDisplay(inNext[RIGHT],false);
     6f6:	07 e9       	ldi	r16, 0x97	; 151
     6f8:	12 e0       	ldi	r17, 0x02	; 2
     6fa:	98 01       	movw	r18, r16
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN7Display13selectDisplayEibPcS0_>
     704:	10 c0       	rjmp	.+32     	; 0x726 <_ZN7Display21UpdateMenuFromButtonsEm+0x9a>
		return true;
	}
	else if (tme+REFRESH_RATE>=millis())
     706:	0e 94 1d 09 	call	0x123a	; 0x123a <millis>
     70a:	28 ee       	ldi	r18, 0xE8	; 232
     70c:	c2 0e       	add	r12, r18
     70e:	23 e0       	ldi	r18, 0x03	; 3
     710:	d2 1e       	adc	r13, r18
     712:	e1 1c       	adc	r14, r1
     714:	f1 1c       	adc	r15, r1
     716:	c6 16       	cp	r12, r22
     718:	d7 06       	cpc	r13, r23
     71a:	e8 06       	cpc	r14, r24
     71c:	f9 06       	cpc	r15, r25
     71e:	28 f0       	brcs	.+10     	; 0x72a <_ZN7Display21UpdateMenuFromButtonsEm+0x9e>
}

void Display::selectDisplay(int inCurrentMenu, bool blnIsRefresh, char *strArg1,char *strArg2)
//Selects which menu will be displayed. Complete possibilities are present here
{
	if(blnIsRefresh) {refreshLine();}
     720:	ce 01       	movw	r24, r28
     722:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN7Display11refreshLineEv>
		return true;
	}
	else if (tme+REFRESH_RATE>=millis())
	{
		selectDisplay(inCurrent,true);
		return true;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	01 c0       	rjmp	.+2      	; 0x72c <_ZN7Display21UpdateMenuFromButtonsEm+0xa0>
	}//TEST
	else {return false;}
     72a:	80 e0       	ldi	r24, 0x00	; 0
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	08 95       	ret

0000073e <_ZN6Safety12disableMotorEbi.part.0>:
		}
		DEBUG
	*/
	//Stop door
	setDevice(DEVICE_DOORDIR,MVT_STALLED);
}
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	89 e0       	ldi	r24, 0x09	; 9
     748:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	8a e0       	ldi	r24, 0x0A	; 10
     750:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	89 e0       	ldi	r24, 0x09	; 9
     758:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
     764:	69 eb       	ldi	r22, 0xB9	; 185
     766:	71 e0       	ldi	r23, 0x01	; 1
     768:	83 ef       	ldi	r24, 0xF3	; 243
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
     770:	be 01       	movw	r22, r28
     772:	dd 0f       	add	r29, r29
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <delay>

00000780 <_ZN6SafetyC1Ev>:
     780:	08 95       	ret

00000782 <_ZN6Safety12deviceStatusEi>:
     782:	62 30       	cpi	r22, 0x02	; 2
     784:	71 05       	cpc	r23, r1
     786:	b1 f0       	breq	.+44     	; 0x7b4 <_ZN6Safety12deviceStatusEi+0x32>
     788:	44 f4       	brge	.+16     	; 0x79a <_ZN6Safety12deviceStatusEi+0x18>
     78a:	61 15       	cp	r22, r1
     78c:	71 05       	cpc	r23, r1
     78e:	81 f0       	breq	.+32     	; 0x7b0 <_ZN6Safety12deviceStatusEi+0x2e>
     790:	61 30       	cpi	r22, 0x01	; 1
     792:	71 05       	cpc	r23, r1
     794:	b1 f4       	brne	.+44     	; 0x7c2 <_ZN6Safety12deviceStatusEi+0x40>
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	12 c0       	rjmp	.+36     	; 0x7be <_ZN6Safety12deviceStatusEi+0x3c>
     79a:	64 30       	cpi	r22, 0x04	; 4
     79c:	71 05       	cpc	r23, r1
     79e:	71 f0       	breq	.+28     	; 0x7bc <_ZN6Safety12deviceStatusEi+0x3a>
     7a0:	5c f0       	brlt	.+22     	; 0x7b8 <_ZN6Safety12deviceStatusEi+0x36>
     7a2:	65 30       	cpi	r22, 0x05	; 5
     7a4:	71 05       	cpc	r23, r1
     7a6:	69 f4       	brne	.+26     	; 0x7c2 <_ZN6Safety12deviceStatusEi+0x40>
     7a8:	fc 01       	movw	r30, r24
     7aa:	82 85       	ldd	r24, Z+10	; 0x0a
     7ac:	93 85       	ldd	r25, Z+11	; 0x0b
     7ae:	08 95       	ret
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <_ZN6Safety12deviceStatusEi+0x3c>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <_ZN6Safety12deviceStatusEi+0x3c>
     7b8:	8c e0       	ldi	r24, 0x0C	; 12
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <_ZN6Safety12deviceStatusEi+0x3c>
     7bc:	8d e0       	ldi	r24, 0x0D	; 13
     7be:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <digitalRead>
     7c2:	08 95       	ret

000007c4 <_ZN6Safety12cntEventIncrEi>:
     7c4:	fc 01       	movw	r30, r24
     7c6:	61 15       	cp	r22, r1
     7c8:	71 05       	cpc	r23, r1
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <_ZN6Safety12cntEventIncrEi+0x10>
     7cc:	61 30       	cpi	r22, 0x01	; 1
     7ce:	71 05       	cpc	r23, r1
     7d0:	21 f0       	breq	.+8      	; 0x7da <_ZN6Safety12cntEventIncrEi+0x16>
     7d2:	08 95       	ret
     7d4:	15 86       	std	Z+13, r1	; 0x0d
     7d6:	14 86       	std	Z+12, r1	; 0x0c
     7d8:	08 95       	ret
     7da:	84 85       	ldd	r24, Z+12	; 0x0c
     7dc:	95 85       	ldd	r25, Z+13	; 0x0d
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	95 87       	std	Z+13, r25	; 0x0d
     7e2:	84 87       	std	Z+12, r24	; 0x0c
     7e4:	08 95       	ret

000007e6 <_ZN6Safety12inEventCountEv>:
     7e6:	fc 01       	movw	r30, r24
     7e8:	84 85       	ldd	r24, Z+12	; 0x0c
     7ea:	95 85       	ldd	r25, Z+13	; 0x0d
     7ec:	08 95       	ret

000007ee <_ZN6Safety14emergencyStallEv>:
     7ee:	60 ed       	ldi	r22, 0xD0	; 208
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	83 ef       	ldi	r24, 0xF3	; 243
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
     7fa:	88 ee       	ldi	r24, 0xE8	; 232
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN6Safety12disableMotorEbi.part.0>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN6Safety12disableMotorEbi.part.0>
     80a:	6a ed       	ldi	r22, 0xDA	; 218
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	83 ef       	ldi	r24, 0xF3	; 243
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>

00000816 <_ZN6Safety12disableMotorEbi>:
     816:	ca 01       	movw	r24, r20
     818:	61 11       	cpse	r22, r1
     81a:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN6Safety12disableMotorEbi.part.0>
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	89 e0       	ldi	r24, 0x09	; 9
     82a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
     82e:	6d ee       	ldi	r22, 0xED	; 237
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	83 ef       	ldi	r24, 0xF3	; 243
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>

0000083a <_ZN6Safety8setRelayEi>:
     83a:	61 15       	cp	r22, r1
     83c:	71 05       	cpc	r23, r1
     83e:	71 f0       	breq	.+28     	; 0x85c <_ZN6Safety8setRelayEi+0x22>
     840:	61 30       	cpi	r22, 0x01	; 1
     842:	71 05       	cpc	r23, r1
     844:	99 f0       	breq	.+38     	; 0x86c <_ZN6Safety8setRelayEi+0x32>
     846:	6f 3f       	cpi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	c1 f4       	brne	.+48     	; 0x87c <_ZN6Safety8setRelayEi+0x42>
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	89 e0       	ldi	r24, 0x09	; 9
     850:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	8a e0       	ldi	r24, 0x0A	; 10
     858:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	89 e0       	ldi	r24, 0x09	; 9
     860:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	89 e0       	ldi	r24, 0x09	; 9
     870:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	8a e0       	ldi	r24, 0x0A	; 10
     878:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <digitalWrite>
     87c:	08 95       	ret

0000087e <_ZN6Safety9setDeviceEii.part.1>:
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
     888:	8b 01       	movw	r16, r22
     88a:	7b 87       	std	Y+11, r23	; 0x0b
     88c:	6a 87       	std	Y+10, r22	; 0x0a
     88e:	67 2b       	or	r22, r23
     890:	29 f4       	brne	.+10     	; 0x89c <_ZN6Safety9setDeviceEii.part.1+0x1e>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN6Safety12disableMotorEbi.part.0>
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <_ZN6Safety9setDeviceEii.part.1+0x28>
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN6Safety12disableMotorEbi>
     8a6:	b8 01       	movw	r22, r16
     8a8:	ce 01       	movw	r24, r28
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_ZN6Safety8setRelayEi>

000008b6 <_ZN6Safety9setDeviceEii>:
     8b6:	fc 01       	movw	r30, r24
     8b8:	62 30       	cpi	r22, 0x02	; 2
     8ba:	71 05       	cpc	r23, r1
     8bc:	b1 f0       	breq	.+44     	; 0x8ea <_ZN6Safety9setDeviceEii+0x34>
     8be:	3c f4       	brge	.+14     	; 0x8ce <_ZN6Safety9setDeviceEii+0x18>
     8c0:	61 15       	cp	r22, r1
     8c2:	71 05       	cpc	r23, r1
     8c4:	61 f0       	breq	.+24     	; 0x8de <_ZN6Safety9setDeviceEii+0x28>
     8c6:	61 30       	cpi	r22, 0x01	; 1
     8c8:	71 05       	cpc	r23, r1
     8ca:	61 f0       	breq	.+24     	; 0x8e4 <_ZN6Safety9setDeviceEii+0x2e>
     8cc:	08 95       	ret
     8ce:	64 30       	cpi	r22, 0x04	; 4
     8d0:	71 05       	cpc	r23, r1
     8d2:	89 f0       	breq	.+34     	; 0x8f6 <_ZN6Safety9setDeviceEii+0x40>
     8d4:	6c f0       	brlt	.+26     	; 0x8f0 <_ZN6Safety9setDeviceEii+0x3a>
     8d6:	65 30       	cpi	r22, 0x05	; 5
     8d8:	71 05       	cpc	r23, r1
     8da:	81 f0       	breq	.+32     	; 0x8fc <_ZN6Safety9setDeviceEii+0x46>
     8dc:	08 95       	ret
     8de:	53 83       	std	Z+3, r21	; 0x03
     8e0:	42 83       	std	Z+2, r20	; 0x02
     8e2:	08 95       	ret
     8e4:	55 83       	std	Z+5, r21	; 0x05
     8e6:	44 83       	std	Z+4, r20	; 0x04
     8e8:	08 95       	ret
     8ea:	51 83       	std	Z+1, r21	; 0x01
     8ec:	40 83       	st	Z, r20
     8ee:	08 95       	ret
     8f0:	57 83       	std	Z+7, r21	; 0x07
     8f2:	46 83       	std	Z+6, r20	; 0x06
     8f4:	08 95       	ret
     8f6:	51 87       	std	Z+9, r21	; 0x09
     8f8:	40 87       	std	Z+8, r20	; 0x08
     8fa:	08 95       	ret
     8fc:	ba 01       	movw	r22, r20
     8fe:	0c 94 3f 04 	jmp	0x87e	; 0x87e <_ZN6Safety9setDeviceEii.part.1>

00000902 <_ZN6Safety13emergencyOpenEv>:

//TODO:VERIFY
void Safety::emergencyOpen(){
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	7c 01       	movw	r14, r24
	
	#ifdef DEBUG
	Serial.println("EMERGENCY OPEN:");
     90c:	66 e0       	ldi	r22, 0x06	; 6
     90e:	72 e0       	ldi	r23, 0x02	; 2
     910:	83 ef       	ldi	r24, 0xF3	; 243
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	c7 01       	movw	r24, r14
     91e:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN6Safety9setDeviceEii.part.1>
	#endif
	
	setDevice(DEVICE_DOORDIR,MVT_OPENING);
	unsigned long temp = millis();
     922:	0e 94 1d 09 	call	0x123a	; 0x123a <millis>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
		case DEVICE_LS2:
			return digitalRead(PIN_LIMITSWITCH_2);
		case DEVICE_PEC:
			return digitalRead(PIN_LASERSENSOR);
		case DEVICE_PRXUP:
			return digitalRead(PIN_PROX_UP);
     92a:	8c e0       	ldi	r24, 0x0C	; 12
     92c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <digitalRead>
	Serial.println("EMERGENCY OPEN:");
	#endif
	
	setDevice(DEVICE_DOORDIR,MVT_OPENING);
	unsigned long temp = millis();
	while(deviceStatus(DEVICE_PRXUP)==0 || ((millis()-temp))<5000)
     930:	89 2b       	or	r24, r25
     932:	39 f4       	brne	.+14     	; 0x942 <_ZN6Safety13emergencyOpenEv+0x40>
	{
		delay(50);
     934:	62 e3       	ldi	r22, 0x32	; 50
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 4e 09 	call	0x129c	; 0x129c <delay>
	Serial.println("EMERGENCY OPEN:");
	#endif
	
	setDevice(DEVICE_DOORDIR,MVT_OPENING);
	unsigned long temp = millis();
	while(deviceStatus(DEVICE_PRXUP)==0 || ((millis()-temp))<5000)
     940:	f4 cf       	rjmp	.-24     	; 0x92a <_ZN6Safety13emergencyOpenEv+0x28>
     942:	0e 94 1d 09 	call	0x123a	; 0x123a <millis>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	8c 19       	sub	r24, r12
     94c:	9d 09       	sbc	r25, r13
     94e:	ae 09       	sbc	r26, r14
     950:	bf 09       	sbc	r27, r15
     952:	88 38       	cpi	r24, 0x88	; 136
     954:	93 41       	sbci	r25, 0x13	; 19
     956:	a1 05       	cpc	r26, r1
     958:	b1 05       	cpc	r27, r1
     95a:	60 f3       	brcs	.-40     	; 0x934 <_ZN6Safety13emergencyOpenEv+0x32>
     95c:	88 eb       	ldi	r24, 0xB8	; 184
     95e:	9b e0       	ldi	r25, 0x0B	; 11
	/*
	digitalwrite(PIN_LED_RED,HIGH);
	TODO:
	ERROR STATE FOR LORA ALARM
	*/
}
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN6Safety12disableMotorEbi.part.0>

0000096c <setup>:

Adafruit_RGBLCDShield disp = Adafruit_RGBLCDShield();//NOTE - CLASSES MUST BE INITIALIZED AS POINTERS. WILL NOT EXECUTE OTHERWISE
Display *ptrdspMainDoor;  
Safety *ptrsftMainDoor;
unsigned long tmeLastUpdated;
void setup() {
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	6c 97       	sbiw	r28, 0x1c	; 28
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     984:	26 e0       	ldi	r18, 0x06	; 6
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	55 e2       	ldi	r21, 0x25	; 37
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	83 ef       	ldi	r24, 0xF3	; 243
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN14HardwareSerial5beginEmh>
     996:	8a ec       	ldi	r24, 0xCA	; 202
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	fc 01       	movw	r30, r24
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	33 81       	ldd	r19, Z+3	; 0x03
     9a0:	3c 83       	std	Y+4, r19	; 0x04
     9a2:	2b 83       	std	Y+3, r18	; 0x03
     9a4:	28 ea       	ldi	r18, 0xA8	; 168
     9a6:	32 e0       	ldi	r19, 0x02	; 2
     9a8:	3a 83       	std	Y+2, r19	; 0x02
     9aa:	29 83       	std	Y+1, r18	; 0x01
     9ac:	24 81       	ldd	r18, Z+4	; 0x04
     9ae:	2d 83       	std	Y+5, r18	; 0x05
     9b0:	25 81       	ldd	r18, Z+5	; 0x05
     9b2:	2e 83       	std	Y+6, r18	; 0x06
     9b4:	26 81       	ldd	r18, Z+6	; 0x06
     9b6:	2f 83       	std	Y+7, r18	; 0x07
     9b8:	28 e0       	ldi	r18, 0x08	; 8
     9ba:	e1 ed       	ldi	r30, 0xD1	; 209
     9bc:	f2 e0       	ldi	r31, 0x02	; 2
     9be:	de 01       	movw	r26, r28
     9c0:	18 96       	adiw	r26, 0x08	; 8
     9c2:	01 90       	ld	r0, Z+
     9c4:	0d 92       	st	X+, r0
     9c6:	2a 95       	dec	r18
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <setup+0x56>
     9ca:	25 e0       	ldi	r18, 0x05	; 5
     9cc:	e9 ed       	ldi	r30, 0xD9	; 217
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	de 01       	movw	r26, r28
     9d2:	50 96       	adiw	r26, 0x10	; 16
     9d4:	01 90       	ld	r0, Z+
     9d6:	0d 92       	st	X+, r0
     9d8:	2a 95       	dec	r18
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <setup+0x68>
     9dc:	fc 01       	movw	r30, r24
     9de:	24 89       	ldd	r18, Z+20	; 0x14
     9e0:	2d 8b       	std	Y+21, r18	; 0x15
     9e2:	25 89       	ldd	r18, Z+21	; 0x15
     9e4:	2e 8b       	std	Y+22, r18	; 0x16
     9e6:	26 89       	ldd	r18, Z+22	; 0x16
     9e8:	2f 8b       	std	Y+23, r18	; 0x17
     9ea:	27 89       	ldd	r18, Z+23	; 0x17
     9ec:	28 8f       	std	Y+24, r18	; 0x18
     9ee:	20 8d       	ldd	r18, Z+24	; 0x18
     9f0:	29 8f       	std	Y+25, r18	; 0x19
     9f2:	21 8d       	ldd	r18, Z+25	; 0x19
     9f4:	2a 8f       	std	Y+26, r18	; 0x1a
     9f6:	22 8d       	ldd	r18, Z+26	; 0x1a
     9f8:	2b 8f       	std	Y+27, r18	; 0x1b
     9fa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9fc:	8c 8f       	std	Y+28, r24	; 0x1c
  
  #ifdef DEBUG
  Serial.begin(9600);
  #endif
  
  ptrdspMainDoor= new Display(disp);
     9fe:	8d e3       	ldi	r24, 0x3D	; 61
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Znwj>
     a06:	8c 01       	movw	r16, r24
     a08:	be 01       	movw	r22, r28
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7DisplayC1E21Adafruit_RGBLCDShield>
     a12:	10 93 c9 02 	sts	0x02C9, r17	; 0x8002c9 <ptrdspMainDoor+0x1>
     a16:	00 93 c8 02 	sts	0x02C8, r16	; 0x8002c8 <ptrdspMainDoor>
  ptrsftMainDoor = new Safety;
     a1a:	8f e0       	ldi	r24, 0x0F	; 15
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Znwj>
     a22:	8c 01       	movw	r16, r24
     a24:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN6SafetyC1Ev>
     a28:	10 93 c7 02 	sts	0x02C7, r17	; 0x8002c7 <ptrsftMainDoor+0x1>
     a2c:	00 93 c6 02 	sts	0x02C6, r16	; 0x8002c6 <ptrsftMainDoor>
  
  pinMode(PIN_RELAY_DOOROPEN, INPUT);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	89 e0       	ldi	r24, 0x09	; 9
     a3c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
  pinMode(PIN_LIMITSWITCH_1, INPUT_PULLUP);
     a40:	62 e0       	ldi	r22, 0x02	; 2
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
  analogReference(EXTERNAL);  
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <analogReference>

  isClosing = false;
     a4e:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <isClosing>
  TWCR |= (1<<TWIE);
  */
  
  /* INT0 & INT1 Interrupts Enable*/
  //set both to activate on falling edge
  EICRA |= (1 << ISC11) | (1<<ISC01);
     a52:	e9 e6       	ldi	r30, 0x69	; 105
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8a 60       	ori	r24, 0x0A	; 10
     a5a:	80 83       	st	Z, r24
  //enable both interrupts
  EIMSK = 0x03;
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	8d bb       	out	0x1d, r24	; 29
  
  /*PCINT Interrupt Enable*/
  PCICR |= (1<<PCIE2)|(1<<PCIE0);
     a60:	e8 e6       	ldi	r30, 0x68	; 104
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	85 60       	ori	r24, 0x05	; 5
     a68:	80 83       	st	Z, r24
  
  
  //TODO Interrupt Vector table placement & write prevention(MCUCR)
  
  
  sei();
     a6a:	78 94       	sei
  
  tmeLastUpdated = millis();
     a6c:	0e 94 1d 09 	call	0x123a	; 0x123a <millis>
     a70:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <__data_end>
     a74:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <__data_end+0x1>
     a78:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end+0x2>
     a7c:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x3>
  #ifdef DEBUG
  Serial.println("Init Complete");
     a80:	6d e2       	ldi	r22, 0x2D	; 45
     a82:	72 e0       	ldi	r23, 0x02	; 2
     a84:	83 ef       	ldi	r24, 0xF3	; 243
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
  #endif
  
}
     a8c:	6c 96       	adiw	r28, 0x1c	; 28
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <loop>:
  // TODO: Implement sleep timer
  //dspMainDoor.selectDisplay(MENU_MAIN,false);
  //delay(REFRESH_RATE);
  
  #ifdef DEBUG
  Serial.println("in loop");
     aa2:	6b e3       	ldi	r22, 0x3B	; 59
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	83 ef       	ldi	r24, 0xF3	; 243
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
  #endif
  
  
  if (ptrdspMainDoor->UpdateMenuFromButtons(tmeLastUpdated))
     aae:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <__data_end>
     ab2:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <__data_end+0x1>
     ab6:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <__data_end+0x2>
     aba:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <__data_end+0x3>
     abe:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <ptrdspMainDoor>
     ac2:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <ptrdspMainDoor+0x1>
     ac6:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN7Display21UpdateMenuFromButtonsEm>
     aca:	88 23       	and	r24, r24
     acc:	81 f0       	breq	.+32     	; 0xaee <loop+0x4c>
  {
	#ifdef DEBUG
	Serial.println("NEWMENU");
     ace:	63 e4       	ldi	r22, 0x43	; 67
     ad0:	72 e0       	ldi	r23, 0x02	; 2
     ad2:	83 ef       	ldi	r24, 0xF3	; 243
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
	#endif
	tmeLastUpdated = millis();
     ada:	0e 94 1d 09 	call	0x123a	; 0x123a <millis>
     ade:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <__data_end>
     ae2:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <__data_end+0x1>
     ae6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end+0x2>
     aea:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x3>
     aee:	08 95       	ret

00000af0 <__vector_1>:
}*/

ISR(INT0_vect)//Limit Switch 1
//TODO: MESH WITH
//attachInterrupt(digitalPinToInterrupt(PIN_LIMITSWITCH_1), LimitSwitchActive, RISING);
{
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
	#ifdef DEBUG
	Serial.println("LS1 Interrupt");
     b12:	6b e4       	ldi	r22, 0x4B	; 75
     b14:	72 e0       	ldi	r23, 0x02	; 2
     b16:	83 ef       	ldi	r24, 0xF3	; 243
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
	#endif
	
	ptrsftMainDoor->cntEventIncr(1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     b26:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     b2a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6Safety12cntEventIncrEi>
	ptrsftMainDoor->emergencyOpen();
     b2e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     b32:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     b36:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6Safety13emergencyOpenEv>
	if(ptrsftMainDoor->inEventCount() >=3)
     b3a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     b3e:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     b42:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN6Safety12inEventCountEv>
		/*
		TODO:
		LORA ALARM & ERROR CODE
		*/
	}
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_2>:
ISR(INT1_vect)//Limit Switch 2
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	#ifdef DEBUG
	Serial.println("LS2 Interrupt");
     b8a:	69 e5       	ldi	r22, 0x59	; 89
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	83 ef       	ldi	r24, 0xF3	; 243
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
	#endif
	
	ptrsftMainDoor->cntEventIncr(1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     b9e:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     ba2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6Safety12cntEventIncrEi>
	ptrsftMainDoor->emergencyStall();
     ba6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     baa:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     bae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN6Safety14emergencyStallEv>
	if(ptrsftMainDoor->inEventCount() >=3)
     bb2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     bb6:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     bba:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN6Safety12inEventCountEv>
		/*
		TODO:
		LORA ALARM & ERROR CODE
		*/
	}
}
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_5>:

ISR(PCINT2_vect)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
	if(PCINT20)
	{
		#ifdef DEBUG
		Serial.println("PEC Interrupt");
     c02:	67 e6       	ldi	r22, 0x67	; 103
     c04:	72 e0       	ldi	r23, 0x02	; 2
     c06:	83 ef       	ldi	r24, 0xF3	; 243
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
		#endif
		
		if(ptrsftMainDoor->deviceStatus(DEVICE_DOORDIR)==MVT_CLOSING)
     c0e:	65 e0       	ldi	r22, 0x05	; 5
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     c16:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     c1a:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN6Safety12deviceStatusEi>
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	a1 f4       	brne	.+40     	; 0xc4a <__vector_5+0x6a>
		{
			ptrsftMainDoor->cntEventIncr(1);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     c2a:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     c2e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6Safety12cntEventIncrEi>
			ptrsftMainDoor->emergencyOpen();	
     c32:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     c36:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     c3a:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6Safety13emergencyOpenEv>
			if(ptrsftMainDoor->inEventCount() >=3)
     c3e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     c42:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     c46:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN6Safety12inEventCountEv>
				*/
			}
		}
		
	}
}
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_3>:
ISR(PCINT0_vect)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
	if(PCINT4)
	{
		#ifdef DEBUG
		Serial.println("PX1 Interrupt");
     c8e:	65 e7       	ldi	r22, 0x75	; 117
     c90:	72 e0       	ldi	r23, 0x02	; 2
     c92:	83 ef       	ldi	r24, 0xF3	; 243
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN5Print7printlnEPKc>
		#endif
			
		ptrsftMainDoor->setDevice(DEVICE_PRXUP,1);
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     ca6:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     caa:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN6Safety9setDeviceEii>
		ptrsftMainDoor->setDevice(DEVICE_DOORDIR,MVT_STALLED);
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	65 e0       	ldi	r22, 0x05	; 5
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <ptrsftMainDoor>
     cba:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <ptrsftMainDoor+0x1>
     cbe:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN6Safety9setDeviceEii>
		ptrsftMainDoor->setDevice(DEVICE_PRXDN,1);
		ptrsftMainDoor->cntEventIncr(0);
		ptrsftMainDoor->setDevice(DEVICE_DOORDIR,MVT_STALLED);
	}
		
}
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <_GLOBAL__sub_I_Temperature>:
int Light = 0;
//TODO: REPLACE VARS WITH CLASS-EQUIVALENCE
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     ce4:	67 e9       	ldi	r22, 0x97	; 151
     ce6:	72 e0       	ldi	r23, 0x02	; 2
     ce8:	8d ee       	ldi	r24, 0xED	; 237
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
String line2;
     cf0:	67 e9       	ldi	r22, 0x97	; 151
     cf2:	72 e0       	ldi	r23, 0x02	; 2
     cf4:	87 ee       	ldi	r24, 0xE7	; 231
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
char lghtstr[4];
char tempstr[4];
char sac[64];


Adafruit_RGBLCDShield disp = Adafruit_RGBLCDShield();//NOTE - CLASSES MUST BE INITIALIZED AS POINTERS. WILL NOT EXECUTE OTHERWISE
     cfc:	8a ec       	ldi	r24, 0xCA	; 202
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <_ZN21Adafruit_RGBLCDShieldC1Ev>

00000d04 <_GLOBAL__sub_D_Temperature>:
//TODO: REPLACE VARS WITH CLASS-EQUIVALENCE
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
String line2;
     d04:	87 ee       	ldi	r24, 0xE7	; 231
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN6StringD1Ev>
int Light = 0;
//TODO: REPLACE VARS WITH CLASS-EQUIVALENCE
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     d0c:	8d ee       	ldi	r24, 0xED	; 237
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <_ZN6StringD1Ev>

00000d14 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d14:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d16:	91 8d       	ldd	r25, Z+25	; 0x19
     d18:	22 8d       	ldd	r18, Z+26	; 0x1a
     d1a:	89 2f       	mov	r24, r25
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	80 5c       	subi	r24, 0xC0	; 192
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	82 1b       	sub	r24, r18
     d24:	91 09       	sbc	r25, r1
}
     d26:	8f 73       	andi	r24, 0x3F	; 63
     d28:	99 27       	eor	r25, r25
     d2a:	08 95       	ret

00000d2c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d2c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d2e:	91 8d       	ldd	r25, Z+25	; 0x19
     d30:	82 8d       	ldd	r24, Z+26	; 0x1a
     d32:	98 17       	cp	r25, r24
     d34:	31 f0       	breq	.+12     	; 0xd42 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d36:	82 8d       	ldd	r24, Z+26	; 0x1a
     d38:	e8 0f       	add	r30, r24
     d3a:	f1 1d       	adc	r31, r1
     d3c:	85 8d       	ldd	r24, Z+29	; 0x1d
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d46:	08 95       	ret

00000d48 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d48:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d4a:	91 8d       	ldd	r25, Z+25	; 0x19
     d4c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d4e:	98 17       	cp	r25, r24
     d50:	61 f0       	breq	.+24     	; 0xd6a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d52:	82 8d       	ldd	r24, Z+26	; 0x1a
     d54:	df 01       	movw	r26, r30
     d56:	a8 0f       	add	r26, r24
     d58:	b1 1d       	adc	r27, r1
     d5a:	5d 96       	adiw	r26, 0x1d	; 29
     d5c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d5e:	92 8d       	ldd	r25, Z+26	; 0x1a
     d60:	9f 5f       	subi	r25, 0xFF	; 255
     d62:	9f 73       	andi	r25, 0x3F	; 63
     d64:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d6e:	08 95       	ret

00000d70 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     d70:	fc 01       	movw	r30, r24
     d72:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     d74:	44 8d       	ldd	r20, Z+28	; 0x1c
     d76:	25 2f       	mov	r18, r21
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	84 2f       	mov	r24, r20
     d7c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     d7e:	82 1b       	sub	r24, r18
     d80:	93 0b       	sbc	r25, r19
     d82:	54 17       	cp	r21, r20
     d84:	10 f0       	brcs	.+4      	; 0xd8a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     d86:	cf 96       	adiw	r24, 0x3f	; 63
     d88:	08 95       	ret
  return tail - head - 1;
     d8a:	01 97       	sbiw	r24, 0x01	; 1
}
     d8c:	08 95       	ret

00000d8e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d8e:	87 e2       	ldi	r24, 0x27	; 39
     d90:	98 e0       	ldi	r25, 0x08	; 8
     d92:	89 2b       	or	r24, r25
     d94:	49 f0       	breq	.+18     	; 0xda8 <_Z14serialEventRunv+0x1a>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	89 2b       	or	r24, r25
     d9c:	29 f0       	breq	.+10     	; 0xda8 <_Z14serialEventRunv+0x1a>
     d9e:	0e 94 27 08 	call	0x104e	; 0x104e <_Z17Serial0_availablev>
     da2:	81 11       	cpse	r24, r1
     da4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     da8:	08 95       	ret

00000daa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     daa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     dac:	84 8d       	ldd	r24, Z+28	; 0x1c
     dae:	df 01       	movw	r26, r30
     db0:	a8 0f       	add	r26, r24
     db2:	b1 1d       	adc	r27, r1
     db4:	a3 5a       	subi	r26, 0xA3	; 163
     db6:	bf 4f       	sbci	r27, 0xFF	; 255
     db8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     dba:	84 8d       	ldd	r24, Z+28	; 0x1c
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	8f 73       	andi	r24, 0x3F	; 63
     dc2:	99 27       	eor	r25, r25
     dc4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     dc6:	a6 89       	ldd	r26, Z+22	; 0x16
     dc8:	b7 89       	ldd	r27, Z+23	; 0x17
     dca:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     dcc:	a0 89       	ldd	r26, Z+16	; 0x10
     dce:	b1 89       	ldd	r27, Z+17	; 0x11
     dd0:	8c 91       	ld	r24, X
     dd2:	83 70       	andi	r24, 0x03	; 3
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     dd8:	93 8d       	ldd	r25, Z+27	; 0x1b
     dda:	84 8d       	ldd	r24, Z+28	; 0x1c
     ddc:	98 13       	cpse	r25, r24
     dde:	06 c0       	rjmp	.+12     	; 0xdec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     de0:	02 88       	ldd	r0, Z+18	; 0x12
     de2:	f3 89       	ldd	r31, Z+19	; 0x13
     de4:	e0 2d       	mov	r30, r0
     de6:	80 81       	ld	r24, Z
     de8:	8f 7d       	andi	r24, 0xDF	; 223
     dea:	80 83       	st	Z, r24
     dec:	08 95       	ret

00000dee <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ec 01       	movw	r28, r24
  _written = true;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e00:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e02:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e04:	98 13       	cpse	r25, r24
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <_ZN14HardwareSerial5writeEh+0x24>
     e08:	e8 89       	ldd	r30, Y+16	; 0x10
     e0a:	f9 89       	ldd	r31, Y+17	; 0x11
     e0c:	80 81       	ld	r24, Z
     e0e:	85 fd       	sbrc	r24, 5
     e10:	26 c0       	rjmp	.+76     	; 0xe5e <_ZN14HardwareSerial5writeEh+0x70>
     e12:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e14:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	0f 5f       	subi	r16, 0xFF	; 255
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	0f 73       	andi	r16, 0x3F	; 63
     e1e:	11 27       	eor	r17, r17
     e20:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e22:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e24:	e8 12       	cpse	r14, r24
     e26:	0c c0       	rjmp	.+24     	; 0xe40 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	07 fc       	sbrc	r0, 7
     e2c:	fa cf       	rjmp	.-12     	; 0xe22 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e2e:	e8 89       	ldd	r30, Y+16	; 0x10
     e30:	f9 89       	ldd	r31, Y+17	; 0x11
     e32:	80 81       	ld	r24, Z
     e34:	85 ff       	sbrs	r24, 5
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e3e:	f1 cf       	rjmp	.-30     	; 0xe22 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e42:	fe 01       	movw	r30, r28
     e44:	e8 0f       	add	r30, r24
     e46:	f1 1d       	adc	r31, r1
     e48:	e3 5a       	subi	r30, 0xA3	; 163
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e4e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e50:	f8 94       	cli
    _tx_buffer_head = i;
     e52:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     e54:	ea 89       	ldd	r30, Y+18	; 0x12
     e56:	fb 89       	ldd	r31, Y+19	; 0x13
     e58:	80 81       	ld	r24, Z
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e5e:	9f b7       	in	r25, 0x3f	; 63
     e60:	f8 94       	cli
      *_udr = c;
     e62:	ee 89       	ldd	r30, Y+22	; 0x16
     e64:	ff 89       	ldd	r31, Y+23	; 0x17
     e66:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e68:	e8 89       	ldd	r30, Y+16	; 0x10
     e6a:	f9 89       	ldd	r31, Y+17	; 0x11
     e6c:	80 81       	ld	r24, Z
     e6e:	83 70       	andi	r24, 0x03	; 3
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e74:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     e8e:	88 8d       	ldd	r24, Y+24	; 0x18
     e90:	88 23       	and	r24, r24
     e92:	c9 f0       	breq	.+50     	; 0xec6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e94:	ea 89       	ldd	r30, Y+18	; 0x12
     e96:	fb 89       	ldd	r31, Y+19	; 0x13
     e98:	80 81       	ld	r24, Z
     e9a:	85 fd       	sbrc	r24, 5
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <_ZN14HardwareSerial5flushEv+0x20>
     e9e:	a8 89       	ldd	r26, Y+16	; 0x10
     ea0:	b9 89       	ldd	r27, Y+17	; 0x11
     ea2:	8c 91       	ld	r24, X
     ea4:	86 fd       	sbrc	r24, 6
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	07 fc       	sbrc	r0, 7
     eac:	f5 cf       	rjmp	.-22     	; 0xe98 <_ZN14HardwareSerial5flushEv+0x10>
     eae:	80 81       	ld	r24, Z
     eb0:	85 ff       	sbrs	r24, 5
     eb2:	f2 cf       	rjmp	.-28     	; 0xe98 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     eb4:	a8 89       	ldd	r26, Y+16	; 0x10
     eb6:	b9 89       	ldd	r27, Y+17	; 0x11
     eb8:	8c 91       	ld	r24, X
     eba:	85 ff       	sbrs	r24, 5
     ebc:	ed cf       	rjmp	.-38     	; 0xe98 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ebe:	ce 01       	movw	r24, r28
     ec0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ec4:	e7 cf       	rjmp	.-50     	; 0xe94 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
     edc:	6a 01       	movw	r12, r20
     ede:	7b 01       	movw	r14, r22
     ee0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ee2:	e8 89       	ldd	r30, Y+16	; 0x10
     ee4:	f9 89       	ldd	r31, Y+17	; 0x11
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     eea:	41 15       	cp	r20, r1
     eec:	51 4e       	sbci	r21, 0xE1	; 225
     eee:	61 05       	cpc	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	b1 f0       	breq	.+44     	; 0xf20 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	79 e0       	ldi	r23, 0x09	; 9
     ef8:	8d e3       	ldi	r24, 0x3D	; 61
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	a7 01       	movw	r20, r14
     efe:	96 01       	movw	r18, r12
     f00:	0e 94 47 14 	call	0x288e	; 0x288e <__udivmodsi4>
     f04:	da 01       	movw	r26, r20
     f06:	c9 01       	movw	r24, r18
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	a1 09       	sbc	r26, r1
     f0c:	b1 09       	sbc	r27, r1
     f0e:	b6 95       	lsr	r27
     f10:	a7 95       	ror	r26
     f12:	97 95       	ror	r25
     f14:	87 95       	ror	r24
     f16:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f18:	21 15       	cp	r18, r1
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	38 07       	cpc	r19, r24
     f1e:	a8 f0       	brcs	.+42     	; 0xf4a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     f20:	e8 89       	ldd	r30, Y+16	; 0x10
     f22:	f9 89       	ldd	r31, Y+17	; 0x11
     f24:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f26:	60 e8       	ldi	r22, 0x80	; 128
     f28:	74 e8       	ldi	r23, 0x84	; 132
     f2a:	8e e1       	ldi	r24, 0x1E	; 30
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a7 01       	movw	r20, r14
     f30:	96 01       	movw	r18, r12
     f32:	0e 94 47 14 	call	0x288e	; 0x288e <__udivmodsi4>
     f36:	da 01       	movw	r26, r20
     f38:	c9 01       	movw	r24, r18
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	a1 09       	sbc	r26, r1
     f3e:	b1 09       	sbc	r27, r1
     f40:	b6 95       	lsr	r27
     f42:	a7 95       	ror	r26
     f44:	97 95       	ror	r25
     f46:	87 95       	ror	r24
     f48:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f4a:	ec 85       	ldd	r30, Y+12	; 0x0c
     f4c:	fd 85       	ldd	r31, Y+13	; 0x0d
     f4e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f50:	ee 85       	ldd	r30, Y+14	; 0x0e
     f52:	ff 85       	ldd	r31, Y+15	; 0x0f
     f54:	20 83       	st	Z, r18

  _written = false;
     f56:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f58:	ec 89       	ldd	r30, Y+20	; 0x14
     f5a:	fd 89       	ldd	r31, Y+21	; 0x15
     f5c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f5e:	ea 89       	ldd	r30, Y+18	; 0x12
     f60:	fb 89       	ldd	r31, Y+19	; 0x13
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f68:	ea 89       	ldd	r30, Y+18	; 0x12
     f6a:	fb 89       	ldd	r31, Y+19	; 0x13
     f6c:	80 81       	ld	r24, Z
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f72:	ea 89       	ldd	r30, Y+18	; 0x12
     f74:	fb 89       	ldd	r31, Y+19	; 0x13
     f76:	80 81       	ld	r24, Z
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     f7c:	ea 89       	ldd	r30, Y+18	; 0x12
     f7e:	fb 89       	ldd	r31, Y+19	; 0x13
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	80 83       	st	Z, r24
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	08 95       	ret

00000f96 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     f9c:	08 95       	ret

00000f9e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fb2:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <Serial+0x10>
     fb6:	f0 91 04 03 	lds	r31, 0x0304	; 0x800304 <Serial+0x11>
     fba:	80 81       	ld	r24, Z
     fbc:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Serial+0x16>
     fc0:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Serial+0x17>
     fc4:	82 fd       	sbrc	r24, 2
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     fc8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     fca:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <Serial+0x19>
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     fd2:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <Serial+0x1a>
     fd6:	82 17       	cp	r24, r18
     fd8:	51 f0       	breq	.+20     	; 0xfee <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     fda:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <Serial+0x19>
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	ed 50       	subi	r30, 0x0D	; 13
     fe2:	fd 4f       	sbci	r31, 0xFD	; 253
     fe4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     fe6:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <Serial+0x19>
     fea:	01 c0       	rjmp	.+2      	; 0xfee <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     fec:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1024:	83 ef       	ldi	r24, 0xF3	; 243
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    104e:	83 ef       	ldi	r24, 0xF3	; 243
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN14HardwareSerial9availableEv>
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	89 2b       	or	r24, r25
    105a:	09 f4       	brne	.+2      	; 0x105e <_Z17Serial0_availablev+0x10>
    105c:	20 e0       	ldi	r18, 0x00	; 0
}
    105e:	82 2f       	mov	r24, r18
    1060:	08 95       	ret

00001062 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1062:	e3 ef       	ldi	r30, 0xF3	; 243
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	13 82       	std	Z+3, r1	; 0x03
    1068:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    106a:	88 ee       	ldi	r24, 0xE8	; 232
    106c:	93 e0       	ldi	r25, 0x03	; 3
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	84 83       	std	Z+4, r24	; 0x04
    1074:	95 83       	std	Z+5, r25	; 0x05
    1076:	a6 83       	std	Z+6, r26	; 0x06
    1078:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    107a:	87 e8       	ldi	r24, 0x87	; 135
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	85 ec       	ldi	r24, 0xC5	; 197
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	95 87       	std	Z+13, r25	; 0x0d
    1088:	84 87       	std	Z+12, r24	; 0x0c
    108a:	84 ec       	ldi	r24, 0xC4	; 196
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	97 87       	std	Z+15, r25	; 0x0f
    1090:	86 87       	std	Z+14, r24	; 0x0e
    1092:	80 ec       	ldi	r24, 0xC0	; 192
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	91 8b       	std	Z+17, r25	; 0x11
    1098:	80 8b       	std	Z+16, r24	; 0x10
    109a:	81 ec       	ldi	r24, 0xC1	; 193
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	93 8b       	std	Z+19, r25	; 0x13
    10a0:	82 8b       	std	Z+18, r24	; 0x12
    10a2:	82 ec       	ldi	r24, 0xC2	; 194
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	95 8b       	std	Z+21, r25	; 0x15
    10a8:	84 8b       	std	Z+20, r24	; 0x14
    10aa:	86 ec       	ldi	r24, 0xC6	; 198
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	97 8b       	std	Z+23, r25	; 0x17
    10b0:	86 8b       	std	Z+22, r24	; 0x16
    10b2:	11 8e       	std	Z+25, r1	; 0x19
    10b4:	12 8e       	std	Z+26, r1	; 0x1a
    10b6:	13 8e       	std	Z+27, r1	; 0x1b
    10b8:	14 8e       	std	Z+28, r1	; 0x1c
    10ba:	08 95       	ret

000010bc <initVariant>:
    10bc:	08 95       	ret

000010be <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    10be:	0e 94 95 09 	call	0x132a	; 0x132a <init>

	initVariant();
    10c2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    10c6:	0e 94 b6 04 	call	0x96c	; 0x96c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    10ca:	c7 ec       	ldi	r28, 0xC7	; 199
    10cc:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    10ce:	0e 94 51 05 	call	0xaa2	; 0xaa2 <loop>
		if (serialEventRun) serialEventRun();
    10d2:	20 97       	sbiw	r28, 0x00	; 0
    10d4:	e1 f3       	breq	.-8      	; 0x10ce <main+0x10>
    10d6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z14serialEventRunv>
    10da:	f9 cf       	rjmp	.-14     	; 0x10ce <main+0x10>

000010dc <_Znwj>:
    10dc:	0c 94 6f 14 	jmp	0x28de	; 0x28de <malloc>

000010e0 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	6c 01       	movw	r12, r24
    10f2:	7a 01       	movw	r14, r20
    10f4:	8b 01       	movw	r16, r22
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
    10f8:	d0 e0       	ldi	r29, 0x00	; 0
    10fa:	ce 15       	cp	r28, r14
    10fc:	df 05       	cpc	r29, r15
    10fe:	81 f0       	breq	.+32     	; 0x1120 <_ZN5Print5writeEPKhj+0x40>
    1100:	d8 01       	movw	r26, r16
    1102:	6d 91       	ld	r22, X+
    1104:	8d 01       	movw	r16, r26
    1106:	d6 01       	movw	r26, r12
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	01 90       	ld	r0, Z+
    110e:	f0 81       	ld	r31, Z
    1110:	e0 2d       	mov	r30, r0
    1112:	c6 01       	movw	r24, r12
    1114:	09 95       	icall
    1116:	89 2b       	or	r24, r25
    1118:	11 f0       	breq	.+4      	; 0x111e <_ZN5Print5writeEPKhj+0x3e>
    111a:	21 96       	adiw	r28, 0x01	; 1
    111c:	ee cf       	rjmp	.-36     	; 0x10fa <_ZN5Print5writeEPKhj+0x1a>
    111e:	7e 01       	movw	r14, r28
    1120:	c7 01       	movw	r24, r14
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	08 95       	ret

00001134 <_ZN5Print5writeEPKc>:
    1134:	61 15       	cp	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	79 f0       	breq	.+30     	; 0x1158 <_ZN5Print5writeEPKc+0x24>
    113a:	fb 01       	movw	r30, r22
    113c:	01 90       	ld	r0, Z+
    113e:	00 20       	and	r0, r0
    1140:	e9 f7       	brne	.-6      	; 0x113c <_ZN5Print5writeEPKc+0x8>
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	af 01       	movw	r20, r30
    1146:	46 1b       	sub	r20, r22
    1148:	57 0b       	sbc	r21, r23
    114a:	dc 01       	movw	r26, r24
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	02 80       	ldd	r0, Z+2	; 0x02
    1152:	f3 81       	ldd	r31, Z+3	; 0x03
    1154:	e0 2d       	mov	r30, r0
    1156:	09 94       	ijmp
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	08 95       	ret

0000115e <_ZN5Print5printERK6String>:
    115e:	db 01       	movw	r26, r22
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 91       	ld	r20, X+
    1164:	5c 91       	ld	r21, X
    1166:	15 97       	sbiw	r26, 0x05	; 5
    1168:	6d 91       	ld	r22, X+
    116a:	7c 91       	ld	r23, X
    116c:	dc 01       	movw	r26, r24
    116e:	ed 91       	ld	r30, X+
    1170:	fc 91       	ld	r31, X
    1172:	02 80       	ldd	r0, Z+2	; 0x02
    1174:	f3 81       	ldd	r31, Z+3	; 0x03
    1176:	e0 2d       	mov	r30, r0
    1178:	09 94       	ijmp

0000117a <_ZN5Print7printlnEv>:
    117a:	65 e9       	ldi	r22, 0x95	; 149
    117c:	72 e0       	ldi	r23, 0x02	; 2
    117e:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <_ZN5Print5writeEPKc>

00001182 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    118c:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN5Print5writeEPKc>
    1190:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1192:	ce 01       	movw	r24, r28
    1194:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print7printlnEv>
  return n;
}
    1198:	80 0f       	add	r24, r16
    119a:	91 1f       	adc	r25, r17
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    11bc:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <timer0_millis>
    11c0:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <timer0_millis+0x1>
    11c4:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <timer0_millis+0x2>
    11c8:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    11cc:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    11d0:	23 e0       	ldi	r18, 0x03	; 3
    11d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    11d4:	2d 37       	cpi	r18, 0x7D	; 125
    11d6:	20 f4       	brcc	.+8      	; 0x11e0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	a1 1d       	adc	r26, r1
    11dc:	b1 1d       	adc	r27, r1
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    11e0:	26 e8       	ldi	r18, 0x86	; 134
    11e2:	23 0f       	add	r18, r19
		m += 1;
    11e4:	02 96       	adiw	r24, 0x02	; 2
    11e6:	a1 1d       	adc	r26, r1
    11e8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    11ea:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <timer0_fract>
	timer0_millis = m;
    11ee:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <timer0_millis>
    11f2:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <timer0_millis+0x1>
    11f6:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <timer0_millis+0x2>
    11fa:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <timer0_millis+0x3>
	timer0_overflow_count++;
    11fe:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <timer0_overflow_count>
    1202:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <timer0_overflow_count+0x1>
    1206:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <timer0_overflow_count+0x2>
    120a:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <timer0_overflow_count+0x3>
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	a1 1d       	adc	r26, r1
    1212:	b1 1d       	adc	r27, r1
    1214:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <timer0_overflow_count>
    1218:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <timer0_overflow_count+0x1>
    121c:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <timer0_overflow_count+0x2>
    1220:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <timer0_overflow_count+0x3>
}
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    123a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    123c:	f8 94       	cli
	m = timer0_millis;
    123e:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <timer0_millis>
    1242:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <timer0_millis+0x1>
    1246:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer0_millis+0x2>
    124a:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer0_millis+0x3>
	SREG = oldSREG;
    124e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1250:	08 95       	ret

00001252 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1252:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1254:	f8 94       	cli
	m = timer0_overflow_count;
    1256:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <timer0_overflow_count>
    125a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <timer0_overflow_count+0x1>
    125e:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <timer0_overflow_count+0x2>
    1262:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1266:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1268:	a8 9b       	sbis	0x15, 0	; 21
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <micros+0x24>
    126c:	2f 3f       	cpi	r18, 0xFF	; 255
    126e:	19 f0       	breq	.+6      	; 0x1276 <micros+0x24>
		m++;
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	a1 1d       	adc	r26, r1
    1274:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1276:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1278:	ba 2f       	mov	r27, r26
    127a:	a9 2f       	mov	r26, r25
    127c:	98 2f       	mov	r25, r24
    127e:	88 27       	eor	r24, r24
    1280:	82 0f       	add	r24, r18
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	b1 1d       	adc	r27, r1
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	42 e0       	ldi	r20, 0x02	; 2
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	4a 95       	dec	r20
    1298:	d1 f7       	brne	.-12     	; 0x128e <micros+0x3c>
}
    129a:	08 95       	ret

0000129c <delay>:

void delay(unsigned long ms)
{
    129c:	8f 92       	push	r8
    129e:	9f 92       	push	r9
    12a0:	af 92       	push	r10
    12a2:	bf 92       	push	r11
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	6b 01       	movw	r12, r22
    12ae:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    12b0:	0e 94 29 09 	call	0x1252	; 0x1252 <micros>
    12b4:	4b 01       	movw	r8, r22
    12b6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    12b8:	c1 14       	cp	r12, r1
    12ba:	d1 04       	cpc	r13, r1
    12bc:	e1 04       	cpc	r14, r1
    12be:	f1 04       	cpc	r15, r1
    12c0:	01 f1       	breq	.+64     	; 0x1302 <delay+0x66>
		yield();
    12c2:	0e 94 1b 12 	call	0x2436	; 0x2436 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    12c6:	0e 94 29 09 	call	0x1252	; 0x1252 <micros>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	88 19       	sub	r24, r8
    12d0:	99 09       	sbc	r25, r9
    12d2:	aa 09       	sbc	r26, r10
    12d4:	bb 09       	sbc	r27, r11
    12d6:	88 3e       	cpi	r24, 0xE8	; 232
    12d8:	93 40       	sbci	r25, 0x03	; 3
    12da:	a1 05       	cpc	r26, r1
    12dc:	b1 05       	cpc	r27, r1
    12de:	60 f3       	brcs	.-40     	; 0x12b8 <delay+0x1c>
			ms--;
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	c2 1a       	sub	r12, r18
    12e4:	d1 08       	sbc	r13, r1
    12e6:	e1 08       	sbc	r14, r1
    12e8:	f1 08       	sbc	r15, r1
			start += 1000;
    12ea:	88 ee       	ldi	r24, 0xE8	; 232
    12ec:	88 0e       	add	r8, r24
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	98 1e       	adc	r9, r24
    12f2:	a1 1c       	adc	r10, r1
    12f4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    12f6:	c1 14       	cp	r12, r1
    12f8:	d1 04       	cpc	r13, r1
    12fa:	e1 04       	cpc	r14, r1
    12fc:	f1 04       	cpc	r15, r1
    12fe:	19 f7       	brne	.-58     	; 0x12c6 <delay+0x2a>
    1300:	db cf       	rjmp	.-74     	; 0x12b8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	9f 90       	pop	r9
    1310:	8f 90       	pop	r8
    1312:	08 95       	ret

00001314 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	91 05       	cpc	r25, r1
    1318:	38 f0       	brcs	.+14     	; 0x1328 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1322:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <delayMicroseconds+0x10>
    1328:	08 95       	ret

0000132a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    132a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    132c:	84 b5       	in	r24, 0x24	; 36
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1332:	84 b5       	in	r24, 0x24	; 36
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1338:	85 b5       	in	r24, 0x25	; 37
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    133e:	85 b5       	in	r24, 0x25	; 37
    1340:	81 60       	ori	r24, 0x01	; 1
    1342:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1344:	ee e6       	ldi	r30, 0x6E	; 110
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    134e:	e1 e8       	ldi	r30, 0x81	; 129
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1354:	80 81       	ld	r24, Z
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    135a:	80 81       	ld	r24, Z
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    136a:	e1 eb       	ldi	r30, 0xB1	; 177
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	84 60       	ori	r24, 0x04	; 4
    1372:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1374:	e0 eb       	ldi	r30, 0xB0	; 176
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    137e:	ea e7       	ldi	r30, 0x7A	; 122
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	84 60       	ori	r24, 0x04	; 4
    1386:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1388:	80 81       	ld	r24, Z
    138a:	82 60       	ori	r24, 0x02	; 2
    138c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    138e:	80 81       	ld	r24, Z
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1394:	80 81       	ld	r24, Z
    1396:	80 68       	ori	r24, 0x80	; 128
    1398:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    139a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    139e:	08 95       	ret

000013a0 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    13a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <analog_reference>
    13a4:	08 95       	ret

000013a6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	81 f0       	breq	.+32     	; 0x13ca <turnOffPWM+0x24>
    13aa:	28 f4       	brcc	.+10     	; 0x13b6 <turnOffPWM+0x10>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	99 f0       	breq	.+38     	; 0x13d6 <turnOffPWM+0x30>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	a1 f0       	breq	.+40     	; 0x13dc <turnOffPWM+0x36>
    13b4:	08 95       	ret
    13b6:	87 30       	cpi	r24, 0x07	; 7
    13b8:	a9 f0       	breq	.+42     	; 0x13e4 <turnOffPWM+0x3e>
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	b9 f0       	breq	.+46     	; 0x13ec <turnOffPWM+0x46>
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	d1 f4       	brne	.+52     	; 0x13f6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13c6:	8f 7d       	andi	r24, 0xDF	; 223
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13ce:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13d4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13d6:	84 b5       	in	r24, 0x24	; 36
    13d8:	8f 77       	andi	r24, 0x7F	; 127
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13dc:	84 b5       	in	r24, 0x24	; 36
    13de:	8f 7d       	andi	r24, 0xDF	; 223
    13e0:	84 bd       	out	0x24, r24	; 36
    13e2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13e8:	8f 77       	andi	r24, 0x7F	; 127
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13ec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13f0:	8f 7d       	andi	r24, 0xDF	; 223
    13f2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13f6:	08 95       	ret

000013f8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	e4 58       	subi	r30, 0x84	; 132
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1406:	fc 01       	movw	r30, r24
    1408:	e0 57       	subi	r30, 0x70	; 112
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    140e:	88 23       	and	r24, r24
    1410:	61 f1       	breq	.+88     	; 0x146a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	fc 01       	movw	r30, r24
    141a:	e8 54       	subi	r30, 0x48	; 72
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	c5 91       	lpm	r28, Z+
    1420:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1422:	fc 01       	movw	r30, r24
    1424:	e2 55       	subi	r30, 0x52	; 82
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	a5 91       	lpm	r26, Z+
    142a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    142c:	61 11       	cpse	r22, r1
    142e:	09 c0       	rjmp	.+18     	; 0x1442 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1430:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1432:	f8 94       	cli
		*reg &= ~bit;
    1434:	88 81       	ld	r24, Y
    1436:	20 95       	com	r18
    1438:	82 23       	and	r24, r18
    143a:	88 83       	st	Y, r24
		*out &= ~bit;
    143c:	ec 91       	ld	r30, X
    143e:	2e 23       	and	r18, r30
    1440:	0b c0       	rjmp	.+22     	; 0x1458 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1442:	62 30       	cpi	r22, 0x02	; 2
    1444:	61 f4       	brne	.+24     	; 0x145e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1446:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1448:	f8 94       	cli
		*reg &= ~bit;
    144a:	88 81       	ld	r24, Y
    144c:	32 2f       	mov	r19, r18
    144e:	30 95       	com	r19
    1450:	83 23       	and	r24, r19
    1452:	88 83       	st	Y, r24
		*out |= bit;
    1454:	ec 91       	ld	r30, X
    1456:	2e 2b       	or	r18, r30
    1458:	2c 93       	st	X, r18
		SREG = oldSREG;
    145a:	9f bf       	out	0x3f, r25	; 63
    145c:	06 c0       	rjmp	.+12     	; 0x146a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    145e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1460:	f8 94       	cli
		*reg |= bit;
    1462:	e8 81       	ld	r30, Y
    1464:	2e 2b       	or	r18, r30
    1466:	28 83       	st	Y, r18
		SREG = oldSREG;
    1468:	8f bf       	out	0x3f, r24	; 63
	}
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	f9 01       	movw	r30, r18
    147c:	e8 59       	subi	r30, 0x98	; 152
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1482:	f9 01       	movw	r30, r18
    1484:	e4 58       	subi	r30, 0x84	; 132
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    148a:	f9 01       	movw	r30, r18
    148c:	e0 57       	subi	r30, 0x70	; 112
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1492:	cc 23       	and	r28, r28
    1494:	c1 f0       	breq	.+48     	; 0x14c6 <digitalWrite+0x56>
    1496:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1498:	81 11       	cpse	r24, r1
    149a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <turnOffPWM>

	out = portOutputRegister(port);
    149e:	ec 2f       	mov	r30, r28
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	e2 55       	subi	r30, 0x52	; 82
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	a5 91       	lpm	r26, Z+
    14ac:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    14ae:	9f b7       	in	r25, 0x3f	; 63
	cli();
    14b0:	f8 94       	cli

	if (val == LOW) {
    14b2:	11 11       	cpse	r17, r1
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <digitalWrite+0x4e>
		*out &= ~bit;
    14b6:	8c 91       	ld	r24, X
    14b8:	d0 95       	com	r29
    14ba:	d8 23       	and	r29, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    14be:	ec 91       	ld	r30, X
    14c0:	de 2b       	or	r29, r30
    14c2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    14c4:	9f bf       	out	0x3f, r25	; 63
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	08 95       	ret

000014ce <digitalRead>:

int digitalRead(uint8_t pin)
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	e8 59       	subi	r30, 0x98	; 152
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    14de:	f9 01       	movw	r30, r18
    14e0:	e4 58       	subi	r30, 0x84	; 132
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    14e6:	f9 01       	movw	r30, r18
    14e8:	e0 57       	subi	r30, 0x70	; 112
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    14ee:	cc 23       	and	r28, r28
    14f0:	91 f0       	breq	.+36     	; 0x1516 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    14f2:	81 11       	cpse	r24, r1
    14f4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    14f8:	ec 2f       	mov	r30, r28
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	ec 55       	subi	r30, 0x5C	; 92
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	a5 91       	lpm	r26, Z+
    1506:	b4 91       	lpm	r27, Z
    1508:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    150a:	ed 23       	and	r30, r29
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	21 f4       	brne	.+8      	; 0x151a <digitalRead+0x4c>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <digitalRead+0x4c>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    1520:	08 95       	ret

00001522 <_ZN6StringD1Ev>:
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <free>

0000152c <_ZN6String10invalidateEv>:
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	ec 01       	movw	r28, r24
    1532:	88 81       	ld	r24, Y
    1534:	99 81       	ldd	r25, Y+1	; 0x01
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	11 f0       	breq	.+4      	; 0x153e <_ZN6String10invalidateEv+0x12>
    153a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <free>
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	18 82       	st	Y, r1
    1542:	1d 82       	std	Y+5, r1	; 0x05
    1544:	1c 82       	std	Y+4, r1	; 0x04
    1546:	1b 82       	std	Y+3, r1	; 0x03
    1548:	1a 82       	std	Y+2, r1	; 0x02
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <_ZN6String12changeBufferEj>:
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
    155a:	8b 01       	movw	r16, r22
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	88 81       	ld	r24, Y
    1562:	99 81       	ldd	r25, Y+1	; 0x01
    1564:	0e 94 90 15 	call	0x2b20	; 0x2b20 <realloc>
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	31 f0       	breq	.+12     	; 0x1578 <_ZN6String12changeBufferEj+0x28>
    156c:	99 83       	std	Y+1, r25	; 0x01
    156e:	88 83       	st	Y, r24
    1570:	1b 83       	std	Y+3, r17	; 0x03
    1572:	0a 83       	std	Y+2, r16	; 0x02
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	01 c0       	rjmp	.+2      	; 0x157a <_ZN6String12changeBufferEj+0x2a>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <_ZN6String7reserveEj>:
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	88 81       	ld	r24, Y
    158c:	99 81       	ldd	r25, Y+1	; 0x01
    158e:	89 2b       	or	r24, r25
    1590:	29 f0       	breq	.+10     	; 0x159c <_ZN6String7reserveEj+0x18>
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	86 17       	cp	r24, r22
    1598:	97 07       	cpc	r25, r23
    159a:	60 f4       	brcc	.+24     	; 0x15b4 <_ZN6String7reserveEj+0x30>
    159c:	ce 01       	movw	r24, r28
    159e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN6String12changeBufferEj>
    15a2:	88 23       	and	r24, r24
    15a4:	41 f0       	breq	.+16     	; 0x15b6 <_ZN6String7reserveEj+0x32>
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	89 2b       	or	r24, r25
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <_ZN6String7reserveEj+0x30>
    15ae:	e8 81       	ld	r30, Y
    15b0:	f9 81       	ldd	r31, Y+1	; 0x01
    15b2:	10 82       	st	Z, r1
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <_ZN6String4copyEPKcj>:
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	7b 01       	movw	r14, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	ba 01       	movw	r22, r20
    15d0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN6String7reserveEj>
    15d4:	81 11       	cpse	r24, r1
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <_ZN6String4copyEPKcj+0x24>
    15d8:	ce 01       	movw	r24, r28
    15da:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN6String10invalidateEv>
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <_ZN6String4copyEPKcj+0x32>
    15e0:	1d 83       	std	Y+5, r17	; 0x05
    15e2:	0c 83       	std	Y+4, r16	; 0x04
    15e4:	b7 01       	movw	r22, r14
    15e6:	88 81       	ld	r24, Y
    15e8:	99 81       	ldd	r25, Y+1	; 0x01
    15ea:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <strcpy>
    15ee:	ce 01       	movw	r24, r28
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	08 95       	ret

000015fe <_ZN6StringC1EPKc>:
    15fe:	fc 01       	movw	r30, r24
    1600:	11 82       	std	Z+1, r1	; 0x01
    1602:	10 82       	st	Z, r1
    1604:	13 82       	std	Z+3, r1	; 0x03
    1606:	12 82       	std	Z+2, r1	; 0x02
    1608:	15 82       	std	Z+5, r1	; 0x05
    160a:	14 82       	std	Z+4, r1	; 0x04
    160c:	61 15       	cp	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	51 f0       	breq	.+20     	; 0x1626 <_ZN6StringC1EPKc+0x28>
    1612:	fb 01       	movw	r30, r22
    1614:	01 90       	ld	r0, Z+
    1616:	00 20       	and	r0, r0
    1618:	e9 f7       	brne	.-6      	; 0x1614 <_ZN6StringC1EPKc+0x16>
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	af 01       	movw	r20, r30
    161e:	46 1b       	sub	r20, r22
    1620:	57 0b       	sbc	r21, r23
    1622:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN6String4copyEPKcj>
    1626:	08 95       	ret

00001628 <_ZN6String4moveERS_>:
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	8c 01       	movw	r16, r24
    1632:	eb 01       	movw	r28, r22
    1634:	fc 01       	movw	r30, r24
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	d1 f0       	breq	.+52     	; 0x1672 <_ZN6String4moveERS_+0x4a>
    163e:	68 81       	ld	r22, Y
    1640:	79 81       	ldd	r23, Y+1	; 0x01
    1642:	61 15       	cp	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	99 f0       	breq	.+38     	; 0x166e <_ZN6String4moveERS_+0x46>
    1648:	20 e9       	ldi	r18, 0x90	; 144
    164a:	3a e0       	ldi	r19, 0x0A	; 10
    164c:	23 2b       	or	r18, r19
    164e:	79 f0       	breq	.+30     	; 0x166e <_ZN6String4moveERS_+0x46>
    1650:	42 81       	ldd	r20, Z+2	; 0x02
    1652:	53 81       	ldd	r21, Z+3	; 0x03
    1654:	2c 81       	ldd	r18, Y+4	; 0x04
    1656:	3d 81       	ldd	r19, Y+5	; 0x05
    1658:	42 17       	cp	r20, r18
    165a:	53 07       	cpc	r21, r19
    165c:	40 f0       	brcs	.+16     	; 0x166e <_ZN6String4moveERS_+0x46>
    165e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <strcpy>
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	f8 01       	movw	r30, r16
    1668:	95 83       	std	Z+5, r25	; 0x05
    166a:	84 83       	std	Z+4, r24	; 0x04
    166c:	13 c0       	rjmp	.+38     	; 0x1694 <_ZN6String4moveERS_+0x6c>
    166e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <free>
    1672:	88 81       	ld	r24, Y
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	f8 01       	movw	r30, r16
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	93 83       	std	Z+3, r25	; 0x03
    1682:	82 83       	std	Z+2, r24	; 0x02
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	95 83       	std	Z+5, r25	; 0x05
    168a:	84 83       	std	Z+4, r24	; 0x04
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	18 82       	st	Y, r1
    1690:	1b 82       	std	Y+3, r1	; 0x03
    1692:	1a 82       	std	Y+2, r1	; 0x02
    1694:	1d 82       	std	Y+5, r1	; 0x05
    1696:	1c 82       	std	Y+4, r1	; 0x04
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <_ZN6StringaSERKS_>:
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	ec 01       	movw	r28, r24
    16a8:	fb 01       	movw	r30, r22
    16aa:	86 17       	cp	r24, r22
    16ac:	97 07       	cpc	r25, r23
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <_ZN6StringaSERKS_+0x26>
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	61 15       	cp	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	29 f0       	breq	.+10     	; 0x16c4 <_ZN6StringaSERKS_+0x22>
    16ba:	44 81       	ldd	r20, Z+4	; 0x04
    16bc:	55 81       	ldd	r21, Z+5	; 0x05
    16be:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN6String4copyEPKcj>
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <_ZN6StringaSERKS_+0x26>
    16c4:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN6String10invalidateEv>
    16c8:	ce 01       	movw	r24, r28
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <_ZN6StringC1ERKS_>:
    16d0:	fc 01       	movw	r30, r24
    16d2:	11 82       	std	Z+1, r1	; 0x01
    16d4:	10 82       	st	Z, r1
    16d6:	13 82       	std	Z+3, r1	; 0x03
    16d8:	12 82       	std	Z+2, r1	; 0x02
    16da:	15 82       	std	Z+5, r1	; 0x05
    16dc:	14 82       	std	Z+4, r1	; 0x04
    16de:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <_ZN6StringaSERKS_>

000016e2 <_ZN6StringaSEOS_>:
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	ec 01       	movw	r28, r24
    16e8:	86 17       	cp	r24, r22
    16ea:	97 07       	cpc	r25, r23
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <_ZN6StringaSEOS_+0x10>
    16ee:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN6String4moveERS_>
    16f2:	ce 01       	movw	r24, r28
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <_ZN6StringaSEPKc>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
    1700:	61 15       	cp	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	59 f0       	breq	.+22     	; 0x171c <_ZN6StringaSEPKc+0x22>
    1706:	fb 01       	movw	r30, r22
    1708:	01 90       	ld	r0, Z+
    170a:	00 20       	and	r0, r0
    170c:	e9 f7       	brne	.-6      	; 0x1708 <_ZN6StringaSEPKc+0xe>
    170e:	31 97       	sbiw	r30, 0x01	; 1
    1710:	af 01       	movw	r20, r30
    1712:	46 1b       	sub	r20, r22
    1714:	57 0b       	sbc	r21, r23
    1716:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN6String4copyEPKcj>
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <_ZN6StringaSEPKc+0x26>
    171c:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN6String10invalidateEv>
    1720:	ce 01       	movw	r24, r28
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	7c 01       	movw	r14, r24
    173c:	6b 01       	movw	r12, r22
    173e:	8a 01       	movw	r16, r20
    1740:	e9 01       	movw	r28, r18
	if (left > right) {
    1742:	24 17       	cp	r18, r20
    1744:	35 07       	cpc	r19, r21
    1746:	20 f4       	brcc	.+8      	; 0x1750 <_ZNK6String9substringEjj+0x28>
    1748:	81 2f       	mov	r24, r17
    174a:	89 01       	movw	r16, r18
    174c:	c4 2f       	mov	r28, r20
    174e:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1750:	67 e9       	ldi	r22, 0x97	; 151
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	c7 01       	movw	r24, r14
    1756:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN6StringC1EPKc>
	if (left >= len) return out;
    175a:	d6 01       	movw	r26, r12
    175c:	14 96       	adiw	r26, 0x04	; 4
    175e:	8d 91       	ld	r24, X+
    1760:	9c 91       	ld	r25, X
    1762:	15 97       	sbiw	r26, 0x05	; 5
    1764:	08 17       	cp	r16, r24
    1766:	19 07       	cpc	r17, r25
    1768:	c8 f4       	brcc	.+50     	; 0x179c <_ZNK6String9substringEjj+0x74>
    176a:	8c 17       	cp	r24, r28
    176c:	9d 07       	cpc	r25, r29
    176e:	08 f4       	brcc	.+2      	; 0x1772 <_ZNK6String9substringEjj+0x4a>
    1770:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1772:	d6 01       	movw	r26, r12
    1774:	ed 91       	ld	r30, X+
    1776:	fc 91       	ld	r31, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	ec 0f       	add	r30, r28
    177c:	fd 1f       	adc	r31, r29
    177e:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1780:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1782:	6d 91       	ld	r22, X+
    1784:	7c 91       	ld	r23, X
    1786:	60 0f       	add	r22, r16
    1788:	71 1f       	adc	r23, r17
    178a:	c7 01       	movw	r24, r14
    178c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1790:	d6 01       	movw	r26, r12
    1792:	ed 91       	ld	r30, X+
    1794:	fc 91       	ld	r31, X
    1796:	ec 0f       	add	r30, r28
    1798:	fd 1f       	adc	r31, r29
    179a:	b0 82       	st	Z, r11
	return out;
}
    179c:	c7 01       	movw	r24, r14
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	08 95       	ret

000017b2 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    17b2:	fc 01       	movw	r30, r24
    17b4:	13 82       	std	Z+3, r1	; 0x03
    17b6:	12 82       	std	Z+2, r1	; 0x02
    17b8:	88 ea       	ldi	r24, 0xA8	; 168
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	80 83       	st	Z, r24
    17c0:	12 8e       	std	Z+26, r1	; 0x1a
    17c2:	14 8a       	std	Z+20, r1	; 0x14
    17c4:	8f e0       	ldi	r24, 0x0F	; 15
    17c6:	84 83       	std	Z+4, r24	; 0x04
    17c8:	8e e0       	ldi	r24, 0x0E	; 14
    17ca:	85 83       	std	Z+5, r24	; 0x05
    17cc:	8d e0       	ldi	r24, 0x0D	; 13
    17ce:	86 83       	std	Z+6, r24	; 0x06
    17d0:	8c e0       	ldi	r24, 0x0C	; 12
    17d2:	87 83       	std	Z+7, r24	; 0x07
    17d4:	8b e0       	ldi	r24, 0x0B	; 11
    17d6:	80 87       	std	Z+8, r24	; 0x08
    17d8:	8a e0       	ldi	r24, 0x0A	; 10
    17da:	81 87       	std	Z+9, r24	; 0x09
    17dc:	89 e0       	ldi	r24, 0x09	; 9
    17de:	82 87       	std	Z+10, r24	; 0x0a
    17e0:	17 86       	std	Z+15, r1	; 0x0f
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 8b       	std	Z+16, r24	; 0x10
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	81 8b       	std	Z+17, r24	; 0x11
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	82 8b       	std	Z+18, r24	; 0x12
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	83 8b       	std	Z+19, r24	; 0x13
    17f2:	08 95       	ret

000017f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    17f4:	fc 01       	movw	r30, r24
    17f6:	96 2f       	mov	r25, r22
    17f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    17fa:	8f 3f       	cpi	r24, 0xFF	; 255
    17fc:	21 f0       	breq	.+8      	; 0x1806 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    17fe:	cf 01       	movw	r24, r30
    1800:	4b 96       	adiw	r24, 0x1b	; 27
    1802:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1806:	64 2f       	mov	r22, r20
    1808:	89 2f       	mov	r24, r25
    180a:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <digitalWrite>

0000180e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	d6 2f       	mov	r29, r22
    1818:	8c 01       	movw	r16, r24
    181a:	05 5e       	subi	r16, 0xE5	; 229
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	c1 e0       	ldi	r28, 0x01	; 1
    1820:	62 fb       	bst	r22, 2
    1822:	44 27       	eor	r20, r20
    1824:	40 f9       	bld	r20, 0
    1826:	4c 27       	eor	r20, r28
    1828:	68 e0       	ldi	r22, 0x08	; 8
    182a:	c8 01       	movw	r24, r16
    182c:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1830:	d1 fb       	bst	r29, 1
    1832:	44 27       	eor	r20, r20
    1834:	40 f9       	bld	r20, 0
    1836:	4c 27       	eor	r20, r28
    1838:	67 e0       	ldi	r22, 0x07	; 7
    183a:	c8 01       	movw	r24, r16
    183c:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1840:	4d 2f       	mov	r20, r29
    1842:	41 70       	andi	r20, 0x01	; 1
    1844:	4c 27       	eor	r20, r28
    1846:	66 e0       	ldi	r22, 0x06	; 6
    1848:	c8 01       	movw	r24, r16
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN17Adafruit_MCP2301712digitalWriteEhh>

00001856 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    1856:	fc 01       	movw	r30, r24
    1858:	96 2f       	mov	r25, r22
    185a:	82 8d       	ldd	r24, Z+26	; 0x1a
    185c:	8f 3f       	cpi	r24, 0xFF	; 255
    185e:	21 f0       	breq	.+8      	; 0x1868 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1860:	cf 01       	movw	r24, r30
    1862:	4b 96       	adiw	r24, 0x1b	; 27
    1864:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1868:	64 2f       	mov	r22, r20
    186a:	89 2f       	mov	r24, r25
    186c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <pinMode>

00001870 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	ec 01       	movw	r28, r24
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	6e 81       	ldd	r22, Y+6	; 0x06
    187a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	6e 81       	ldd	r22, Y+6	; 0x06
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	6e 81       	ldd	r22, Y+6	; 0x06
    189c:	ce 01       	movw	r24, r28
    189e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    18a2:	84 e6       	ldi	r24, 0x64	; 100
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <delayMicroseconds>

000018ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	8c 01       	movw	r16, r24
    18c4:	fc 01       	movw	r30, r24
    18c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18c8:	98 01       	movw	r18, r16
    18ca:	29 5f       	subi	r18, 0xF9	; 249
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	79 01       	movw	r14, r18
    18d0:	c6 2f       	mov	r28, r22
    18d2:	d0 e0       	ldi	r29, 0x00	; 0
    18d4:	8f 3f       	cpi	r24, 0xFF	; 255
    18d6:	09 f4       	brne	.+2      	; 0x18da <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    18d8:	73 c0       	rjmp	.+230    	; 0x19c0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    18da:	68 01       	movw	r12, r16
    18dc:	3b e1       	ldi	r19, 0x1B	; 27
    18de:	c3 0e       	add	r12, r19
    18e0:	d1 1c       	adc	r13, r1
    18e2:	c6 01       	movw	r24, r12
    18e4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    18e8:	f7 01       	movw	r30, r14
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	a1 e0       	ldi	r26, 0x01	; 1
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	b1 90       	ld	r11, Z+
    18f4:	ee 24       	eor	r14, r14
    18f6:	e3 94       	inc	r14
    18f8:	f1 2c       	mov	r15, r1
    18fa:	bd 01       	movw	r22, r26
    18fc:	0b 2c       	mov	r0, r11
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    1900:	66 0f       	add	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    1908:	60 95       	com	r22
    190a:	70 95       	com	r23
    190c:	86 23       	and	r24, r22
    190e:	97 23       	and	r25, r23
    1910:	9e 01       	movw	r18, r28
    1912:	04 2e       	mov	r0, r20
    1914:	02 c0       	rjmp	.+4      	; 0x191a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1916:	35 95       	asr	r19
    1918:	27 95       	ror	r18
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    191e:	21 70       	andi	r18, 0x01	; 1
    1920:	33 27       	eor	r19, r19
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	ba 94       	dec	r11
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    192c:	82 2b       	or	r24, r18
    192e:	93 2b       	or	r25, r19
    1930:	4f 5f       	subi	r20, 0xFF	; 255
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	44 30       	cpi	r20, 0x04	; 4
    1936:	51 05       	cpc	r21, r1
    1938:	e1 f6       	brne	.-72     	; 0x18f2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    193a:	e7 01       	movw	r28, r14
    193c:	f8 01       	movw	r30, r16
    193e:	06 80       	ldd	r0, Z+6	; 0x06
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1942:	cc 0f       	add	r28, r28
    1944:	dd 1f       	adc	r29, r29
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    194a:	c0 95       	com	r28
    194c:	d0 95       	com	r29
    194e:	c8 23       	and	r28, r24
    1950:	d9 23       	and	r29, r25
    1952:	be 01       	movw	r22, r28
    1954:	c6 01       	movw	r24, r12
    1956:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1962:	c7 01       	movw	r24, r14
    1964:	f8 01       	movw	r30, r16
    1966:	06 80       	ldd	r0, Z+6	; 0x06
    1968:	02 c0       	rjmp	.+4      	; 0x196e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1972:	c8 2b       	or	r28, r24
    1974:	d9 2b       	or	r29, r25
    1976:	be 01       	movw	r22, r28
    1978:	c6 01       	movw	r24, r12
    197a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1986:	b7 01       	movw	r22, r14
    1988:	f8 01       	movw	r30, r16
    198a:	06 80       	ldd	r0, Z+6	; 0x06
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    198e:	66 0f       	add	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    1996:	60 95       	com	r22
    1998:	70 95       	com	r23
    199a:	6c 23       	and	r22, r28
    199c:	7d 23       	and	r23, r29
    199e:	c6 01       	movw	r24, r12
    19a0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    19a4:	84 e6       	ldi	r24, 0x64	; 100
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <delayMicroseconds>
    19c0:	c1 2c       	mov	r12, r1
    19c2:	d1 2c       	mov	r13, r1
    19c4:	57 01       	movw	r10, r14
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	f7 01       	movw	r30, r14
    19ca:	61 91       	ld	r22, Z+
    19cc:	7f 01       	movw	r14, r30
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    19d4:	ae 01       	movw	r20, r28
    19d6:	0c 2c       	mov	r0, r12
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    19da:	55 95       	asr	r21
    19dc:	47 95       	ror	r20
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    19e2:	41 70       	andi	r20, 0x01	; 1
    19e4:	f5 01       	movw	r30, r10
    19e6:	60 81       	ld	r22, Z
    19e8:	c8 01       	movw	r24, r16
    19ea:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    19ee:	ff ef       	ldi	r31, 0xFF	; 255
    19f0:	cf 1a       	sub	r12, r31
    19f2:	df 0a       	sbc	r13, r31
    19f4:	24 e0       	ldi	r18, 0x04	; 4
    19f6:	c2 16       	cp	r12, r18
    19f8:	d1 04       	cpc	r13, r1
    19fa:	21 f7       	brne	.-56     	; 0x19c4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    19fc:	c8 01       	movw	r24, r16
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001a16 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	5c 01       	movw	r10, r24
    1a2e:	87 e0       	ldi	r24, 0x07	; 7
    1a30:	a8 0e       	add	r10, r24
    1a32:	b1 1c       	adc	r11, r1
    1a34:	00 e0       	ldi	r16, 0x00	; 0
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	e6 2e       	mov	r14, r22
    1a3a:	f1 2c       	mov	r15, r1
    1a3c:	65 01       	movw	r12, r10
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	f5 01       	movw	r30, r10
    1a42:	61 91       	ld	r22, Z+
    1a44:	5f 01       	movw	r10, r30
    1a46:	ce 01       	movw	r24, r28
    1a48:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1a4c:	a7 01       	movw	r20, r14
    1a4e:	00 2e       	mov	r0, r16
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1a52:	55 95       	asr	r21
    1a54:	47 95       	ror	r20
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    1a5a:	41 70       	andi	r20, 0x01	; 1
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	60 81       	ld	r22, Z
    1a60:	ce 01       	movw	r24, r28
    1a62:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1a66:	0f 5f       	subi	r16, 0xFF	; 255
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	08 30       	cpi	r16, 0x08	; 8
    1a6c:	11 05       	cpc	r17, r1
    1a6e:	31 f7       	brne	.-52     	; 0x1a3c <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    1a70:	ce 01       	movw	r24, r28
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001a8a <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	ec 01       	movw	r28, r24
    1a92:	16 2f       	mov	r17, r22
    1a94:	6c 81       	ldd	r22, Y+4	; 0x04
    1a96:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a9c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1aa8:	8c 89       	ldd	r24, Y+20	; 0x14
    1aaa:	61 2f       	mov	r22, r17
    1aac:	84 ff       	sbrs	r24, 4
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	75 95       	asr	r23
    1ac2:	67 95       	ror	r22
    1ac4:	8a 95       	dec	r24
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    1ac8:	ce 01       	movw	r24, r28
    1aca:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1ace:	61 2f       	mov	r22, r17
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

00001adc <_ZN21Adafruit_RGBLCDShield7commandEh>:
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_ZN21Adafruit_RGBLCDShield4sendEhh>

00001ae2 <_ZN21Adafruit_RGBLCDShield5clearEv>:
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1ae8:	80 ed       	ldi	r24, 0xD0	; 208
    1aea:	97 e0       	ldi	r25, 0x07	; 7
    1aec:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <delayMicroseconds>

00001af0 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	28 97       	sbiw	r28, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	9c 01       	movw	r18, r24
    1b06:	88 e0       	ldi	r24, 0x08	; 8
    1b08:	e7 e0       	ldi	r30, 0x07	; 7
    1b0a:	f1 e0       	ldi	r31, 0x01	; 1
    1b0c:	de 01       	movw	r26, r28
    1b0e:	11 96       	adiw	r26, 0x01	; 1
    1b10:	01 90       	ld	r0, Z+
    1b12:	0d 92       	st	X+, r0
    1b14:	8a 95       	dec	r24
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    1b18:	f9 01       	movw	r30, r18
    1b1a:	80 8d       	ldd	r24, Z+24	; 0x18
    1b1c:	84 17       	cp	r24, r20
    1b1e:	10 f4       	brcc	.+4      	; 0x1b24 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    1b20:	4f ef       	ldi	r20, 0xFF	; 255
    1b22:	48 0f       	add	r20, r24
    1b24:	fe 01       	movw	r30, r28
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	e4 0f       	add	r30, r20
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	e4 0f       	add	r30, r20
    1b2e:	f1 1d       	adc	r31, r1
    1b30:	90 81       	ld	r25, Z
    1b32:	69 0f       	add	r22, r25
    1b34:	60 68       	ori	r22, 0x80	; 128
    1b36:	c9 01       	movw	r24, r18
    1b38:	28 96       	adiw	r28, 0x08	; 8
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>

00001b4c <_ZN21Adafruit_RGBLCDShield7displayEv>:
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	65 89       	ldd	r22, Z+21	; 0x15
    1b50:	26 2f       	mov	r18, r22
    1b52:	24 60       	ori	r18, 0x04	; 4
    1b54:	25 8b       	std	Z+21, r18	; 0x15
    1b56:	6c 60       	ori	r22, 0x0C	; 12
    1b58:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>

00001b5c <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	d4 2e       	mov	r13, r20
    1b78:	c2 2e       	mov	r12, r18
    1b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7e:	41 f4       	brne	.+16     	; 0x1b90 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	8d 15       	cp	r24, r13
    1b84:	08 f0       	brcs	.+2      	; 0x1b88 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    1b86:	5e c0       	rjmp	.+188    	; 0x1c44 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1b88:	8c 89       	ldd	r24, Y+20	; 0x14
    1b8a:	88 60       	ori	r24, 0x08	; 8
    1b8c:	8c 8b       	std	Y+20, r24	; 0x14
    1b8e:	5a c0       	rjmp	.+180    	; 0x1c44 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    1b90:	89 e9       	ldi	r24, 0x99	; 153
    1b92:	93 e0       	ldi	r25, 0x03	; 3
    1b94:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN7TwoWire5beginEv>
    1b98:	8e 01       	movw	r16, r28
    1b9a:	05 5e       	subi	r16, 0xE5	; 229
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN17Adafruit_MCP230175beginEv>
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	68 e0       	ldi	r22, 0x08	; 8
    1ba8:	c8 01       	movw	r24, r16
    1baa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	66 e0       	ldi	r22, 0x06	; 6
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	67 e0       	ldi	r22, 0x07	; 7
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1bc2:	67 e0       	ldi	r22, 0x07	; 7
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    1bca:	6d 81       	ldd	r22, Y+5	; 0x05
    1bcc:	66 23       	and	r22, r22
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	6c 81       	ldd	r22, Y+4	; 0x04
    1bdc:	c8 01       	movw	r24, r16
    1bde:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	6e 81       	ldd	r22, Y+6	; 0x06
    1be6:	c8 01       	movw	r24, r16
    1be8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1bec:	7e 01       	movw	r14, r28
    1bee:	e7 e0       	ldi	r30, 0x07	; 7
    1bf0:	ee 0e       	add	r14, r30
    1bf2:	f1 1c       	adc	r15, r1
    1bf4:	5e 01       	movw	r10, r28
    1bf6:	fb e0       	ldi	r31, 0x0B	; 11
    1bf8:	af 0e       	add	r10, r31
    1bfa:	b1 1c       	adc	r11, r1
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	61 91       	ld	r22, Z+
    1c00:	7f 01       	movw	r14, r30
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	c8 01       	movw	r24, r16
    1c06:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1c0a:	ea 14       	cp	r14, r10
    1c0c:	fb 04       	cpc	r15, r11
    1c0e:	b1 f7       	brne	.-20     	; 0x1bfc <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    1c10:	7e 01       	movw	r14, r28
    1c12:	ff e0       	ldi	r31, 0x0F	; 15
    1c14:	ef 0e       	add	r14, r31
    1c16:	f1 1c       	adc	r15, r1
    1c18:	5e 01       	movw	r10, r28
    1c1a:	84 e1       	ldi	r24, 0x14	; 20
    1c1c:	a8 0e       	add	r10, r24
    1c1e:	b1 1c       	adc	r11, r1
    1c20:	47 01       	movw	r8, r14
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	f7 01       	movw	r30, r14
    1c26:	61 91       	ld	r22, Z+
    1c28:	7f 01       	movw	r14, r30
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN17Adafruit_MCP230177pinModeEhh>
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	f4 01       	movw	r30, r8
    1c34:	60 81       	ld	r22, Z
    1c36:	c8 01       	movw	r24, r16
    1c38:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN17Adafruit_MCP230176pullUpEhh>
    1c3c:	ea 14       	cp	r14, r10
    1c3e:	fb 04       	cpc	r15, r11
    1c40:	79 f7       	brne	.-34     	; 0x1c20 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    1c42:	9e cf       	rjmp	.-196    	; 0x1b80 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    1c44:	d8 8e       	std	Y+24, r13	; 0x18
    1c46:	19 8e       	std	Y+25, r1	; 0x19
    1c48:	cc 20       	and	r12, r12
    1c4a:	31 f0       	breq	.+12     	; 0x1c58 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1c4c:	f1 e0       	ldi	r31, 0x01	; 1
    1c4e:	df 12       	cpse	r13, r31
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    1c52:	8c 89       	ldd	r24, Y+20	; 0x14
    1c54:	84 60       	ori	r24, 0x04	; 4
    1c56:	8c 8b       	std	Y+20, r24	; 0x14
    1c58:	80 e5       	ldi	r24, 0x50	; 80
    1c5a:	93 ec       	ldi	r25, 0xC3	; 195
    1c5c:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	6c 81       	ldd	r22, Y+4	; 0x04
    1c64:	ce 01       	movw	r24, r28
    1c66:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	6e 81       	ldd	r22, Y+6	; 0x06
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1c74:	6d 81       	ldd	r22, Y+5	; 0x05
    1c76:	6f 3f       	cpi	r22, 0xFF	; 255
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1c82:	6c 89       	ldd	r22, Y+20	; 0x14
    1c84:	64 fd       	sbrc	r22, 4
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1c90:	84 e9       	ldi	r24, 0x94	; 148
    1c92:	91 e1       	ldi	r25, 0x11	; 17
    1c94:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1c98:	63 e0       	ldi	r22, 0x03	; 3
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1ca0:	84 e9       	ldi	r24, 0x94	; 148
    1ca2:	91 e1       	ldi	r25, 0x11	; 17
    1ca4:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1ca8:	63 e0       	ldi	r22, 0x03	; 3
    1caa:	ce 01       	movw	r24, r28
    1cac:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1cb0:	86 e9       	ldi	r24, 0x96	; 150
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    1cc2:	60 62       	ori	r22, 0x20	; 32
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1cca:	84 e9       	ldi	r24, 0x94	; 148
    1ccc:	91 e1       	ldi	r25, 0x11	; 17
    1cce:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1cd2:	6c 89       	ldd	r22, Y+20	; 0x14
    1cd4:	60 62       	ori	r22, 0x20	; 32
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1cdc:	86 e9       	ldi	r24, 0x96	; 150
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 8a 09 	call	0x1314	; 0x1314 <delayMicroseconds>
    1ce4:	6c 89       	ldd	r22, Y+20	; 0x14
    1ce6:	60 62       	ori	r22, 0x20	; 32
    1ce8:	ce 01       	movw	r24, r28
    1cea:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1cee:	6c 89       	ldd	r22, Y+20	; 0x14
    1cf0:	60 62       	ori	r22, 0x20	; 32
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>
    1cf8:	84 e0       	ldi	r24, 0x04	; 4
    1cfa:	8d 8b       	std	Y+21, r24	; 0x15
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN21Adafruit_RGBLCDShield7displayEv>
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN21Adafruit_RGBLCDShield5clearEv>
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	8e 8b       	std	Y+22, r24	; 0x16
    1d0c:	66 e0       	ldi	r22, 0x06	; 6
    1d0e:	ce 01       	movw	r24, r28
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_ZN21Adafruit_RGBLCDShield7commandEh>

00001d2c <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	08 95       	ret

00001d38 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	7c 01       	movw	r14, r24
    1d48:	2f e0       	ldi	r18, 0x0F	; 15
    1d4a:	e2 0e       	add	r14, r18
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	c0 e0       	ldi	r28, 0x00	; 0
    1d50:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    1d52:	2f e1       	ldi	r18, 0x1F	; 31
    1d54:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1d56:	8c 01       	movw	r16, r24
    1d58:	05 5e       	subi	r16, 0xE5	; 229
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	61 91       	ld	r22, Z+
    1d60:	7f 01       	movw	r14, r30
    1d62:	c8 01       	movw	r24, r16
    1d64:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN17Adafruit_MCP2301711digitalReadEh>
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	0c 2e       	mov	r0, r28
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    1d70:	22 0f       	add	r18, r18
    1d72:	33 1f       	adc	r19, r19
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    1d78:	20 95       	com	r18
    1d7a:	30 95       	com	r19
    1d7c:	d2 22       	and	r13, r18
    1d7e:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    1d80:	c5 30       	cpi	r28, 0x05	; 5
    1d82:	d1 05       	cpc	r29, r1
    1d84:	59 f7       	brne	.-42     	; 0x1d5c <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    1d86:	8d 2d       	mov	r24, r13
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	08 95       	ret

00001d98 <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    1d98:	68 2f       	mov	r22, r24
    1d9a:	89 e9       	ldi	r24, 0x99	; 153
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0c 94 3d 11 	jmp	0x227a	; 0x227a <_ZN7TwoWire5writeEh>

00001da2 <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1da8:	68 30       	cpi	r22, 0x08	; 8
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <_ZN17Adafruit_MCP230175beginEh+0xc>
    1dac:	67 e0       	ldi	r22, 0x07	; 7
    1dae:	68 83       	st	Y, r22

  WIRE.begin();
    1db0:	89 e9       	ldi	r24, 0x99	; 153
    1db2:	93 e0       	ldi	r25, 0x03	; 3
    1db4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1db8:	68 81       	ld	r22, Y
    1dba:	60 62       	ori	r22, 0x20	; 32
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	89 e9       	ldi	r24, 0x99	; 153
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1dd2:	89 e9       	ldi	r24, 0x99	; 153
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1dda:	68 81       	ld	r22, Y
    1ddc:	60 62       	ori	r22, 0x20	; 32
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	89 e9       	ldi	r24, 0x99	; 153
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1df4:	89 e9       	ldi	r24, 0x99	; 153
    1df6:	93 e0       	ldi	r25, 0x03	; 3
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    1dfc:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>

00001e00 <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_ZN17Adafruit_MCP230175beginEh>

00001e06 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	d6 2f       	mov	r29, r22
    1e0c:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1e0e:	fc 01       	movw	r30, r24
    1e10:	60 81       	ld	r22, Z
    1e12:	60 62       	ori	r22, 0x20	; 32
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	89 e9       	ldi	r24, 0x99	; 153
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1e1e:	82 e1       	ldi	r24, 0x12	; 18
    1e20:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    1e24:	8d 2f       	mov	r24, r29
    1e26:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(ba >> 8);
    1e2a:	8c 2f       	mov	r24, r28
    1e2c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1e30:	89 e9       	ldi	r24, 0x99	; 153
    1e32:	93 e0       	ldi	r25, 0x03	; 3
}
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    1e38:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>

00001e3c <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	8c 01       	movw	r16, r24
    1e48:	c6 2f       	mov	r28, r22
    1e4a:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    1e4c:	60 31       	cpi	r22, 0x10	; 16
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    1e50:	51 c0       	rjmp	.+162    	; 0x1ef4 <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    1e52:	68 30       	cpi	r22, 0x08	; 8
    1e54:	20 f0       	brcs	.+8      	; 0x1e5e <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    1e56:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    1e58:	ff 24       	eor	r15, r15
    1e5a:	f3 94       	inc	r15
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    1e5e:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1e60:	f8 01       	movw	r30, r16
    1e62:	60 81       	ld	r22, Z
    1e64:	60 62       	ori	r22, 0x20	; 32
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	89 e9       	ldi	r24, 0x99	; 153
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    1e70:	8f 2d       	mov	r24, r15
    1e72:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1e76:	89 e9       	ldi	r24, 0x99	; 153
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1e7e:	f8 01       	movw	r30, r16
    1e80:	60 81       	ld	r22, Z
    1e82:	60 62       	ori	r22, 0x20	; 32
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	89 e9       	ldi	r24, 0x99	; 153
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1e92:	89 e9       	ldi	r24, 0x99	; 153
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    1e9e:	d1 11       	cpse	r29, r1
    1ea0:	09 c0       	rjmp	.+18     	; 0x1eb4 <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    1ea6:	44 0f       	add	r20, r20
    1ea8:	55 1f       	adc	r21, r21
    1eaa:	ca 95       	dec	r28
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    1eae:	ea 01       	movw	r28, r20
    1eb0:	c8 2b       	or	r28, r24
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	ca 95       	dec	r28
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    1ec0:	ef 01       	movw	r28, r30
    1ec2:	c0 95       	com	r28
    1ec4:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	60 81       	ld	r22, Z
    1eca:	60 62       	ori	r22, 0x20	; 32
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	89 e9       	ldi	r24, 0x99	; 153
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    1ed6:	8f 2d       	mov	r24, r15
    1ed8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(iodir);	
    1edc:	8c 2f       	mov	r24, r28
    1ede:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1ee2:	89 e9       	ldi	r24, 0x99	; 153
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    1ef0:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
}
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	08 95       	ret

00001f00 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1f06:	68 81       	ld	r22, Y
    1f08:	60 62       	ori	r22, 0x20	; 32
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	89 e9       	ldi	r24, 0x99	; 153
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    1f14:	82 e1       	ldi	r24, 0x12	; 18
    1f16:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1f1a:	89 e9       	ldi	r24, 0x99	; 153
    1f1c:	93 e0       	ldi	r25, 0x03	; 3
    1f1e:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    1f22:	68 81       	ld	r22, Y
    1f24:	60 62       	ori	r22, 0x20	; 32
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	42 e0       	ldi	r20, 0x02	; 2
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	89 e9       	ldi	r24, 0x99	; 153
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1f34:	89 e9       	ldi	r24, 0x99	; 153
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
    1f3c:	c8 2f       	mov	r28, r24
    1f3e:	89 e9       	ldi	r24, 0x99	; 153
    1f40:	93 e0       	ldi	r25, 0x03	; 3
    1f42:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    1f46:	98 2f       	mov	r25, r24
    1f48:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    1f4a:	8c 2b       	or	r24, r28
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	8c 01       	movw	r16, r24
    1f5c:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    1f5e:	60 31       	cpi	r22, 0x10	; 16
    1f60:	58 f5       	brcc	.+86     	; 0x1fb8 <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    1f62:	68 30       	cpi	r22, 0x08	; 8
    1f64:	18 f0       	brcs	.+6      	; 0x1f6c <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    1f66:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    1f68:	d3 e1       	ldi	r29, 0x13	; 19
    1f6a:	01 c0       	rjmp	.+2      	; 0x1f6e <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    1f6c:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1f6e:	f8 01       	movw	r30, r16
    1f70:	60 81       	ld	r22, Z
    1f72:	60 62       	ori	r22, 0x20	; 32
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	89 e9       	ldi	r24, 0x99	; 153
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    1f7e:	8d 2f       	mov	r24, r29
    1f80:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    1f84:	89 e9       	ldi	r24, 0x99	; 153
    1f86:	93 e0       	ldi	r25, 0x03	; 3
    1f88:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	60 81       	ld	r22, Z
    1f90:	60 62       	ori	r22, 0x20	; 32
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	89 e9       	ldi	r24, 0x99	; 153
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    1fa0:	89 e9       	ldi	r24, 0x99	; 153
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    1fa8:	99 27       	eor	r25, r25
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    1fac:	95 95       	asr	r25
    1fae:	87 95       	ror	r24
    1fb0:	ca 95       	dec	r28
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	8c 01       	movw	r16, r24
    1fd0:	c6 2f       	mov	r28, r22
    1fd2:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    1fd4:	60 31       	cpi	r22, 0x10	; 16
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    1fd8:	52 c0       	rjmp	.+164    	; 0x207e <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    1fda:	68 30       	cpi	r22, 0x08	; 8
    1fdc:	20 f0       	brcs	.+8      	; 0x1fe6 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    1fde:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    1fe0:	9d e0       	ldi	r25, 0x0D	; 13
    1fe2:	f9 2e       	mov	r15, r25
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    1fe6:	8c e0       	ldi	r24, 0x0C	; 12
    1fe8:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    1fea:	f8 01       	movw	r30, r16
    1fec:	60 81       	ld	r22, Z
    1fee:	60 62       	ori	r22, 0x20	; 32
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	89 e9       	ldi	r24, 0x99	; 153
    1ff4:	93 e0       	ldi	r25, 0x03	; 3
    1ff6:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    1ffa:	8f 2d       	mov	r24, r15
    1ffc:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    2000:	89 e9       	ldi	r24, 0x99	; 153
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    2008:	f8 01       	movw	r30, r16
    200a:	60 81       	ld	r22, Z
    200c:	60 62       	ori	r22, 0x20	; 32
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	89 e9       	ldi	r24, 0x99	; 153
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    201c:	89 e9       	ldi	r24, 0x99	; 153
    201e:	93 e0       	ldi	r25, 0x03	; 3
    2020:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    2024:	21 e0       	ldi	r18, 0x01	; 1
    2026:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    2028:	d1 30       	cpi	r29, 0x01	; 1
    202a:	49 f4       	brne	.+18     	; 0x203e <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    202c:	a9 01       	movw	r20, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    2030:	44 0f       	add	r20, r20
    2032:	55 1f       	adc	r21, r21
    2034:	ca 95       	dec	r28
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    2038:	ea 01       	movw	r28, r20
    203a:	c8 2b       	or	r28, r24
    203c:	09 c0       	rjmp	.+18     	; 0x2050 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    203e:	f9 01       	movw	r30, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ca 95       	dec	r28
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    204a:	ef 01       	movw	r28, r30
    204c:	c0 95       	com	r28
    204e:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    2050:	f8 01       	movw	r30, r16
    2052:	60 81       	ld	r22, Z
    2054:	60 62       	ori	r22, 0x20	; 32
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	89 e9       	ldi	r24, 0x99	; 153
    205a:	93 e0       	ldi	r25, 0x03	; 3
    205c:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    2060:	8f 2d       	mov	r24, r15
    2062:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(gppu);	
    2066:	8c 2f       	mov	r24, r28
    2068:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    206c:	89 e9       	ldi	r24, 0x99	; 153
    206e:	93 e0       	ldi	r25, 0x03	; 3
}
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    207a:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	08 95       	ret

0000208a <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	8c 01       	movw	r16, r24
    2098:	c6 2f       	mov	r28, r22
    209a:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    209c:	60 31       	cpi	r22, 0x10	; 16
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    20a0:	56 c0       	rjmp	.+172    	; 0x214e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    20a2:	68 30       	cpi	r22, 0x08	; 8
    20a4:	28 f0       	brcs	.+10     	; 0x20b0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    20a6:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    20a8:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    20aa:	93 e1       	ldi	r25, 0x13	; 19
    20ac:	f9 2e       	mov	r15, r25
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    20b0:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    20b2:	82 e1       	ldi	r24, 0x12	; 18
    20b4:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    20b6:	f8 01       	movw	r30, r16
    20b8:	60 81       	ld	r22, Z
    20ba:	60 62       	ori	r22, 0x20	; 32
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	89 e9       	ldi	r24, 0x99	; 153
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    20c6:	8d 2f       	mov	r24, r29
    20c8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    20cc:	89 e9       	ldi	r24, 0x99	; 153
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    20d4:	f8 01       	movw	r30, r16
    20d6:	60 81       	ld	r22, Z
    20d8:	60 62       	ori	r22, 0x20	; 32
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	89 e9       	ldi	r24, 0x99	; 153
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    20e8:	89 e9       	ldi	r24, 0x99	; 153
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    20f0:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    20f2:	21 e0       	ldi	r18, 0x01	; 1
    20f4:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    20f6:	ef 12       	cpse	r14, r31
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    20fa:	a9 01       	movw	r20, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	ca 95       	dec	r28
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    2106:	ea 01       	movw	r28, r20
    2108:	c8 2b       	or	r28, r24
    210a:	09 c0       	rjmp	.+18     	; 0x211e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    210c:	f9 01       	movw	r30, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	ca 95       	dec	r28
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    2118:	ef 01       	movw	r28, r30
    211a:	c0 95       	com	r28
    211c:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    211e:	f8 01       	movw	r30, r16
    2120:	60 81       	ld	r22, Z
    2122:	60 62       	ori	r22, 0x20	; 32
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	89 e9       	ldi	r24, 0x99	; 153
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    212e:	8f 2d       	mov	r24, r15
    2130:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  wiresend(gpio);	
    2134:	8c 2f       	mov	r24, r28
    2136:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZL8wiresendh>
  WIRE.endTransmission();
    213a:	89 e9       	ldi	r24, 0x99	; 153
    213c:	93 e0       	ldi	r25, 0x03	; 3
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    214a:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN7TwoWire15endTransmissionEv>
}
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	ff 90       	pop	r15
    2158:	ef 90       	pop	r14
    215a:	08 95       	ret

0000215c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    215c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    2166:	82 1b       	sub	r24, r18
    2168:	91 09       	sbc	r25, r1
    216a:	08 95       	ret

0000216c <_ZN7TwoWire4readEv>:
    216c:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    2170:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    2174:	98 17       	cp	r25, r24
    2176:	50 f4       	brcc	.+20     	; 0x218c <_ZN7TwoWire4readEv+0x20>
    2178:	e9 2f       	mov	r30, r25
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	e1 53       	subi	r30, 0x31	; 49
    217e:	fc 4f       	sbci	r31, 0xFC	; 252
    2180:	20 81       	ld	r18, Z
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	9f 5f       	subi	r25, 0xFF	; 255
    2186:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <_ZN7TwoWire4readEv+0x24>
    218c:	2f ef       	ldi	r18, 0xFF	; 255
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	c9 01       	movw	r24, r18
    2192:	08 95       	ret

00002194 <_ZN7TwoWire4peekEv>:
    2194:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    2198:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    219c:	e8 17       	cp	r30, r24
    219e:	30 f4       	brcc	.+12     	; 0x21ac <_ZN7TwoWire4peekEv+0x18>
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	e1 53       	subi	r30, 0x31	; 49
    21a4:	fc 4f       	sbci	r31, 0xFC	; 252
    21a6:	80 81       	ld	r24, Z
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	08 95       	ret
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	9f ef       	ldi	r25, 0xFF	; 255
    21b0:	08 95       	ret

000021b2 <_ZN7TwoWire5flushEv>:
    21b2:	08 95       	ret

000021b4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	ec 01       	movw	r28, r24
    21ba:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <_ZN7TwoWire14user_onReceiveE>
    21be:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <_ZN7TwoWire14user_onReceiveE+0x1>
    21c2:	30 97       	sbiw	r30, 0x00	; 0
    21c4:	f1 f0       	breq	.+60     	; 0x2202 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    21c6:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    21ca:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    21ce:	98 17       	cp	r25, r24
    21d0:	c0 f0       	brcs	.+48     	; 0x2202 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	29 2f       	mov	r18, r25
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	26 17       	cp	r18, r22
    21da:	37 07       	cpc	r19, r23
    21dc:	54 f4       	brge	.+20     	; 0x21f2 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    21de:	de 01       	movw	r26, r28
    21e0:	a2 0f       	add	r26, r18
    21e2:	b3 1f       	adc	r27, r19
    21e4:	4c 91       	ld	r20, X
    21e6:	d9 01       	movw	r26, r18
    21e8:	a1 53       	subi	r26, 0x31	; 49
    21ea:	bc 4f       	sbci	r27, 0xFC	; 252
    21ec:	4c 93       	st	X, r20
    21ee:	9f 5f       	subi	r25, 0xFF	; 255
    21f0:	f1 cf       	rjmp	.-30     	; 0x21d4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    21f2:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    21f6:	60 93 cd 03 	sts	0x03CD, r22	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    21fa:	cb 01       	movw	r24, r22
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	09 94       	ijmp
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	08 95       	ret

00002208 <_ZN7TwoWire16onRequestServiceEv>:
    2208:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <_ZN7TwoWire14user_onRequestE>
    220c:	f0 91 a8 03 	lds	r31, 0x03A8	; 0x8003a8 <_ZN7TwoWire14user_onRequestE+0x1>
    2210:	30 97       	sbiw	r30, 0x00	; 0
    2212:	29 f0       	breq	.+10     	; 0x221e <_ZN7TwoWire16onRequestServiceEv+0x16>
    2214:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    2218:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    221c:	09 94       	ijmp
    221e:	08 95       	ret

00002220 <_ZN7TwoWire5writeEPKhj>:
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	7c 01       	movw	r14, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8a 01       	movw	r16, r20
    2236:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <_ZN7TwoWire12transmittingE>
    223a:	22 23       	and	r18, r18
    223c:	89 f0       	breq	.+34     	; 0x2260 <_ZN7TwoWire5writeEPKhj+0x40>
    223e:	eb 01       	movw	r28, r22
    2240:	6b 01       	movw	r12, r22
    2242:	c4 0e       	add	r12, r20
    2244:	d5 1e       	adc	r13, r21
    2246:	cc 15       	cp	r28, r12
    2248:	dd 05       	cpc	r29, r13
    224a:	69 f0       	breq	.+26     	; 0x2266 <_ZN7TwoWire5writeEPKhj+0x46>
    224c:	69 91       	ld	r22, Y+
    224e:	d7 01       	movw	r26, r14
    2250:	ed 91       	ld	r30, X+
    2252:	fc 91       	ld	r31, X
    2254:	01 90       	ld	r0, Z+
    2256:	f0 81       	ld	r31, Z
    2258:	e0 2d       	mov	r30, r0
    225a:	c7 01       	movw	r24, r14
    225c:	09 95       	icall
    225e:	f3 cf       	rjmp	.-26     	; 0x2246 <_ZN7TwoWire5writeEPKhj+0x26>
    2260:	64 2f       	mov	r22, r20
    2262:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <twi_transmit>
    2266:	c8 01       	movw	r24, r16
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	08 95       	ret

0000227a <_ZN7TwoWire5writeEh>:
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	1f 92       	push	r1
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	69 83       	std	Y+1, r22	; 0x01
    2286:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <_ZN7TwoWire12transmittingE>
    228a:	22 23       	and	r18, r18
    228c:	d1 f0       	breq	.+52     	; 0x22c2 <_ZN7TwoWire5writeEh+0x48>
    228e:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    2292:	20 32       	cpi	r18, 0x20	; 32
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <_ZN7TwoWire5writeEh+0x2c>
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	fc 01       	movw	r30, r24
    229c:	33 83       	std	Z+3, r19	; 0x03
    229e:	22 83       	std	Z+2, r18	; 0x02
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	15 c0       	rjmp	.+42     	; 0x22d0 <_ZN7TwoWire5writeEh+0x56>
    22a6:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    22aa:	e8 2f       	mov	r30, r24
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	e4 55       	subi	r30, 0x54	; 84
    22b0:	fc 4f       	sbci	r31, 0xFC	; 252
    22b2:	99 81       	ldd	r25, Y+1	; 0x01
    22b4:	90 83       	st	Z, r25
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    22bc:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <_ZN7TwoWire5writeEh+0x52>
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <twi_transmit>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0f 90       	pop	r0
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <_ZN7TwoWireC1Ev>:
    22d8:	fc 01       	movw	r30, r24
    22da:	13 82       	std	Z+3, r1	; 0x03
    22dc:	12 82       	std	Z+2, r1	; 0x02
    22de:	88 ee       	ldi	r24, 0xE8	; 232
    22e0:	93 e0       	ldi	r25, 0x03	; 3
    22e2:	a0 e0       	ldi	r26, 0x00	; 0
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	84 83       	std	Z+4, r24	; 0x04
    22e8:	95 83       	std	Z+5, r25	; 0x05
    22ea:	a6 83       	std	Z+6, r26	; 0x06
    22ec:	b7 83       	std	Z+7, r27	; 0x07
    22ee:	84 eb       	ldi	r24, 0xB4	; 180
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	08 95       	ret

000022f8 <_ZN7TwoWire5beginEv>:
    22f8:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    22fc:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    2300:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    2304:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    2308:	0e 94 1c 12 	call	0x2438	; 0x2438 <twi_init>
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	91 e1       	ldi	r25, 0x11	; 17
    2310:	0e 94 05 13 	call	0x260a	; 0x260a <twi_attachSlaveTxEvent>
    2314:	8a ed       	ldi	r24, 0xDA	; 218
    2316:	90 e1       	ldi	r25, 0x10	; 16
    2318:	0c 94 00 13 	jmp	0x2600	; 0x2600 <twi_attachSlaveRxEvent>

0000231c <_ZN7TwoWire17beginTransmissionEh>:
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <_ZN7TwoWire12transmittingE>
    2322:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <_ZN7TwoWire9txAddressE>
    2326:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    232a:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    232e:	08 95       	ret

00002330 <_ZN7TwoWire17beginTransmissionEi>:
    2330:	0c 94 8e 11 	jmp	0x231c	; 0x231c <_ZN7TwoWire17beginTransmissionEh>

00002334 <_ZN7TwoWire15endTransmissionEh>:
    2334:	0f 93       	push	r16
    2336:	06 2f       	mov	r16, r22
    2338:	21 e0       	ldi	r18, 0x01	; 1
    233a:	40 91 aa 03 	lds	r20, 0x03AA	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    233e:	6c ea       	ldi	r22, 0xAC	; 172
    2340:	73 e0       	ldi	r23, 0x03	; 3
    2342:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_ZN7TwoWire9txAddressE>
    2346:	0e 94 82 12 	call	0x2504	; 0x2504 <twi_writeTo>
    234a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <_ZN7TwoWire13txBufferIndexE>
    234e:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <_ZN7TwoWire14txBufferLengthE>
    2352:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <_ZN7TwoWire12transmittingE>
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <_ZN7TwoWire11requestFromEhhmhh>:
    235a:	4f 92       	push	r4
    235c:	5f 92       	push	r5
    235e:	6f 92       	push	r6
    2360:	7f 92       	push	r7
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	5c 01       	movw	r10, r24
    2376:	f6 2e       	mov	r15, r22
    2378:	d4 2f       	mov	r29, r20
    237a:	28 01       	movw	r4, r16
    237c:	39 01       	movw	r6, r18
    237e:	ee 20       	and	r14, r14
    2380:	21 f1       	breq	.+72     	; 0x23ca <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2382:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN7TwoWire17beginTransmissionEh>
    2386:	ce 2d       	mov	r28, r14
    2388:	c4 30       	cpi	r28, 0x04	; 4
    238a:	08 f0       	brcs	.+2      	; 0x238e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    238c:	c3 e0       	ldi	r28, 0x03	; 3
    238e:	c1 50       	subi	r28, 0x01	; 1
    2390:	c0 f0       	brcs	.+48     	; 0x23c2 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2392:	28 e0       	ldi	r18, 0x08	; 8
    2394:	c2 9f       	mul	r28, r18
    2396:	c0 01       	movw	r24, r0
    2398:	11 24       	eor	r1, r1
    239a:	a3 01       	movw	r20, r6
    239c:	92 01       	movw	r18, r4
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    23a0:	56 95       	lsr	r21
    23a2:	47 95       	ror	r20
    23a4:	37 95       	ror	r19
    23a6:	27 95       	ror	r18
    23a8:	8a 95       	dec	r24
    23aa:	d2 f7       	brpl	.-12     	; 0x23a0 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    23ac:	ca 01       	movw	r24, r20
    23ae:	b9 01       	movw	r22, r18
    23b0:	d5 01       	movw	r26, r10
    23b2:	ed 91       	ld	r30, X+
    23b4:	fc 91       	ld	r31, X
    23b6:	01 90       	ld	r0, Z+
    23b8:	f0 81       	ld	r31, Z
    23ba:	e0 2d       	mov	r30, r0
    23bc:	c5 01       	movw	r24, r10
    23be:	09 95       	icall
    23c0:	e6 cf       	rjmp	.-52     	; 0x238e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	c5 01       	movw	r24, r10
    23c6:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire15endTransmissionEh>
    23ca:	4d 2f       	mov	r20, r29
    23cc:	d1 32       	cpi	r29, 0x21	; 33
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	2c 2d       	mov	r18, r12
    23d4:	6f ec       	ldi	r22, 0xCF	; 207
    23d6:	73 e0       	ldi	r23, 0x03	; 3
    23d8:	8f 2d       	mov	r24, r15
    23da:	0e 94 3a 12 	call	0x2474	; 0x2474 <twi_readFrom>
    23de:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN7TwoWire13rxBufferIndexE>
    23e2:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_ZN7TwoWire14rxBufferLengthE>
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	af 90       	pop	r10
    23f8:	7f 90       	pop	r7
    23fa:	6f 90       	pop	r6
    23fc:	5f 90       	pop	r5
    23fe:	4f 90       	pop	r4
    2400:	08 95       	ret

00002402 <_ZN7TwoWire11requestFromEhhh>:
    2402:	cf 92       	push	r12
    2404:	ef 92       	push	r14
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	c2 2e       	mov	r12, r18
    240c:	e1 2c       	mov	r14, r1
    240e:	00 e0       	ldi	r16, 0x00	; 0
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	98 01       	movw	r18, r16
    2414:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire11requestFromEhhmhh>
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ef 90       	pop	r14
    241e:	cf 90       	pop	r12
    2420:	08 95       	ret

00002422 <_ZN7TwoWire11requestFromEii>:
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	0c 94 01 12 	jmp	0x2402	; 0x2402 <_ZN7TwoWire11requestFromEhhh>

00002428 <_ZN7TwoWire15endTransmissionEv>:
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <_ZN7TwoWire15endTransmissionEh>

0000242e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    242e:	89 e9       	ldi	r24, 0x99	; 153
    2430:	93 e0       	ldi	r25, 0x03	; 3
    2432:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_ZN7TwoWireC1Ev>

00002436 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2436:	08 95       	ret

00002438 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2438:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <twi_state>
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <twi_sendStop>
    2442:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_inRepStart>
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	82 e1       	ldi	r24, 0x12	; 18
    244a:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	83 e1       	ldi	r24, 0x13	; 19
    2452:	0e 94 38 0a 	call	0x1470	; 0x1470 <digitalWrite>
    2456:	e9 eb       	ldi	r30, 0xB9	; 185
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8e 7f       	andi	r24, 0xFE	; 254
    245e:	80 83       	st	Z, r24
    2460:	80 81       	ld	r24, Z
    2462:	8d 7f       	andi	r24, 0xFD	; 253
    2464:	80 83       	st	Z, r24
    2466:	88 e4       	ldi	r24, 0x48	; 72
    2468:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    246c:	85 e4       	ldi	r24, 0x45	; 69
    246e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2472:	08 95       	ret

00002474 <twi_readFrom>:
    2474:	41 32       	cpi	r20, 0x21	; 33
    2476:	08 f0       	brcs	.+2      	; 0x247a <twi_readFrom+0x6>
    2478:	43 c0       	rjmp	.+134    	; 0x2500 <twi_readFrom+0x8c>
    247a:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <twi_state>
    247e:	91 11       	cpse	r25, r1
    2480:	fc cf       	rjmp	.-8      	; 0x247a <twi_readFrom+0x6>
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <twi_state>
    2488:	20 93 5a 04 	sts	0x045A, r18	; 0x80045a <twi_sendStop>
    248c:	2f ef       	ldi	r18, 0xFF	; 255
    248e:	20 93 ef 03 	sts	0x03EF, r18	; 0x8003ef <twi_error>
    2492:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <twi_masterBufferIndex>
    2496:	24 0f       	add	r18, r20
    2498:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <twi_masterBufferLength>
    249c:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <twi_slarw>
    24a0:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <twi_slarw>
    24a4:	88 0f       	add	r24, r24
    24a6:	89 2b       	or	r24, r25
    24a8:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <twi_slarw>
    24ac:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_inRepStart>
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	61 f4       	brne	.+24     	; 0x24cc <twi_readFrom+0x58>
    24b4:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_inRepStart>
    24b8:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <twi_slarw>
    24bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    24c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24c4:	83 fd       	sbrc	r24, 3
    24c6:	f8 cf       	rjmp	.-16     	; 0x24b8 <twi_readFrom+0x44>
    24c8:	85 ec       	ldi	r24, 0xC5	; 197
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <twi_readFrom+0x5a>
    24cc:	85 ee       	ldi	r24, 0xE5	; 229
    24ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24d2:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <twi_state>
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	e1 f3       	breq	.-8      	; 0x24d2 <twi_readFrom+0x5e>
    24da:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <twi_masterBufferIndex>
    24de:	84 17       	cp	r24, r20
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <twi_readFrom+0x72>
    24e2:	40 91 34 04 	lds	r20, 0x0434	; 0x800434 <twi_masterBufferIndex>
    24e6:	a5 e3       	ldi	r26, 0x35	; 53
    24e8:	b4 e0       	ldi	r27, 0x04	; 4
    24ea:	96 2f       	mov	r25, r22
    24ec:	fb 01       	movw	r30, r22
    24ee:	8e 2f       	mov	r24, r30
    24f0:	89 1b       	sub	r24, r25
    24f2:	84 17       	cp	r24, r20
    24f4:	18 f4       	brcc	.+6      	; 0x24fc <twi_readFrom+0x88>
    24f6:	8d 91       	ld	r24, X+
    24f8:	81 93       	st	Z+, r24
    24fa:	f9 cf       	rjmp	.-14     	; 0x24ee <twi_readFrom+0x7a>
    24fc:	84 2f       	mov	r24, r20
    24fe:	08 95       	ret
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	08 95       	ret

00002504 <twi_writeTo>:
    2504:	0f 93       	push	r16
    2506:	41 32       	cpi	r20, 0x21	; 33
    2508:	08 f0       	brcs	.+2      	; 0x250c <twi_writeTo+0x8>
    250a:	4a c0       	rjmp	.+148    	; 0x25a0 <twi_writeTo+0x9c>
    250c:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <twi_state>
    2510:	91 11       	cpse	r25, r1
    2512:	fc cf       	rjmp	.-8      	; 0x250c <twi_writeTo+0x8>
    2514:	32 e0       	ldi	r19, 0x02	; 2
    2516:	30 93 5c 04 	sts	0x045C, r19	; 0x80045c <twi_state>
    251a:	00 93 5a 04 	sts	0x045A, r16	; 0x80045a <twi_sendStop>
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <twi_error>
    2524:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <twi_masterBufferIndex>
    2528:	40 93 33 04 	sts	0x0433, r20	; 0x800433 <twi_masterBufferLength>
    252c:	56 2f       	mov	r21, r22
    252e:	a5 e3       	ldi	r26, 0x35	; 53
    2530:	b4 e0       	ldi	r27, 0x04	; 4
    2532:	fb 01       	movw	r30, r22
    2534:	3e 2f       	mov	r19, r30
    2536:	35 1b       	sub	r19, r21
    2538:	34 17       	cp	r19, r20
    253a:	18 f4       	brcc	.+6      	; 0x2542 <twi_writeTo+0x3e>
    253c:	31 91       	ld	r19, Z+
    253e:	3d 93       	st	X+, r19
    2540:	f9 cf       	rjmp	.-14     	; 0x2534 <twi_writeTo+0x30>
    2542:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <twi_slarw>
    2546:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <twi_slarw>
    254a:	88 0f       	add	r24, r24
    254c:	83 2b       	or	r24, r19
    254e:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <twi_slarw>
    2552:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_inRepStart>
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	61 f4       	brne	.+24     	; 0x2572 <twi_writeTo+0x6e>
    255a:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_inRepStart>
    255e:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <twi_slarw>
    2562:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2566:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    256a:	83 fd       	sbrc	r24, 3
    256c:	f8 cf       	rjmp	.-16     	; 0x255e <twi_writeTo+0x5a>
    256e:	85 ec       	ldi	r24, 0xC5	; 197
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <twi_writeTo+0x70>
    2572:	85 ee       	ldi	r24, 0xE5	; 229
    2574:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2578:	22 23       	and	r18, r18
    257a:	21 f0       	breq	.+8      	; 0x2584 <twi_writeTo+0x80>
    257c:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <twi_state>
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	d1 f3       	breq	.-12     	; 0x2578 <twi_writeTo+0x74>
    2584:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <twi_error>
    2588:	8f 3f       	cpi	r24, 0xFF	; 255
    258a:	79 f0       	breq	.+30     	; 0x25aa <twi_writeTo+0xa6>
    258c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <twi_error>
    2590:	80 32       	cpi	r24, 0x20	; 32
    2592:	41 f0       	breq	.+16     	; 0x25a4 <twi_writeTo+0xa0>
    2594:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <twi_error>
    2598:	80 33       	cpi	r24, 0x30	; 48
    259a:	31 f0       	breq	.+12     	; 0x25a8 <twi_writeTo+0xa4>
    259c:	94 e0       	ldi	r25, 0x04	; 4
    259e:	05 c0       	rjmp	.+10     	; 0x25aa <twi_writeTo+0xa6>
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <twi_writeTo+0xa6>
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <twi_writeTo+0xa6>
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	89 2f       	mov	r24, r25
    25ac:	0f 91       	pop	r16
    25ae:	08 95       	ret

000025b0 <twi_transmit>:
    25b0:	40 91 11 04 	lds	r20, 0x0411	; 0x800411 <twi_txBufferLength>
    25b4:	26 2f       	mov	r18, r22
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	24 0f       	add	r18, r20
    25ba:	31 1d       	adc	r19, r1
    25bc:	21 32       	cpi	r18, 0x21	; 33
    25be:	31 05       	cpc	r19, r1
    25c0:	dc f4       	brge	.+54     	; 0x25f8 <twi_transmit+0x48>
    25c2:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <twi_state>
    25c6:	24 30       	cpi	r18, 0x04	; 4
    25c8:	c9 f4       	brne	.+50     	; 0x25fc <twi_transmit+0x4c>
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	86 17       	cp	r24, r22
    25d2:	58 f4       	brcc	.+22     	; 0x25ea <twi_transmit+0x3a>
    25d4:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <twi_txBufferLength>
    25d8:	21 91       	ld	r18, Z+
    25da:	dc 01       	movw	r26, r24
    25dc:	ad 5e       	subi	r26, 0xED	; 237
    25de:	bb 4f       	sbci	r27, 0xFB	; 251
    25e0:	a3 0f       	add	r26, r19
    25e2:	b1 1d       	adc	r27, r1
    25e4:	2c 93       	st	X, r18
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	f3 cf       	rjmp	.-26     	; 0x25d0 <twi_transmit+0x20>
    25ea:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_txBufferLength>
    25ee:	68 0f       	add	r22, r24
    25f0:	60 93 11 04 	sts	0x0411, r22	; 0x800411 <twi_txBufferLength>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	08 95       	ret
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	08 95       	ret
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	08 95       	ret

00002600 <twi_attachSlaveRxEvent>:
    2600:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <twi_onSlaveReceive+0x1>
    2604:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <twi_onSlaveReceive>
    2608:	08 95       	ret

0000260a <twi_attachSlaveTxEvent>:
    260a:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <twi_onSlaveTransmit+0x1>
    260e:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <twi_onSlaveTransmit>
    2612:	08 95       	ret

00002614 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2614:	85 ed       	ldi	r24, 0xD5	; 213
    2616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    261a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    261e:	84 fd       	sbrc	r24, 4
    2620:	fc cf       	rjmp	.-8      	; 0x261a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2622:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <twi_state>
    2626:	08 95       	ret

00002628 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2628:	85 ec       	ldi	r24, 0xC5	; 197
    262a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    262e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <twi_state>
    2632:	08 95       	ret

00002634 <__vector_24>:
}

ISR(TWI_vect)
{
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
  switch(TW_STATUS){
    2656:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    265a:	88 7f       	andi	r24, 0xF8	; 248
    265c:	80 36       	cpi	r24, 0x60	; 96
    265e:	09 f4       	brne	.+2      	; 0x2662 <__vector_24+0x2e>
    2660:	9e c0       	rjmp	.+316    	; 0x279e <__vector_24+0x16a>
    2662:	78 f5       	brcc	.+94     	; 0x26c2 <__vector_24+0x8e>
    2664:	88 32       	cpi	r24, 0x28	; 40
    2666:	09 f4       	brne	.+2      	; 0x266a <__vector_24+0x36>
    2668:	5d c0       	rjmp	.+186    	; 0x2724 <__vector_24+0xf0>
    266a:	90 f4       	brcc	.+36     	; 0x2690 <__vector_24+0x5c>
    266c:	80 31       	cpi	r24, 0x10	; 16
    266e:	09 f4       	brne	.+2      	; 0x2672 <__vector_24+0x3e>
    2670:	56 c0       	rjmp	.+172    	; 0x271e <__vector_24+0xea>
    2672:	38 f4       	brcc	.+14     	; 0x2682 <__vector_24+0x4e>
    2674:	88 23       	and	r24, r24
    2676:	09 f4       	brne	.+2      	; 0x267a <__vector_24+0x46>
    2678:	f5 c0       	rjmp	.+490    	; 0x2864 <__vector_24+0x230>
    267a:	88 30       	cpi	r24, 0x08	; 8
    267c:	09 f4       	brne	.+2      	; 0x2680 <__vector_24+0x4c>
    267e:	4f c0       	rjmp	.+158    	; 0x271e <__vector_24+0xea>
    2680:	f5 c0       	rjmp	.+490    	; 0x286c <__vector_24+0x238>
    2682:	88 31       	cpi	r24, 0x18	; 24
    2684:	09 f4       	brne	.+2      	; 0x2688 <__vector_24+0x54>
    2686:	4e c0       	rjmp	.+156    	; 0x2724 <__vector_24+0xf0>
    2688:	80 32       	cpi	r24, 0x20	; 32
    268a:	09 f4       	brne	.+2      	; 0x268e <__vector_24+0x5a>
    268c:	5f c0       	rjmp	.+190    	; 0x274c <__vector_24+0x118>
    268e:	ee c0       	rjmp	.+476    	; 0x286c <__vector_24+0x238>
    2690:	80 34       	cpi	r24, 0x40	; 64
    2692:	09 f4       	brne	.+2      	; 0x2696 <__vector_24+0x62>
    2694:	6a c0       	rjmp	.+212    	; 0x276a <__vector_24+0x136>
    2696:	58 f4       	brcc	.+22     	; 0x26ae <__vector_24+0x7a>
    2698:	80 33       	cpi	r24, 0x30	; 48
    269a:	09 f4       	brne	.+2      	; 0x269e <__vector_24+0x6a>
    269c:	57 c0       	rjmp	.+174    	; 0x274c <__vector_24+0x118>
    269e:	88 33       	cpi	r24, 0x38	; 56
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__vector_24+0x70>
    26a2:	e4 c0       	rjmp	.+456    	; 0x286c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    26a4:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <twi_error>
      twi_releaseBus();
    26a8:	0e 94 14 13 	call	0x2628	; 0x2628 <twi_releaseBus>
      break;
    26ac:	df c0       	rjmp	.+446    	; 0x286c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    26ae:	80 35       	cpi	r24, 0x50	; 80
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__vector_24+0x80>
    26b2:	4f c0       	rjmp	.+158    	; 0x2752 <__vector_24+0x11e>
    26b4:	88 35       	cpi	r24, 0x58	; 88
    26b6:	09 f4       	brne	.+2      	; 0x26ba <__vector_24+0x86>
    26b8:	5d c0       	rjmp	.+186    	; 0x2774 <__vector_24+0x140>
    26ba:	88 34       	cpi	r24, 0x48	; 72
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <__vector_24+0x8c>
    26be:	d6 c0       	rjmp	.+428    	; 0x286c <__vector_24+0x238>
    26c0:	d3 c0       	rjmp	.+422    	; 0x2868 <__vector_24+0x234>
    26c2:	88 39       	cpi	r24, 0x98	; 152
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <__vector_24+0x94>
    26c6:	c4 c0       	rjmp	.+392    	; 0x2850 <__vector_24+0x21c>
    26c8:	a8 f4       	brcc	.+42     	; 0x26f4 <__vector_24+0xc0>
    26ca:	88 37       	cpi	r24, 0x78	; 120
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <__vector_24+0x9c>
    26ce:	67 c0       	rjmp	.+206    	; 0x279e <__vector_24+0x16a>
    26d0:	38 f4       	brcc	.+14     	; 0x26e0 <__vector_24+0xac>
    26d2:	88 36       	cpi	r24, 0x68	; 104
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <__vector_24+0xa4>
    26d6:	63 c0       	rjmp	.+198    	; 0x279e <__vector_24+0x16a>
    26d8:	80 37       	cpi	r24, 0x70	; 112
    26da:	09 f4       	brne	.+2      	; 0x26de <__vector_24+0xaa>
    26dc:	60 c0       	rjmp	.+192    	; 0x279e <__vector_24+0x16a>
    26de:	c6 c0       	rjmp	.+396    	; 0x286c <__vector_24+0x238>
    26e0:	88 38       	cpi	r24, 0x88	; 136
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <__vector_24+0xb2>
    26e4:	b5 c0       	rjmp	.+362    	; 0x2850 <__vector_24+0x21c>
    26e6:	80 39       	cpi	r24, 0x90	; 144
    26e8:	09 f4       	brne	.+2      	; 0x26ec <__vector_24+0xb8>
    26ea:	5f c0       	rjmp	.+190    	; 0x27aa <__vector_24+0x176>
    26ec:	80 38       	cpi	r24, 0x80	; 128
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <__vector_24+0xbe>
    26f0:	bd c0       	rjmp	.+378    	; 0x286c <__vector_24+0x238>
    26f2:	5b c0       	rjmp	.+182    	; 0x27aa <__vector_24+0x176>
    26f4:	80 3b       	cpi	r24, 0xB0	; 176
    26f6:	09 f4       	brne	.+2      	; 0x26fa <__vector_24+0xc6>
    26f8:	83 c0       	rjmp	.+262    	; 0x2800 <__vector_24+0x1cc>
    26fa:	38 f4       	brcc	.+14     	; 0x270a <__vector_24+0xd6>
    26fc:	80 3a       	cpi	r24, 0xA0	; 160
    26fe:	09 f4       	brne	.+2      	; 0x2702 <__vector_24+0xce>
    2700:	66 c0       	rjmp	.+204    	; 0x27ce <__vector_24+0x19a>
    2702:	88 3a       	cpi	r24, 0xA8	; 168
    2704:	09 f4       	brne	.+2      	; 0x2708 <__vector_24+0xd4>
    2706:	7c c0       	rjmp	.+248    	; 0x2800 <__vector_24+0x1cc>
    2708:	b1 c0       	rjmp	.+354    	; 0x286c <__vector_24+0x238>
    270a:	80 3c       	cpi	r24, 0xC0	; 192
    270c:	09 f4       	brne	.+2      	; 0x2710 <__vector_24+0xdc>
    270e:	a4 c0       	rjmp	.+328    	; 0x2858 <__vector_24+0x224>
    2710:	88 3c       	cpi	r24, 0xC8	; 200
    2712:	09 f4       	brne	.+2      	; 0x2716 <__vector_24+0xe2>
    2714:	a1 c0       	rjmp	.+322    	; 0x2858 <__vector_24+0x224>
    2716:	88 3b       	cpi	r24, 0xB8	; 184
    2718:	09 f4       	brne	.+2      	; 0x271c <__vector_24+0xe8>
    271a:	87 c0       	rjmp	.+270    	; 0x282a <__vector_24+0x1f6>
    271c:	a7 c0       	rjmp	.+334    	; 0x286c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    271e:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <twi_slarw>
    2722:	10 c0       	rjmp	.+32     	; 0x2744 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2724:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <twi_masterBufferIndex>
    2728:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <twi_masterBufferLength>
    272c:	98 17       	cp	r25, r24
    272e:	70 f5       	brcc	.+92     	; 0x278c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2730:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <twi_masterBufferIndex>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	8e 0f       	add	r24, r30
    2738:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <twi_masterBufferIndex>
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	eb 5c       	subi	r30, 0xCB	; 203
    2740:	fb 4f       	sbci	r31, 0xFB	; 251
    2742:	80 81       	ld	r24, Z
    2744:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2748:	85 ec       	ldi	r24, 0xC5	; 197
    274a:	83 c0       	rjmp	.+262    	; 0x2852 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    274c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <twi_error>
    2750:	8b c0       	rjmp	.+278    	; 0x2868 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2752:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <twi_masterBufferIndex>
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	8e 0f       	add	r24, r30
    275a:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <twi_masterBufferIndex>
    275e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	eb 5c       	subi	r30, 0xCB	; 203
    2766:	fb 4f       	sbci	r31, 0xFB	; 251
    2768:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    276a:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <twi_masterBufferIndex>
    276e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <twi_masterBufferLength>
    2772:	6b c0       	rjmp	.+214    	; 0x284a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2774:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <twi_masterBufferIndex>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	8e 0f       	add	r24, r30
    277c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <twi_masterBufferIndex>
    2780:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	eb 5c       	subi	r30, 0xCB	; 203
    2788:	fb 4f       	sbci	r31, 0xFB	; 251
    278a:	80 83       	st	Z, r24
	if (twi_sendStop)
    278c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <twi_sendStop>
    2790:	81 11       	cpse	r24, r1
    2792:	6a c0       	rjmp	.+212    	; 0x2868 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    279a:	84 ea       	ldi	r24, 0xA4	; 164
    279c:	5e c0       	rjmp	.+188    	; 0x285a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    27a4:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <twi_rxBufferIndex>
    27a8:	cf cf       	rjmp	.-98     	; 0x2748 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27aa:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <twi_rxBufferIndex>
    27ae:	80 32       	cpi	r24, 0x20	; 32
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <__vector_24+0x180>
    27b2:	4e c0       	rjmp	.+156    	; 0x2850 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    27b4:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <twi_rxBufferIndex>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8e 0f       	add	r24, r30
    27bc:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <twi_rxBufferIndex>
    27c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	ef 50       	subi	r30, 0x0F	; 15
    27c8:	fc 4f       	sbci	r31, 0xFC	; 252
    27ca:	80 83       	st	Z, r24
    27cc:	bd cf       	rjmp	.-134    	; 0x2748 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    27ce:	0e 94 14 13 	call	0x2628	; 0x2628 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27d2:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <twi_rxBufferIndex>
    27d6:	80 32       	cpi	r24, 0x20	; 32
    27d8:	30 f4       	brcc	.+12     	; 0x27e6 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    27da:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <twi_rxBufferIndex>
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	ef 50       	subi	r30, 0x0F	; 15
    27e2:	fc 4f       	sbci	r31, 0xFC	; 252
    27e4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    27e6:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <twi_rxBufferIndex>
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <twi_onSlaveReceive>
    27f0:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <twi_onSlaveReceive+0x1>
    27f4:	81 ef       	ldi	r24, 0xF1	; 241
    27f6:	93 e0       	ldi	r25, 0x03	; 3
    27f8:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    27fa:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <twi_rxBufferIndex>
      break;
    27fe:	36 c0       	rjmp	.+108    	; 0x286c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2800:	84 e0       	ldi	r24, 0x04	; 4
    2802:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2806:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    280a:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    280e:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <twi_onSlaveTransmit>
    2812:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <twi_onSlaveTransmit+0x1>
    2816:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2818:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_txBufferLength>
    281c:	81 11       	cpse	r24, r1
    281e:	05 c0       	rjmp	.+10     	; 0x282a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2826:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    282a:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <twi_txBufferIndex>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	8e 0f       	add	r24, r30
    2832:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <twi_txBufferIndex>
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	ed 5e       	subi	r30, 0xED	; 237
    283a:	fb 4f       	sbci	r31, 0xFB	; 251
    283c:	80 81       	ld	r24, Z
    283e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2842:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <twi_txBufferIndex>
    2846:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_txBufferLength>
    284a:	98 17       	cp	r25, r24
    284c:	08 f4       	brcc	.+2      	; 0x2850 <__vector_24+0x21c>
    284e:	7c cf       	rjmp	.-264    	; 0x2748 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2850:	85 e8       	ldi	r24, 0x85	; 133
    2852:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2856:	0a c0       	rjmp	.+20     	; 0x286c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2858:	85 ec       	ldi	r24, 0xC5	; 197
    285a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    285e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <twi_state>
      break;
    2862:	04 c0       	rjmp	.+8      	; 0x286c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2864:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <twi_error>
      twi_stop();
    2868:	0e 94 0a 13 	call	0x2614	; 0x2614 <twi_stop>
      break;
  }
}
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	7f 91       	pop	r23
    287a:	6f 91       	pop	r22
    287c:	5f 91       	pop	r21
    287e:	4f 91       	pop	r20
    2880:	3f 91       	pop	r19
    2882:	2f 91       	pop	r18
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <__udivmodsi4>:
    288e:	a1 e2       	ldi	r26, 0x21	; 33
    2890:	1a 2e       	mov	r1, r26
    2892:	aa 1b       	sub	r26, r26
    2894:	bb 1b       	sub	r27, r27
    2896:	fd 01       	movw	r30, r26
    2898:	0d c0       	rjmp	.+26     	; 0x28b4 <__udivmodsi4_ep>

0000289a <__udivmodsi4_loop>:
    289a:	aa 1f       	adc	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	ee 1f       	adc	r30, r30
    28a0:	ff 1f       	adc	r31, r31
    28a2:	a2 17       	cp	r26, r18
    28a4:	b3 07       	cpc	r27, r19
    28a6:	e4 07       	cpc	r30, r20
    28a8:	f5 07       	cpc	r31, r21
    28aa:	20 f0       	brcs	.+8      	; 0x28b4 <__udivmodsi4_ep>
    28ac:	a2 1b       	sub	r26, r18
    28ae:	b3 0b       	sbc	r27, r19
    28b0:	e4 0b       	sbc	r30, r20
    28b2:	f5 0b       	sbc	r31, r21

000028b4 <__udivmodsi4_ep>:
    28b4:	66 1f       	adc	r22, r22
    28b6:	77 1f       	adc	r23, r23
    28b8:	88 1f       	adc	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	1a 94       	dec	r1
    28be:	69 f7       	brne	.-38     	; 0x289a <__udivmodsi4_loop>
    28c0:	60 95       	com	r22
    28c2:	70 95       	com	r23
    28c4:	80 95       	com	r24
    28c6:	90 95       	com	r25
    28c8:	9b 01       	movw	r18, r22
    28ca:	ac 01       	movw	r20, r24
    28cc:	bd 01       	movw	r22, r26
    28ce:	cf 01       	movw	r24, r30
    28d0:	08 95       	ret

000028d2 <__tablejump2__>:
    28d2:	ee 0f       	add	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	05 90       	lpm	r0, Z+
    28d8:	f4 91       	lpm	r31, Z
    28da:	e0 2d       	mov	r30, r0
    28dc:	09 94       	ijmp

000028de <malloc>:
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	10 f4       	brcc	.+4      	; 0x28f0 <malloc+0x12>
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <__flp>
    28f4:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <__flp+0x1>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	30 97       	sbiw	r30, 0x00	; 0
    2902:	19 f1       	breq	.+70     	; 0x294a <malloc+0x6c>
    2904:	40 81       	ld	r20, Z
    2906:	51 81       	ldd	r21, Z+1	; 0x01
    2908:	02 81       	ldd	r16, Z+2	; 0x02
    290a:	13 81       	ldd	r17, Z+3	; 0x03
    290c:	48 17       	cp	r20, r24
    290e:	59 07       	cpc	r21, r25
    2910:	c8 f0       	brcs	.+50     	; 0x2944 <malloc+0x66>
    2912:	84 17       	cp	r24, r20
    2914:	95 07       	cpc	r25, r21
    2916:	69 f4       	brne	.+26     	; 0x2932 <malloc+0x54>
    2918:	10 97       	sbiw	r26, 0x00	; 0
    291a:	31 f0       	breq	.+12     	; 0x2928 <malloc+0x4a>
    291c:	12 96       	adiw	r26, 0x02	; 2
    291e:	0c 93       	st	X, r16
    2920:	12 97       	sbiw	r26, 0x02	; 2
    2922:	13 96       	adiw	r26, 0x03	; 3
    2924:	1c 93       	st	X, r17
    2926:	27 c0       	rjmp	.+78     	; 0x2976 <malloc+0x98>
    2928:	00 93 5f 04 	sts	0x045F, r16	; 0x80045f <__flp>
    292c:	10 93 60 04 	sts	0x0460, r17	; 0x800460 <__flp+0x1>
    2930:	22 c0       	rjmp	.+68     	; 0x2976 <malloc+0x98>
    2932:	21 15       	cp	r18, r1
    2934:	31 05       	cpc	r19, r1
    2936:	19 f0       	breq	.+6      	; 0x293e <malloc+0x60>
    2938:	42 17       	cp	r20, r18
    293a:	53 07       	cpc	r21, r19
    293c:	18 f4       	brcc	.+6      	; 0x2944 <malloc+0x66>
    293e:	9a 01       	movw	r18, r20
    2940:	bd 01       	movw	r22, r26
    2942:	ef 01       	movw	r28, r30
    2944:	df 01       	movw	r26, r30
    2946:	f8 01       	movw	r30, r16
    2948:	db cf       	rjmp	.-74     	; 0x2900 <malloc+0x22>
    294a:	21 15       	cp	r18, r1
    294c:	31 05       	cpc	r19, r1
    294e:	f9 f0       	breq	.+62     	; 0x298e <malloc+0xb0>
    2950:	28 1b       	sub	r18, r24
    2952:	39 0b       	sbc	r19, r25
    2954:	24 30       	cpi	r18, 0x04	; 4
    2956:	31 05       	cpc	r19, r1
    2958:	80 f4       	brcc	.+32     	; 0x297a <malloc+0x9c>
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	9b 81       	ldd	r25, Y+3	; 0x03
    295e:	61 15       	cp	r22, r1
    2960:	71 05       	cpc	r23, r1
    2962:	21 f0       	breq	.+8      	; 0x296c <malloc+0x8e>
    2964:	fb 01       	movw	r30, r22
    2966:	93 83       	std	Z+3, r25	; 0x03
    2968:	82 83       	std	Z+2, r24	; 0x02
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <malloc+0x96>
    296c:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <__flp+0x1>
    2970:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <__flp>
    2974:	fe 01       	movw	r30, r28
    2976:	32 96       	adiw	r30, 0x02	; 2
    2978:	44 c0       	rjmp	.+136    	; 0x2a02 <malloc+0x124>
    297a:	fe 01       	movw	r30, r28
    297c:	e2 0f       	add	r30, r18
    297e:	f3 1f       	adc	r31, r19
    2980:	81 93       	st	Z+, r24
    2982:	91 93       	st	Z+, r25
    2984:	22 50       	subi	r18, 0x02	; 2
    2986:	31 09       	sbc	r19, r1
    2988:	39 83       	std	Y+1, r19	; 0x01
    298a:	28 83       	st	Y, r18
    298c:	3a c0       	rjmp	.+116    	; 0x2a02 <malloc+0x124>
    298e:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <__brkval>
    2992:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <__brkval+0x1>
    2996:	23 2b       	or	r18, r19
    2998:	41 f4       	brne	.+16     	; 0x29aa <malloc+0xcc>
    299a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    299e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    29a2:	30 93 5e 04 	sts	0x045E, r19	; 0x80045e <__brkval+0x1>
    29a6:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <__brkval>
    29aa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    29ae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    29b2:	21 15       	cp	r18, r1
    29b4:	31 05       	cpc	r19, r1
    29b6:	41 f4       	brne	.+16     	; 0x29c8 <malloc+0xea>
    29b8:	2d b7       	in	r18, 0x3d	; 61
    29ba:	3e b7       	in	r19, 0x3e	; 62
    29bc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29c0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29c4:	24 1b       	sub	r18, r20
    29c6:	35 0b       	sbc	r19, r21
    29c8:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <__brkval>
    29cc:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <__brkval+0x1>
    29d0:	e2 17       	cp	r30, r18
    29d2:	f3 07       	cpc	r31, r19
    29d4:	a0 f4       	brcc	.+40     	; 0x29fe <malloc+0x120>
    29d6:	2e 1b       	sub	r18, r30
    29d8:	3f 0b       	sbc	r19, r31
    29da:	28 17       	cp	r18, r24
    29dc:	39 07       	cpc	r19, r25
    29de:	78 f0       	brcs	.+30     	; 0x29fe <malloc+0x120>
    29e0:	ac 01       	movw	r20, r24
    29e2:	4e 5f       	subi	r20, 0xFE	; 254
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	24 17       	cp	r18, r20
    29e8:	35 07       	cpc	r19, r21
    29ea:	48 f0       	brcs	.+18     	; 0x29fe <malloc+0x120>
    29ec:	4e 0f       	add	r20, r30
    29ee:	5f 1f       	adc	r21, r31
    29f0:	50 93 5e 04 	sts	0x045E, r21	; 0x80045e <__brkval+0x1>
    29f4:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <__brkval>
    29f8:	81 93       	st	Z+, r24
    29fa:	91 93       	st	Z+, r25
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <malloc+0x124>
    29fe:	e0 e0       	ldi	r30, 0x00	; 0
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	cf 01       	movw	r24, r30
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	08 95       	ret

00002a0e <free>:
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <free+0xa>
    2a16:	81 c0       	rjmp	.+258    	; 0x2b1a <free+0x10c>
    2a18:	fc 01       	movw	r30, r24
    2a1a:	32 97       	sbiw	r30, 0x02	; 2
    2a1c:	13 82       	std	Z+3, r1	; 0x03
    2a1e:	12 82       	std	Z+2, r1	; 0x02
    2a20:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <__flp>
    2a24:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <__flp+0x1>
    2a28:	10 97       	sbiw	r26, 0x00	; 0
    2a2a:	81 f4       	brne	.+32     	; 0x2a4c <free+0x3e>
    2a2c:	20 81       	ld	r18, Z
    2a2e:	31 81       	ldd	r19, Z+1	; 0x01
    2a30:	82 0f       	add	r24, r18
    2a32:	93 1f       	adc	r25, r19
    2a34:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <__brkval>
    2a38:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <__brkval+0x1>
    2a3c:	28 17       	cp	r18, r24
    2a3e:	39 07       	cpc	r19, r25
    2a40:	51 f5       	brne	.+84     	; 0x2a96 <free+0x88>
    2a42:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <__brkval+0x1>
    2a46:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <__brkval>
    2a4a:	67 c0       	rjmp	.+206    	; 0x2b1a <free+0x10c>
    2a4c:	ed 01       	movw	r28, r26
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	ce 17       	cp	r28, r30
    2a54:	df 07       	cpc	r29, r31
    2a56:	40 f4       	brcc	.+16     	; 0x2a68 <free+0x5a>
    2a58:	4a 81       	ldd	r20, Y+2	; 0x02
    2a5a:	5b 81       	ldd	r21, Y+3	; 0x03
    2a5c:	9e 01       	movw	r18, r28
    2a5e:	41 15       	cp	r20, r1
    2a60:	51 05       	cpc	r21, r1
    2a62:	f1 f0       	breq	.+60     	; 0x2aa0 <free+0x92>
    2a64:	ea 01       	movw	r28, r20
    2a66:	f5 cf       	rjmp	.-22     	; 0x2a52 <free+0x44>
    2a68:	d3 83       	std	Z+3, r29	; 0x03
    2a6a:	c2 83       	std	Z+2, r28	; 0x02
    2a6c:	40 81       	ld	r20, Z
    2a6e:	51 81       	ldd	r21, Z+1	; 0x01
    2a70:	84 0f       	add	r24, r20
    2a72:	95 1f       	adc	r25, r21
    2a74:	c8 17       	cp	r28, r24
    2a76:	d9 07       	cpc	r29, r25
    2a78:	59 f4       	brne	.+22     	; 0x2a90 <free+0x82>
    2a7a:	88 81       	ld	r24, Y
    2a7c:	99 81       	ldd	r25, Y+1	; 0x01
    2a7e:	84 0f       	add	r24, r20
    2a80:	95 1f       	adc	r25, r21
    2a82:	02 96       	adiw	r24, 0x02	; 2
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	93 83       	std	Z+3, r25	; 0x03
    2a8e:	82 83       	std	Z+2, r24	; 0x02
    2a90:	21 15       	cp	r18, r1
    2a92:	31 05       	cpc	r19, r1
    2a94:	29 f4       	brne	.+10     	; 0x2aa0 <free+0x92>
    2a96:	f0 93 60 04 	sts	0x0460, r31	; 0x800460 <__flp+0x1>
    2a9a:	e0 93 5f 04 	sts	0x045F, r30	; 0x80045f <__flp>
    2a9e:	3d c0       	rjmp	.+122    	; 0x2b1a <free+0x10c>
    2aa0:	e9 01       	movw	r28, r18
    2aa2:	fb 83       	std	Y+3, r31	; 0x03
    2aa4:	ea 83       	std	Y+2, r30	; 0x02
    2aa6:	49 91       	ld	r20, Y+
    2aa8:	59 91       	ld	r21, Y+
    2aaa:	c4 0f       	add	r28, r20
    2aac:	d5 1f       	adc	r29, r21
    2aae:	ec 17       	cp	r30, r28
    2ab0:	fd 07       	cpc	r31, r29
    2ab2:	61 f4       	brne	.+24     	; 0x2acc <free+0xbe>
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	84 0f       	add	r24, r20
    2aba:	95 1f       	adc	r25, r21
    2abc:	02 96       	adiw	r24, 0x02	; 2
    2abe:	e9 01       	movw	r28, r18
    2ac0:	99 83       	std	Y+1, r25	; 0x01
    2ac2:	88 83       	st	Y, r24
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	9b 83       	std	Y+3, r25	; 0x03
    2aca:	8a 83       	std	Y+2, r24	; 0x02
    2acc:	e0 e0       	ldi	r30, 0x00	; 0
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	12 96       	adiw	r26, 0x02	; 2
    2ad2:	8d 91       	ld	r24, X+
    2ad4:	9c 91       	ld	r25, X
    2ad6:	13 97       	sbiw	r26, 0x03	; 3
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <free+0xd4>
    2adc:	fd 01       	movw	r30, r26
    2ade:	dc 01       	movw	r26, r24
    2ae0:	f7 cf       	rjmp	.-18     	; 0x2ad0 <free+0xc2>
    2ae2:	8d 91       	ld	r24, X+
    2ae4:	9c 91       	ld	r25, X
    2ae6:	11 97       	sbiw	r26, 0x01	; 1
    2ae8:	9d 01       	movw	r18, r26
    2aea:	2e 5f       	subi	r18, 0xFE	; 254
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
    2aee:	82 0f       	add	r24, r18
    2af0:	93 1f       	adc	r25, r19
    2af2:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <__brkval>
    2af6:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <__brkval+0x1>
    2afa:	28 17       	cp	r18, r24
    2afc:	39 07       	cpc	r19, r25
    2afe:	69 f4       	brne	.+26     	; 0x2b1a <free+0x10c>
    2b00:	30 97       	sbiw	r30, 0x00	; 0
    2b02:	29 f4       	brne	.+10     	; 0x2b0e <free+0x100>
    2b04:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <__flp+0x1>
    2b08:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <__flp>
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <free+0x104>
    2b0e:	13 82       	std	Z+3, r1	; 0x03
    2b10:	12 82       	std	Z+2, r1	; 0x02
    2b12:	b0 93 5e 04 	sts	0x045E, r27	; 0x80045e <__brkval+0x1>
    2b16:	a0 93 5d 04 	sts	0x045D, r26	; 0x80045d <__brkval>
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	08 95       	ret

00002b20 <realloc>:
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e6 e9       	ldi	r30, 0x96	; 150
    2b26:	f5 e1       	ldi	r31, 0x15	; 21
    2b28:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__prologue_saves__+0x8>
    2b2c:	ec 01       	movw	r28, r24
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	21 f4       	brne	.+8      	; 0x2b3a <realloc+0x1a>
    2b32:	cb 01       	movw	r24, r22
    2b34:	0e 94 6f 14 	call	0x28de	; 0x28de <malloc>
    2b38:	b4 c0       	rjmp	.+360    	; 0x2ca2 <realloc+0x182>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	e6 0f       	add	r30, r22
    2b3e:	f7 1f       	adc	r31, r23
    2b40:	9c 01       	movw	r18, r24
    2b42:	22 50       	subi	r18, 0x02	; 2
    2b44:	31 09       	sbc	r19, r1
    2b46:	e2 17       	cp	r30, r18
    2b48:	f3 07       	cpc	r31, r19
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <realloc+0x2e>
    2b4c:	a8 c0       	rjmp	.+336    	; 0x2c9e <realloc+0x17e>
    2b4e:	d9 01       	movw	r26, r18
    2b50:	0d 91       	ld	r16, X+
    2b52:	1c 91       	ld	r17, X
    2b54:	11 97       	sbiw	r26, 0x01	; 1
    2b56:	06 17       	cp	r16, r22
    2b58:	17 07       	cpc	r17, r23
    2b5a:	b0 f0       	brcs	.+44     	; 0x2b88 <realloc+0x68>
    2b5c:	05 30       	cpi	r16, 0x05	; 5
    2b5e:	11 05       	cpc	r17, r1
    2b60:	08 f4       	brcc	.+2      	; 0x2b64 <realloc+0x44>
    2b62:	9b c0       	rjmp	.+310    	; 0x2c9a <realloc+0x17a>
    2b64:	c8 01       	movw	r24, r16
    2b66:	04 97       	sbiw	r24, 0x04	; 4
    2b68:	86 17       	cp	r24, r22
    2b6a:	97 07       	cpc	r25, r23
    2b6c:	08 f4       	brcc	.+2      	; 0x2b70 <realloc+0x50>
    2b6e:	95 c0       	rjmp	.+298    	; 0x2c9a <realloc+0x17a>
    2b70:	02 50       	subi	r16, 0x02	; 2
    2b72:	11 09       	sbc	r17, r1
    2b74:	06 1b       	sub	r16, r22
    2b76:	17 0b       	sbc	r17, r23
    2b78:	01 93       	st	Z+, r16
    2b7a:	11 93       	st	Z+, r17
    2b7c:	6d 93       	st	X+, r22
    2b7e:	7c 93       	st	X, r23
    2b80:	cf 01       	movw	r24, r30
    2b82:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <free>
    2b86:	89 c0       	rjmp	.+274    	; 0x2c9a <realloc+0x17a>
    2b88:	5b 01       	movw	r10, r22
    2b8a:	a0 1a       	sub	r10, r16
    2b8c:	b1 0a       	sbc	r11, r17
    2b8e:	4c 01       	movw	r8, r24
    2b90:	80 0e       	add	r8, r16
    2b92:	91 1e       	adc	r9, r17
    2b94:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <__flp>
    2b98:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <__flp+0x1>
    2b9c:	61 2c       	mov	r6, r1
    2b9e:	71 2c       	mov	r7, r1
    2ba0:	e1 2c       	mov	r14, r1
    2ba2:	f1 2c       	mov	r15, r1
    2ba4:	10 97       	sbiw	r26, 0x00	; 0
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <realloc+0x8a>
    2ba8:	46 c0       	rjmp	.+140    	; 0x2c36 <realloc+0x116>
    2baa:	8d 91       	ld	r24, X+
    2bac:	9c 91       	ld	r25, X
    2bae:	11 97       	sbiw	r26, 0x01	; 1
    2bb0:	a8 15       	cp	r26, r8
    2bb2:	b9 05       	cpc	r27, r9
    2bb4:	b1 f5       	brne	.+108    	; 0x2c22 <realloc+0x102>
    2bb6:	6c 01       	movw	r12, r24
    2bb8:	42 e0       	ldi	r20, 0x02	; 2
    2bba:	c4 0e       	add	r12, r20
    2bbc:	d1 1c       	adc	r13, r1
    2bbe:	ca 14       	cp	r12, r10
    2bc0:	db 04       	cpc	r13, r11
    2bc2:	78 f1       	brcs	.+94     	; 0x2c22 <realloc+0x102>
    2bc4:	4c 01       	movw	r8, r24
    2bc6:	8a 18       	sub	r8, r10
    2bc8:	9b 08       	sbc	r9, r11
    2bca:	64 01       	movw	r12, r8
    2bcc:	42 e0       	ldi	r20, 0x02	; 2
    2bce:	c4 0e       	add	r12, r20
    2bd0:	d1 1c       	adc	r13, r1
    2bd2:	12 96       	adiw	r26, 0x02	; 2
    2bd4:	bc 90       	ld	r11, X
    2bd6:	12 97       	sbiw	r26, 0x02	; 2
    2bd8:	13 96       	adiw	r26, 0x03	; 3
    2bda:	ac 91       	ld	r26, X
    2bdc:	b5 e0       	ldi	r27, 0x05	; 5
    2bde:	cb 16       	cp	r12, r27
    2be0:	d1 04       	cpc	r13, r1
    2be2:	40 f0       	brcs	.+16     	; 0x2bf4 <realloc+0xd4>
    2be4:	b2 82       	std	Z+2, r11	; 0x02
    2be6:	a3 83       	std	Z+3, r26	; 0x03
    2be8:	91 82       	std	Z+1, r9	; 0x01
    2bea:	80 82       	st	Z, r8
    2bec:	d9 01       	movw	r26, r18
    2bee:	6d 93       	st	X+, r22
    2bf0:	7c 93       	st	X, r23
    2bf2:	09 c0       	rjmp	.+18     	; 0x2c06 <realloc+0xe6>
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	80 0f       	add	r24, r16
    2bfa:	91 1f       	adc	r25, r17
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	eb 2d       	mov	r30, r11
    2c04:	fa 2f       	mov	r31, r26
    2c06:	e1 14       	cp	r14, r1
    2c08:	f1 04       	cpc	r15, r1
    2c0a:	31 f0       	breq	.+12     	; 0x2c18 <realloc+0xf8>
    2c0c:	d7 01       	movw	r26, r14
    2c0e:	13 96       	adiw	r26, 0x03	; 3
    2c10:	fc 93       	st	X, r31
    2c12:	ee 93       	st	-X, r30
    2c14:	12 97       	sbiw	r26, 0x02	; 2
    2c16:	41 c0       	rjmp	.+130    	; 0x2c9a <realloc+0x17a>
    2c18:	f0 93 60 04 	sts	0x0460, r31	; 0x800460 <__flp+0x1>
    2c1c:	e0 93 5f 04 	sts	0x045F, r30	; 0x80045f <__flp>
    2c20:	3c c0       	rjmp	.+120    	; 0x2c9a <realloc+0x17a>
    2c22:	68 16       	cp	r6, r24
    2c24:	79 06       	cpc	r7, r25
    2c26:	08 f4       	brcc	.+2      	; 0x2c2a <realloc+0x10a>
    2c28:	3c 01       	movw	r6, r24
    2c2a:	7d 01       	movw	r14, r26
    2c2c:	12 96       	adiw	r26, 0x02	; 2
    2c2e:	0d 90       	ld	r0, X+
    2c30:	bc 91       	ld	r27, X
    2c32:	a0 2d       	mov	r26, r0
    2c34:	b7 cf       	rjmp	.-146    	; 0x2ba4 <realloc+0x84>
    2c36:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <__brkval>
    2c3a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <__brkval+0x1>
    2c3e:	88 16       	cp	r8, r24
    2c40:	99 06       	cpc	r9, r25
    2c42:	e1 f4       	brne	.+56     	; 0x2c7c <realloc+0x15c>
    2c44:	66 16       	cp	r6, r22
    2c46:	77 06       	cpc	r7, r23
    2c48:	c8 f4       	brcc	.+50     	; 0x2c7c <realloc+0x15c>
    2c4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2c4e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	41 f4       	brne	.+16     	; 0x2c66 <realloc+0x146>
    2c56:	8d b7       	in	r24, 0x3d	; 61
    2c58:	9e b7       	in	r25, 0x3e	; 62
    2c5a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2c5e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2c62:	84 1b       	sub	r24, r20
    2c64:	95 0b       	sbc	r25, r21
    2c66:	e8 17       	cp	r30, r24
    2c68:	f9 07       	cpc	r31, r25
    2c6a:	c8 f4       	brcc	.+50     	; 0x2c9e <realloc+0x17e>
    2c6c:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <__brkval+0x1>
    2c70:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <__brkval>
    2c74:	f9 01       	movw	r30, r18
    2c76:	71 83       	std	Z+1, r23	; 0x01
    2c78:	60 83       	st	Z, r22
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <realloc+0x17a>
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	0e 94 6f 14 	call	0x28de	; 0x28de <malloc>
    2c82:	7c 01       	movw	r14, r24
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	59 f0       	breq	.+22     	; 0x2c9e <realloc+0x17e>
    2c88:	a8 01       	movw	r20, r16
    2c8a:	be 01       	movw	r22, r28
    2c8c:	0e 94 56 16 	call	0x2cac	; 0x2cac <memcpy>
    2c90:	ce 01       	movw	r24, r28
    2c92:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <free>
    2c96:	c7 01       	movw	r24, r14
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <realloc+0x182>
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <realloc+0x182>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	ee e0       	ldi	r30, 0x0E	; 14
    2ca8:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__epilogue_restores__+0x8>

00002cac <memcpy>:
    2cac:	fb 01       	movw	r30, r22
    2cae:	dc 01       	movw	r26, r24
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <memcpy+0xa>
    2cb2:	01 90       	ld	r0, Z+
    2cb4:	0d 92       	st	X+, r0
    2cb6:	41 50       	subi	r20, 0x01	; 1
    2cb8:	50 40       	sbci	r21, 0x00	; 0
    2cba:	d8 f7       	brcc	.-10     	; 0x2cb2 <memcpy+0x6>
    2cbc:	08 95       	ret

00002cbe <strcpy>:
    2cbe:	fb 01       	movw	r30, r22
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	0d 92       	st	X+, r0
    2cc6:	00 20       	and	r0, r0
    2cc8:	e1 f7       	brne	.-8      	; 0x2cc2 <strcpy+0x4>
    2cca:	08 95       	ret

00002ccc <sprintf>:
    2ccc:	ae e0       	ldi	r26, 0x0E	; 14
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ec e6       	ldi	r30, 0x6C	; 108
    2cd2:	f6 e1       	ldi	r31, 0x16	; 22
    2cd4:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x1c>
    2cd8:	0d 89       	ldd	r16, Y+21	; 0x15
    2cda:	1e 89       	ldd	r17, Y+22	; 0x16
    2cdc:	86 e0       	ldi	r24, 0x06	; 6
    2cde:	8c 83       	std	Y+4, r24	; 0x04
    2ce0:	1a 83       	std	Y+2, r17	; 0x02
    2ce2:	09 83       	std	Y+1, r16	; 0x01
    2ce4:	8f ef       	ldi	r24, 0xFF	; 255
    2ce6:	9f e7       	ldi	r25, 0x7F	; 127
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	ae 01       	movw	r20, r28
    2cee:	47 5e       	subi	r20, 0xE7	; 231
    2cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf2:	6f 89       	ldd	r22, Y+23	; 0x17
    2cf4:	78 8d       	ldd	r23, Y+24	; 0x18
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	01 96       	adiw	r24, 0x01	; 1
    2cfa:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vfprintf>
    2cfe:	ef 81       	ldd	r30, Y+7	; 0x07
    2d00:	f8 85       	ldd	r31, Y+8	; 0x08
    2d02:	e0 0f       	add	r30, r16
    2d04:	f1 1f       	adc	r31, r17
    2d06:	10 82       	st	Z, r1
    2d08:	2e 96       	adiw	r28, 0x0e	; 14
    2d0a:	e4 e0       	ldi	r30, 0x04	; 4
    2d0c:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x1c>

00002d10 <vfprintf>:
    2d10:	ab e0       	ldi	r26, 0x0B	; 11
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ee e8       	ldi	r30, 0x8E	; 142
    2d16:	f6 e1       	ldi	r31, 0x16	; 22
    2d18:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
    2d1c:	6c 01       	movw	r12, r24
    2d1e:	7b 01       	movw	r14, r22
    2d20:	8a 01       	movw	r16, r20
    2d22:	fc 01       	movw	r30, r24
    2d24:	17 82       	std	Z+7, r1	; 0x07
    2d26:	16 82       	std	Z+6, r1	; 0x06
    2d28:	83 81       	ldd	r24, Z+3	; 0x03
    2d2a:	81 ff       	sbrs	r24, 1
    2d2c:	cc c1       	rjmp	.+920    	; 0x30c6 <vfprintf+0x3b6>
    2d2e:	ce 01       	movw	r24, r28
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	3c 01       	movw	r6, r24
    2d34:	f6 01       	movw	r30, r12
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	f7 01       	movw	r30, r14
    2d3a:	93 fd       	sbrc	r25, 3
    2d3c:	85 91       	lpm	r24, Z+
    2d3e:	93 ff       	sbrs	r25, 3
    2d40:	81 91       	ld	r24, Z+
    2d42:	7f 01       	movw	r14, r30
    2d44:	88 23       	and	r24, r24
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <vfprintf+0x3a>
    2d48:	ba c1       	rjmp	.+884    	; 0x30be <vfprintf+0x3ae>
    2d4a:	85 32       	cpi	r24, 0x25	; 37
    2d4c:	39 f4       	brne	.+14     	; 0x2d5c <vfprintf+0x4c>
    2d4e:	93 fd       	sbrc	r25, 3
    2d50:	85 91       	lpm	r24, Z+
    2d52:	93 ff       	sbrs	r25, 3
    2d54:	81 91       	ld	r24, Z+
    2d56:	7f 01       	movw	r14, r30
    2d58:	85 32       	cpi	r24, 0x25	; 37
    2d5a:	29 f4       	brne	.+10     	; 0x2d66 <vfprintf+0x56>
    2d5c:	b6 01       	movw	r22, r12
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2d64:	e7 cf       	rjmp	.-50     	; 0x2d34 <vfprintf+0x24>
    2d66:	91 2c       	mov	r9, r1
    2d68:	21 2c       	mov	r2, r1
    2d6a:	31 2c       	mov	r3, r1
    2d6c:	ff e1       	ldi	r31, 0x1F	; 31
    2d6e:	f3 15       	cp	r31, r3
    2d70:	d8 f0       	brcs	.+54     	; 0x2da8 <vfprintf+0x98>
    2d72:	8b 32       	cpi	r24, 0x2B	; 43
    2d74:	79 f0       	breq	.+30     	; 0x2d94 <vfprintf+0x84>
    2d76:	38 f4       	brcc	.+14     	; 0x2d86 <vfprintf+0x76>
    2d78:	80 32       	cpi	r24, 0x20	; 32
    2d7a:	79 f0       	breq	.+30     	; 0x2d9a <vfprintf+0x8a>
    2d7c:	83 32       	cpi	r24, 0x23	; 35
    2d7e:	a1 f4       	brne	.+40     	; 0x2da8 <vfprintf+0x98>
    2d80:	23 2d       	mov	r18, r3
    2d82:	20 61       	ori	r18, 0x10	; 16
    2d84:	1d c0       	rjmp	.+58     	; 0x2dc0 <vfprintf+0xb0>
    2d86:	8d 32       	cpi	r24, 0x2D	; 45
    2d88:	61 f0       	breq	.+24     	; 0x2da2 <vfprintf+0x92>
    2d8a:	80 33       	cpi	r24, 0x30	; 48
    2d8c:	69 f4       	brne	.+26     	; 0x2da8 <vfprintf+0x98>
    2d8e:	23 2d       	mov	r18, r3
    2d90:	21 60       	ori	r18, 0x01	; 1
    2d92:	16 c0       	rjmp	.+44     	; 0x2dc0 <vfprintf+0xb0>
    2d94:	83 2d       	mov	r24, r3
    2d96:	82 60       	ori	r24, 0x02	; 2
    2d98:	38 2e       	mov	r3, r24
    2d9a:	e3 2d       	mov	r30, r3
    2d9c:	e4 60       	ori	r30, 0x04	; 4
    2d9e:	3e 2e       	mov	r3, r30
    2da0:	2a c0       	rjmp	.+84     	; 0x2df6 <vfprintf+0xe6>
    2da2:	f3 2d       	mov	r31, r3
    2da4:	f8 60       	ori	r31, 0x08	; 8
    2da6:	1d c0       	rjmp	.+58     	; 0x2de2 <vfprintf+0xd2>
    2da8:	37 fc       	sbrc	r3, 7
    2daa:	2d c0       	rjmp	.+90     	; 0x2e06 <vfprintf+0xf6>
    2dac:	20 ed       	ldi	r18, 0xD0	; 208
    2dae:	28 0f       	add	r18, r24
    2db0:	2a 30       	cpi	r18, 0x0A	; 10
    2db2:	40 f0       	brcs	.+16     	; 0x2dc4 <vfprintf+0xb4>
    2db4:	8e 32       	cpi	r24, 0x2E	; 46
    2db6:	b9 f4       	brne	.+46     	; 0x2de6 <vfprintf+0xd6>
    2db8:	36 fc       	sbrc	r3, 6
    2dba:	81 c1       	rjmp	.+770    	; 0x30be <vfprintf+0x3ae>
    2dbc:	23 2d       	mov	r18, r3
    2dbe:	20 64       	ori	r18, 0x40	; 64
    2dc0:	32 2e       	mov	r3, r18
    2dc2:	19 c0       	rjmp	.+50     	; 0x2df6 <vfprintf+0xe6>
    2dc4:	36 fe       	sbrs	r3, 6
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <vfprintf+0xc4>
    2dc8:	8a e0       	ldi	r24, 0x0A	; 10
    2dca:	98 9e       	mul	r9, r24
    2dcc:	20 0d       	add	r18, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	92 2e       	mov	r9, r18
    2dd2:	11 c0       	rjmp	.+34     	; 0x2df6 <vfprintf+0xe6>
    2dd4:	ea e0       	ldi	r30, 0x0A	; 10
    2dd6:	2e 9e       	mul	r2, r30
    2dd8:	20 0d       	add	r18, r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	22 2e       	mov	r2, r18
    2dde:	f3 2d       	mov	r31, r3
    2de0:	f0 62       	ori	r31, 0x20	; 32
    2de2:	3f 2e       	mov	r3, r31
    2de4:	08 c0       	rjmp	.+16     	; 0x2df6 <vfprintf+0xe6>
    2de6:	8c 36       	cpi	r24, 0x6C	; 108
    2de8:	21 f4       	brne	.+8      	; 0x2df2 <vfprintf+0xe2>
    2dea:	83 2d       	mov	r24, r3
    2dec:	80 68       	ori	r24, 0x80	; 128
    2dee:	38 2e       	mov	r3, r24
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <vfprintf+0xe6>
    2df2:	88 36       	cpi	r24, 0x68	; 104
    2df4:	41 f4       	brne	.+16     	; 0x2e06 <vfprintf+0xf6>
    2df6:	f7 01       	movw	r30, r14
    2df8:	93 fd       	sbrc	r25, 3
    2dfa:	85 91       	lpm	r24, Z+
    2dfc:	93 ff       	sbrs	r25, 3
    2dfe:	81 91       	ld	r24, Z+
    2e00:	7f 01       	movw	r14, r30
    2e02:	81 11       	cpse	r24, r1
    2e04:	b3 cf       	rjmp	.-154    	; 0x2d6c <vfprintf+0x5c>
    2e06:	98 2f       	mov	r25, r24
    2e08:	9f 7d       	andi	r25, 0xDF	; 223
    2e0a:	95 54       	subi	r25, 0x45	; 69
    2e0c:	93 30       	cpi	r25, 0x03	; 3
    2e0e:	28 f4       	brcc	.+10     	; 0x2e1a <vfprintf+0x10a>
    2e10:	0c 5f       	subi	r16, 0xFC	; 252
    2e12:	1f 4f       	sbci	r17, 0xFF	; 255
    2e14:	9f e3       	ldi	r25, 0x3F	; 63
    2e16:	99 83       	std	Y+1, r25	; 0x01
    2e18:	0d c0       	rjmp	.+26     	; 0x2e34 <vfprintf+0x124>
    2e1a:	83 36       	cpi	r24, 0x63	; 99
    2e1c:	31 f0       	breq	.+12     	; 0x2e2a <vfprintf+0x11a>
    2e1e:	83 37       	cpi	r24, 0x73	; 115
    2e20:	71 f0       	breq	.+28     	; 0x2e3e <vfprintf+0x12e>
    2e22:	83 35       	cpi	r24, 0x53	; 83
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <vfprintf+0x118>
    2e26:	59 c0       	rjmp	.+178    	; 0x2eda <vfprintf+0x1ca>
    2e28:	21 c0       	rjmp	.+66     	; 0x2e6c <vfprintf+0x15c>
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	80 81       	ld	r24, Z
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	0e 5f       	subi	r16, 0xFE	; 254
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	88 24       	eor	r8, r8
    2e36:	83 94       	inc	r8
    2e38:	91 2c       	mov	r9, r1
    2e3a:	53 01       	movw	r10, r6
    2e3c:	13 c0       	rjmp	.+38     	; 0x2e64 <vfprintf+0x154>
    2e3e:	28 01       	movw	r4, r16
    2e40:	f2 e0       	ldi	r31, 0x02	; 2
    2e42:	4f 0e       	add	r4, r31
    2e44:	51 1c       	adc	r5, r1
    2e46:	f8 01       	movw	r30, r16
    2e48:	a0 80       	ld	r10, Z
    2e4a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e4c:	36 fe       	sbrs	r3, 6
    2e4e:	03 c0       	rjmp	.+6      	; 0x2e56 <vfprintf+0x146>
    2e50:	69 2d       	mov	r22, r9
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <vfprintf+0x14a>
    2e56:	6f ef       	ldi	r22, 0xFF	; 255
    2e58:	7f ef       	ldi	r23, 0xFF	; 255
    2e5a:	c5 01       	movw	r24, r10
    2e5c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strnlen>
    2e60:	4c 01       	movw	r8, r24
    2e62:	82 01       	movw	r16, r4
    2e64:	f3 2d       	mov	r31, r3
    2e66:	ff 77       	andi	r31, 0x7F	; 127
    2e68:	3f 2e       	mov	r3, r31
    2e6a:	16 c0       	rjmp	.+44     	; 0x2e98 <vfprintf+0x188>
    2e6c:	28 01       	movw	r4, r16
    2e6e:	22 e0       	ldi	r18, 0x02	; 2
    2e70:	42 0e       	add	r4, r18
    2e72:	51 1c       	adc	r5, r1
    2e74:	f8 01       	movw	r30, r16
    2e76:	a0 80       	ld	r10, Z
    2e78:	b1 80       	ldd	r11, Z+1	; 0x01
    2e7a:	36 fe       	sbrs	r3, 6
    2e7c:	03 c0       	rjmp	.+6      	; 0x2e84 <vfprintf+0x174>
    2e7e:	69 2d       	mov	r22, r9
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <vfprintf+0x178>
    2e84:	6f ef       	ldi	r22, 0xFF	; 255
    2e86:	7f ef       	ldi	r23, 0xFF	; 255
    2e88:	c5 01       	movw	r24, r10
    2e8a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <strnlen_P>
    2e8e:	4c 01       	movw	r8, r24
    2e90:	f3 2d       	mov	r31, r3
    2e92:	f0 68       	ori	r31, 0x80	; 128
    2e94:	3f 2e       	mov	r3, r31
    2e96:	82 01       	movw	r16, r4
    2e98:	33 fc       	sbrc	r3, 3
    2e9a:	1b c0       	rjmp	.+54     	; 0x2ed2 <vfprintf+0x1c2>
    2e9c:	82 2d       	mov	r24, r2
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	88 16       	cp	r8, r24
    2ea2:	99 06       	cpc	r9, r25
    2ea4:	b0 f4       	brcc	.+44     	; 0x2ed2 <vfprintf+0x1c2>
    2ea6:	b6 01       	movw	r22, r12
    2ea8:	80 e2       	ldi	r24, 0x20	; 32
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2eb0:	2a 94       	dec	r2
    2eb2:	f4 cf       	rjmp	.-24     	; 0x2e9c <vfprintf+0x18c>
    2eb4:	f5 01       	movw	r30, r10
    2eb6:	37 fc       	sbrc	r3, 7
    2eb8:	85 91       	lpm	r24, Z+
    2eba:	37 fe       	sbrs	r3, 7
    2ebc:	81 91       	ld	r24, Z+
    2ebe:	5f 01       	movw	r10, r30
    2ec0:	b6 01       	movw	r22, r12
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    2ec8:	21 10       	cpse	r2, r1
    2eca:	2a 94       	dec	r2
    2ecc:	21 e0       	ldi	r18, 0x01	; 1
    2ece:	82 1a       	sub	r8, r18
    2ed0:	91 08       	sbc	r9, r1
    2ed2:	81 14       	cp	r8, r1
    2ed4:	91 04       	cpc	r9, r1
    2ed6:	71 f7       	brne	.-36     	; 0x2eb4 <vfprintf+0x1a4>
    2ed8:	e8 c0       	rjmp	.+464    	; 0x30aa <vfprintf+0x39a>
    2eda:	84 36       	cpi	r24, 0x64	; 100
    2edc:	11 f0       	breq	.+4      	; 0x2ee2 <vfprintf+0x1d2>
    2ede:	89 36       	cpi	r24, 0x69	; 105
    2ee0:	41 f5       	brne	.+80     	; 0x2f32 <vfprintf+0x222>
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	37 fe       	sbrs	r3, 7
    2ee6:	07 c0       	rjmp	.+14     	; 0x2ef6 <vfprintf+0x1e6>
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	0c 5f       	subi	r16, 0xFC	; 252
    2ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef4:	08 c0       	rjmp	.+16     	; 0x2f06 <vfprintf+0x1f6>
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	07 2e       	mov	r0, r23
    2efc:	00 0c       	add	r0, r0
    2efe:	88 0b       	sbc	r24, r24
    2f00:	99 0b       	sbc	r25, r25
    2f02:	0e 5f       	subi	r16, 0xFE	; 254
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	f3 2d       	mov	r31, r3
    2f08:	ff 76       	andi	r31, 0x6F	; 111
    2f0a:	3f 2e       	mov	r3, r31
    2f0c:	97 ff       	sbrs	r25, 7
    2f0e:	09 c0       	rjmp	.+18     	; 0x2f22 <vfprintf+0x212>
    2f10:	90 95       	com	r25
    2f12:	80 95       	com	r24
    2f14:	70 95       	com	r23
    2f16:	61 95       	neg	r22
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	f0 68       	ori	r31, 0x80	; 128
    2f20:	3f 2e       	mov	r3, r31
    2f22:	2a e0       	ldi	r18, 0x0A	; 10
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	a3 01       	movw	r20, r6
    2f28:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2f2c:	88 2e       	mov	r8, r24
    2f2e:	86 18       	sub	r8, r6
    2f30:	45 c0       	rjmp	.+138    	; 0x2fbc <vfprintf+0x2ac>
    2f32:	85 37       	cpi	r24, 0x75	; 117
    2f34:	31 f4       	brne	.+12     	; 0x2f42 <vfprintf+0x232>
    2f36:	23 2d       	mov	r18, r3
    2f38:	2f 7e       	andi	r18, 0xEF	; 239
    2f3a:	b2 2e       	mov	r11, r18
    2f3c:	2a e0       	ldi	r18, 0x0A	; 10
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	25 c0       	rjmp	.+74     	; 0x2f8c <vfprintf+0x27c>
    2f42:	93 2d       	mov	r25, r3
    2f44:	99 7f       	andi	r25, 0xF9	; 249
    2f46:	b9 2e       	mov	r11, r25
    2f48:	8f 36       	cpi	r24, 0x6F	; 111
    2f4a:	c1 f0       	breq	.+48     	; 0x2f7c <vfprintf+0x26c>
    2f4c:	18 f4       	brcc	.+6      	; 0x2f54 <vfprintf+0x244>
    2f4e:	88 35       	cpi	r24, 0x58	; 88
    2f50:	79 f0       	breq	.+30     	; 0x2f70 <vfprintf+0x260>
    2f52:	b5 c0       	rjmp	.+362    	; 0x30be <vfprintf+0x3ae>
    2f54:	80 37       	cpi	r24, 0x70	; 112
    2f56:	19 f0       	breq	.+6      	; 0x2f5e <vfprintf+0x24e>
    2f58:	88 37       	cpi	r24, 0x78	; 120
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <vfprintf+0x254>
    2f5c:	b0 c0       	rjmp	.+352    	; 0x30be <vfprintf+0x3ae>
    2f5e:	e9 2f       	mov	r30, r25
    2f60:	e0 61       	ori	r30, 0x10	; 16
    2f62:	be 2e       	mov	r11, r30
    2f64:	b4 fe       	sbrs	r11, 4
    2f66:	0d c0       	rjmp	.+26     	; 0x2f82 <vfprintf+0x272>
    2f68:	fb 2d       	mov	r31, r11
    2f6a:	f4 60       	ori	r31, 0x04	; 4
    2f6c:	bf 2e       	mov	r11, r31
    2f6e:	09 c0       	rjmp	.+18     	; 0x2f82 <vfprintf+0x272>
    2f70:	34 fe       	sbrs	r3, 4
    2f72:	0a c0       	rjmp	.+20     	; 0x2f88 <vfprintf+0x278>
    2f74:	29 2f       	mov	r18, r25
    2f76:	26 60       	ori	r18, 0x06	; 6
    2f78:	b2 2e       	mov	r11, r18
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <vfprintf+0x278>
    2f7c:	28 e0       	ldi	r18, 0x08	; 8
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	05 c0       	rjmp	.+10     	; 0x2f8c <vfprintf+0x27c>
    2f82:	20 e1       	ldi	r18, 0x10	; 16
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <vfprintf+0x27c>
    2f88:	20 e1       	ldi	r18, 0x10	; 16
    2f8a:	32 e0       	ldi	r19, 0x02	; 2
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	b7 fe       	sbrs	r11, 7
    2f90:	07 c0       	rjmp	.+14     	; 0x2fa0 <vfprintf+0x290>
    2f92:	60 81       	ld	r22, Z
    2f94:	71 81       	ldd	r23, Z+1	; 0x01
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	93 81       	ldd	r25, Z+3	; 0x03
    2f9a:	0c 5f       	subi	r16, 0xFC	; 252
    2f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <vfprintf+0x29c>
    2fa0:	60 81       	ld	r22, Z
    2fa2:	71 81       	ldd	r23, Z+1	; 0x01
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 5f       	subi	r16, 0xFE	; 254
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	a3 01       	movw	r20, r6
    2fae:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2fb2:	88 2e       	mov	r8, r24
    2fb4:	86 18       	sub	r8, r6
    2fb6:	fb 2d       	mov	r31, r11
    2fb8:	ff 77       	andi	r31, 0x7F	; 127
    2fba:	3f 2e       	mov	r3, r31
    2fbc:	36 fe       	sbrs	r3, 6
    2fbe:	0d c0       	rjmp	.+26     	; 0x2fda <vfprintf+0x2ca>
    2fc0:	23 2d       	mov	r18, r3
    2fc2:	2e 7f       	andi	r18, 0xFE	; 254
    2fc4:	a2 2e       	mov	r10, r18
    2fc6:	89 14       	cp	r8, r9
    2fc8:	58 f4       	brcc	.+22     	; 0x2fe0 <vfprintf+0x2d0>
    2fca:	34 fe       	sbrs	r3, 4
    2fcc:	0b c0       	rjmp	.+22     	; 0x2fe4 <vfprintf+0x2d4>
    2fce:	32 fc       	sbrc	r3, 2
    2fd0:	09 c0       	rjmp	.+18     	; 0x2fe4 <vfprintf+0x2d4>
    2fd2:	83 2d       	mov	r24, r3
    2fd4:	8e 7e       	andi	r24, 0xEE	; 238
    2fd6:	a8 2e       	mov	r10, r24
    2fd8:	05 c0       	rjmp	.+10     	; 0x2fe4 <vfprintf+0x2d4>
    2fda:	b8 2c       	mov	r11, r8
    2fdc:	a3 2c       	mov	r10, r3
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <vfprintf+0x2d6>
    2fe0:	b8 2c       	mov	r11, r8
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <vfprintf+0x2d6>
    2fe4:	b9 2c       	mov	r11, r9
    2fe6:	a4 fe       	sbrs	r10, 4
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <vfprintf+0x2f8>
    2fea:	fe 01       	movw	r30, r28
    2fec:	e8 0d       	add	r30, r8
    2fee:	f1 1d       	adc	r31, r1
    2ff0:	80 81       	ld	r24, Z
    2ff2:	80 33       	cpi	r24, 0x30	; 48
    2ff4:	21 f4       	brne	.+8      	; 0x2ffe <vfprintf+0x2ee>
    2ff6:	9a 2d       	mov	r25, r10
    2ff8:	99 7e       	andi	r25, 0xE9	; 233
    2ffa:	a9 2e       	mov	r10, r25
    2ffc:	09 c0       	rjmp	.+18     	; 0x3010 <vfprintf+0x300>
    2ffe:	a2 fe       	sbrs	r10, 2
    3000:	06 c0       	rjmp	.+12     	; 0x300e <vfprintf+0x2fe>
    3002:	b3 94       	inc	r11
    3004:	b3 94       	inc	r11
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <vfprintf+0x300>
    3008:	8a 2d       	mov	r24, r10
    300a:	86 78       	andi	r24, 0x86	; 134
    300c:	09 f0       	breq	.+2      	; 0x3010 <vfprintf+0x300>
    300e:	b3 94       	inc	r11
    3010:	a3 fc       	sbrc	r10, 3
    3012:	11 c0       	rjmp	.+34     	; 0x3036 <vfprintf+0x326>
    3014:	a0 fe       	sbrs	r10, 0
    3016:	06 c0       	rjmp	.+12     	; 0x3024 <vfprintf+0x314>
    3018:	b2 14       	cp	r11, r2
    301a:	88 f4       	brcc	.+34     	; 0x303e <vfprintf+0x32e>
    301c:	28 0c       	add	r2, r8
    301e:	92 2c       	mov	r9, r2
    3020:	9b 18       	sub	r9, r11
    3022:	0e c0       	rjmp	.+28     	; 0x3040 <vfprintf+0x330>
    3024:	b2 14       	cp	r11, r2
    3026:	60 f4       	brcc	.+24     	; 0x3040 <vfprintf+0x330>
    3028:	b6 01       	movw	r22, r12
    302a:	80 e2       	ldi	r24, 0x20	; 32
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    3032:	b3 94       	inc	r11
    3034:	f7 cf       	rjmp	.-18     	; 0x3024 <vfprintf+0x314>
    3036:	b2 14       	cp	r11, r2
    3038:	18 f4       	brcc	.+6      	; 0x3040 <vfprintf+0x330>
    303a:	2b 18       	sub	r2, r11
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <vfprintf+0x332>
    303e:	98 2c       	mov	r9, r8
    3040:	21 2c       	mov	r2, r1
    3042:	a4 fe       	sbrs	r10, 4
    3044:	10 c0       	rjmp	.+32     	; 0x3066 <vfprintf+0x356>
    3046:	b6 01       	movw	r22, r12
    3048:	80 e3       	ldi	r24, 0x30	; 48
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    3050:	a2 fe       	sbrs	r10, 2
    3052:	17 c0       	rjmp	.+46     	; 0x3082 <vfprintf+0x372>
    3054:	a1 fc       	sbrc	r10, 1
    3056:	03 c0       	rjmp	.+6      	; 0x305e <vfprintf+0x34e>
    3058:	88 e7       	ldi	r24, 0x78	; 120
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <vfprintf+0x352>
    305e:	88 e5       	ldi	r24, 0x58	; 88
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	b6 01       	movw	r22, r12
    3064:	0c c0       	rjmp	.+24     	; 0x307e <vfprintf+0x36e>
    3066:	8a 2d       	mov	r24, r10
    3068:	86 78       	andi	r24, 0x86	; 134
    306a:	59 f0       	breq	.+22     	; 0x3082 <vfprintf+0x372>
    306c:	a1 fe       	sbrs	r10, 1
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <vfprintf+0x364>
    3070:	8b e2       	ldi	r24, 0x2B	; 43
    3072:	01 c0       	rjmp	.+2      	; 0x3076 <vfprintf+0x366>
    3074:	80 e2       	ldi	r24, 0x20	; 32
    3076:	a7 fc       	sbrc	r10, 7
    3078:	8d e2       	ldi	r24, 0x2D	; 45
    307a:	b6 01       	movw	r22, r12
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    3082:	89 14       	cp	r8, r9
    3084:	38 f4       	brcc	.+14     	; 0x3094 <vfprintf+0x384>
    3086:	b6 01       	movw	r22, r12
    3088:	80 e3       	ldi	r24, 0x30	; 48
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    3090:	9a 94       	dec	r9
    3092:	f7 cf       	rjmp	.-18     	; 0x3082 <vfprintf+0x372>
    3094:	8a 94       	dec	r8
    3096:	f3 01       	movw	r30, r6
    3098:	e8 0d       	add	r30, r8
    309a:	f1 1d       	adc	r31, r1
    309c:	80 81       	ld	r24, Z
    309e:	b6 01       	movw	r22, r12
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    30a6:	81 10       	cpse	r8, r1
    30a8:	f5 cf       	rjmp	.-22     	; 0x3094 <vfprintf+0x384>
    30aa:	22 20       	and	r2, r2
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <vfprintf+0x3a0>
    30ae:	42 ce       	rjmp	.-892    	; 0x2d34 <vfprintf+0x24>
    30b0:	b6 01       	movw	r22, r12
    30b2:	80 e2       	ldi	r24, 0x20	; 32
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fputc>
    30ba:	2a 94       	dec	r2
    30bc:	f6 cf       	rjmp	.-20     	; 0x30aa <vfprintf+0x39a>
    30be:	f6 01       	movw	r30, r12
    30c0:	86 81       	ldd	r24, Z+6	; 0x06
    30c2:	97 81       	ldd	r25, Z+7	; 0x07
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <vfprintf+0x3ba>
    30c6:	8f ef       	ldi	r24, 0xFF	; 255
    30c8:	9f ef       	ldi	r25, 0xFF	; 255
    30ca:	2b 96       	adiw	r28, 0x0b	; 11
    30cc:	e2 e1       	ldi	r30, 0x12	; 18
    30ce:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

000030d2 <strnlen_P>:
    30d2:	fc 01       	movw	r30, r24
    30d4:	05 90       	lpm	r0, Z+
    30d6:	61 50       	subi	r22, 0x01	; 1
    30d8:	70 40       	sbci	r23, 0x00	; 0
    30da:	01 10       	cpse	r0, r1
    30dc:	d8 f7       	brcc	.-10     	; 0x30d4 <strnlen_P+0x2>
    30de:	80 95       	com	r24
    30e0:	90 95       	com	r25
    30e2:	8e 0f       	add	r24, r30
    30e4:	9f 1f       	adc	r25, r31
    30e6:	08 95       	ret

000030e8 <strnlen>:
    30e8:	fc 01       	movw	r30, r24
    30ea:	61 50       	subi	r22, 0x01	; 1
    30ec:	70 40       	sbci	r23, 0x00	; 0
    30ee:	01 90       	ld	r0, Z+
    30f0:	01 10       	cpse	r0, r1
    30f2:	d8 f7       	brcc	.-10     	; 0x30ea <strnlen+0x2>
    30f4:	80 95       	com	r24
    30f6:	90 95       	com	r25
    30f8:	8e 0f       	add	r24, r30
    30fa:	9f 1f       	adc	r25, r31
    30fc:	08 95       	ret

000030fe <fputc>:
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	fb 01       	movw	r30, r22
    3108:	23 81       	ldd	r18, Z+3	; 0x03
    310a:	21 fd       	sbrc	r18, 1
    310c:	03 c0       	rjmp	.+6      	; 0x3114 <fputc+0x16>
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	9f ef       	ldi	r25, 0xFF	; 255
    3112:	2c c0       	rjmp	.+88     	; 0x316c <fputc+0x6e>
    3114:	22 ff       	sbrs	r18, 2
    3116:	16 c0       	rjmp	.+44     	; 0x3144 <fputc+0x46>
    3118:	46 81       	ldd	r20, Z+6	; 0x06
    311a:	57 81       	ldd	r21, Z+7	; 0x07
    311c:	24 81       	ldd	r18, Z+4	; 0x04
    311e:	35 81       	ldd	r19, Z+5	; 0x05
    3120:	42 17       	cp	r20, r18
    3122:	53 07       	cpc	r21, r19
    3124:	44 f4       	brge	.+16     	; 0x3136 <fputc+0x38>
    3126:	a0 81       	ld	r26, Z
    3128:	b1 81       	ldd	r27, Z+1	; 0x01
    312a:	9d 01       	movw	r18, r26
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	31 83       	std	Z+1, r19	; 0x01
    3132:	20 83       	st	Z, r18
    3134:	8c 93       	st	X, r24
    3136:	26 81       	ldd	r18, Z+6	; 0x06
    3138:	37 81       	ldd	r19, Z+7	; 0x07
    313a:	2f 5f       	subi	r18, 0xFF	; 255
    313c:	3f 4f       	sbci	r19, 0xFF	; 255
    313e:	37 83       	std	Z+7, r19	; 0x07
    3140:	26 83       	std	Z+6, r18	; 0x06
    3142:	14 c0       	rjmp	.+40     	; 0x316c <fputc+0x6e>
    3144:	8b 01       	movw	r16, r22
    3146:	ec 01       	movw	r28, r24
    3148:	fb 01       	movw	r30, r22
    314a:	00 84       	ldd	r0, Z+8	; 0x08
    314c:	f1 85       	ldd	r31, Z+9	; 0x09
    314e:	e0 2d       	mov	r30, r0
    3150:	09 95       	icall
    3152:	89 2b       	or	r24, r25
    3154:	e1 f6       	brne	.-72     	; 0x310e <fputc+0x10>
    3156:	d8 01       	movw	r26, r16
    3158:	16 96       	adiw	r26, 0x06	; 6
    315a:	8d 91       	ld	r24, X+
    315c:	9c 91       	ld	r25, X
    315e:	17 97       	sbiw	r26, 0x07	; 7
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	17 96       	adiw	r26, 0x07	; 7
    3164:	9c 93       	st	X, r25
    3166:	8e 93       	st	-X, r24
    3168:	16 97       	sbiw	r26, 0x06	; 6
    316a:	ce 01       	movw	r24, r28
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	08 95       	ret

00003176 <__ultoa_invert>:
    3176:	fa 01       	movw	r30, r20
    3178:	aa 27       	eor	r26, r26
    317a:	28 30       	cpi	r18, 0x08	; 8
    317c:	51 f1       	breq	.+84     	; 0x31d2 <__ultoa_invert+0x5c>
    317e:	20 31       	cpi	r18, 0x10	; 16
    3180:	81 f1       	breq	.+96     	; 0x31e2 <__ultoa_invert+0x6c>
    3182:	e8 94       	clt
    3184:	6f 93       	push	r22
    3186:	6e 7f       	andi	r22, 0xFE	; 254
    3188:	6e 5f       	subi	r22, 0xFE	; 254
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	af 4f       	sbci	r26, 0xFF	; 255
    3192:	b1 e0       	ldi	r27, 0x01	; 1
    3194:	3e d0       	rcall	.+124    	; 0x3212 <__ultoa_invert+0x9c>
    3196:	b4 e0       	ldi	r27, 0x04	; 4
    3198:	3c d0       	rcall	.+120    	; 0x3212 <__ultoa_invert+0x9c>
    319a:	67 0f       	add	r22, r23
    319c:	78 1f       	adc	r23, r24
    319e:	89 1f       	adc	r24, r25
    31a0:	9a 1f       	adc	r25, r26
    31a2:	a1 1d       	adc	r26, r1
    31a4:	68 0f       	add	r22, r24
    31a6:	79 1f       	adc	r23, r25
    31a8:	8a 1f       	adc	r24, r26
    31aa:	91 1d       	adc	r25, r1
    31ac:	a1 1d       	adc	r26, r1
    31ae:	6a 0f       	add	r22, r26
    31b0:	71 1d       	adc	r23, r1
    31b2:	81 1d       	adc	r24, r1
    31b4:	91 1d       	adc	r25, r1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	20 d0       	rcall	.+64     	; 0x31fa <__ultoa_invert+0x84>
    31ba:	09 f4       	brne	.+2      	; 0x31be <__ultoa_invert+0x48>
    31bc:	68 94       	set
    31be:	3f 91       	pop	r19
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	26 9f       	mul	r18, r22
    31c4:	11 24       	eor	r1, r1
    31c6:	30 19       	sub	r19, r0
    31c8:	30 5d       	subi	r19, 0xD0	; 208
    31ca:	31 93       	st	Z+, r19
    31cc:	de f6       	brtc	.-74     	; 0x3184 <__ultoa_invert+0xe>
    31ce:	cf 01       	movw	r24, r30
    31d0:	08 95       	ret
    31d2:	46 2f       	mov	r20, r22
    31d4:	47 70       	andi	r20, 0x07	; 7
    31d6:	40 5d       	subi	r20, 0xD0	; 208
    31d8:	41 93       	st	Z+, r20
    31da:	b3 e0       	ldi	r27, 0x03	; 3
    31dc:	0f d0       	rcall	.+30     	; 0x31fc <__ultoa_invert+0x86>
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__ultoa_invert+0x5c>
    31e0:	f6 cf       	rjmp	.-20     	; 0x31ce <__ultoa_invert+0x58>
    31e2:	46 2f       	mov	r20, r22
    31e4:	4f 70       	andi	r20, 0x0F	; 15
    31e6:	40 5d       	subi	r20, 0xD0	; 208
    31e8:	4a 33       	cpi	r20, 0x3A	; 58
    31ea:	18 f0       	brcs	.+6      	; 0x31f2 <__ultoa_invert+0x7c>
    31ec:	49 5d       	subi	r20, 0xD9	; 217
    31ee:	31 fd       	sbrc	r19, 1
    31f0:	40 52       	subi	r20, 0x20	; 32
    31f2:	41 93       	st	Z+, r20
    31f4:	02 d0       	rcall	.+4      	; 0x31fa <__ultoa_invert+0x84>
    31f6:	a9 f7       	brne	.-22     	; 0x31e2 <__ultoa_invert+0x6c>
    31f8:	ea cf       	rjmp	.-44     	; 0x31ce <__ultoa_invert+0x58>
    31fa:	b4 e0       	ldi	r27, 0x04	; 4
    31fc:	a6 95       	lsr	r26
    31fe:	97 95       	ror	r25
    3200:	87 95       	ror	r24
    3202:	77 95       	ror	r23
    3204:	67 95       	ror	r22
    3206:	ba 95       	dec	r27
    3208:	c9 f7       	brne	.-14     	; 0x31fc <__ultoa_invert+0x86>
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	61 05       	cpc	r22, r1
    320e:	71 05       	cpc	r23, r1
    3210:	08 95       	ret
    3212:	9b 01       	movw	r18, r22
    3214:	ac 01       	movw	r20, r24
    3216:	0a 2e       	mov	r0, r26
    3218:	06 94       	lsr	r0
    321a:	57 95       	ror	r21
    321c:	47 95       	ror	r20
    321e:	37 95       	ror	r19
    3220:	27 95       	ror	r18
    3222:	ba 95       	dec	r27
    3224:	c9 f7       	brne	.-14     	; 0x3218 <__ultoa_invert+0xa2>
    3226:	62 0f       	add	r22, r18
    3228:	73 1f       	adc	r23, r19
    322a:	84 1f       	adc	r24, r20
    322c:	95 1f       	adc	r25, r21
    322e:	a0 1d       	adc	r26, r0
    3230:	08 95       	ret

00003232 <__prologue_saves__>:
    3232:	2f 92       	push	r2
    3234:	3f 92       	push	r3
    3236:	4f 92       	push	r4
    3238:	5f 92       	push	r5
    323a:	6f 92       	push	r6
    323c:	7f 92       	push	r7
    323e:	8f 92       	push	r8
    3240:	9f 92       	push	r9
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	ca 1b       	sub	r28, r26
    325c:	db 0b       	sbc	r29, r27
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	09 94       	ijmp

0000326a <__epilogue_restores__>:
    326a:	2a 88       	ldd	r2, Y+18	; 0x12
    326c:	39 88       	ldd	r3, Y+17	; 0x11
    326e:	48 88       	ldd	r4, Y+16	; 0x10
    3270:	5f 84       	ldd	r5, Y+15	; 0x0f
    3272:	6e 84       	ldd	r6, Y+14	; 0x0e
    3274:	7d 84       	ldd	r7, Y+13	; 0x0d
    3276:	8c 84       	ldd	r8, Y+12	; 0x0c
    3278:	9b 84       	ldd	r9, Y+11	; 0x0b
    327a:	aa 84       	ldd	r10, Y+10	; 0x0a
    327c:	b9 84       	ldd	r11, Y+9	; 0x09
    327e:	c8 84       	ldd	r12, Y+8	; 0x08
    3280:	df 80       	ldd	r13, Y+7	; 0x07
    3282:	ee 80       	ldd	r14, Y+6	; 0x06
    3284:	fd 80       	ldd	r15, Y+5	; 0x05
    3286:	0c 81       	ldd	r16, Y+4	; 0x04
    3288:	1b 81       	ldd	r17, Y+3	; 0x03
    328a:	aa 81       	ldd	r26, Y+2	; 0x02
    328c:	b9 81       	ldd	r27, Y+1	; 0x01
    328e:	ce 0f       	add	r28, r30
    3290:	d1 1d       	adc	r29, r1
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	ed 01       	movw	r28, r26
    329e:	08 95       	ret

000032a0 <__do_global_dtors>:
    32a0:	10 e0       	ldi	r17, 0x00	; 0
    32a2:	c4 e6       	ldi	r28, 0x64	; 100
    32a4:	d0 e0       	ldi	r29, 0x00	; 0
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <__do_global_dtors+0x10>
    32a8:	fe 01       	movw	r30, r28
    32aa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__tablejump2__>
    32ae:	21 96       	adiw	r28, 0x01	; 1
    32b0:	c5 36       	cpi	r28, 0x65	; 101
    32b2:	d1 07       	cpc	r29, r17
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <__do_global_dtors+0x8>
    32b6:	f8 94       	cli

000032b8 <__stop_program>:
    32b8:	ff cf       	rjmp	.-2      	; 0x32b8 <__stop_program>
