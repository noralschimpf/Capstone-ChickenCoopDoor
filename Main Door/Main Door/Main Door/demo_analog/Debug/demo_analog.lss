
demo_analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003df8  00003e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f2  008002b0  008002b0  0000403c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000928  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013953  00000000  00000000  00004a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003183  00000000  00000000  00018353  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e3c  00000000  00000000  0001b4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d50  00000000  00000000  00020314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036f0  00000000  00000000  00022064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2fc  00000000  00000000  00025754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__dtors_end>
       4:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__vector_1>
       8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_2>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_16>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_18>
      4c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_19>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      58:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      5c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      60:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__vector_24>
      64:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_Z11refreshLinei6Stringii+0xbc>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_Z13emergencyOpenv+0x12>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <digital_pin_to_port_PGM+0x2>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__do_copy_data+0x8>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <digital_pin_to_timer_PGM>:
     162:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     172:	00 00 00 00                                         ....

00000176 <digital_pin_to_bit_mask_PGM>:
     176:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     186:	04 08 10 20                                         ... 

0000018a <digital_pin_to_port_PGM>:
     18a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     19a:	03 03 03 03                                         ....

0000019e <port_to_output_PGM>:
     19e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001a8 <port_to_mode_PGM>:
     1a8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001b2 <__ctors_start>:
     1b2:	79 06       	cpc	r7, r25
     1b4:	ff 09       	sbc	r31, r15
     1b6:	fc 14       	cp	r15, r12

000001b8 <__ctors_end>:
     1b8:	89 06       	cpc	r8, r25

000001ba <__dtors_end>:
     1ba:	11 24       	eor	r1, r1
     1bc:	1f be       	out	0x3f, r1	; 63
     1be:	cf ef       	ldi	r28, 0xFF	; 255
     1c0:	d8 e0       	ldi	r29, 0x08	; 8
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	cd bf       	out	0x3d, r28	; 61

000001c6 <__do_copy_data>:
     1c6:	12 e0       	ldi	r17, 0x02	; 2
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	e8 ef       	ldi	r30, 0xF8	; 248
     1ce:	fd e3       	ldi	r31, 0x3D	; 61
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x10>
     1d2:	05 90       	lpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a0 3b       	cpi	r26, 0xB0	; 176
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0xc>

000001dc <__do_clear_bss>:
     1dc:	24 e0       	ldi	r18, 0x04	; 4
     1de:	a0 eb       	ldi	r26, 0xB0	; 176
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	a2 3a       	cpi	r26, 0xA2	; 162
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>

000001ec <__do_global_ctors>:
     1ec:	10 e0       	ldi	r17, 0x00	; 0
     1ee:	cc ed       	ldi	r28, 0xDC	; 220
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <__do_global_ctors+0x10>
     1f4:	21 97       	sbiw	r28, 0x01	; 1
     1f6:	fe 01       	movw	r30, r28
     1f8:	0e 94 76 17 	call	0x2eec	; 0x2eec <__tablejump2__>
     1fc:	c9 3d       	cpi	r28, 0xD9	; 217
     1fe:	d1 07       	cpc	r29, r17
     200:	c9 f7       	brne	.-14     	; 0x1f4 <__do_global_ctors+0x8>
     202:	0e 94 2d 0a 	call	0x145a	; 0x145a <main>
     206:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__do_global_dtors>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>:
#define BUTTON_LEFT 0x10
#define BUTTON_RIGHT 0x02
#define BUTTON_SELECT 0x01


class Adafruit_RGBLCDShield : public Print {
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     214:	fb 01       	movw	r30, r22
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
     21a:	9b 83       	std	Y+3, r25	; 0x03
     21c:	8a 83       	std	Y+2, r24	; 0x02
     21e:	85 e9       	ldi	r24, 0x95	; 149
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	99 83       	std	Y+1, r25	; 0x01
     224:	88 83       	st	Y, r24
     226:	84 81       	ldd	r24, Z+4	; 0x04
     228:	8c 83       	std	Y+4, r24	; 0x04
     22a:	85 81       	ldd	r24, Z+5	; 0x05
     22c:	8d 83       	std	Y+5, r24	; 0x05
     22e:	86 81       	ldd	r24, Z+6	; 0x06
     230:	8e 83       	std	Y+6, r24	; 0x06
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	37 96       	adiw	r30, 0x07	; 7
     236:	de 01       	movw	r26, r28
     238:	17 96       	adiw	r26, 0x07	; 7
     23a:	01 90       	ld	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	8a 95       	dec	r24
     240:	e1 f7       	brne	.-8      	; 0x23a <_ZN21Adafruit_RGBLCDShieldC1ERKS_+0x2c>
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	fb 01       	movw	r30, r22
     246:	3f 96       	adiw	r30, 0x0f	; 15
     248:	de 01       	movw	r26, r28
     24a:	1f 96       	adiw	r26, 0x0f	; 15
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <_ZN21Adafruit_RGBLCDShieldC1ERKS_+0x3e>
     254:	fb 01       	movw	r30, r22
     256:	84 89       	ldd	r24, Z+20	; 0x14
     258:	8c 8b       	std	Y+20, r24	; 0x14
     25a:	85 89       	ldd	r24, Z+21	; 0x15
     25c:	8d 8b       	std	Y+21, r24	; 0x15
     25e:	86 89       	ldd	r24, Z+22	; 0x16
     260:	8e 8b       	std	Y+22, r24	; 0x16
     262:	87 89       	ldd	r24, Z+23	; 0x17
     264:	8f 8b       	std	Y+23, r24	; 0x17
     266:	80 8d       	ldd	r24, Z+24	; 0x18
     268:	88 8f       	std	Y+24, r24	; 0x18
     26a:	81 8d       	ldd	r24, Z+25	; 0x19
     26c:	89 8f       	std	Y+25, r24	; 0x19
     26e:	82 8d       	ldd	r24, Z+26	; 0x1a
     270:	8a 8f       	std	Y+26, r24	; 0x1a
     272:	83 8d       	ldd	r24, Z+27	; 0x1b
     274:	8b 8f       	std	Y+27, r24	; 0x1b
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <_Z9closeDoorv>:
    isOkay = true;
  }
}


void closeDoor() {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
  pinMode(PIN_RELAY_DOOROPEN, OUTPUT);
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	8a e0       	ldi	r24, 0x0A	; 10
     284:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, OUTPUT);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	89 e0       	ldi	r24, 0x09	; 9
     28c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>

  uint8_t buttons;
  digitalWrite(PIN_RELAY_DOORCLOSE, HIGH);
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	89 e0       	ldi	r24, 0x09	; 9
     294:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	8a e0       	ldi	r24, 0x0A	; 10
     29c:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  isClosing = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <isClosing>
  Serial.println("Closing");
     2a6:	63 e1       	ldi	r22, 0x13	; 19
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	84 e3       	ldi	r24, 0x34	; 52
     2ac:	93 e0       	ldi	r25, 0x03	; 3
     2ae:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
     2b2:	c8 ef       	ldi	r28, 0xF8	; 248
     2b4:	da e2       	ldi	r29, 0x2A	; 42
  for (int i = 0; i < openAndCloseTime && isOkay; i++) {
     2b6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <isOkay>
     2ba:	88 23       	and	r24, r24
     2bc:	b9 f0       	breq	.+46     	; 0x2ec <_Z9closeDoorv+0x70>
    //    for(int i =0; i< openAndCloseTime;i++){
    delay(1);
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 89 0b 	call	0x1712	; 0x1712 <delay>
    //Check if door needs to stop
    buttons = lcd.readButtons();
     2ca:	88 e1       	ldi	r24, 0x18	; 24
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
    if (buttons & BUTTON_SELECT)
     2d2:	80 ff       	sbrs	r24, 0
     2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <_Z9closeDoorv+0x6c>
    {
      //stop door due to select
      digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	89 e0       	ldi	r24, 0x09	; 9
     2da:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
      digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
      break;
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_Z9closeDoorv+0x70>
     2e8:	21 97       	sbiw	r28, 0x01	; 1
  uint8_t buttons;
  digitalWrite(PIN_RELAY_DOORCLOSE, HIGH);
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
  isClosing = true;
  Serial.println("Closing");
  for (int i = 0; i < openAndCloseTime && isOkay; i++) {
     2ea:	29 f7       	brne	.-54     	; 0x2b6 <_Z9closeDoorv+0x3a>
      digitalWrite(PIN_RELAY_DOOROPEN, LOW);
      break;
    }
  }
  //stop door
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	8a e0       	ldi	r24, 0x0A	; 10
     2f0:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	89 e0       	ldi	r24, 0x09	; 9
     2f8:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>

  isClosing = false;
     2fc:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <isClosing>

  pinMode(PIN_RELAY_DOOROPEN, INPUT);
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	89 e0       	ldi	r24, 0x09	; 9
     30c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  Serial.println("Close Complete");
     310:	6b e1       	ldi	r22, 0x1B	; 27
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	84 e3       	ldi	r24, 0x34	; 52
     316:	93 e0       	ldi	r25, 0x03	; 3
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28

  isClosing = false;

  pinMode(PIN_RELAY_DOOROPEN, INPUT);
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
  Serial.println("Close Complete");
     31c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <_ZN5Print7printlnEPKc>

00000320 <_Z14openDoorActioni>:
}

void openDoorAction(int tme) {
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
  // Set relay pins to actually work
  pinMode(PIN_RELAY_DOOROPEN, OUTPUT);
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	8a e0       	ldi	r24, 0x0A	; 10
     328:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, OUTPUT);
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	89 e0       	ldi	r24, 0x09	; 9
     330:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>

  Serial.println("Relay pins set to output");
     334:	6a e2       	ldi	r22, 0x2A	; 42
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	84 e3       	ldi	r24, 0x34	; 52
     33a:	93 e0       	ldi	r25, 0x03	; 3
     33c:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
  uint8_t buttons;

  digitalWrite(PIN_RELAY_DOOROPEN, HIGH);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	89 e0       	ldi	r24, 0x09	; 9
     34c:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
     350:	c8 ef       	ldi	r28, 0xF8	; 248
     352:	da e2       	ldi	r29, 0x2A	; 42

  for (int i = 0; i < openAndCloseTime && isOkay; i++) {
     354:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <isOkay>
     358:	88 23       	and	r24, r24
     35a:	b9 f0       	breq	.+46     	; 0x38a <_Z14openDoorActioni+0x6a>
    delay(1);
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 89 0b 	call	0x1712	; 0x1712 <delay>

    buttons = lcd.readButtons();
     368:	88 e1       	ldi	r24, 0x18	; 24
     36a:	93 e0       	ldi	r25, 0x03	; 3
     36c:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
    if (buttons & BUTTON_SELECT)
     370:	80 ff       	sbrs	r24, 0
     372:	09 c0       	rjmp	.+18     	; 0x386 <_Z14openDoorActioni+0x66>
    {
      digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	8a e0       	ldi	r24, 0x0A	; 10
     378:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
      digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	89 e0       	ldi	r24, 0x09	; 9
     380:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
      break;
     384:	02 c0       	rjmp	.+4      	; 0x38a <_Z14openDoorActioni+0x6a>
     386:	21 97       	sbiw	r28, 0x01	; 1
  uint8_t buttons;

  digitalWrite(PIN_RELAY_DOOROPEN, HIGH);
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);

  for (int i = 0; i < openAndCloseTime && isOkay; i++) {
     388:	29 f7       	brne	.-54     	; 0x354 <_Z14openDoorActioni+0x34>
      digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
      break;
    }
  }
  //Stop door
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	8a e0       	ldi	r24, 0x0A	; 10
     38e:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	89 e0       	ldi	r24, 0x09	; 9
     396:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>

  //Stop relay from being jank
  pinMode(PIN_RELAY_DOOROPEN, INPUT);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	8a e0       	ldi	r24, 0x0A	; 10
     39e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	89 e0       	ldi	r24, 0x09	; 9
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);

  //Stop relay from being jank
  pinMode(PIN_RELAY_DOOROPEN, INPUT);
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
     3aa:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <pinMode>

000003ae <_Z8openDoorv>:
}

void openDoor() {
  Serial.println("Opening");
     3ae:	63 e4       	ldi	r22, 0x43	; 67
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	84 e3       	ldi	r24, 0x34	; 52
     3b4:	93 e0       	ldi	r25, 0x03	; 3
     3b6:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
  openDoorAction(openAndCloseTime);
     3ba:	88 ef       	ldi	r24, 0xF8	; 248
     3bc:	9a e2       	ldi	r25, 0x2A	; 42
     3be:	0e 94 90 01 	call	0x320	; 0x320 <_Z14openDoorActioni>
  Serial.println("Open Complete");
     3c2:	6b e4       	ldi	r22, 0x4B	; 75
     3c4:	71 e0       	ldi	r23, 0x01	; 1
     3c6:	84 e3       	ldi	r24, 0x34	; 52
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <_ZN5Print7printlnEPKc>

000003ce <_Z13emergencyOpenv>:
}
//
void emergencyOpen() {
  digitalWrite(PIN_RELAY_DOORCLOSE, LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  digitalWrite(PIN_RELAY_DOOROPEN, LOW);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
  //  delay(1000);
  Serial.println("Emergency");
     3de:	69 e5       	ldi	r22, 0x59	; 89
     3e0:	71 e0       	ldi	r23, 0x01	; 1
     3e2:	84 e3       	ldi	r24, 0x34	; 52
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
  openDoorAction(1000);
     3ea:	88 ee       	ldi	r24, 0xE8	; 232
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	0e 94 90 01 	call	0x320	; 0x320 <_Z14openDoorActioni>
  //  digitalWrite(led, LOW);
  Serial.println("Emergency Finished");
     3f2:	63 e6       	ldi	r22, 0x63	; 99
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	84 e3       	ldi	r24, 0x34	; 52
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <_ZN5Print7printlnEPKc>

000003fe <_Z17LimitSwitchActivev>:
}
////
void LimitSwitchActive() {
  //  if(isClosing){
  isOkay = false;
     3fe:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <isOkay>
  //     digitalWrite(PIN_RELAY_DOORCLOSE,LOW);
  //     digitalWrite(PIN_RELAY_DOOROPEN,LOW);
  Serial.println("ERROR");
     402:	66 e7       	ldi	r22, 0x76	; 118
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	84 e3       	ldi	r24, 0x34	; 52
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
  //    digitalWrite(led, HIGH);
  emergencyOpen();
     40e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z13emergencyOpenv>
  isOkay = true;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <isOkay>
     418:	08 95       	ret

0000041a <_Z8print2ln21Adafruit_RGBLCDShield6StringS0_>:

*/


void print2ln(Adafruit_RGBLCDShield lcd, String a, String b)
{
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
     428:	7b 01       	movw	r14, r22
     42a:	8a 01       	movw	r16, r20
  lcd.clear();
     42c:	0e 94 56 10 	call	0x20ac	; 0x20ac <_ZN21Adafruit_RGBLCDShield5clearEv>
  lcd.setCursor(0, 0);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	ce 01       	movw	r24, r28
     436:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
  lcd.print(a);
     43a:	b7 01       	movw	r22, r14
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print5printERK6String>
  lcd.setCursor(0, 1);
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	ce 01       	movw	r24, r28
     448:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
  lcd.print(b);
     44c:	b8 01       	movw	r22, r16
     44e:	ce 01       	movw	r24, r28
     450:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print5printERK6String>
  lcd.setCursor(0, 0);
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	ce 01       	movw	r24, r28
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(a);
  lcd.setCursor(0, 1);
  lcd.print(b);
  lcd.setCursor(0, 0);
     466:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>

0000046a <_Z9checkTempv>:
}

boolean checkTemp()
/*Returns True if within safe temperature
  FOR DEMO DAY: hair-dryer on will provide temperature outside safe range*/
{
     46a:	cf 93       	push	r28
  Temperature = analogRead(PIN_TEMPSENSOR);
     46c:	81 e1       	ldi	r24, 0x11	; 17
     46e:	0e 94 0e 0c 	call	0x181c	; 0x181c <analogRead>

  Temperature = (1000.0*(Temperature/1024.0*3.3)); //Calculate mV reading
  Temperature = (Temperature-500.0);//in Celcius*100
  Temperature = ((int)((Temperature*(9.0/5.0))+3200))/100;//Fahrenheit*10
     472:	bc 01       	movw	r22, r24
     474:	99 0f       	add	r25, r25
     476:	88 0b       	sbc	r24, r24
     478:	99 0b       	sbc	r25, r25
     47a:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatsisf>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e8       	ldi	r20, 0x80	; 128
     484:	5a e3       	ldi	r21, 0x3A	; 58
     486:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     48a:	23 e3       	ldi	r18, 0x33	; 51
     48c:	33 e3       	ldi	r19, 0x33	; 51
     48e:	43 e5       	ldi	r20, 0x53	; 83
     490:	50 e4       	ldi	r21, 0x40	; 64
     492:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4a e7       	ldi	r20, 0x7A	; 122
     49c:	54 e4       	ldi	r21, 0x44	; 68
     49e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	4a ef       	ldi	r20, 0xFA	; 250
     4a8:	53 e4       	ldi	r21, 0x43	; 67
     4aa:	0e 94 91 06 	call	0xd22	; 0xd22 <__subsf3>
     4ae:	26 e6       	ldi	r18, 0x66	; 102
     4b0:	36 e6       	ldi	r19, 0x66	; 102
     4b2:	46 ee       	ldi	r20, 0xE6	; 230
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	48 e4       	ldi	r20, 0x48	; 72
     4c0:	55 e4       	ldi	r21, 0x45	; 69
     4c2:	0e 94 92 06 	call	0xd24	; 0xd24 <__addsf3>
     4c6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixsfsi>
     4ca:	cb 01       	movw	r24, r22
     4cc:	64 e6       	ldi	r22, 0x64	; 100
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__divmodhi4>
     4d4:	07 2e       	mov	r0, r23
     4d6:	00 0c       	add	r0, r0
     4d8:	88 0b       	sbc	r24, r24
     4da:	99 0b       	sbc	r25, r25
     4dc:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatsisf>
     4e0:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <Temperature>
     4e4:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <Temperature+0x1>
     4e8:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <Temperature+0x2>
     4ec:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <Temperature+0x3>
     4f0:	c1 e0       	ldi	r28, 0x01	; 1
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4c ed       	ldi	r20, 0xDC	; 220
     4f8:	53 e4       	ldi	r21, 0x43	; 67
     4fa:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     4fe:	87 fd       	sbrc	r24, 7
     500:	c0 e0       	ldi	r28, 0x00	; 0
  if (Temperature>=TEMP_THRESHOLD) {return false;}
  else {return true;}
}
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	8c 27       	eor	r24, r28
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <_Z10checkLighti>:

boolean checkLight(int TimeOfDay)
//Returns True if light crosses threshold for door operation
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
  Light = analogRead(PIN_PHOTORESISTOR);
     510:	80 e1       	ldi	r24, 0x10	; 16
     512:	0e 94 0e 0c 	call	0x181c	; 0x181c <analogRead>
     516:	9c 01       	movw	r18, r24
     518:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <Light+0x1>
     51c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <Light>

  switch (TimeOfDay)
     520:	20 97       	sbiw	r28, 0x00	; 0
     522:	19 f0       	breq	.+6      	; 0x52a <_Z10checkLighti+0x20>
     524:	21 97       	sbiw	r28, 0x01	; 1
     526:	31 f0       	breq	.+12     	; 0x534 <_Z10checkLighti+0x2a>
     528:	0a c0       	rjmp	.+20     	; 0x53e <_Z10checkLighti+0x34>
  {
    case MORNING:
      if (Light >= LIGHT_THRESHOLD) {
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	24 36       	cpi	r18, 0x64	; 100
     52e:	31 05       	cpc	r19, r1
     530:	6c f4       	brge	.+26     	; 0x54c <_Z10checkLighti+0x42>
     532:	0b c0       	rjmp	.+22     	; 0x54a <_Z10checkLighti+0x40>
      else {
        return false;
      }
      break;
    case EVENING:
      if (Light <= LIGHT_THRESHOLD) {
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	25 36       	cpi	r18, 0x65	; 101
     538:	31 05       	cpc	r19, r1
     53a:	44 f0       	brlt	.+16     	; 0x54c <_Z10checkLighti+0x42>
     53c:	06 c0       	rjmp	.+12     	; 0x54a <_Z10checkLighti+0x40>
      else {
        return false;
      }
      break;
    default:
      Serial.println("ERR CheckLight: Invalid TimeOfDay Arg Passed");
     53e:	6c e7       	ldi	r22, 0x7C	; 124
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	84 e3       	ldi	r24, 0x34	; 52
     544:	93 e0       	ldi	r25, 0x03	; 3
     546:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN5Print7printlnEPKc>
     54a:	80 e0       	ldi	r24, 0x00	; 0
      return false;
  }

}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi>:
      break;
  }
}

int GetNextMenu(Adafruit_RGBLCDShield lcd, int CurrentMenu)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	eb 01       	movw	r28, r22
  uint8_t buttons = lcd.readButtons();
     558:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
  int NextScreen = -1;
  //select next screen and operations by current screen and button combination
  switch (CurrentMenu)
     55c:	c2 30       	cpi	r28, 0x02	; 2
     55e:	d1 05       	cpc	r29, r1
     560:	d1 f0       	breq	.+52     	; 0x596 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x44>
     562:	2c f4       	brge	.+10     	; 0x56e <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x1c>
     564:	20 97       	sbiw	r28, 0x00	; 0
     566:	41 f0       	breq	.+16     	; 0x578 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x26>
     568:	21 97       	sbiw	r28, 0x01	; 1
     56a:	81 f0       	breq	.+32     	; 0x58c <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x3a>
     56c:	05 c0       	rjmp	.+10     	; 0x578 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x26>
     56e:	c3 30       	cpi	r28, 0x03	; 3
     570:	d1 05       	cpc	r29, r1
     572:	b1 f0       	breq	.+44     	; 0x5a0 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x4e>
     574:	24 97       	sbiw	r28, 0x04	; 4
     576:	09 f1       	breq	.+66     	; 0x5ba <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x68>
  {
    case MENU_MAIN:
      if (buttons & BUTTON_UP) {
     578:	83 ff       	sbrs	r24, 3
     57a:	03 c0       	rjmp	.+6      	; 0x582 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x30>
        NextScreen = MENU_OPEN;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	35 c0       	rjmp	.+106    	; 0x5ec <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x9a>
      }
      else if (buttons & BUTTON_DOWN) {
     582:	82 ff       	sbrs	r24, 2
     584:	27 c0       	rjmp	.+78     	; 0x5d4 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x82>
        NextScreen = MENU_CLOSE;
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	30 c0       	rjmp	.+96     	; 0x5ec <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x9a>
        NextScreen = MENU_MAIN;
      }
      break;
    case MENU_OPEN:
      //TODO:Include safety checks here?
      if (buttons & BUTTON_SELECT) {
     58c:	80 fd       	sbrc	r24, 0
     58e:	26 c0       	rjmp	.+76     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      else {
        openDoor();
     590:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z8openDoorv>
     594:	23 c0       	rjmp	.+70     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      break;
    case MENU_CLOSE:
      //TODO:Include safety checks here?
      if (buttons & BUTTON_SELECT) {
     596:	80 fd       	sbrc	r24, 0
     598:	21 c0       	rjmp	.+66     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      else {
        closeDoor();
     59a:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z9closeDoorv>
     59e:	1e c0       	rjmp	.+60     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      break;
    case MENU_DAY:
      if (buttons & BUTTON_SELECT) {
     5a0:	80 fd       	sbrc	r24, 0
     5a2:	1c c0       	rjmp	.+56     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      else if (checkTemp() && checkLight(MORNING)) {
     5a4:	0e 94 35 02 	call	0x46a	; 0x46a <_Z9checkTempv>
     5a8:	88 23       	and	r24, r24
     5aa:	d9 f0       	breq	.+54     	; 0x5e2 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x90>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 85 02 	call	0x50a	; 0x50a <_Z10checkLighti>
     5b4:	81 11       	cpse	r24, r1
     5b6:	e2 cf       	rjmp	.-60     	; 0x57c <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x2a>
     5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x90>
      else {
        NextScreen = MENU_DAY;
      }
      break;
    case MENU_NIGHT:
      if (buttons & BUTTON_SELECT) {
     5ba:	80 fd       	sbrc	r24, 0
     5bc:	0f c0       	rjmp	.+30     	; 0x5dc <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x8a>
        NextScreen = MENU_MAIN;
      }
      else if (checkTemp() && checkLight(EVENING)) {
     5be:	0e 94 35 02 	call	0x46a	; 0x46a <_Z9checkTempv>
     5c2:	88 23       	and	r24, r24
     5c4:	89 f0       	breq	.+34     	; 0x5e8 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x96>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 85 02 	call	0x50a	; 0x50a <_Z10checkLighti>
     5ce:	81 11       	cpse	r24, r1
     5d0:	da cf       	rjmp	.-76     	; 0x586 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x34>
     5d2:	0a c0       	rjmp	.+20     	; 0x5e8 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x96>
        NextScreen = MENU_OPEN;
      }
      else if (buttons & BUTTON_DOWN) {
        NextScreen = MENU_CLOSE;
      }
      else if (buttons & BUTTON_LEFT) {
     5d4:	84 fd       	sbrc	r24, 4
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x90>
        NextScreen = MENU_DAY;
      }
      else if (buttons & BUTTON_RIGHT) {
     5d8:	81 fd       	sbrc	r24, 1
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x96>
      }
      else if (buttons & BUTTON_RIGHT) {
        NextScreen = MENU_NIGHT;
      }
      else {
        NextScreen = MENU_MAIN;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x9a>
      }
      else if (checkTemp() && checkLight(MORNING)) {
        NextScreen = MENU_OPEN;
      }
      else {
        NextScreen = MENU_DAY;
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <_Z11GetNextMenu21Adafruit_RGBLCDShieldi+0x9a>
      }
      else if (checkTemp() && checkLight(EVENING)) {
        NextScreen = MENU_CLOSE;
      }
      else {
        NextScreen = MENU_NIGHT;
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	90 e0       	ldi	r25, 0x00	; 0
        NextScreen = MENU_MAIN;
      }
      break;
  }
  return NextScreen;
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <_Z11refreshLinei6Stringii>:
//TODO:Add state switches within interrupts

int refreshLine(int row, String Str, int section, int len)
{
     5f2:	9f 92       	push	r9
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	2c 97       	sbiw	r28, 0x0c	; 12
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	98 2e       	mov	r9, r24
     61a:	7b 01       	movw	r14, r22
     61c:	8a 01       	movw	r16, r20
     61e:	59 01       	movw	r10, r18
  String strToPrint;
     620:	64 e8       	ldi	r22, 0x84	; 132
     622:	72 e0       	ldi	r23, 0x02	; 2
     624:	ce 01       	movw	r24, r28
     626:	07 96       	adiw	r24, 0x07	; 7
     628:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>

  //reset out-of-bounds section indices
  if (section > len) {
     62c:	a0 16       	cp	r10, r16
     62e:	b1 06       	cpc	r11, r17
     630:	14 f4       	brge	.+4      	; 0x636 <_Z11refreshLinei6Stringii+0x44>
    section = 0;
     632:	00 e0       	ldi	r16, 0x00	; 0
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	c8 01       	movw	r24, r16
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	6c 01       	movw	r12, r24
  }

  //print selected section
  if (section == len) {
     63c:	0a 15       	cp	r16, r10
     63e:	1b 05       	cpc	r17, r11
     640:	51 f4       	brne	.+20     	; 0x656 <_Z11refreshLinei6Stringii+0x64>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     642:	f7 01       	movw	r30, r14
     644:	24 81       	ldd	r18, Z+4	; 0x04
     646:	35 81       	ldd	r19, Z+5	; 0x05
     648:	a8 01       	movw	r20, r16
     64a:	94 e0       	ldi	r25, 0x04	; 4
     64c:	44 0f       	add	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	9a 95       	dec	r25
     652:	e1 f7       	brne	.-8      	; 0x64c <_Z11refreshLinei6Stringii+0x5a>
     654:	09 c0       	rjmp	.+18     	; 0x668 <_Z11refreshLinei6Stringii+0x76>
    strToPrint = Str.substring(section * 16);
  }
  else {
    strToPrint = Str.substring(section * 16, (section + 1) * 16);
     656:	9c 01       	movw	r18, r24
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	8a 95       	dec	r24
     660:	e1 f7       	brne	.-8      	; 0x65a <_Z11refreshLinei6Stringii+0x68>
     662:	a9 01       	movw	r20, r18
     664:	40 51       	subi	r20, 0x10	; 16
     666:	51 09       	sbc	r21, r1
     668:	b7 01       	movw	r22, r14
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_ZNK6String9substringEjj>
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	ce 01       	movw	r24, r28
     67a:	07 96       	adiw	r24, 0x07	; 7
     67c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN6StringaSEOS_>
     680:	ce 01       	movw	r24, r28
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
  }
  lcd.setCursor(0, row);
     688:	49 2d       	mov	r20, r9
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	88 e1       	ldi	r24, 0x18	; 24
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
  lcd.print(strToPrint);
     694:	be 01       	movw	r22, r28
     696:	69 5f       	subi	r22, 0xF9	; 249
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	88 e1       	ldi	r24, 0x18	; 24
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print5printERK6String>
  lcd.setCursor(0, 0);
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	88 e1       	ldi	r24, 0x18	; 24
     6a8:	93 e0       	ldi	r25, 0x03	; 3
     6aa:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
}
//TODO:Add state switches within interrupts

int refreshLine(int row, String Str, int section, int len)
{
  String strToPrint;
     6ae:	ce 01       	movw	r24, r28
     6b0:	07 96       	adiw	r24, 0x07	; 7
     6b2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
  lcd.setCursor(0, row);
  lcd.print(strToPrint);
  lcd.setCursor(0, 0);

  return section + 1;
}
     6b6:	c6 01       	movw	r24, r12
     6b8:	2c 96       	adiw	r28, 0x0c	; 12
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	08 95       	ret

000006dc <_Z12MenuControlsib>:
  }

}

void MenuControls(int CurrentMenu, boolean isRefresh)
{
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	c8 56       	subi	r28, 0x68	; 104
     6f4:	d1 09       	sbc	r29, r1
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	d6 2e       	mov	r13, r22
  //Set Current LCD Display
  switch (CurrentMenu)
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	91 05       	cpc	r25, r1
     706:	c1 f1       	breq	.+112    	; 0x778 <_Z12MenuControlsib+0x9c>
     708:	2c f4       	brge	.+10     	; 0x714 <_Z12MenuControlsib+0x38>
     70a:	00 97       	sbiw	r24, 0x00	; 0
     70c:	79 f0       	breq	.+30     	; 0x72c <_Z12MenuControlsib+0x50>
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f9 f0       	breq	.+62     	; 0x750 <_Z12MenuControlsib+0x74>
     712:	e5 c1       	rjmp	.+970    	; 0xade <__stack+0x1df>
     714:	9e 01       	movw	r18, r28
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	79 01       	movw	r14, r18
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	91 05       	cpc	r25, r1
     720:	09 f4       	brne	.+2      	; 0x724 <_Z12MenuControlsib+0x48>
     722:	62 c0       	rjmp	.+196    	; 0x7e8 <_Z12MenuControlsib+0x10c>
     724:	04 97       	sbiw	r24, 0x04	; 4
     726:	09 f4       	brne	.+2      	; 0x72a <_Z12MenuControlsib+0x4e>
     728:	2f c1       	rjmp	.+606    	; 0x988 <__stack+0x89>
     72a:	d9 c1       	rjmp	.+946    	; 0xade <__stack+0x1df>
  {
    case MENU_MAIN:
      ScrollTotal = 1;
     72c:	01 e0       	ldi	r16, 0x01	; 1
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	10 93 fb 02 	sts	0x02FB, r17	; 0x8002fb <ScrollTotal+0x1>
     734:	00 93 fa 02 	sts	0x02FA, r16	; 0x8002fa <ScrollTotal>
      if (!isRefresh)
     738:	61 11       	cpse	r22, r1
     73a:	03 c0       	rjmp	.+6      	; 0x742 <_Z12MenuControlsib+0x66>
      {
        print2ln(lcd, "Main Menu", "Up:Open Dn:CloseLft:Day Rt:Night");
     73c:	69 ea       	ldi	r22, 0xA9	; 169
     73e:	71 e0       	ldi	r23, 0x01	; 1
     740:	d8 c1       	rjmp	.+944    	; 0xaf2 <__stack+0x1f3>
        lcd.setBacklight(GREEN);
        ScrollCount = 1;
      }
      else {
        ScrollCount = refreshLine(1, "Up:Open Dn:CloseLft:Day Rt:Night", ScrollCount, ScrollTotal);
     742:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <ScrollCount>
     746:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <ScrollCount+0x1>
     74a:	69 ea       	ldi	r22, 0xA9	; 169
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	07 c2       	rjmp	.+1038   	; 0xb5e <__stack+0x25f>
      }
      break;
    case MENU_OPEN:
      ScrollCount = 0; ScrollTotal = 0;
     750:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <ScrollCount+0x1>
     754:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <ScrollCount>
     758:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <ScrollTotal+0x1>
     75c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <ScrollTotal>
      if (!isRefresh)
     760:	61 11       	cpse	r22, r1
     762:	13 c2       	rjmp	.+1062   	; 0xb8a <__stack+0x28b>
      {
        print2ln(lcd, "Opening Door", "Sel:Escape");
     764:	64 ed       	ldi	r22, 0xD4	; 212
     766:	71 e0       	ldi	r23, 0x01	; 1
     768:	ce 01       	movw	r24, r28
     76a:	8f 5b       	subi	r24, 0xBF	; 191
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     772:	6f ed       	ldi	r22, 0xDF	; 223
     774:	71 e0       	ldi	r23, 0x01	; 1
     776:	13 c0       	rjmp	.+38     	; 0x79e <_Z12MenuControlsib+0xc2>
        lcd.setBacklight(YELLOW);
      }
      break;
    case MENU_CLOSE:
      ScrollCount = ScrollTotal = 0;
     778:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <ScrollTotal+0x1>
     77c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <ScrollTotal>
     780:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <ScrollCount+0x1>
     784:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <ScrollCount>
      if (!isRefresh)
     788:	61 11       	cpse	r22, r1
     78a:	ff c1       	rjmp	.+1022   	; 0xb8a <__stack+0x28b>
      {
        print2ln(lcd, "Closing Door", "Sel:Escape");
     78c:	64 ed       	ldi	r22, 0xD4	; 212
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	ce 01       	movw	r24, r28
     792:	8f 5b       	subi	r24, 0xBF	; 191
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     79a:	6c ee       	ldi	r22, 0xEC	; 236
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	ce 01       	movw	r24, r28
     7a0:	83 5a       	subi	r24, 0xA3	; 163
     7a2:	9f 4f       	sbci	r25, 0xFF	; 255
     7a4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     7a8:	68 e1       	ldi	r22, 0x18	; 24
     7aa:	73 e0       	ldi	r23, 0x03	; 3
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>
     7b4:	ae 01       	movw	r20, r28
     7b6:	4f 5b       	subi	r20, 0xBF	; 191
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	be 01       	movw	r22, r28
     7bc:	63 5a       	subi	r22, 0xA3	; 163
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z8print2ln21Adafruit_RGBLCDShield6StringS0_>
     7c8:	ce 01       	movw	r24, r28
     7ca:	83 5a       	subi	r24, 0xA3	; 163
     7cc:	9f 4f       	sbci	r25, 0xFF	; 255
     7ce:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     7d2:	ce 01       	movw	r24, r28
     7d4:	8f 5b       	subi	r24, 0xBF	; 191
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
        lcd.setBacklight(YELLOW);
     7dc:	63 e0       	ldi	r22, 0x03	; 3
     7de:	88 e1       	ldi	r24, 0x18	; 24
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     7e6:	d1 c1       	rjmp	.+930    	; 0xb8a <__stack+0x28b>
      }

      break;
    case MENU_DAY:
      ScrollTotal = 1;
     7e8:	aa 24       	eor	r10, r10
     7ea:	a3 94       	inc	r10
     7ec:	b1 2c       	mov	r11, r1
     7ee:	b0 92 fb 02 	sts	0x02FB, r11	; 0x8002fb <ScrollTotal+0x1>
     7f2:	a0 92 fa 02 	sts	0x02FA, r10	; 0x8002fa <ScrollTotal>
      checkTemp();
     7f6:	0e 94 35 02 	call	0x46a	; 0x46a <_Z9checkTempv>
      checkLight(MORNING);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 85 02 	call	0x50a	; 0x50a <_Z10checkLighti>
      
      dtostrf(Temperature,1,1,tempstr);
     802:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <Temperature>
     806:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <Temperature+0x1>
     80a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Temperature+0x2>
     80e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Temperature+0x3>
     812:	00 ef       	ldi	r16, 0xF0	; 240
     814:	12 e0       	ldi	r17, 0x02	; 2
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <dtostrf>
      
      dtostrf(Light,1,1,lghtstr);
     81e:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Light>
     822:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Light+0x1>
     826:	07 2e       	mov	r0, r23
     828:	00 0c       	add	r0, r0
     82a:	88 0b       	sbc	r24, r24
     82c:	99 0b       	sbc	r25, r25
     82e:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatsisf>
     832:	04 ef       	ldi	r16, 0xF4	; 244
     834:	12 e0       	ldi	r17, 0x02	; 2
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <dtostrf>
    
      sprintf(sac,"Day Mode        Tmp:%sLht:%s",tempstr,lghtstr);
     83e:	c8 01       	movw	r24, r16
     840:	9f 93       	push	r25
     842:	0f 93       	push	r16
     844:	80 ef       	ldi	r24, 0xF0	; 240
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	89 ef       	ldi	r24, 0xF9	; 249
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	80 eb       	ldi	r24, 0xB0	; 176
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 c3 19 	call	0x3386	; 0x3386 <sprintf>
      if(!isRefresh)
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	d1 10       	cpse	r13, r1
     86c:	38 c0       	rjmp	.+112    	; 0x8de <_Z12MenuControlsib+0x202>
      {

        
        line1 = (String)(sac);
     86e:	60 eb       	ldi	r22, 0xB0	; 176
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	c7 01       	movw	r24, r14
     874:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     878:	b7 01       	movw	r22, r14
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN6StringaSEOS_>
     882:	c7 01       	movw	r24, r14
     884:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
        line2="Sel:Escape";
     888:	64 ed       	ldi	r22, 0xD4	; 212
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	8e ef       	ldi	r24, 0xFE	; 254
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6StringaSEPKc>
        print2ln(lcd,sac,line2);
     894:	6e ef       	ldi	r22, 0xFE	; 254
     896:	72 e0       	ldi	r23, 0x02	; 2
     898:	ce 01       	movw	r24, r28
     89a:	8f 5b       	subi	r24, 0xBF	; 191
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN6StringC1ERKS_>
     8a2:	60 eb       	ldi	r22, 0xB0	; 176
     8a4:	72 e0       	ldi	r23, 0x02	; 2
     8a6:	ce 01       	movw	r24, r28
     8a8:	83 5a       	subi	r24, 0xA3	; 163
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     8b0:	68 e1       	ldi	r22, 0x18	; 24
     8b2:	73 e0       	ldi	r23, 0x03	; 3
     8b4:	c7 01       	movw	r24, r14
     8b6:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>
     8ba:	ae 01       	movw	r20, r28
     8bc:	4f 5b       	subi	r20, 0xBF	; 191
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	be 01       	movw	r22, r28
     8c2:	63 5a       	subi	r22, 0xA3	; 163
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	c7 01       	movw	r24, r14
     8c8:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z8print2ln21Adafruit_RGBLCDShield6StringS0_>
     8cc:	ce 01       	movw	r24, r28
     8ce:	83 5a       	subi	r24, 0xA3	; 163
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     8d6:	ce 01       	movw	r24, r28
     8d8:	8f 5b       	subi	r24, 0xBF	; 191
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	d5 c0       	rjmp	.+426    	; 0xa88 <__stack+0x189>
        lcd.setBacklight(GREEN);
        ScrollCount = 1;
      }
      else {
        ScrollCount = refreshLine(0, "Day Mode        Tmp:" + (String)Temperature + " Lht:" + (String)Light, ScrollCount, ScrollTotal);
     8de:	a0 90 fa 02 	lds	r10, 0x02FA	; 0x8002fa <ScrollTotal>
     8e2:	b0 90 fb 02 	lds	r11, 0x02FB	; 0x8002fb <ScrollTotal+0x1>
     8e6:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <ScrollCount>
     8ea:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <ScrollCount+0x1>
     8ee:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Light>
     8f2:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Light+0x1>
     8f6:	4a e0       	ldi	r20, 0x0A	; 10
     8f8:	ce 01       	movw	r24, r28
     8fa:	8f 5b       	subi	r24, 0xBF	; 191
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN6StringC1Eih>
     902:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <Temperature>
     906:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <Temperature+0x1>
     90a:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <Temperature+0x2>
     90e:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <Temperature+0x3>
     912:	22 e0       	ldi	r18, 0x02	; 2
     914:	ce 01       	movw	r24, r28
     916:	8d 59       	subi	r24, 0x9D	; 157
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN6StringC1Edh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     91e:	66 e1       	ldi	r22, 0x16	; 22
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	ce 01       	movw	r24, r28
     924:	83 5a       	subi	r24, 0xA3	; 163
     926:	9f 4f       	sbci	r25, 0xFF	; 255
     928:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     92c:	be 01       	movw	r22, r28
     92e:	6d 59       	subi	r22, 0x9D	; 157
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	ce 01       	movw	r24, r28
     934:	83 5a       	subi	r24, 0xA3	; 163
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZplRK15StringSumHelperRK6String>
     93c:	6b e2       	ldi	r22, 0x2B	; 43
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZplRK15StringSumHelperPKc>
     944:	be 01       	movw	r22, r28
     946:	6f 5b       	subi	r22, 0xBF	; 191
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZplRK15StringSumHelperRK6String>
     94e:	bc 01       	movw	r22, r24
     950:	c7 01       	movw	r24, r14
     952:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN6StringC1ERKS_>
     956:	95 01       	movw	r18, r10
     958:	a8 01       	movw	r20, r16
     95a:	b7 01       	movw	r22, r14
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Z11refreshLinei6Stringii>
     964:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <ScrollCount+0x1>
     968:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <ScrollCount>
     96c:	c7 01       	movw	r24, r14
     96e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     972:	ce 01       	movw	r24, r28
     974:	83 5a       	subi	r24, 0xA3	; 163
     976:	9f 4f       	sbci	r25, 0xFF	; 255
     978:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     97c:	ce 01       	movw	r24, r28
     97e:	8d 59       	subi	r24, 0x9D	; 157
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     986:	a7 c0       	rjmp	.+334    	; 0xad6 <__stack+0x1d7>
      }

      break;
    case MENU_NIGHT:
      ScrollTotal = 1;
     988:	aa 24       	eor	r10, r10
     98a:	a3 94       	inc	r10
     98c:	b1 2c       	mov	r11, r1
     98e:	b0 92 fb 02 	sts	0x02FB, r11	; 0x8002fb <ScrollTotal+0x1>
     992:	a0 92 fa 02 	sts	0x02FA, r10	; 0x8002fa <ScrollTotal>
      checkTemp();
     996:	0e 94 35 02 	call	0x46a	; 0x46a <_Z9checkTempv>
      checkLight(EVENING);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 85 02 	call	0x50a	; 0x50a <_Z10checkLighti>

//      char tempstr[4];
      dtostrf(Temperature,1,1,tempstr);
     9a2:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <Temperature>
     9a6:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <Temperature+0x1>
     9aa:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Temperature+0x2>
     9ae:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Temperature+0x3>
     9b2:	00 ef       	ldi	r16, 0xF0	; 240
     9b4:	12 e0       	ldi	r17, 0x02	; 2
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <dtostrf>
//      char lghtstr[4];
      dtostrf(Light,1,1,lghtstr);
     9be:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Light>
     9c2:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Light+0x1>
     9c6:	07 2e       	mov	r0, r23
     9c8:	00 0c       	add	r0, r0
     9ca:	88 0b       	sbc	r24, r24
     9cc:	99 0b       	sbc	r25, r25
     9ce:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatsisf>
     9d2:	04 ef       	ldi	r16, 0xF4	; 244
     9d4:	12 e0       	ldi	r17, 0x02	; 2
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <dtostrf>
      char sac[64];
      sprintf(sac,"Night Mode      Tmp:%sLht:%s",tempstr,lghtstr);
     9de:	c8 01       	movw	r24, r16
     9e0:	9f 93       	push	r25
     9e2:	0f 93       	push	r16
     9e4:	80 ef       	ldi	r24, 0xF0	; 240
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	81 e3       	ldi	r24, 0x31	; 49
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	ff 92       	push	r15
     9f6:	ef 92       	push	r14
     9f8:	0e 94 c3 19 	call	0x3386	; 0x3386 <sprintf>
      if(!isRefresh)
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	d1 10       	cpse	r13, r1
     a08:	4b c0       	rjmp	.+150    	; 0xaa0 <__stack+0x1a1>
      {
        
        

        line1 = (String)(sac);
     a0a:	b7 01       	movw	r22, r14
     a0c:	ce 01       	movw	r24, r28
     a0e:	8f 5b       	subi	r24, 0xBF	; 191
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     a16:	be 01       	movw	r22, r28
     a18:	6f 5b       	subi	r22, 0xBF	; 191
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN6StringaSEOS_>
     a24:	ce 01       	movw	r24, r28
     a26:	8f 5b       	subi	r24, 0xBF	; 191
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
        line2="Sel:Escape";
     a2e:	64 ed       	ldi	r22, 0xD4	; 212
     a30:	71 e0       	ldi	r23, 0x01	; 1
     a32:	8e ef       	ldi	r24, 0xFE	; 254
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6StringaSEPKc>
        print2ln(lcd,sac,line2);
     a3a:	6e ef       	ldi	r22, 0xFE	; 254
     a3c:	72 e0       	ldi	r23, 0x02	; 2
     a3e:	ce 01       	movw	r24, r28
     a40:	83 5a       	subi	r24, 0xA3	; 163
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN6StringC1ERKS_>
     a48:	b7 01       	movw	r22, r14
     a4a:	ce 01       	movw	r24, r28
     a4c:	8d 59       	subi	r24, 0x9D	; 157
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     a54:	68 e1       	ldi	r22, 0x18	; 24
     a56:	73 e0       	ldi	r23, 0x03	; 3
     a58:	ce 01       	movw	r24, r28
     a5a:	8f 5b       	subi	r24, 0xBF	; 191
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>
     a62:	ae 01       	movw	r20, r28
     a64:	43 5a       	subi	r20, 0xA3	; 163
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	be 01       	movw	r22, r28
     a6a:	6d 59       	subi	r22, 0x9D	; 157
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	ce 01       	movw	r24, r28
     a70:	8f 5b       	subi	r24, 0xBF	; 191
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z8print2ln21Adafruit_RGBLCDShield6StringS0_>
     a78:	ce 01       	movw	r24, r28
     a7a:	8d 59       	subi	r24, 0x9D	; 157
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     a82:	ce 01       	movw	r24, r28
     a84:	83 5a       	subi	r24, 0xA3	; 163
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
        
//        print2ln(lcd,"Night Mode      Tmp:" + (String)Temperature + " Lht:" + (String)Light,"Sel:Escape");
        lcd.setBacklight(GREEN);
     a8c:	62 e0       	ldi	r22, 0x02	; 2
     a8e:	88 e1       	ldi	r24, 0x18	; 24
     a90:	93 e0       	ldi	r25, 0x03	; 3
     a92:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
        ScrollCount = 1;
     a96:	b0 92 fd 02 	sts	0x02FD, r11	; 0x8002fd <ScrollCount+0x1>
     a9a:	a0 92 fc 02 	sts	0x02FC, r10	; 0x8002fc <ScrollCount>
     a9e:	75 c0       	rjmp	.+234    	; 0xb8a <__stack+0x28b>
      }
      else{ScrollCount = refreshLine(0,sac,ScrollCount,ScrollTotal);}
     aa0:	a0 90 fa 02 	lds	r10, 0x02FA	; 0x8002fa <ScrollTotal>
     aa4:	b0 90 fb 02 	lds	r11, 0x02FB	; 0x8002fb <ScrollTotal+0x1>
     aa8:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <ScrollCount>
     aac:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <ScrollCount+0x1>
     ab0:	b7 01       	movw	r22, r14
     ab2:	ce 01       	movw	r24, r28
     ab4:	8f 5b       	subi	r24, 0xBF	; 191
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     abc:	95 01       	movw	r18, r10
     abe:	a8 01       	movw	r20, r16
     ac0:	be 01       	movw	r22, r28
     ac2:	6f 5b       	subi	r22, 0xBF	; 191
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Z11refreshLinei6Stringii>
     ace:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <ScrollCount+0x1>
     ad2:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <ScrollCount>
     ad6:	ce 01       	movw	r24, r28
     ad8:	8f 5b       	subi	r24, 0xBF	; 191
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	54 c0       	rjmp	.+168    	; 0xb86 <__stack+0x287>
      break;
    //TODO: ADD SAFETY/ERROR STATES
    default:
      ScrollTotal = 1;
     ade:	01 e0       	ldi	r16, 0x01	; 1
     ae0:	10 e0       	ldi	r17, 0x00	; 0
     ae2:	10 93 fb 02 	sts	0x02FB, r17	; 0x8002fb <ScrollTotal+0x1>
     ae6:	00 93 fa 02 	sts	0x02FA, r16	; 0x8002fa <ScrollTotal>
      if (!isRefresh)
     aea:	d1 10       	cpse	r13, r1
     aec:	32 c0       	rjmp	.+100    	; 0xb52 <__stack+0x253>
      {
        print2ln(lcd, "Main Menu", "Up:Open Dn:Close Lft:Day Rt:Night");
     aee:	6e e4       	ldi	r22, 0x4E	; 78
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	ce 01       	movw	r24, r28
     af4:	8f 5b       	subi	r24, 0xBF	; 191
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     afc:	6a ec       	ldi	r22, 0xCA	; 202
     afe:	71 e0       	ldi	r23, 0x01	; 1
     b00:	ce 01       	movw	r24, r28
     b02:	83 5a       	subi	r24, 0xA3	; 163
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     b0a:	68 e1       	ldi	r22, 0x18	; 24
     b0c:	73 e0       	ldi	r23, 0x03	; 3
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>
     b16:	ae 01       	movw	r20, r28
     b18:	4f 5b       	subi	r20, 0xBF	; 191
     b1a:	5f 4f       	sbci	r21, 0xFF	; 255
     b1c:	be 01       	movw	r22, r28
     b1e:	63 5a       	subi	r22, 0xA3	; 163
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z8print2ln21Adafruit_RGBLCDShield6StringS0_>
     b2a:	ce 01       	movw	r24, r28
     b2c:	83 5a       	subi	r24, 0xA3	; 163
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
     b34:	ce 01       	movw	r24, r28
     b36:	8f 5b       	subi	r24, 0xBF	; 191
     b38:	9f 4f       	sbci	r25, 0xFF	; 255
     b3a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
        lcd.setBacklight(GREEN);
     b3e:	62 e0       	ldi	r22, 0x02	; 2
     b40:	88 e1       	ldi	r24, 0x18	; 24
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
        ScrollCount = 1;
     b48:	10 93 fd 02 	sts	0x02FD, r17	; 0x8002fd <ScrollCount+0x1>
     b4c:	00 93 fc 02 	sts	0x02FC, r16	; 0x8002fc <ScrollCount>
     b50:	1c c0       	rjmp	.+56     	; 0xb8a <__stack+0x28b>
      }
      else {
        ScrollCount = refreshLine(1, "Up:Open Dn:Close Lft:Day Rt:Night", ScrollCount, ScrollTotal);
     b52:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <ScrollCount>
     b56:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <ScrollCount+0x1>
     b5a:	6e e4       	ldi	r22, 0x4E	; 78
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	a8 01       	movw	r20, r16
     b6c:	be 01       	movw	r22, r28
     b6e:	6f 5f       	subi	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Z11refreshLinei6Stringii>
     b7a:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <ScrollCount+0x1>
     b7e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <ScrollCount>
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
      }
      break;
  }
}
     b8a:	c8 59       	subi	r28, 0x98	; 152
     b8c:	df 4f       	sbci	r29, 0xFF	; 255
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	08 95       	ret

00000bac <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     bac:	26 e0       	ldi	r18, 0x06	; 6
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	55 e2       	ldi	r21, 0x25	; 37
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 e3       	ldi	r24, 0x34	; 52
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN14HardwareSerial5beginEmh>

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  pinMode(PIN_RELAY_DOOROPEN, INPUT);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_RELAY_DOORCLOSE, INPUT);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	89 e0       	ldi	r24, 0x09	; 9
     bca:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  pinMode(PIN_LIMITSWITCH_1, INPUT_PULLUP);
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <pinMode>
  attachInterrupt(digitalPinToInterrupt(PIN_LIMITSWITCH_1), LimitSwitchActive, RISING);
     bd6:	43 e0       	ldi	r20, 0x03	; 3
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6f ef       	ldi	r22, 0xFF	; 255
     bdc:	71 e0       	ldi	r23, 0x01	; 1
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <attachInterrupt>

  lcd.begin(16, 2);
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	42 e0       	ldi	r20, 0x02	; 2
     be8:	60 e1       	ldi	r22, 0x10	; 16
     bea:	88 e1       	ldi	r24, 0x18	; 24
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
  lcd.clear();
     bf2:	88 e1       	ldi	r24, 0x18	; 24
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 56 10 	call	0x20ac	; 0x20ac <_ZN21Adafruit_RGBLCDShield5clearEv>
  MenuControls(CurrentMenu,false);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <CurrentMenu>
     c00:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <CurrentMenu+0x1>
     c04:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z12MenuControlsib>
  analogReference(EXTERNAL);
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <analogReference>
  
  isOkay = true;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <isOkay>
  isClosing = false;
     c14:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <isClosing>
     c18:	08 95       	ret

00000c1a <loop>:
}

void loop() {
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	6c 97       	sbiw	r28, 0x1c	; 28
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
  // put your main code here, to run repeatedly:
  if (CurrentMenu != MenuSelect)
     c32:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <MenuSelect>
     c36:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MenuSelect+0x1>
     c3a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <CurrentMenu>
     c3e:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <CurrentMenu+0x1>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	11 f0       	breq	.+4      	; 0xc4c <loop+0x32>
  {
    MenuControls(MenuSelect, false);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	1a c0       	rjmp	.+52     	; 0xc80 <loop+0x66>
    CurrentMenu = MenuSelect;
    MenuLastUpdated = millis();
  }
  else if (millis() - MenuLastUpdated > REFRESH_RATE)
     c4c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <millis>
     c50:	00 91 0a 03 	lds	r16, 0x030A	; 0x80030a <MenuLastUpdated>
     c54:	10 91 0b 03 	lds	r17, 0x030B	; 0x80030b <MenuLastUpdated+0x1>
     c58:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <MenuLastUpdated+0x2>
     c5c:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <MenuLastUpdated+0x3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	80 1b       	sub	r24, r16
     c66:	91 0b       	sbc	r25, r17
     c68:	a2 0b       	sbc	r26, r18
     c6a:	b3 0b       	sbc	r27, r19
     c6c:	89 3b       	cpi	r24, 0xB9	; 185
     c6e:	9b 40       	sbci	r25, 0x0B	; 11
     c70:	a1 05       	cpc	r26, r1
     c72:	b1 05       	cpc	r27, r1
     c74:	c8 f0       	brcs	.+50     	; 0xca8 <loop+0x8e>
  {
    MenuControls(MenuSelect, true);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <MenuSelect>
     c7c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MenuSelect+0x1>
     c80:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z12MenuControlsib>
    CurrentMenu = MenuSelect;
     c84:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <MenuSelect>
     c88:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MenuSelect+0x1>
     c8c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <CurrentMenu+0x1>
     c90:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <CurrentMenu>
    MenuLastUpdated = millis();
     c94:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <millis>
     c98:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <MenuLastUpdated>
     c9c:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <MenuLastUpdated+0x1>
     ca0:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <MenuLastUpdated+0x2>
     ca4:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <MenuLastUpdated+0x3>
  }
  MenuSelect = GetNextMenu(lcd, CurrentMenu);
     ca8:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <CurrentMenu>
     cac:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <CurrentMenu+0x1>
     cb0:	68 e1       	ldi	r22, 0x18	; 24
     cb2:	73 e0       	ldi	r23, 0x03	; 3
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN21Adafruit_RGBLCDShieldC1ERKS_>
     cbc:	b8 01       	movw	r22, r16
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 a9 02 	call	0x552	; 0x552 <_Z11GetNextMenu21Adafruit_RGBLCDShieldi>
     cc6:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <MenuSelect+0x1>
     cca:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <MenuSelect>
  if (!isOkay) {
     cce:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <isOkay>
     cd2:	81 11       	cpse	r24, r1
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <loop+0xc2>
    isOkay = true;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <isOkay>
  }
}
     cdc:	6c 96       	adiw	r28, 0x1c	; 28
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <_GLOBAL__sub_I_lcd>:




const int openAndCloseTime = 11000;
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();
     cf2:	88 e1       	ldi	r24, 0x18	; 24
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN21Adafruit_RGBLCDShieldC1Ev>
double Temperature = 0;
int Light = 0;
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     cfa:	64 e8       	ldi	r22, 0x84	; 132
     cfc:	72 e0       	ldi	r23, 0x02	; 2
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
String line2;
     d06:	64 e8       	ldi	r22, 0x84	; 132
     d08:	72 e0       	ldi	r23, 0x02	; 2
     d0a:	8e ef       	ldi	r24, 0xFE	; 254
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>

00000d12 <_GLOBAL__sub_D_lcd>:
     d12:	8e ef       	ldi	r24, 0xFE	; 254
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringD1Ev>
double Temperature = 0;
int Light = 0;
int CurrentMenu = 0;
int MenuSelect = 0;
unsigned long MenuLastUpdated = 0; //ONLY MODIFY VIA: MenuControls()
String line1;
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <_ZN6StringD1Ev>

00000d22 <__subsf3>:
     d22:	50 58       	subi	r21, 0x80	; 128

00000d24 <__addsf3>:
     d24:	bb 27       	eor	r27, r27
     d26:	aa 27       	eor	r26, r26
     d28:	0e 94 a9 06 	call	0xd52	; 0xd52 <__addsf3x>
     d2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     d30:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     d34:	38 f0       	brcs	.+14     	; 0xd44 <__addsf3+0x20>
     d36:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     d3a:	20 f0       	brcs	.+8      	; 0xd44 <__addsf3+0x20>
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__addsf3+0x28>
     d3e:	9f 3f       	cpi	r25, 0xFF	; 255
     d40:	19 f4       	brne	.+6      	; 0xd48 <__addsf3+0x24>
     d42:	26 f4       	brtc	.+8      	; 0xd4c <__addsf3+0x28>
     d44:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     d48:	0e f4       	brtc	.+2      	; 0xd4c <__addsf3+0x28>
     d4a:	e0 95       	com	r30
     d4c:	e7 fb       	bst	r30, 7
     d4e:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>

00000d52 <__addsf3x>:
     d52:	e9 2f       	mov	r30, r25
     d54:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     d58:	58 f3       	brcs	.-42     	; 0xd30 <__addsf3+0xc>
     d5a:	ba 17       	cp	r27, r26
     d5c:	62 07       	cpc	r22, r18
     d5e:	73 07       	cpc	r23, r19
     d60:	84 07       	cpc	r24, r20
     d62:	95 07       	cpc	r25, r21
     d64:	20 f0       	brcs	.+8      	; 0xd6e <__addsf3x+0x1c>
     d66:	79 f4       	brne	.+30     	; 0xd86 <__addsf3x+0x34>
     d68:	a6 f5       	brtc	.+104    	; 0xdd2 <__addsf3x+0x80>
     d6a:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     d6e:	0e f4       	brtc	.+2      	; 0xd72 <__addsf3x+0x20>
     d70:	e0 95       	com	r30
     d72:	0b 2e       	mov	r0, r27
     d74:	ba 2f       	mov	r27, r26
     d76:	a0 2d       	mov	r26, r0
     d78:	0b 01       	movw	r0, r22
     d7a:	b9 01       	movw	r22, r18
     d7c:	90 01       	movw	r18, r0
     d7e:	0c 01       	movw	r0, r24
     d80:	ca 01       	movw	r24, r20
     d82:	a0 01       	movw	r20, r0
     d84:	11 24       	eor	r1, r1
     d86:	ff 27       	eor	r31, r31
     d88:	59 1b       	sub	r21, r25
     d8a:	99 f0       	breq	.+38     	; 0xdb2 <__addsf3x+0x60>
     d8c:	59 3f       	cpi	r21, 0xF9	; 249
     d8e:	50 f4       	brcc	.+20     	; 0xda4 <__addsf3x+0x52>
     d90:	50 3e       	cpi	r21, 0xE0	; 224
     d92:	68 f1       	brcs	.+90     	; 0xdee <__addsf3x+0x9c>
     d94:	1a 16       	cp	r1, r26
     d96:	f0 40       	sbci	r31, 0x00	; 0
     d98:	a2 2f       	mov	r26, r18
     d9a:	23 2f       	mov	r18, r19
     d9c:	34 2f       	mov	r19, r20
     d9e:	44 27       	eor	r20, r20
     da0:	58 5f       	subi	r21, 0xF8	; 248
     da2:	f3 cf       	rjmp	.-26     	; 0xd8a <__addsf3x+0x38>
     da4:	46 95       	lsr	r20
     da6:	37 95       	ror	r19
     da8:	27 95       	ror	r18
     daa:	a7 95       	ror	r26
     dac:	f0 40       	sbci	r31, 0x00	; 0
     dae:	53 95       	inc	r21
     db0:	c9 f7       	brne	.-14     	; 0xda4 <__addsf3x+0x52>
     db2:	7e f4       	brtc	.+30     	; 0xdd2 <__addsf3x+0x80>
     db4:	1f 16       	cp	r1, r31
     db6:	ba 0b       	sbc	r27, r26
     db8:	62 0b       	sbc	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	84 0b       	sbc	r24, r20
     dbe:	ba f0       	brmi	.+46     	; 0xdee <__addsf3x+0x9c>
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	a1 f0       	breq	.+40     	; 0xdec <__addsf3x+0x9a>
     dc4:	ff 0f       	add	r31, r31
     dc6:	bb 1f       	adc	r27, r27
     dc8:	66 1f       	adc	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	c2 f7       	brpl	.-16     	; 0xdc0 <__addsf3x+0x6e>
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <__addsf3x+0x9c>
     dd2:	ba 0f       	add	r27, r26
     dd4:	62 1f       	adc	r22, r18
     dd6:	73 1f       	adc	r23, r19
     dd8:	84 1f       	adc	r24, r20
     dda:	48 f4       	brcc	.+18     	; 0xdee <__addsf3x+0x9c>
     ddc:	87 95       	ror	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	f7 95       	ror	r31
     de6:	9e 3f       	cpi	r25, 0xFE	; 254
     de8:	08 f0       	brcs	.+2      	; 0xdec <__addsf3x+0x9a>
     dea:	b0 cf       	rjmp	.-160    	; 0xd4c <__addsf3+0x28>
     dec:	93 95       	inc	r25
     dee:	88 0f       	add	r24, r24
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <__addsf3x+0xa2>
     df2:	99 27       	eor	r25, r25
     df4:	ee 0f       	add	r30, r30
     df6:	97 95       	ror	r25
     df8:	87 95       	ror	r24
     dfa:	08 95       	ret

00000dfc <__fixsfsi>:
     dfc:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fixunssfsi>
     e00:	68 94       	set
     e02:	b1 11       	cpse	r27, r1
     e04:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
     e08:	08 95       	ret

00000e0a <__fixunssfsi>:
     e0a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_splitA>
     e0e:	88 f0       	brcs	.+34     	; 0xe32 <__fixunssfsi+0x28>
     e10:	9f 57       	subi	r25, 0x7F	; 127
     e12:	98 f0       	brcs	.+38     	; 0xe3a <__fixunssfsi+0x30>
     e14:	b9 2f       	mov	r27, r25
     e16:	99 27       	eor	r25, r25
     e18:	b7 51       	subi	r27, 0x17	; 23
     e1a:	b0 f0       	brcs	.+44     	; 0xe48 <__fixunssfsi+0x3e>
     e1c:	e1 f0       	breq	.+56     	; 0xe56 <__fixunssfsi+0x4c>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	1a f0       	brmi	.+6      	; 0xe2e <__fixunssfsi+0x24>
     e28:	ba 95       	dec	r27
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__fixunssfsi+0x14>
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <__fixunssfsi+0x4c>
     e2e:	b1 30       	cpi	r27, 0x01	; 1
     e30:	91 f0       	breq	.+36     	; 0xe56 <__fixunssfsi+0x4c>
     e32:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_zero>
     e36:	b1 e0       	ldi	r27, 0x01	; 1
     e38:	08 95       	ret
     e3a:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     e3e:	67 2f       	mov	r22, r23
     e40:	78 2f       	mov	r23, r24
     e42:	88 27       	eor	r24, r24
     e44:	b8 5f       	subi	r27, 0xF8	; 248
     e46:	39 f0       	breq	.+14     	; 0xe56 <__fixunssfsi+0x4c>
     e48:	b9 3f       	cpi	r27, 0xF9	; 249
     e4a:	cc f3       	brlt	.-14     	; 0xe3e <__fixunssfsi+0x34>
     e4c:	86 95       	lsr	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b3 95       	inc	r27
     e54:	d9 f7       	brne	.-10     	; 0xe4c <__fixunssfsi+0x42>
     e56:	3e f4       	brtc	.+14     	; 0xe66 <__fixunssfsi+0x5c>
     e58:	90 95       	com	r25
     e5a:	80 95       	com	r24
     e5c:	70 95       	com	r23
     e5e:	61 95       	neg	r22
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8f 4f       	sbci	r24, 0xFF	; 255
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	08 95       	ret

00000e68 <__floatunsisf>:
     e68:	e8 94       	clt
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <__floatsisf+0x12>

00000e6c <__floatsisf>:
     e6c:	97 fb       	bst	r25, 7
     e6e:	3e f4       	brtc	.+14     	; 0xe7e <__floatsisf+0x12>
     e70:	90 95       	com	r25
     e72:	80 95       	com	r24
     e74:	70 95       	com	r23
     e76:	61 95       	neg	r22
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	8f 4f       	sbci	r24, 0xFF	; 255
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	99 23       	and	r25, r25
     e80:	a9 f0       	breq	.+42     	; 0xeac <__floatsisf+0x40>
     e82:	f9 2f       	mov	r31, r25
     e84:	96 e9       	ldi	r25, 0x96	; 150
     e86:	bb 27       	eor	r27, r27
     e88:	93 95       	inc	r25
     e8a:	f6 95       	lsr	r31
     e8c:	87 95       	ror	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	f1 11       	cpse	r31, r1
     e96:	f8 cf       	rjmp	.-16     	; 0xe88 <__floatsisf+0x1c>
     e98:	fa f4       	brpl	.+62     	; 0xed8 <__floatsisf+0x6c>
     e9a:	bb 0f       	add	r27, r27
     e9c:	11 f4       	brne	.+4      	; 0xea2 <__floatsisf+0x36>
     e9e:	60 ff       	sbrs	r22, 0
     ea0:	1b c0       	rjmp	.+54     	; 0xed8 <__floatsisf+0x6c>
     ea2:	6f 5f       	subi	r22, 0xFF	; 255
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <__floatsisf+0x6c>
     eac:	88 23       	and	r24, r24
     eae:	11 f0       	breq	.+4      	; 0xeb4 <__floatsisf+0x48>
     eb0:	96 e9       	ldi	r25, 0x96	; 150
     eb2:	11 c0       	rjmp	.+34     	; 0xed6 <__floatsisf+0x6a>
     eb4:	77 23       	and	r23, r23
     eb6:	21 f0       	breq	.+8      	; 0xec0 <__floatsisf+0x54>
     eb8:	9e e8       	ldi	r25, 0x8E	; 142
     eba:	87 2f       	mov	r24, r23
     ebc:	76 2f       	mov	r23, r22
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <__floatsisf+0x5e>
     ec0:	66 23       	and	r22, r22
     ec2:	71 f0       	breq	.+28     	; 0xee0 <__floatsisf+0x74>
     ec4:	96 e8       	ldi	r25, 0x86	; 134
     ec6:	86 2f       	mov	r24, r22
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	2a f0       	brmi	.+10     	; 0xed8 <__floatsisf+0x6c>
     ece:	9a 95       	dec	r25
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	da f7       	brpl	.-10     	; 0xece <__floatsisf+0x62>
     ed8:	88 0f       	add	r24, r24
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <__fp_inf>:
     ee2:	97 f9       	bld	r25, 7
     ee4:	9f 67       	ori	r25, 0x7F	; 127
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	08 95       	ret

00000eee <__fp_nan>:
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	08 95       	ret

00000ef4 <__fp_pscA>:
     ef4:	00 24       	eor	r0, r0
     ef6:	0a 94       	dec	r0
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	18 06       	cpc	r1, r24
     efe:	09 06       	cpc	r0, r25
     f00:	08 95       	ret

00000f02 <__fp_pscB>:
     f02:	00 24       	eor	r0, r0
     f04:	0a 94       	dec	r0
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	05 06       	cpc	r0, r21
     f0e:	08 95       	ret

00000f10 <__fp_round>:
     f10:	09 2e       	mov	r0, r25
     f12:	03 94       	inc	r0
     f14:	00 0c       	add	r0, r0
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0xc>
     f18:	88 23       	and	r24, r24
     f1a:	52 f0       	brmi	.+20     	; 0xf30 <__fp_round+0x20>
     f1c:	bb 0f       	add	r27, r27
     f1e:	40 f4       	brcc	.+16     	; 0xf30 <__fp_round+0x20>
     f20:	bf 2b       	or	r27, r31
     f22:	11 f4       	brne	.+4      	; 0xf28 <__fp_round+0x18>
     f24:	60 ff       	sbrs	r22, 0
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <__fp_round+0x20>
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	08 95       	ret

00000f32 <__fp_split3>:
     f32:	57 fd       	sbrc	r21, 7
     f34:	90 58       	subi	r25, 0x80	; 128
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	59 f0       	breq	.+22     	; 0xf52 <__fp_splitA+0x10>
     f3c:	5f 3f       	cpi	r21, 0xFF	; 255
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__fp_splitA+0x1a>
     f40:	47 95       	ror	r20

00000f42 <__fp_splitA>:
     f42:	88 0f       	add	r24, r24
     f44:	97 fb       	bst	r25, 7
     f46:	99 1f       	adc	r25, r25
     f48:	61 f0       	breq	.+24     	; 0xf62 <__fp_splitA+0x20>
     f4a:	9f 3f       	cpi	r25, 0xFF	; 255
     f4c:	79 f0       	breq	.+30     	; 0xf6c <__fp_splitA+0x2a>
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	14 06       	cpc	r1, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	f2 cf       	rjmp	.-28     	; 0xf40 <__fp_split3+0xe>
     f5c:	46 95       	lsr	r20
     f5e:	f1 df       	rcall	.-30     	; 0xf42 <__fp_splitA>
     f60:	08 c0       	rjmp	.+16     	; 0xf72 <__fp_splitA+0x30>
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	f1 cf       	rjmp	.-30     	; 0xf4e <__fp_splitA+0xc>
     f6c:	86 95       	lsr	r24
     f6e:	71 05       	cpc	r23, r1
     f70:	61 05       	cpc	r22, r1
     f72:	08 94       	sec
     f74:	08 95       	ret

00000f76 <__fp_zero>:
     f76:	e8 94       	clt

00000f78 <__fp_szero>:
     f78:	bb 27       	eor	r27, r27
     f7a:	66 27       	eor	r22, r22
     f7c:	77 27       	eor	r23, r23
     f7e:	cb 01       	movw	r24, r22
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret

00000f84 <__gesf2>:
     f84:	0e 94 34 08 	call	0x1068	; 0x1068 <__fp_cmp>
     f88:	08 f4       	brcc	.+2      	; 0xf8c <__gesf2+0x8>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	08 95       	ret

00000f8e <__mulsf3>:
     f8e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3x>
     f92:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     f96:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     f9a:	38 f0       	brcs	.+14     	; 0xfaa <__mulsf3+0x1c>
     f9c:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__mulsf3+0x1c>
     fa2:	95 23       	and	r25, r21
     fa4:	11 f0       	breq	.+4      	; 0xfaa <__mulsf3+0x1c>
     fa6:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
     faa:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     fae:	11 24       	eor	r1, r1
     fb0:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>

00000fb4 <__mulsf3x>:
     fb4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     fb8:	70 f3       	brcs	.-36     	; 0xf96 <__mulsf3+0x8>

00000fba <__mulsf3_pse>:
     fba:	95 9f       	mul	r25, r21
     fbc:	c1 f3       	breq	.-16     	; 0xfae <__mulsf3+0x20>
     fbe:	95 0f       	add	r25, r21
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	55 1f       	adc	r21, r21
     fc4:	62 9f       	mul	r22, r18
     fc6:	f0 01       	movw	r30, r0
     fc8:	72 9f       	mul	r23, r18
     fca:	bb 27       	eor	r27, r27
     fcc:	f0 0d       	add	r31, r0
     fce:	b1 1d       	adc	r27, r1
     fd0:	63 9f       	mul	r22, r19
     fd2:	aa 27       	eor	r26, r26
     fd4:	f0 0d       	add	r31, r0
     fd6:	b1 1d       	adc	r27, r1
     fd8:	aa 1f       	adc	r26, r26
     fda:	64 9f       	mul	r22, r20
     fdc:	66 27       	eor	r22, r22
     fde:	b0 0d       	add	r27, r0
     fe0:	a1 1d       	adc	r26, r1
     fe2:	66 1f       	adc	r22, r22
     fe4:	82 9f       	mul	r24, r18
     fe6:	22 27       	eor	r18, r18
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	62 1f       	adc	r22, r18
     fee:	73 9f       	mul	r23, r19
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	62 1f       	adc	r22, r18
     ff6:	83 9f       	mul	r24, r19
     ff8:	a0 0d       	add	r26, r0
     ffa:	61 1d       	adc	r22, r1
     ffc:	22 1f       	adc	r18, r18
     ffe:	74 9f       	mul	r23, r20
    1000:	33 27       	eor	r19, r19
    1002:	a0 0d       	add	r26, r0
    1004:	61 1d       	adc	r22, r1
    1006:	23 1f       	adc	r18, r19
    1008:	84 9f       	mul	r24, r20
    100a:	60 0d       	add	r22, r0
    100c:	21 1d       	adc	r18, r1
    100e:	82 2f       	mov	r24, r18
    1010:	76 2f       	mov	r23, r22
    1012:	6a 2f       	mov	r22, r26
    1014:	11 24       	eor	r1, r1
    1016:	9f 57       	subi	r25, 0x7F	; 127
    1018:	50 40       	sbci	r21, 0x00	; 0
    101a:	9a f0       	brmi	.+38     	; 0x1042 <__mulsf3_pse+0x88>
    101c:	f1 f0       	breq	.+60     	; 0x105a <__mulsf3_pse+0xa0>
    101e:	88 23       	and	r24, r24
    1020:	4a f0       	brmi	.+18     	; 0x1034 <__mulsf3_pse+0x7a>
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	bb 1f       	adc	r27, r27
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	91 50       	subi	r25, 0x01	; 1
    1030:	50 40       	sbci	r21, 0x00	; 0
    1032:	a9 f7       	brne	.-22     	; 0x101e <__mulsf3_pse+0x64>
    1034:	9e 3f       	cpi	r25, 0xFE	; 254
    1036:	51 05       	cpc	r21, r1
    1038:	80 f0       	brcs	.+32     	; 0x105a <__mulsf3_pse+0xa0>
    103a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
    103e:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
    1042:	5f 3f       	cpi	r21, 0xFF	; 255
    1044:	e4 f3       	brlt	.-8      	; 0x103e <__mulsf3_pse+0x84>
    1046:	98 3e       	cpi	r25, 0xE8	; 232
    1048:	d4 f3       	brlt	.-12     	; 0x103e <__mulsf3_pse+0x84>
    104a:	86 95       	lsr	r24
    104c:	77 95       	ror	r23
    104e:	67 95       	ror	r22
    1050:	b7 95       	ror	r27
    1052:	f7 95       	ror	r31
    1054:	e7 95       	ror	r30
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	c1 f7       	brne	.-16     	; 0x104a <__mulsf3_pse+0x90>
    105a:	fe 2b       	or	r31, r30
    105c:	88 0f       	add	r24, r24
    105e:	91 1d       	adc	r25, r1
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret

00001068 <__fp_cmp>:
    1068:	99 0f       	add	r25, r25
    106a:	00 08       	sbc	r0, r0
    106c:	55 0f       	add	r21, r21
    106e:	aa 0b       	sbc	r26, r26
    1070:	e0 e8       	ldi	r30, 0x80	; 128
    1072:	fe ef       	ldi	r31, 0xFE	; 254
    1074:	16 16       	cp	r1, r22
    1076:	17 06       	cpc	r1, r23
    1078:	e8 07       	cpc	r30, r24
    107a:	f9 07       	cpc	r31, r25
    107c:	c0 f0       	brcs	.+48     	; 0x10ae <__fp_cmp+0x46>
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	e4 07       	cpc	r30, r20
    1084:	f5 07       	cpc	r31, r21
    1086:	98 f0       	brcs	.+38     	; 0x10ae <__fp_cmp+0x46>
    1088:	62 1b       	sub	r22, r18
    108a:	73 0b       	sbc	r23, r19
    108c:	84 0b       	sbc	r24, r20
    108e:	95 0b       	sbc	r25, r21
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__fp_cmp+0x38>
    1092:	0a 26       	eor	r0, r26
    1094:	61 f0       	breq	.+24     	; 0x10ae <__fp_cmp+0x46>
    1096:	23 2b       	or	r18, r19
    1098:	24 2b       	or	r18, r20
    109a:	25 2b       	or	r18, r21
    109c:	21 f4       	brne	.+8      	; 0x10a6 <__fp_cmp+0x3e>
    109e:	08 95       	ret
    10a0:	0a 26       	eor	r0, r26
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__fp_cmp+0x3e>
    10a4:	a1 40       	sbci	r26, 0x01	; 1
    10a6:	a6 95       	lsr	r26
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	81 1d       	adc	r24, r1
    10ac:	81 1d       	adc	r24, r1
    10ae:	08 95       	ret

000010b0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10b0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    10b2:	91 8d       	ldd	r25, Z+25	; 0x19
    10b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    10b6:	89 2f       	mov	r24, r25
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	80 5c       	subi	r24, 0xC0	; 192
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	82 1b       	sub	r24, r18
    10c0:	91 09       	sbc	r25, r1
}
    10c2:	8f 73       	andi	r24, 0x3F	; 63
    10c4:	99 27       	eor	r25, r25
    10c6:	08 95       	ret

000010c8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    10c8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    10ca:	91 8d       	ldd	r25, Z+25	; 0x19
    10cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10ce:	98 17       	cp	r25, r24
    10d0:	31 f0       	breq	.+12     	; 0x10de <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    10d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10d4:	e8 0f       	add	r30, r24
    10d6:	f1 1d       	adc	r31, r1
    10d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    10e2:	08 95       	ret

000010e4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    10e4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    10e6:	91 8d       	ldd	r25, Z+25	; 0x19
    10e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    10ea:	98 17       	cp	r25, r24
    10ec:	61 f0       	breq	.+24     	; 0x1106 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    10ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f0:	df 01       	movw	r26, r30
    10f2:	a8 0f       	add	r26, r24
    10f4:	b1 1d       	adc	r27, r1
    10f6:	5d 96       	adiw	r26, 0x1d	; 29
    10f8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    10fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	9f 73       	andi	r25, 0x3F	; 63
    1100:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    110a:	08 95       	ret

0000110c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    110c:	fc 01       	movw	r30, r24
    110e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1110:	44 8d       	ldd	r20, Z+28	; 0x1c
    1112:	25 2f       	mov	r18, r21
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	84 2f       	mov	r24, r20
    1118:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    111a:	82 1b       	sub	r24, r18
    111c:	93 0b       	sbc	r25, r19
    111e:	54 17       	cp	r21, r20
    1120:	10 f0       	brcs	.+4      	; 0x1126 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1122:	cf 96       	adiw	r24, 0x3f	; 63
    1124:	08 95       	ret
  return tail - head - 1;
    1126:	01 97       	sbiw	r24, 0x01	; 1
}
    1128:	08 95       	ret

0000112a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    112a:	85 ef       	ldi	r24, 0xF5	; 245
    112c:	99 e0       	ldi	r25, 0x09	; 9
    112e:	89 2b       	or	r24, r25
    1130:	49 f0       	breq	.+18     	; 0x1144 <_Z14serialEventRunv+0x1a>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	89 2b       	or	r24, r25
    1138:	29 f0       	breq	.+10     	; 0x1144 <_Z14serialEventRunv+0x1a>
    113a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_Z17Serial0_availablev>
    113e:	81 11       	cpse	r24, r1
    1140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1144:	08 95       	ret

00001146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1146:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1148:	84 8d       	ldd	r24, Z+28	; 0x1c
    114a:	df 01       	movw	r26, r30
    114c:	a8 0f       	add	r26, r24
    114e:	b1 1d       	adc	r27, r1
    1150:	a3 5a       	subi	r26, 0xA3	; 163
    1152:	bf 4f       	sbci	r27, 0xFF	; 255
    1154:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1156:	84 8d       	ldd	r24, Z+28	; 0x1c
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	8f 73       	andi	r24, 0x3F	; 63
    115e:	99 27       	eor	r25, r25
    1160:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1162:	a6 89       	ldd	r26, Z+22	; 0x16
    1164:	b7 89       	ldd	r27, Z+23	; 0x17
    1166:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1168:	a0 89       	ldd	r26, Z+16	; 0x10
    116a:	b1 89       	ldd	r27, Z+17	; 0x11
    116c:	8c 91       	ld	r24, X
    116e:	83 70       	andi	r24, 0x03	; 3
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1174:	93 8d       	ldd	r25, Z+27	; 0x1b
    1176:	84 8d       	ldd	r24, Z+28	; 0x1c
    1178:	98 13       	cpse	r25, r24
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    117c:	02 88       	ldd	r0, Z+18	; 0x12
    117e:	f3 89       	ldd	r31, Z+19	; 0x13
    1180:	e0 2d       	mov	r30, r0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7d       	andi	r24, 0xDF	; 223
    1186:	80 83       	st	Z, r24
    1188:	08 95       	ret

0000118a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	ec 01       	movw	r28, r24
  _written = true;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    119c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    119e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11a0:	98 13       	cpse	r25, r24
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <_ZN14HardwareSerial5writeEh+0x24>
    11a4:	e8 89       	ldd	r30, Y+16	; 0x10
    11a6:	f9 89       	ldd	r31, Y+17	; 0x11
    11a8:	80 81       	ld	r24, Z
    11aa:	85 fd       	sbrc	r24, 5
    11ac:	26 c0       	rjmp	.+76     	; 0x11fa <_ZN14HardwareSerial5writeEh+0x70>
    11ae:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    11b0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	0f 5f       	subi	r16, 0xFF	; 255
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255
    11b8:	0f 73       	andi	r16, 0x3F	; 63
    11ba:	11 27       	eor	r17, r17
    11bc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    11be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11c0:	e8 12       	cpse	r14, r24
    11c2:	0c c0       	rjmp	.+24     	; 0x11dc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	07 fc       	sbrc	r0, 7
    11c8:	fa cf       	rjmp	.-12     	; 0x11be <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11ca:	e8 89       	ldd	r30, Y+16	; 0x10
    11cc:	f9 89       	ldd	r31, Y+17	; 0x11
    11ce:	80 81       	ld	r24, Z
    11d0:	85 ff       	sbrs	r24, 5
    11d2:	f5 cf       	rjmp	.-22     	; 0x11be <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11da:	f1 cf       	rjmp	.-30     	; 0x11be <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11de:	fe 01       	movw	r30, r28
    11e0:	e8 0f       	add	r30, r24
    11e2:	f1 1d       	adc	r31, r1
    11e4:	e3 5a       	subi	r30, 0xA3	; 163
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11ea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11ec:	f8 94       	cli
    _tx_buffer_head = i;
    11ee:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    11f0:	ea 89       	ldd	r30, Y+18	; 0x12
    11f2:	fb 89       	ldd	r31, Y+19	; 0x13
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	0a c0       	rjmp	.+20     	; 0x120e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11fa:	9f b7       	in	r25, 0x3f	; 63
    11fc:	f8 94       	cli
      *_udr = c;
    11fe:	ee 89       	ldd	r30, Y+22	; 0x16
    1200:	ff 89       	ldd	r31, Y+23	; 0x17
    1202:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1204:	e8 89       	ldd	r30, Y+16	; 0x10
    1206:	f9 89       	ldd	r31, Y+17	; 0x11
    1208:	80 81       	ld	r24, Z
    120a:	83 70       	andi	r24, 0x03	; 3
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1210:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	08 95       	ret

00001224 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    122a:	88 8d       	ldd	r24, Y+24	; 0x18
    122c:	88 23       	and	r24, r24
    122e:	c9 f0       	breq	.+50     	; 0x1262 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1230:	ea 89       	ldd	r30, Y+18	; 0x12
    1232:	fb 89       	ldd	r31, Y+19	; 0x13
    1234:	80 81       	ld	r24, Z
    1236:	85 fd       	sbrc	r24, 5
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <_ZN14HardwareSerial5flushEv+0x20>
    123a:	a8 89       	ldd	r26, Y+16	; 0x10
    123c:	b9 89       	ldd	r27, Y+17	; 0x11
    123e:	8c 91       	ld	r24, X
    1240:	86 fd       	sbrc	r24, 6
    1242:	0f c0       	rjmp	.+30     	; 0x1262 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	07 fc       	sbrc	r0, 7
    1248:	f5 cf       	rjmp	.-22     	; 0x1234 <_ZN14HardwareSerial5flushEv+0x10>
    124a:	80 81       	ld	r24, Z
    124c:	85 ff       	sbrs	r24, 5
    124e:	f2 cf       	rjmp	.-28     	; 0x1234 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1250:	a8 89       	ldd	r26, Y+16	; 0x10
    1252:	b9 89       	ldd	r27, Y+17	; 0x11
    1254:	8c 91       	ld	r24, X
    1256:	85 ff       	sbrs	r24, 5
    1258:	ed cf       	rjmp	.-38     	; 0x1234 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1260:	e7 cf       	rjmp	.-50     	; 0x1230 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	6a 01       	movw	r12, r20
    127a:	7b 01       	movw	r14, r22
    127c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    127e:	e8 89       	ldd	r30, Y+16	; 0x10
    1280:	f9 89       	ldd	r31, Y+17	; 0x11
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1286:	41 15       	cp	r20, r1
    1288:	51 4e       	sbci	r21, 0xE1	; 225
    128a:	61 05       	cpc	r22, r1
    128c:	71 05       	cpc	r23, r1
    128e:	b1 f0       	breq	.+44     	; 0x12bc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	79 e0       	ldi	r23, 0x09	; 9
    1294:	8d e3       	ldi	r24, 0x3D	; 61
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a7 01       	movw	r20, r14
    129a:	96 01       	movw	r18, r12
    129c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__udivmodsi4>
    12a0:	da 01       	movw	r26, r20
    12a2:	c9 01       	movw	r24, r18
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	a1 09       	sbc	r26, r1
    12a8:	b1 09       	sbc	r27, r1
    12aa:	b6 95       	lsr	r27
    12ac:	a7 95       	ror	r26
    12ae:	97 95       	ror	r25
    12b0:	87 95       	ror	r24
    12b2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12b4:	21 15       	cp	r18, r1
    12b6:	80 e1       	ldi	r24, 0x10	; 16
    12b8:	38 07       	cpc	r19, r24
    12ba:	a8 f0       	brcs	.+42     	; 0x12e6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    12bc:	e8 89       	ldd	r30, Y+16	; 0x10
    12be:	f9 89       	ldd	r31, Y+17	; 0x11
    12c0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    12c2:	60 e8       	ldi	r22, 0x80	; 128
    12c4:	74 e8       	ldi	r23, 0x84	; 132
    12c6:	8e e1       	ldi	r24, 0x1E	; 30
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a7 01       	movw	r20, r14
    12cc:	96 01       	movw	r18, r12
    12ce:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__udivmodsi4>
    12d2:	da 01       	movw	r26, r20
    12d4:	c9 01       	movw	r24, r18
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	a1 09       	sbc	r26, r1
    12da:	b1 09       	sbc	r27, r1
    12dc:	b6 95       	lsr	r27
    12de:	a7 95       	ror	r26
    12e0:	97 95       	ror	r25
    12e2:	87 95       	ror	r24
    12e4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    12e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    12e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    12ea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    12ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    12ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    12f0:	20 83       	st	Z, r18

  _written = false;
    12f2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    12f4:	ec 89       	ldd	r30, Y+20	; 0x14
    12f6:	fd 89       	ldd	r31, Y+21	; 0x15
    12f8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    12fa:	ea 89       	ldd	r30, Y+18	; 0x12
    12fc:	fb 89       	ldd	r31, Y+19	; 0x13
    12fe:	80 81       	ld	r24, Z
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1304:	ea 89       	ldd	r30, Y+18	; 0x12
    1306:	fb 89       	ldd	r31, Y+19	; 0x13
    1308:	80 81       	ld	r24, Z
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    130e:	ea 89       	ldd	r30, Y+18	; 0x12
    1310:	fb 89       	ldd	r31, Y+19	; 0x13
    1312:	80 81       	ld	r24, Z
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1318:	ea 89       	ldd	r30, Y+18	; 0x12
    131a:	fb 89       	ldd	r31, Y+19	; 0x13
    131c:	80 81       	ld	r24, Z
    131e:	8f 7d       	andi	r24, 0xDF	; 223
    1320:	80 83       	st	Z, r24
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	08 95       	ret

00001332 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret

00001338 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1338:	08 95       	ret

0000133a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	2f 93       	push	r18
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    134e:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <Serial+0x10>
    1352:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <Serial+0x11>
    1356:	80 81       	ld	r24, Z
    1358:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <Serial+0x16>
    135c:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <Serial+0x17>
    1360:	82 fd       	sbrc	r24, 2
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1364:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1366:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <Serial+0x19>
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    136e:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <Serial+0x1a>
    1372:	82 17       	cp	r24, r18
    1374:	51 f0       	breq	.+20     	; 0x138a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1376:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <Serial+0x19>
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ec 5c       	subi	r30, 0xCC	; 204
    137e:	fc 4f       	sbci	r31, 0xFC	; 252
    1380:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1382:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <Serial+0x19>
    1386:	01 c0       	rjmp	.+2      	; 0x138a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1388:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    13c0:	84 e3       	ldi	r24, 0x34	; 52
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13ea:	84 e3       	ldi	r24, 0x34	; 52
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN14HardwareSerial9availableEv>
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	89 2b       	or	r24, r25
    13f6:	09 f4       	brne	.+2      	; 0x13fa <_Z17Serial0_availablev+0x10>
    13f8:	20 e0       	ldi	r18, 0x00	; 0
}
    13fa:	82 2f       	mov	r24, r18
    13fc:	08 95       	ret

000013fe <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f3 e0       	ldi	r31, 0x03	; 3
    1402:	13 82       	std	Z+3, r1	; 0x03
    1404:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1406:	88 ee       	ldi	r24, 0xE8	; 232
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	84 83       	std	Z+4, r24	; 0x04
    1410:	95 83       	std	Z+5, r25	; 0x05
    1412:	a6 83       	std	Z+6, r26	; 0x06
    1414:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1416:	84 e7       	ldi	r24, 0x74	; 116
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	85 ec       	ldi	r24, 0xC5	; 197
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	95 87       	std	Z+13, r25	; 0x0d
    1424:	84 87       	std	Z+12, r24	; 0x0c
    1426:	84 ec       	ldi	r24, 0xC4	; 196
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	97 87       	std	Z+15, r25	; 0x0f
    142c:	86 87       	std	Z+14, r24	; 0x0e
    142e:	80 ec       	ldi	r24, 0xC0	; 192
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 8b       	std	Z+17, r25	; 0x11
    1434:	80 8b       	std	Z+16, r24	; 0x10
    1436:	81 ec       	ldi	r24, 0xC1	; 193
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	93 8b       	std	Z+19, r25	; 0x13
    143c:	82 8b       	std	Z+18, r24	; 0x12
    143e:	82 ec       	ldi	r24, 0xC2	; 194
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	95 8b       	std	Z+21, r25	; 0x15
    1444:	84 8b       	std	Z+20, r24	; 0x14
    1446:	86 ec       	ldi	r24, 0xC6	; 198
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	97 8b       	std	Z+23, r25	; 0x17
    144c:	86 8b       	std	Z+22, r24	; 0x16
    144e:	11 8e       	std	Z+25, r1	; 0x19
    1450:	12 8e       	std	Z+26, r1	; 0x1a
    1452:	13 8e       	std	Z+27, r1	; 0x1b
    1454:	14 8e       	std	Z+28, r1	; 0x1c
    1456:	08 95       	ret

00001458 <initVariant>:
    1458:	08 95       	ret

0000145a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    145a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <init>

	initVariant();
    145e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1462:	0e 94 d6 05 	call	0xbac	; 0xbac <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1466:	c5 e9       	ldi	r28, 0x95	; 149
    1468:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    146a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <loop>
		if (serialEventRun) serialEventRun();
    146e:	20 97       	sbiw	r28, 0x00	; 0
    1470:	e1 f3       	breq	.-8      	; 0x146a <main+0x10>
    1472:	0e 94 95 08 	call	0x112a	; 0x112a <_Z14serialEventRunv>
    1476:	f9 cf       	rjmp	.-14     	; 0x146a <main+0x10>

00001478 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	6c 01       	movw	r12, r24
    148a:	7a 01       	movw	r14, r20
    148c:	8b 01       	movw	r16, r22
    148e:	c0 e0       	ldi	r28, 0x00	; 0
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	ce 15       	cp	r28, r14
    1494:	df 05       	cpc	r29, r15
    1496:	81 f0       	breq	.+32     	; 0x14b8 <_ZN5Print5writeEPKhj+0x40>
    1498:	d8 01       	movw	r26, r16
    149a:	6d 91       	ld	r22, X+
    149c:	8d 01       	movw	r16, r26
    149e:	d6 01       	movw	r26, r12
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	01 90       	ld	r0, Z+
    14a6:	f0 81       	ld	r31, Z
    14a8:	e0 2d       	mov	r30, r0
    14aa:	c6 01       	movw	r24, r12
    14ac:	09 95       	icall
    14ae:	89 2b       	or	r24, r25
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <_ZN5Print5writeEPKhj+0x3e>
    14b2:	21 96       	adiw	r28, 0x01	; 1
    14b4:	ee cf       	rjmp	.-36     	; 0x1492 <_ZN5Print5writeEPKhj+0x1a>
    14b6:	7e 01       	movw	r14, r28
    14b8:	c7 01       	movw	r24, r14
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	08 95       	ret

000014cc <_ZN5Print5writeEPKc>:
    14cc:	61 15       	cp	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	79 f0       	breq	.+30     	; 0x14f0 <_ZN5Print5writeEPKc+0x24>
    14d2:	fb 01       	movw	r30, r22
    14d4:	01 90       	ld	r0, Z+
    14d6:	00 20       	and	r0, r0
    14d8:	e9 f7       	brne	.-6      	; 0x14d4 <_ZN5Print5writeEPKc+0x8>
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	af 01       	movw	r20, r30
    14de:	46 1b       	sub	r20, r22
    14e0:	57 0b       	sbc	r21, r23
    14e2:	dc 01       	movw	r26, r24
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	02 80       	ldd	r0, Z+2	; 0x02
    14ea:	f3 81       	ldd	r31, Z+3	; 0x03
    14ec:	e0 2d       	mov	r30, r0
    14ee:	09 94       	ijmp
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	08 95       	ret

000014f6 <_ZN5Print5printERK6String>:
    14f6:	db 01       	movw	r26, r22
    14f8:	14 96       	adiw	r26, 0x04	; 4
    14fa:	4d 91       	ld	r20, X+
    14fc:	5c 91       	ld	r21, X
    14fe:	15 97       	sbiw	r26, 0x05	; 5
    1500:	6d 91       	ld	r22, X+
    1502:	7c 91       	ld	r23, X
    1504:	dc 01       	movw	r26, r24
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	02 80       	ldd	r0, Z+2	; 0x02
    150c:	f3 81       	ldd	r31, Z+3	; 0x03
    150e:	e0 2d       	mov	r30, r0
    1510:	09 94       	ijmp

00001512 <_ZN5Print7printlnEv>:
    1512:	62 e8       	ldi	r22, 0x82	; 130
    1514:	72 e0       	ldi	r23, 0x02	; 2
    1516:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_ZN5Print5writeEPKc>

0000151a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1524:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN5Print5writeEPKc>
    1528:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    152a:	ce 01       	movw	r24, r28
    152c:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Print7printlnEv>
  return n;
}
    1530:	80 0f       	add	r24, r16
    1532:	91 1f       	adc	r25, r17
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    153e:	08 95       	ret

00001540 <attachInterrupt>:
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	e8 f4       	brcc	.+58     	; 0x157e <attachInterrupt+0x3e>
    1544:	e8 2f       	mov	r30, r24
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ea 5f       	subi	r30, 0xFA	; 250
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	71 83       	std	Z+1, r23	; 0x01
    1552:	60 83       	st	Z, r22
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	41 f0       	breq	.+16     	; 0x1568 <attachInterrupt+0x28>
    1558:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    155c:	8c 7f       	andi	r24, 0xFC	; 252
    155e:	48 2b       	or	r20, r24
    1560:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1564:	e8 9a       	sbi	0x1d, 0	; 29
    1566:	08 95       	ret
    1568:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    156c:	83 7f       	andi	r24, 0xF3	; 243
    156e:	44 0f       	add	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	44 0f       	add	r20, r20
    1574:	55 1f       	adc	r21, r21
    1576:	48 2b       	or	r20, r24
    1578:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    157c:	e9 9a       	sbi	0x1d, 1	; 29
    157e:	08 95       	ret

00001580 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
    158a:	2f 93       	push	r18
    158c:	3f 93       	push	r19
    158e:	4f 93       	push	r20
    1590:	5f 93       	push	r21
    1592:	6f 93       	push	r22
    1594:	7f 93       	push	r23
    1596:	8f 93       	push	r24
    1598:	9f 93       	push	r25
    159a:	af 93       	push	r26
    159c:	bf 93       	push	r27
    159e:	ef 93       	push	r30
    15a0:	ff 93       	push	r31
    15a2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    15a6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    15aa:	09 95       	icall
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    15f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    15f8:	09 95       	icall
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	11 24       	eor	r1, r1
    1626:	2f 93       	push	r18
    1628:	3f 93       	push	r19
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1632:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <timer0_millis>
    1636:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <timer0_millis+0x1>
    163a:	a0 91 d4 03 	lds	r26, 0x03D4	; 0x8003d4 <timer0_millis+0x2>
    163e:	b0 91 d5 03 	lds	r27, 0x03D5	; 0x8003d5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1642:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1646:	23 e0       	ldi	r18, 0x03	; 3
    1648:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    164a:	2d 37       	cpi	r18, 0x7D	; 125
    164c:	20 f4       	brcc	.+8      	; 0x1656 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	a1 1d       	adc	r26, r1
    1652:	b1 1d       	adc	r27, r1
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1656:	26 e8       	ldi	r18, 0x86	; 134
    1658:	23 0f       	add	r18, r19
		m += 1;
    165a:	02 96       	adiw	r24, 0x02	; 2
    165c:	a1 1d       	adc	r26, r1
    165e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1660:	20 93 d1 03 	sts	0x03D1, r18	; 0x8003d1 <timer0_fract>
	timer0_millis = m;
    1664:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <timer0_millis>
    1668:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <timer0_millis+0x1>
    166c:	a0 93 d4 03 	sts	0x03D4, r26	; 0x8003d4 <timer0_millis+0x2>
    1670:	b0 93 d5 03 	sts	0x03D5, r27	; 0x8003d5 <timer0_millis+0x3>
	timer0_overflow_count++;
    1674:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <timer0_overflow_count>
    1678:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <timer0_overflow_count+0x1>
    167c:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <timer0_overflow_count+0x2>
    1680:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <timer0_overflow_count+0x3>
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	a1 1d       	adc	r26, r1
    1688:	b1 1d       	adc	r27, r1
    168a:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <timer0_overflow_count>
    168e:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <timer0_overflow_count+0x1>
    1692:	a0 93 d8 03 	sts	0x03D8, r26	; 0x8003d8 <timer0_overflow_count+0x2>
    1696:	b0 93 d9 03 	sts	0x03D9, r27	; 0x8003d9 <timer0_overflow_count+0x3>
}
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    16b0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    16b2:	f8 94       	cli
	m = timer0_millis;
    16b4:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <timer0_millis>
    16b8:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <timer0_millis+0x1>
    16bc:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <timer0_millis+0x2>
    16c0:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <timer0_millis+0x3>
	SREG = oldSREG;
    16c4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    16c6:	08 95       	ret

000016c8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    16c8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    16ca:	f8 94       	cli
	m = timer0_overflow_count;
    16cc:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <timer0_overflow_count>
    16d0:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <timer0_overflow_count+0x1>
    16d4:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <timer0_overflow_count+0x2>
    16d8:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    16dc:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    16de:	a8 9b       	sbis	0x15, 0	; 21
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <micros+0x24>
    16e2:	2f 3f       	cpi	r18, 0xFF	; 255
    16e4:	19 f0       	breq	.+6      	; 0x16ec <micros+0x24>
		m++;
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	a1 1d       	adc	r26, r1
    16ea:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    16ec:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    16ee:	ba 2f       	mov	r27, r26
    16f0:	a9 2f       	mov	r26, r25
    16f2:	98 2f       	mov	r25, r24
    16f4:	88 27       	eor	r24, r24
    16f6:	82 0f       	add	r24, r18
    16f8:	91 1d       	adc	r25, r1
    16fa:	a1 1d       	adc	r26, r1
    16fc:	b1 1d       	adc	r27, r1
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	42 e0       	ldi	r20, 0x02	; 2
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	4a 95       	dec	r20
    170e:	d1 f7       	brne	.-12     	; 0x1704 <micros+0x3c>
}
    1710:	08 95       	ret

00001712 <delay>:

void delay(unsigned long ms)
{
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	6b 01       	movw	r12, r22
    1724:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1726:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <micros>
    172a:	4b 01       	movw	r8, r22
    172c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    172e:	c1 14       	cp	r12, r1
    1730:	d1 04       	cpc	r13, r1
    1732:	e1 04       	cpc	r14, r1
    1734:	f1 04       	cpc	r15, r1
    1736:	01 f1       	breq	.+64     	; 0x1778 <delay+0x66>
		yield();
    1738:	0e 94 00 15 	call	0x2a00	; 0x2a00 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    173c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <micros>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	88 19       	sub	r24, r8
    1746:	99 09       	sbc	r25, r9
    1748:	aa 09       	sbc	r26, r10
    174a:	bb 09       	sbc	r27, r11
    174c:	88 3e       	cpi	r24, 0xE8	; 232
    174e:	93 40       	sbci	r25, 0x03	; 3
    1750:	a1 05       	cpc	r26, r1
    1752:	b1 05       	cpc	r27, r1
    1754:	60 f3       	brcs	.-40     	; 0x172e <delay+0x1c>
			ms--;
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	c2 1a       	sub	r12, r18
    175a:	d1 08       	sbc	r13, r1
    175c:	e1 08       	sbc	r14, r1
    175e:	f1 08       	sbc	r15, r1
			start += 1000;
    1760:	88 ee       	ldi	r24, 0xE8	; 232
    1762:	88 0e       	add	r8, r24
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	98 1e       	adc	r9, r24
    1768:	a1 1c       	adc	r10, r1
    176a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    176c:	c1 14       	cp	r12, r1
    176e:	d1 04       	cpc	r13, r1
    1770:	e1 04       	cpc	r14, r1
    1772:	f1 04       	cpc	r15, r1
    1774:	19 f7       	brne	.-58     	; 0x173c <delay+0x2a>
    1776:	db cf       	rjmp	.-74     	; 0x172e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	08 95       	ret

0000178a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	38 f0       	brcs	.+14     	; 0x179e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1798:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <delayMicroseconds+0x10>
    179e:	08 95       	ret

000017a0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17a0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17a2:	84 b5       	in	r24, 0x24	; 36
    17a4:	82 60       	ori	r24, 0x02	; 2
    17a6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17a8:	84 b5       	in	r24, 0x24	; 36
    17aa:	81 60       	ori	r24, 0x01	; 1
    17ac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17ae:	85 b5       	in	r24, 0x25	; 37
    17b0:	82 60       	ori	r24, 0x02	; 2
    17b2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17b4:	85 b5       	in	r24, 0x25	; 37
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17ba:	ee e6       	ldi	r30, 0x6E	; 110
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17c4:	e1 e8       	ldi	r30, 0x81	; 129
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17ca:	80 81       	ld	r24, Z
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    17d0:	80 81       	ld	r24, Z
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    17d6:	e0 e8       	ldi	r30, 0x80	; 128
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    17e0:	e1 eb       	ldi	r30, 0xB1	; 177
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	84 60       	ori	r24, 0x04	; 4
    17e8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    17ea:	e0 eb       	ldi	r30, 0xB0	; 176
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	81 60       	ori	r24, 0x01	; 1
    17f2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    17f4:	ea e7       	ldi	r30, 0x7A	; 122
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	84 60       	ori	r24, 0x04	; 4
    17fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    17fe:	80 81       	ld	r24, Z
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1804:	80 81       	ld	r24, Z
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    180a:	80 81       	ld	r24, Z
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1810:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1814:	08 95       	ret

00001816 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    1816:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <analog_reference>
    181a:	08 95       	ret

0000181c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    181c:	8e 30       	cpi	r24, 0x0E	; 14
    181e:	08 f0       	brcs	.+2      	; 0x1822 <analogRead+0x6>
    1820:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1822:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    1826:	90 e4       	ldi	r25, 0x40	; 64
    1828:	29 9f       	mul	r18, r25
    182a:	90 01       	movw	r18, r0
    182c:	11 24       	eor	r1, r1
    182e:	87 70       	andi	r24, 0x07	; 7
    1830:	82 2b       	or	r24, r18
    1832:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1836:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1840:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1844:	86 fd       	sbrc	r24, 6
    1846:	fc cf       	rjmp	.-8      	; 0x1840 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1848:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    184c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1850:	90 e0       	ldi	r25, 0x00	; 0
}
    1852:	92 2b       	or	r25, r18
    1854:	08 95       	ret

00001856 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	81 f0       	breq	.+32     	; 0x187a <turnOffPWM+0x24>
    185a:	28 f4       	brcc	.+10     	; 0x1866 <turnOffPWM+0x10>
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	99 f0       	breq	.+38     	; 0x1886 <turnOffPWM+0x30>
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	a1 f0       	breq	.+40     	; 0x188c <turnOffPWM+0x36>
    1864:	08 95       	ret
    1866:	87 30       	cpi	r24, 0x07	; 7
    1868:	a9 f0       	breq	.+42     	; 0x1894 <turnOffPWM+0x3e>
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	b9 f0       	breq	.+46     	; 0x189c <turnOffPWM+0x46>
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	d1 f4       	brne	.+52     	; 0x18a6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1872:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1876:	8f 7d       	andi	r24, 0xDF	; 223
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    187a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    187e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1880:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1884:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1886:	84 b5       	in	r24, 0x24	; 36
    1888:	8f 77       	andi	r24, 0x7F	; 127
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    188c:	84 b5       	in	r24, 0x24	; 36
    188e:	8f 7d       	andi	r24, 0xDF	; 223
    1890:	84 bd       	out	0x24, r24	; 36
    1892:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1894:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1898:	8f 77       	andi	r24, 0x7F	; 127
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    189c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    18a0:	8f 7d       	andi	r24, 0xDF	; 223
    18a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    18a6:	08 95       	ret

000018a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	ea 58       	subi	r30, 0x8A	; 138
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    18b6:	fc 01       	movw	r30, r24
    18b8:	e6 57       	subi	r30, 0x76	; 118
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    18be:	88 23       	and	r24, r24
    18c0:	61 f1       	breq	.+88     	; 0x191a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	fc 01       	movw	r30, r24
    18ca:	e8 55       	subi	r30, 0x58	; 88
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	c5 91       	lpm	r28, Z+
    18d0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    18d2:	fc 01       	movw	r30, r24
    18d4:	e2 56       	subi	r30, 0x62	; 98
    18d6:	fe 4f       	sbci	r31, 0xFE	; 254
    18d8:	a5 91       	lpm	r26, Z+
    18da:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    18dc:	61 11       	cpse	r22, r1
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    18e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18e2:	f8 94       	cli
		*reg &= ~bit;
    18e4:	88 81       	ld	r24, Y
    18e6:	20 95       	com	r18
    18e8:	82 23       	and	r24, r18
    18ea:	88 83       	st	Y, r24
		*out &= ~bit;
    18ec:	ec 91       	ld	r30, X
    18ee:	2e 23       	and	r18, r30
    18f0:	0b c0       	rjmp	.+22     	; 0x1908 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18f2:	62 30       	cpi	r22, 0x02	; 2
    18f4:	61 f4       	brne	.+24     	; 0x190e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    18f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18f8:	f8 94       	cli
		*reg &= ~bit;
    18fa:	88 81       	ld	r24, Y
    18fc:	32 2f       	mov	r19, r18
    18fe:	30 95       	com	r19
    1900:	83 23       	and	r24, r19
    1902:	88 83       	st	Y, r24
		*out |= bit;
    1904:	ec 91       	ld	r30, X
    1906:	2e 2b       	or	r18, r30
    1908:	2c 93       	st	X, r18
		SREG = oldSREG;
    190a:	9f bf       	out	0x3f, r25	; 63
    190c:	06 c0       	rjmp	.+12     	; 0x191a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    190e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1910:	f8 94       	cli
		*reg |= bit;
    1912:	e8 81       	ld	r30, Y
    1914:	2e 2b       	or	r18, r30
    1916:	28 83       	st	Y, r18
		SREG = oldSREG;
    1918:	8f bf       	out	0x3f, r24	; 63
	}
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	f9 01       	movw	r30, r18
    192c:	ee 59       	subi	r30, 0x9E	; 158
    192e:	fe 4f       	sbci	r31, 0xFE	; 254
    1930:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1932:	f9 01       	movw	r30, r18
    1934:	ea 58       	subi	r30, 0x8A	; 138
    1936:	fe 4f       	sbci	r31, 0xFE	; 254
    1938:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    193a:	f9 01       	movw	r30, r18
    193c:	e6 57       	subi	r30, 0x76	; 118
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1942:	cc 23       	and	r28, r28
    1944:	c1 f0       	breq	.+48     	; 0x1976 <digitalWrite+0x56>
    1946:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1948:	81 11       	cpse	r24, r1
    194a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <turnOffPWM>

	out = portOutputRegister(port);
    194e:	ec 2f       	mov	r30, r28
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	e2 56       	subi	r30, 0x62	; 98
    1958:	fe 4f       	sbci	r31, 0xFE	; 254
    195a:	a5 91       	lpm	r26, Z+
    195c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    195e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1960:	f8 94       	cli

	if (val == LOW) {
    1962:	11 11       	cpse	r17, r1
    1964:	04 c0       	rjmp	.+8      	; 0x196e <digitalWrite+0x4e>
		*out &= ~bit;
    1966:	8c 91       	ld	r24, X
    1968:	d0 95       	com	r29
    196a:	d8 23       	and	r29, r24
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <digitalWrite+0x52>
	} else {
		*out |= bit;
    196e:	ec 91       	ld	r30, X
    1970:	de 2b       	or	r29, r30
    1972:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1974:	9f bf       	out	0x3f, r25	; 63
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	08 95       	ret

0000197e <_ZNK6String14StringIfHelperEv>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    197e:	08 95       	ret

00001980 <_ZN6StringD1Ev>:
    1980:	fc 01       	movw	r30, r24
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	0c 94 34 18 	jmp	0x3068	; 0x3068 <free>

0000198a <_ZN6String10invalidateEv>:
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	ec 01       	movw	r28, r24
    1990:	88 81       	ld	r24, Y
    1992:	99 81       	ldd	r25, Y+1	; 0x01
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	11 f0       	breq	.+4      	; 0x199c <_ZN6String10invalidateEv+0x12>
    1998:	0e 94 34 18 	call	0x3068	; 0x3068 <free>
    199c:	19 82       	std	Y+1, r1	; 0x01
    199e:	18 82       	st	Y, r1
    19a0:	1d 82       	std	Y+5, r1	; 0x05
    19a2:	1c 82       	std	Y+4, r1	; 0x04
    19a4:	1b 82       	std	Y+3, r1	; 0x03
    19a6:	1a 82       	std	Y+2, r1	; 0x02
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <_ZN6String12changeBufferEj>:
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	ec 01       	movw	r28, r24
    19b8:	8b 01       	movw	r16, r22
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	88 81       	ld	r24, Y
    19c0:	99 81       	ldd	r25, Y+1	; 0x01
    19c2:	0e 94 bd 18 	call	0x317a	; 0x317a <realloc>
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <_ZN6String12changeBufferEj+0x28>
    19ca:	99 83       	std	Y+1, r25	; 0x01
    19cc:	88 83       	st	Y, r24
    19ce:	1b 83       	std	Y+3, r17	; 0x03
    19d0:	0a 83       	std	Y+2, r16	; 0x02
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <_ZN6String12changeBufferEj+0x2a>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <_ZN6String7reserveEj>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
    19e8:	88 81       	ld	r24, Y
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	89 2b       	or	r24, r25
    19ee:	29 f0       	breq	.+10     	; 0x19fa <_ZN6String7reserveEj+0x18>
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	86 17       	cp	r24, r22
    19f6:	97 07       	cpc	r25, r23
    19f8:	60 f4       	brcc	.+24     	; 0x1a12 <_ZN6String7reserveEj+0x30>
    19fa:	ce 01       	movw	r24, r28
    19fc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN6String12changeBufferEj>
    1a00:	88 23       	and	r24, r24
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <_ZN6String7reserveEj+0x32>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	89 2b       	or	r24, r25
    1a0a:	19 f4       	brne	.+6      	; 0x1a12 <_ZN6String7reserveEj+0x30>
    1a0c:	e8 81       	ld	r30, Y
    1a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a10:	10 82       	st	Z, r1
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <_ZN6String4copyEPKcj>:
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	7b 01       	movw	r14, r22
    1a2a:	8a 01       	movw	r16, r20
    1a2c:	ba 01       	movw	r22, r20
    1a2e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_ZN6String7reserveEj>
    1a32:	81 11       	cpse	r24, r1
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <_ZN6String4copyEPKcj+0x24>
    1a36:	ce 01       	movw	r24, r28
    1a38:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN6String10invalidateEv>
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <_ZN6String4copyEPKcj+0x32>
    1a3e:	1d 83       	std	Y+5, r17	; 0x05
    1a40:	0c 83       	std	Y+4, r16	; 0x04
    1a42:	b7 01       	movw	r22, r14
    1a44:	88 81       	ld	r24, Y
    1a46:	99 81       	ldd	r25, Y+1	; 0x01
    1a48:	0e 94 8c 19 	call	0x3318	; 0x3318 <strcpy>
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	08 95       	ret

00001a5c <_ZN6StringC1EPKc>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	11 82       	std	Z+1, r1	; 0x01
    1a60:	10 82       	st	Z, r1
    1a62:	13 82       	std	Z+3, r1	; 0x03
    1a64:	12 82       	std	Z+2, r1	; 0x02
    1a66:	15 82       	std	Z+5, r1	; 0x05
    1a68:	14 82       	std	Z+4, r1	; 0x04
    1a6a:	61 15       	cp	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	51 f0       	breq	.+20     	; 0x1a84 <_ZN6StringC1EPKc+0x28>
    1a70:	fb 01       	movw	r30, r22
    1a72:	01 90       	ld	r0, Z+
    1a74:	00 20       	and	r0, r0
    1a76:	e9 f7       	brne	.-6      	; 0x1a72 <_ZN6StringC1EPKc+0x16>
    1a78:	31 97       	sbiw	r30, 0x01	; 1
    1a7a:	af 01       	movw	r20, r30
    1a7c:	46 1b       	sub	r20, r22
    1a7e:	57 0b       	sbc	r21, r23
    1a80:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <_ZN6String4copyEPKcj>
    1a84:	08 95       	ret

00001a86 <_ZN6String4moveERS_>:
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	8c 01       	movw	r16, r24
    1a90:	eb 01       	movw	r28, r22
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <_ZN6String4moveERS_+0x4a>
    1a9c:	68 81       	ld	r22, Y
    1a9e:	79 81       	ldd	r23, Y+1	; 0x01
    1aa0:	61 15       	cp	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	99 f0       	breq	.+38     	; 0x1acc <_ZN6String4moveERS_+0x46>
    1aa6:	2f eb       	ldi	r18, 0xBF	; 191
    1aa8:	3c e0       	ldi	r19, 0x0C	; 12
    1aaa:	23 2b       	or	r18, r19
    1aac:	79 f0       	breq	.+30     	; 0x1acc <_ZN6String4moveERS_+0x46>
    1aae:	42 81       	ldd	r20, Z+2	; 0x02
    1ab0:	53 81       	ldd	r21, Z+3	; 0x03
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	42 17       	cp	r20, r18
    1ab8:	53 07       	cpc	r21, r19
    1aba:	40 f0       	brcs	.+16     	; 0x1acc <_ZN6String4moveERS_+0x46>
    1abc:	0e 94 8c 19 	call	0x3318	; 0x3318 <strcpy>
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	13 c0       	rjmp	.+38     	; 0x1af2 <_ZN6String4moveERS_+0x6c>
    1acc:	0e 94 34 18 	call	0x3068	; 0x3068 <free>
    1ad0:	88 81       	ld	r24, Y
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	93 83       	std	Z+3, r25	; 0x03
    1ae0:	82 83       	std	Z+2, r24	; 0x02
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	95 83       	std	Z+5, r25	; 0x05
    1ae8:	84 83       	std	Z+4, r24	; 0x04
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	18 82       	st	Y, r1
    1aee:	1b 82       	std	Y+3, r1	; 0x03
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	1d 82       	std	Y+5, r1	; 0x05
    1af4:	1c 82       	std	Y+4, r1	; 0x04
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <_ZN6StringaSERKS_>:
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
    1b06:	fb 01       	movw	r30, r22
    1b08:	86 17       	cp	r24, r22
    1b0a:	97 07       	cpc	r25, r23
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <_ZN6StringaSERKS_+0x26>
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	61 15       	cp	r22, r1
    1b14:	71 05       	cpc	r23, r1
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <_ZN6StringaSERKS_+0x22>
    1b18:	44 81       	ldd	r20, Z+4	; 0x04
    1b1a:	55 81       	ldd	r21, Z+5	; 0x05
    1b1c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN6String4copyEPKcj>
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <_ZN6StringaSERKS_+0x26>
    1b22:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN6String10invalidateEv>
    1b26:	ce 01       	movw	r24, r28
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <_ZN6StringC1ERKS_>:
    1b2e:	fc 01       	movw	r30, r24
    1b30:	11 82       	std	Z+1, r1	; 0x01
    1b32:	10 82       	st	Z, r1
    1b34:	13 82       	std	Z+3, r1	; 0x03
    1b36:	12 82       	std	Z+2, r1	; 0x02
    1b38:	15 82       	std	Z+5, r1	; 0x05
    1b3a:	14 82       	std	Z+4, r1	; 0x04
    1b3c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <_ZN6StringaSERKS_>

00001b40 <_ZN6StringaSEOS_>:
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	86 17       	cp	r24, r22
    1b48:	97 07       	cpc	r25, r23
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <_ZN6StringaSEOS_+0x10>
    1b4c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <_ZN6String4moveERS_>
    1b50:	ce 01       	movw	r24, r28
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <_ZN6StringaSEPKc>:
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	ec 01       	movw	r28, r24
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	59 f0       	breq	.+22     	; 0x1b7a <_ZN6StringaSEPKc+0x22>
    1b64:	fb 01       	movw	r30, r22
    1b66:	01 90       	ld	r0, Z+
    1b68:	00 20       	and	r0, r0
    1b6a:	e9 f7       	brne	.-6      	; 0x1b66 <_ZN6StringaSEPKc+0xe>
    1b6c:	31 97       	sbiw	r30, 0x01	; 1
    1b6e:	af 01       	movw	r20, r30
    1b70:	46 1b       	sub	r20, r22
    1b72:	57 0b       	sbc	r21, r23
    1b74:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN6String4copyEPKcj>
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <_ZN6StringaSEPKc+0x26>
    1b7a:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN6String10invalidateEv>
    1b7e:	ce 01       	movw	r24, r28
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <_ZN6StringC1Eih>:
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	62 97       	sbiw	r28, 0x12	; 18
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	8c 01       	movw	r16, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	11 82       	std	Z+1, r1	; 0x01
    1ba6:	10 82       	st	Z, r1
    1ba8:	13 82       	std	Z+3, r1	; 0x03
    1baa:	12 82       	std	Z+2, r1	; 0x02
    1bac:	15 82       	std	Z+5, r1	; 0x05
    1bae:	14 82       	std	Z+4, r1	; 0x04
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	be 01       	movw	r22, r28
    1bb4:	6f 5f       	subi	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	0e 94 93 19 	call	0x3326	; 0x3326 <itoa>
    1bbc:	be 01       	movw	r22, r28
    1bbe:	6f 5f       	subi	r22, 0xFF	; 255
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6StringaSEPKc>
    1bc8:	62 96       	adiw	r28, 0x12	; 18
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <_ZN6StringC1Edh>:
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	a1 97       	sbiw	r28, 0x21	; 33
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	7c 01       	movw	r14, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	ba 01       	movw	r22, r20
    1c00:	f7 01       	movw	r30, r14
    1c02:	11 82       	std	Z+1, r1	; 0x01
    1c04:	10 82       	st	Z, r1
    1c06:	13 82       	std	Z+3, r1	; 0x03
    1c08:	12 82       	std	Z+2, r1	; 0x02
    1c0a:	15 82       	std	Z+5, r1	; 0x05
    1c0c:	14 82       	std	Z+4, r1	; 0x04
    1c0e:	42 e0       	ldi	r20, 0x02	; 2
    1c10:	42 0f       	add	r20, r18
    1c12:	8e 01       	movw	r16, r28
    1c14:	0f 5f       	subi	r16, 0xFF	; 255
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <dtostrf>
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	c7 01       	movw	r24, r14
    1c20:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6StringaSEPKc>
    1c24:	a1 96       	adiw	r28, 0x21	; 33
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	08 95       	ret

00001c3e <_ZN6String6concatEPKcj>:
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	61 15       	cp	r22, r1
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <_ZN6String6concatEPKcj+0x16>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	1c c0       	rjmp	.+56     	; 0x1c8c <_ZN6String6concatEPKcj+0x4e>
    1c54:	41 15       	cp	r20, r1
    1c56:	51 05       	cpc	r21, r1
    1c58:	c1 f0       	breq	.+48     	; 0x1c8a <_ZN6String6concatEPKcj+0x4c>
    1c5a:	7b 01       	movw	r14, r22
    1c5c:	ec 01       	movw	r28, r24
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	8a 01       	movw	r16, r20
    1c64:	08 0f       	add	r16, r24
    1c66:	19 1f       	adc	r17, r25
    1c68:	b8 01       	movw	r22, r16
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_ZN6String7reserveEj>
    1c70:	88 23       	and	r24, r24
    1c72:	71 f3       	breq	.-36     	; 0x1c50 <_ZN6String6concatEPKcj+0x12>
    1c74:	28 81       	ld	r18, Y
    1c76:	39 81       	ldd	r19, Y+1	; 0x01
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	82 0f       	add	r24, r18
    1c80:	93 1f       	adc	r25, r19
    1c82:	0e 94 8c 19 	call	0x3318	; 0x3318 <strcpy>
    1c86:	1d 83       	std	Y+5, r17	; 0x05
    1c88:	0c 83       	std	Y+4, r16	; 0x04
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	08 95       	ret

00001c9a <_ZplRK15StringSumHelperRK6String>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	fb 01       	movw	r30, r22
    1ca2:	44 81       	ldd	r20, Z+4	; 0x04
    1ca4:	55 81       	ldd	r21, Z+5	; 0x05
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN6String6concatEPKcj>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <_ZplRK15StringSumHelperRK6String+0x1e>
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN6String10invalidateEv>
    1cb8:	ce 01       	movw	r24, r28
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <_ZplRK15StringSumHelperPKc>:
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	ec 01       	movw	r28, r24
    1cc6:	61 15       	cp	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <_ZplRK15StringSumHelperPKc+0x24>
    1ccc:	fb 01       	movw	r30, r22
    1cce:	01 90       	ld	r0, Z+
    1cd0:	00 20       	and	r0, r0
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <_ZplRK15StringSumHelperPKc+0xe>
    1cd4:	31 97       	sbiw	r30, 0x01	; 1
    1cd6:	af 01       	movw	r20, r30
    1cd8:	46 1b       	sub	r20, r22
    1cda:	57 0b       	sbc	r21, r23
    1cdc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN6String6concatEPKcj>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <_ZplRK15StringSumHelperPKc+0x2a>
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN6String10invalidateEv>
    1cea:	ce 01       	movw	r24, r28
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    1cf2:	bf 92       	push	r11
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	7c 01       	movw	r14, r24
    1d06:	6b 01       	movw	r12, r22
    1d08:	8a 01       	movw	r16, r20
    1d0a:	e9 01       	movw	r28, r18
	if (left > right) {
    1d0c:	24 17       	cp	r18, r20
    1d0e:	35 07       	cpc	r19, r21
    1d10:	20 f4       	brcc	.+8      	; 0x1d1a <_ZNK6String9substringEjj+0x28>
    1d12:	81 2f       	mov	r24, r17
    1d14:	89 01       	movw	r16, r18
    1d16:	c4 2f       	mov	r28, r20
    1d18:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    1d1a:	64 e8       	ldi	r22, 0x84	; 132
    1d1c:	72 e0       	ldi	r23, 0x02	; 2
    1d1e:	c7 01       	movw	r24, r14
    1d20:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN6StringC1EPKc>
	if (left >= len) return out;
    1d24:	d6 01       	movw	r26, r12
    1d26:	14 96       	adiw	r26, 0x04	; 4
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	15 97       	sbiw	r26, 0x05	; 5
    1d2e:	08 17       	cp	r16, r24
    1d30:	19 07       	cpc	r17, r25
    1d32:	c8 f4       	brcc	.+50     	; 0x1d66 <_ZNK6String9substringEjj+0x74>
    1d34:	8c 17       	cp	r24, r28
    1d36:	9d 07       	cpc	r25, r29
    1d38:	08 f4       	brcc	.+2      	; 0x1d3c <_ZNK6String9substringEjj+0x4a>
    1d3a:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1d3c:	d6 01       	movw	r26, r12
    1d3e:	ed 91       	ld	r30, X+
    1d40:	fc 91       	ld	r31, X
    1d42:	11 97       	sbiw	r26, 0x01	; 1
    1d44:	ec 0f       	add	r30, r28
    1d46:	fd 1f       	adc	r31, r29
    1d48:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1d4a:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1d4c:	6d 91       	ld	r22, X+
    1d4e:	7c 91       	ld	r23, X
    1d50:	60 0f       	add	r22, r16
    1d52:	71 1f       	adc	r23, r17
    1d54:	c7 01       	movw	r24, r14
    1d56:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1d5a:	d6 01       	movw	r26, r12
    1d5c:	ed 91       	ld	r30, X+
    1d5e:	fc 91       	ld	r31, X
    1d60:	ec 0f       	add	r30, r28
    1d62:	fd 1f       	adc	r31, r29
    1d64:	b0 82       	st	Z, r11
	return out;
}
    1d66:	c7 01       	movw	r24, r14
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	08 95       	ret

00001d7c <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	13 82       	std	Z+3, r1	; 0x03
    1d80:	12 82       	std	Z+2, r1	; 0x02
    1d82:	85 e9       	ldi	r24, 0x95	; 149
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	12 8e       	std	Z+26, r1	; 0x1a
    1d8c:	14 8a       	std	Z+20, r1	; 0x14
    1d8e:	8f e0       	ldi	r24, 0x0F	; 15
    1d90:	84 83       	std	Z+4, r24	; 0x04
    1d92:	8e e0       	ldi	r24, 0x0E	; 14
    1d94:	85 83       	std	Z+5, r24	; 0x05
    1d96:	8d e0       	ldi	r24, 0x0D	; 13
    1d98:	86 83       	std	Z+6, r24	; 0x06
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	87 83       	std	Z+7, r24	; 0x07
    1d9e:	8b e0       	ldi	r24, 0x0B	; 11
    1da0:	80 87       	std	Z+8, r24	; 0x08
    1da2:	8a e0       	ldi	r24, 0x0A	; 10
    1da4:	81 87       	std	Z+9, r24	; 0x09
    1da6:	89 e0       	ldi	r24, 0x09	; 9
    1da8:	82 87       	std	Z+10, r24	; 0x0a
    1daa:	17 86       	std	Z+15, r1	; 0x0f
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 8b       	std	Z+16, r24	; 0x10
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	81 8b       	std	Z+17, r24	; 0x11
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	82 8b       	std	Z+18, r24	; 0x12
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	83 8b       	std	Z+19, r24	; 0x13
    1dbc:	08 95       	ret

00001dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	96 2f       	mov	r25, r22
    1dc2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc6:	21 f0       	breq	.+8      	; 0x1dd0 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x12>
    1dc8:	cf 01       	movw	r24, r30
    1dca:	4b 96       	adiw	r24, 0x1b	; 27
    1dcc:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1dd0:	64 2f       	mov	r22, r20
    1dd2:	89 2f       	mov	r24, r25
    1dd4:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <digitalWrite>

00001dd8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	d6 2f       	mov	r29, r22
    1de2:	8c 01       	movw	r16, r24
    1de4:	05 5e       	subi	r16, 0xE5	; 229
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	c1 e0       	ldi	r28, 0x01	; 1
    1dea:	62 fb       	bst	r22, 2
    1dec:	44 27       	eor	r20, r20
    1dee:	40 f9       	bld	r20, 0
    1df0:	4c 27       	eor	r20, r28
    1df2:	68 e0       	ldi	r22, 0x08	; 8
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1dfa:	d1 fb       	bst	r29, 1
    1dfc:	44 27       	eor	r20, r20
    1dfe:	40 f9       	bld	r20, 0
    1e00:	4c 27       	eor	r20, r28
    1e02:	67 e0       	ldi	r22, 0x07	; 7
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 2a 13 	call	0x2654	; 0x2654 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    1e0a:	4d 2f       	mov	r20, r29
    1e0c:	41 70       	andi	r20, 0x01	; 1
    1e0e:	4c 27       	eor	r20, r28
    1e10:	66 e0       	ldi	r22, 0x06	; 6
    1e12:	c8 01       	movw	r24, r16
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <_ZN17Adafruit_MCP2301712digitalWriteEhh>

00001e20 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:
    1e20:	fc 01       	movw	r30, r24
    1e22:	96 2f       	mov	r25, r22
    1e24:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e26:	8f 3f       	cpi	r24, 0xFF	; 255
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x12>
    1e2a:	cf 01       	movw	r24, r30
    1e2c:	4b 96       	adiw	r24, 0x1b	; 27
    1e2e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    1e32:	64 2f       	mov	r22, r20
    1e34:	89 2f       	mov	r24, r25
    1e36:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <pinMode>

00001e3a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	ec 01       	movw	r28, r24
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	6e 81       	ldd	r22, Y+6	; 0x06
    1e44:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	6e 81       	ldd	r22, Y+6	; 0x06
    1e54:	ce 01       	movw	r24, r28
    1e56:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	6e 81       	ldd	r22, Y+6	; 0x06
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1e6c:	84 e6       	ldi	r24, 0x64	; 100
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <delayMicroseconds>

00001e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	8c 01       	movw	r16, r24
    1e8e:	fc 01       	movw	r30, r24
    1e90:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e92:	98 01       	movw	r18, r16
    1e94:	29 5f       	subi	r18, 0xF9	; 249
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	79 01       	movw	r14, r18
    1e9a:	c6 2f       	mov	r28, r22
    1e9c:	d0 e0       	ldi	r29, 0x00	; 0
    1e9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x2c>
    1ea2:	73 c0       	rjmp	.+230    	; 0x1f8a <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x112>
    1ea4:	68 01       	movw	r12, r16
    1ea6:	3b e1       	ldi	r19, 0x1B	; 27
    1ea8:	c3 0e       	add	r12, r19
    1eaa:	d1 1c       	adc	r13, r1
    1eac:	c6 01       	movw	r24, r12
    1eae:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN17Adafruit_MCP2301710readGPIOABEv>
    1eb2:	f7 01       	movw	r30, r14
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	a1 e0       	ldi	r26, 0x01	; 1
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	b1 90       	ld	r11, Z+
    1ebe:	ee 24       	eor	r14, r14
    1ec0:	e3 94       	inc	r14
    1ec2:	f1 2c       	mov	r15, r1
    1ec4:	bd 01       	movw	r22, r26
    1ec6:	0b 2c       	mov	r0, r11
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x56>
    1eca:	66 0f       	add	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x52>
    1ed2:	60 95       	com	r22
    1ed4:	70 95       	com	r23
    1ed6:	86 23       	and	r24, r22
    1ed8:	97 23       	and	r25, r23
    1eda:	9e 01       	movw	r18, r28
    1edc:	04 2e       	mov	r0, r20
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x6c>
    1ee0:	35 95       	asr	r19
    1ee2:	27 95       	ror	r18
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x68>
    1ee8:	21 70       	andi	r18, 0x01	; 1
    1eea:	33 27       	eor	r19, r19
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7a>
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	ba 94       	dec	r11
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x76>
    1ef6:	82 2b       	or	r24, r18
    1ef8:	93 2b       	or	r25, r19
    1efa:	4f 5f       	subi	r20, 0xFF	; 255
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	44 30       	cpi	r20, 0x04	; 4
    1f00:	51 05       	cpc	r21, r1
    1f02:	e1 f6       	brne	.-72     	; 0x1ebc <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x44>
    1f04:	e7 01       	movw	r28, r14
    1f06:	f8 01       	movw	r30, r16
    1f08:	06 80       	ldd	r0, Z+6	; 0x06
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x98>
    1f0c:	cc 0f       	add	r28, r28
    1f0e:	dd 1f       	adc	r29, r29
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x94>
    1f14:	c0 95       	com	r28
    1f16:	d0 95       	com	r29
    1f18:	c8 23       	and	r28, r24
    1f1a:	d9 23       	and	r29, r25
    1f1c:	be 01       	movw	r22, r28
    1f1e:	c6 01       	movw	r24, r12
    1f20:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	f8 01       	movw	r30, r16
    1f30:	06 80       	ldd	r0, Z+6	; 0x06
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xbc>
    1f3c:	c8 2b       	or	r28, r24
    1f3e:	d9 2b       	or	r29, r25
    1f40:	be 01       	movw	r22, r28
    1f42:	c6 01       	movw	r24, r12
    1f44:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    1f50:	b7 01       	movw	r22, r14
    1f52:	f8 01       	movw	r30, r16
    1f54:	06 80       	ldd	r0, Z+6	; 0x06
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe4>
    1f58:	66 0f       	add	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe0>
    1f60:	60 95       	com	r22
    1f62:	70 95       	com	r23
    1f64:	6c 23       	and	r22, r28
    1f66:	7d 23       	and	r23, r29
    1f68:	c6 01       	movw	r24, r12
    1f6a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    1f6e:	84 e6       	ldi	r24, 0x64	; 100
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <delayMicroseconds>
    1f8a:	c1 2c       	mov	r12, r1
    1f8c:	d1 2c       	mov	r13, r1
    1f8e:	57 01       	movw	r10, r14
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	f7 01       	movw	r30, r14
    1f94:	61 91       	ld	r22, Z+
    1f96:	7f 01       	movw	r14, r30
    1f98:	c8 01       	movw	r24, r16
    1f9a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    1f9e:	ae 01       	movw	r20, r28
    1fa0:	0c 2c       	mov	r0, r12
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x130>
    1fa4:	55 95       	asr	r21
    1fa6:	47 95       	ror	r20
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x12c>
    1fac:	41 70       	andi	r20, 0x01	; 1
    1fae:	f5 01       	movw	r30, r10
    1fb0:	60 81       	ld	r22, Z
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    1fb8:	ff ef       	ldi	r31, 0xFF	; 255
    1fba:	cf 1a       	sub	r12, r31
    1fbc:	df 0a       	sbc	r13, r31
    1fbe:	24 e0       	ldi	r18, 0x04	; 4
    1fc0:	c2 16       	cp	r12, r18
    1fc2:	d1 04       	cpc	r13, r1
    1fc4:	21 f7       	brne	.-56     	; 0x1f8e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x116>
    1fc6:	c8 01       	movw	r24, r16
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00001fe0 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	ec 01       	movw	r28, r24
    1ff6:	5c 01       	movw	r10, r24
    1ff8:	87 e0       	ldi	r24, 0x07	; 7
    1ffa:	a8 0e       	add	r10, r24
    1ffc:	b1 1c       	adc	r11, r1
    1ffe:	00 e0       	ldi	r16, 0x00	; 0
    2000:	10 e0       	ldi	r17, 0x00	; 0
    2002:	e6 2e       	mov	r14, r22
    2004:	f1 2c       	mov	r15, r1
    2006:	65 01       	movw	r12, r10
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	f5 01       	movw	r30, r10
    200c:	61 91       	ld	r22, Z+
    200e:	5f 01       	movw	r10, r30
    2010:	ce 01       	movw	r24, r28
    2012:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    2016:	a7 01       	movw	r20, r14
    2018:	00 2e       	mov	r0, r16
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    201c:	55 95       	asr	r21
    201e:	47 95       	ror	r20
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x3c>
    2024:	41 70       	andi	r20, 0x01	; 1
    2026:	f6 01       	movw	r30, r12
    2028:	60 81       	ld	r22, Z
    202a:	ce 01       	movw	r24, r28
    202c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	08 30       	cpi	r16, 0x08	; 8
    2036:	11 05       	cpc	r17, r1
    2038:	31 f7       	brne	.-52     	; 0x2006 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x26>
    203a:	ce 01       	movw	r24, r28
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	af 90       	pop	r10
    2050:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>

00002054 <_ZN21Adafruit_RGBLCDShield4sendEhh>:
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	ec 01       	movw	r28, r24
    205c:	16 2f       	mov	r17, r22
    205e:	6c 81       	ldd	r22, Y+4	; 0x04
    2060:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    2064:	6d 81       	ldd	r22, Y+5	; 0x05
    2066:	6f 3f       	cpi	r22, 0xFF	; 255
    2068:	21 f0       	breq	.+8      	; 0x2072 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x1e>
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	ce 01       	movw	r24, r28
    206e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    2072:	8c 89       	ldd	r24, Y+20	; 0x14
    2074:	61 2f       	mov	r22, r17
    2076:	84 ff       	sbrs	r24, 4
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x32>
    207a:	ce 01       	movw	r24, r28
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	84 e0       	ldi	r24, 0x04	; 4
    208a:	75 95       	asr	r23
    208c:	67 95       	ror	r22
    208e:	8a 95       	dec	r24
    2090:	e1 f7       	brne	.-8      	; 0x208a <_ZN21Adafruit_RGBLCDShield4sendEhh+0x36>
    2092:	ce 01       	movw	r24, r28
    2094:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    2098:	61 2f       	mov	r22, r17
    209a:	ce 01       	movw	r24, r28
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>

000020a6 <_ZN21Adafruit_RGBLCDShield7commandEh>:
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <_ZN21Adafruit_RGBLCDShield4sendEhh>

000020ac <_ZN21Adafruit_RGBLCDShield5clearEv>:
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    20b2:	80 ed       	ldi	r24, 0xD0	; 208
    20b4:	97 e0       	ldi	r25, 0x07	; 7
    20b6:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <delayMicroseconds>

000020ba <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	28 97       	sbiw	r28, 0x08	; 8
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	9c 01       	movw	r18, r24
    20d0:	88 e0       	ldi	r24, 0x08	; 8
    20d2:	eb e0       	ldi	r30, 0x0B	; 11
    20d4:	f1 e0       	ldi	r31, 0x01	; 1
    20d6:	de 01       	movw	r26, r28
    20d8:	11 96       	adiw	r26, 0x01	; 1
    20da:	01 90       	ld	r0, Z+
    20dc:	0d 92       	st	X+, r0
    20de:	8a 95       	dec	r24
    20e0:	e1 f7       	brne	.-8      	; 0x20da <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x20>
    20e2:	f9 01       	movw	r30, r18
    20e4:	80 8d       	ldd	r24, Z+24	; 0x18
    20e6:	84 17       	cp	r24, r20
    20e8:	10 f4       	brcc	.+4      	; 0x20ee <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x34>
    20ea:	4f ef       	ldi	r20, 0xFF	; 255
    20ec:	48 0f       	add	r20, r24
    20ee:	fe 01       	movw	r30, r28
    20f0:	31 96       	adiw	r30, 0x01	; 1
    20f2:	e4 0f       	add	r30, r20
    20f4:	f1 1d       	adc	r31, r1
    20f6:	e4 0f       	add	r30, r20
    20f8:	f1 1d       	adc	r31, r1
    20fa:	90 81       	ld	r25, Z
    20fc:	69 0f       	add	r22, r25
    20fe:	60 68       	ori	r22, 0x80	; 128
    2100:	c9 01       	movw	r24, r18
    2102:	28 96       	adiw	r28, 0x08	; 8
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

00002116 <_ZN21Adafruit_RGBLCDShield7displayEv>:
    2116:	fc 01       	movw	r30, r24
    2118:	65 89       	ldd	r22, Z+21	; 0x15
    211a:	26 2f       	mov	r18, r22
    211c:	24 60       	ori	r18, 0x04	; 4
    211e:	25 8b       	std	Z+21, r18	; 0x15
    2120:	6c 60       	ori	r22, 0x0C	; 12
    2122:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

00002126 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
    2126:	8f 92       	push	r8
    2128:	9f 92       	push	r9
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	ec 01       	movw	r28, r24
    2140:	d4 2e       	mov	r13, r20
    2142:	c2 2e       	mov	r12, r18
    2144:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2146:	8f 3f       	cpi	r24, 0xFF	; 255
    2148:	41 f4       	brne	.+16     	; 0x215a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x34>
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	8d 15       	cp	r24, r13
    214e:	08 f0       	brcs	.+2      	; 0x2152 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
    2150:	5e c0       	rjmp	.+188    	; 0x220e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    2152:	8c 89       	ldd	r24, Y+20	; 0x14
    2154:	88 60       	ori	r24, 0x08	; 8
    2156:	8c 8b       	std	Y+20, r24	; 0x14
    2158:	5a c0       	rjmp	.+180    	; 0x220e <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe8>
    215a:	8a ed       	ldi	r24, 0xDA	; 218
    215c:	93 e0       	ldi	r25, 0x03	; 3
    215e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <_ZN7TwoWire5beginEv>
    2162:	8e 01       	movw	r16, r28
    2164:	05 5e       	subi	r16, 0xE5	; 229
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	c8 01       	movw	r24, r16
    216a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN17Adafruit_MCP230175beginEv>
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	68 e0       	ldi	r22, 0x08	; 8
    2172:	c8 01       	movw	r24, r16
    2174:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	66 e0       	ldi	r22, 0x06	; 6
    217c:	c8 01       	movw	r24, r16
    217e:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	67 e0       	ldi	r22, 0x07	; 7
    2186:	c8 01       	movw	r24, r16
    2188:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    218c:	67 e0       	ldi	r22, 0x07	; 7
    218e:	ce 01       	movw	r24, r28
    2190:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
    2194:	6d 81       	ldd	r22, Y+5	; 0x05
    2196:	66 23       	and	r22, r22
    2198:	21 f0       	breq	.+8      	; 0x21a2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x7c>
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	c8 01       	movw	r24, r16
    219e:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	6c 81       	ldd	r22, Y+4	; 0x04
    21a6:	c8 01       	movw	r24, r16
    21a8:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	6e 81       	ldd	r22, Y+6	; 0x06
    21b0:	c8 01       	movw	r24, r16
    21b2:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    21b6:	7e 01       	movw	r14, r28
    21b8:	e7 e0       	ldi	r30, 0x07	; 7
    21ba:	ee 0e       	add	r14, r30
    21bc:	f1 1c       	adc	r15, r1
    21be:	5e 01       	movw	r10, r28
    21c0:	fb e0       	ldi	r31, 0x0B	; 11
    21c2:	af 0e       	add	r10, r31
    21c4:	b1 1c       	adc	r11, r1
    21c6:	f7 01       	movw	r30, r14
    21c8:	61 91       	ld	r22, Z+
    21ca:	7f 01       	movw	r14, r30
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	c8 01       	movw	r24, r16
    21d0:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    21d4:	ea 14       	cp	r14, r10
    21d6:	fb 04       	cpc	r15, r11
    21d8:	b1 f7       	brne	.-20     	; 0x21c6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xa0>
    21da:	7e 01       	movw	r14, r28
    21dc:	ff e0       	ldi	r31, 0x0F	; 15
    21de:	ef 0e       	add	r14, r31
    21e0:	f1 1c       	adc	r15, r1
    21e2:	5e 01       	movw	r10, r28
    21e4:	84 e1       	ldi	r24, 0x14	; 20
    21e6:	a8 0e       	add	r10, r24
    21e8:	b1 1c       	adc	r11, r1
    21ea:	47 01       	movw	r8, r14
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	f7 01       	movw	r30, r14
    21f0:	61 91       	ld	r22, Z+
    21f2:	7f 01       	movw	r14, r30
    21f4:	c8 01       	movw	r24, r16
    21f6:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN17Adafruit_MCP230177pinModeEhh>
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	f4 01       	movw	r30, r8
    21fe:	60 81       	ld	r22, Z
    2200:	c8 01       	movw	r24, r16
    2202:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN17Adafruit_MCP230176pullUpEhh>
    2206:	ea 14       	cp	r14, r10
    2208:	fb 04       	cpc	r15, r11
    220a:	79 f7       	brne	.-34     	; 0x21ea <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xc4>
    220c:	9e cf       	rjmp	.-196    	; 0x214a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x24>
    220e:	d8 8e       	std	Y+24, r13	; 0x18
    2210:	19 8e       	std	Y+25, r1	; 0x19
    2212:	cc 20       	and	r12, r12
    2214:	31 f0       	breq	.+12     	; 0x2222 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    2216:	f1 e0       	ldi	r31, 0x01	; 1
    2218:	df 12       	cpse	r13, r31
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xfc>
    221c:	8c 89       	ldd	r24, Y+20	; 0x14
    221e:	84 60       	ori	r24, 0x04	; 4
    2220:	8c 8b       	std	Y+20, r24	; 0x14
    2222:	80 e5       	ldi	r24, 0x50	; 80
    2224:	93 ec       	ldi	r25, 0xC3	; 195
    2226:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	6c 81       	ldd	r22, Y+4	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	6e 81       	ldd	r22, Y+6	; 0x06
    2238:	ce 01       	movw	r24, r28
    223a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    223e:	6d 81       	ldd	r22, Y+5	; 0x05
    2240:	6f 3f       	cpi	r22, 0xFF	; 255
    2242:	21 f0       	breq	.+8      	; 0x224c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x126>
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	ce 01       	movw	r24, r28
    2248:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    224c:	6c 89       	ldd	r22, Y+20	; 0x14
    224e:	64 fd       	sbrc	r22, 4
    2250:	1d c0       	rjmp	.+58     	; 0x228c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x166>
    2252:	63 e0       	ldi	r22, 0x03	; 3
    2254:	ce 01       	movw	r24, r28
    2256:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    225a:	84 e9       	ldi	r24, 0x94	; 148
    225c:	91 e1       	ldi	r25, 0x11	; 17
    225e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    2262:	63 e0       	ldi	r22, 0x03	; 3
    2264:	ce 01       	movw	r24, r28
    2266:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    226a:	84 e9       	ldi	r24, 0x94	; 148
    226c:	91 e1       	ldi	r25, 0x11	; 17
    226e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    2272:	63 e0       	ldi	r22, 0x03	; 3
    2274:	ce 01       	movw	r24, r28
    2276:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    227a:	86 e9       	ldi	r24, 0x96	; 150
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    2282:	62 e0       	ldi	r22, 0x02	; 2
    2284:	ce 01       	movw	r24, r28
    2286:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    228a:	16 c0       	rjmp	.+44     	; 0x22b8 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x192>
    228c:	60 62       	ori	r22, 0x20	; 32
    228e:	ce 01       	movw	r24, r28
    2290:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    2294:	84 e9       	ldi	r24, 0x94	; 148
    2296:	91 e1       	ldi	r25, 0x11	; 17
    2298:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    229c:	6c 89       	ldd	r22, Y+20	; 0x14
    229e:	60 62       	ori	r22, 0x20	; 32
    22a0:	ce 01       	movw	r24, r28
    22a2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    22a6:	86 e9       	ldi	r24, 0x96	; 150
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 c5 0b 	call	0x178a	; 0x178a <delayMicroseconds>
    22ae:	6c 89       	ldd	r22, Y+20	; 0x14
    22b0:	60 62       	ori	r22, 0x20	; 32
    22b2:	ce 01       	movw	r24, r28
    22b4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    22b8:	6c 89       	ldd	r22, Y+20	; 0x14
    22ba:	60 62       	ori	r22, 0x20	; 32
    22bc:	ce 01       	movw	r24, r28
    22be:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	8d 8b       	std	Y+21, r24	; 0x15
    22c6:	ce 01       	movw	r24, r28
    22c8:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN21Adafruit_RGBLCDShield7displayEv>
    22cc:	ce 01       	movw	r24, r28
    22ce:	0e 94 56 10 	call	0x20ac	; 0x20ac <_ZN21Adafruit_RGBLCDShield5clearEv>
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	8e 8b       	std	Y+22, r24	; 0x16
    22d6:	66 e0       	ldi	r22, 0x06	; 6
    22d8:	ce 01       	movw	r24, r28
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <_ZN21Adafruit_RGBLCDShield7commandEh>

000022f6 <_ZN21Adafruit_RGBLCDShield5writeEh>:
  send(value, LOW);
}

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
  send(value, HIGH);
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
}
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	08 95       	ret

00002302 <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:
  }
  
  pulseEnable();
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	7c 01       	movw	r14, r24
    2312:	2f e0       	ldi	r18, 0x0F	; 15
    2314:	e2 0e       	add	r14, r18
    2316:	f1 1c       	adc	r15, r1
    2318:	c0 e0       	ldi	r28, 0x00	; 0
    231a:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t reply = 0x1F;
    231c:	2f e1       	ldi	r18, 0x1F	; 31
    231e:	d2 2e       	mov	r13, r18

  for (uint8_t i=0; i<5; i++) {
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    2320:	8c 01       	movw	r16, r24
    2322:	05 5e       	subi	r16, 0xE5	; 229
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	f7 01       	movw	r30, r14
    2328:	61 91       	ld	r22, Z+
    232a:	7f 01       	movw	r14, r30
    232c:	c8 01       	movw	r24, r16
    232e:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN17Adafruit_MCP2301711digitalReadEh>
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	0c 2e       	mov	r0, r28
    2338:	02 c0       	rjmp	.+4      	; 0x233e <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x3c>
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x38>
    2342:	20 95       	com	r18
    2344:	30 95       	com	r19
    2346:	d2 22       	and	r13, r18
    2348:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    234a:	c5 30       	cpi	r28, 0x05	; 5
    234c:	d1 05       	cpc	r29, r1
    234e:	59 f7       	brne	.-42     	; 0x2326 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x24>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
}
    2350:	8d 2d       	mov	r24, r13
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	08 95       	ret

00002362 <_ZL8wiresendh>:
#endif

// minihelper
static inline void wiresend(uint8_t x) {
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
    2362:	68 2f       	mov	r22, r24
    2364:	8a ed       	ldi	r24, 0xDA	; 218
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	0c 94 22 14 	jmp	0x2844	; 0x2844 <_ZN7TwoWire5writeEh>

0000236c <_ZN17Adafruit_MCP230175beginEh>:
#endif
}

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    2372:	68 30       	cpi	r22, 0x08	; 8
    2374:	08 f0       	brcs	.+2      	; 0x2378 <_ZN17Adafruit_MCP230175beginEh+0xc>
    2376:	67 e0       	ldi	r22, 0x07	; 7
    2378:	68 83       	st	Y, r22

  WIRE.begin();
    237a:	8a ed       	ldi	r24, 0xDA	; 218
    237c:	93 e0       	ldi	r25, 0x03	; 3
    237e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    2382:	68 81       	ld	r22, Y
    2384:	60 62       	ori	r22, 0x20	; 32
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	8a ed       	ldi	r24, 0xDA	; 218
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    239c:	8a ed       	ldi	r24, 0xDA	; 218
    239e:	93 e0       	ldi	r25, 0x03	; 3
    23a0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    23a4:	68 81       	ld	r22, Y
    23a6:	60 62       	ori	r22, 0x20	; 32
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	8a ed       	ldi	r24, 0xDA	; 218
    23ac:	93 e0       	ldi	r25, 0x03	; 3
    23ae:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
    23b8:	8f ef       	ldi	r24, 0xFF	; 255
    23ba:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    23be:	8a ed       	ldi	r24, 0xDA	; 218
    23c0:	93 e0       	ldi	r25, 0x03	; 3
}
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
  WIRE.endTransmission();

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_IODIRB);
  wiresend(0xFF);  // all inputs on port B
  WIRE.endTransmission();
    23c6:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>

000023ca <_ZN17Adafruit_MCP230175beginEv>:
}


void Adafruit_MCP23017::begin(void) {
  begin(0);
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	0c 94 b6 11 	jmp	0x236c	; 0x236c <_ZN17Adafruit_MCP230175beginEh>

000023d0 <_ZN17Adafruit_MCP2301711writeGPIOABEj>:
  ba |= a;

  return ba;
}

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	d6 2f       	mov	r29, r22
    23d6:	c7 2f       	mov	r28, r23
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    23d8:	fc 01       	movw	r30, r24
    23da:	60 81       	ld	r22, Z
    23dc:	60 62       	ori	r22, 0x20	; 32
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	8a ed       	ldi	r24, 0xDA	; 218
    23e2:	93 e0       	ldi	r25, 0x03	; 3
    23e4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    23e8:	82 e1       	ldi	r24, 0x12	; 18
    23ea:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
    23ee:	8d 2f       	mov	r24, r29
    23f0:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(ba >> 8);
    23f4:	8c 2f       	mov	r24, r28
    23f6:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    23fa:	8a ed       	ldi	r24, 0xDA	; 218
    23fc:	93 e0       	ldi	r25, 0x03	; 3
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(MCP23017_GPIOA);	
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
    2402:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>

00002406 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::begin(void) {
  begin(0);
}

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
    2406:	ff 92       	push	r15
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	8c 01       	movw	r16, r24
    2412:	c6 2f       	mov	r28, r22
    2414:	d4 2f       	mov	r29, r20
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
    2416:	60 31       	cpi	r22, 0x10	; 16
    2418:	08 f0       	brcs	.+2      	; 0x241c <_ZN17Adafruit_MCP230177pinModeEhh+0x16>
    241a:	51 c0       	rjmp	.+162    	; 0x24be <_ZN17Adafruit_MCP230177pinModeEhh+0xb8>
    return;

  if (p < 8)
    241c:	68 30       	cpi	r22, 0x08	; 8
    241e:	20 f0       	brcs	.+8      	; 0x2428 <_ZN17Adafruit_MCP230177pinModeEhh+0x22>
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
    2420:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
  else {
    iodiraddr = MCP23017_IODIRB;
    2422:	ff 24       	eor	r15, r15
    2424:	f3 94       	inc	r15
    2426:	01 c0       	rjmp	.+2      	; 0x242a <_ZN17Adafruit_MCP230177pinModeEhh+0x24>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    iodiraddr = MCP23017_IODIRA;
    2428:	f1 2c       	mov	r15, r1
    iodiraddr = MCP23017_IODIRB;
    p -= 8;
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    242a:	f8 01       	movw	r30, r16
    242c:	60 81       	ld	r22, Z
    242e:	60 62       	ori	r22, 0x20	; 32
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	8a ed       	ldi	r24, 0xDA	; 218
    2434:	93 e0       	ldi	r25, 0x03	; 3
    2436:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
    243a:	8f 2d       	mov	r24, r15
    243c:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    2440:	8a ed       	ldi	r24, 0xDA	; 218
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    2448:	f8 01       	movw	r30, r16
    244a:	60 81       	ld	r22, Z
    244c:	60 62       	ori	r22, 0x20	; 32
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	8a ed       	ldi	r24, 0xDA	; 218
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    245c:	8a ed       	ldi	r24, 0xDA	; 218
    245e:	93 e0       	ldi	r25, 0x03	; 3
    2460:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  iodir = wirerecv();

  // set the pin and direction
  if (d == INPUT) {
    2468:	d1 11       	cpse	r29, r1
    246a:	09 c0       	rjmp	.+18     	; 0x247e <_ZN17Adafruit_MCP230177pinModeEhh+0x78>
    iodir |= 1 << p; 
    246c:	a9 01       	movw	r20, r18
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <_ZN17Adafruit_MCP230177pinModeEhh+0x6e>
    2470:	44 0f       	add	r20, r20
    2472:	55 1f       	adc	r21, r21
    2474:	ca 95       	dec	r28
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <_ZN17Adafruit_MCP230177pinModeEhh+0x6a>
    2478:	ea 01       	movw	r28, r20
    247a:	c8 2b       	or	r28, r24
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
  } else {
    iodir &= ~(1 << p);
    247e:	f9 01       	movw	r30, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <_ZN17Adafruit_MCP230177pinModeEhh+0x80>
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	ca 95       	dec	r28
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <_ZN17Adafruit_MCP230177pinModeEhh+0x7c>
    248a:	ef 01       	movw	r28, r30
    248c:	c0 95       	com	r28
    248e:	c8 23       	and	r28, r24
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    2490:	f8 01       	movw	r30, r16
    2492:	60 81       	ld	r22, Z
    2494:	60 62       	ori	r22, 0x20	; 32
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	8a ed       	ldi	r24, 0xDA	; 218
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
    24a0:	8f 2d       	mov	r24, r15
    24a2:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(iodir);	
    24a6:	8c 2f       	mov	r24, r28
    24a8:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    24ac:	8a ed       	ldi	r24, 0xDA	; 218
    24ae:	93 e0       	ldi	r25, 0x03	; 3
}
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(iodiraddr);
  wiresend(iodir);	
  WIRE.endTransmission();
    24ba:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
}
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	08 95       	ret

000024ca <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	ec 01       	movw	r28, r24
  uint16_t ba = 0;
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    24d0:	68 81       	ld	r22, Y
    24d2:	60 62       	ori	r22, 0x20	; 32
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	8a ed       	ldi	r24, 0xDA	; 218
    24d8:	93 e0       	ldi	r25, 0x03	; 3
    24da:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
    24de:	82 e1       	ldi	r24, 0x12	; 18
    24e0:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    24e4:	8a ed       	ldi	r24, 0xDA	; 218
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
    24ec:	68 81       	ld	r22, Y
    24ee:	60 62       	ori	r22, 0x20	; 32
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	42 e0       	ldi	r20, 0x02	; 2
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	8a ed       	ldi	r24, 0xDA	; 218
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    24fe:	8a ed       	ldi	r24, 0xDA	; 218
    2500:	93 e0       	ldi	r25, 0x03	; 3
    2502:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
    2506:	c8 2f       	mov	r28, r24
    2508:	8a ed       	ldi	r24, 0xDA	; 218
    250a:	93 e0       	ldi	r25, 0x03	; 3
    250c:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
  a = wirerecv();
  ba = wirerecv();
  ba <<= 8;
    2510:	98 2f       	mov	r25, r24
    2512:	88 27       	eor	r24, r24
  ba |= a;

  return ba;
}
    2514:	8c 2b       	or	r24, r28
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	08 95       	ret

0000251c <_ZN17Adafruit_MCP2301711digitalReadEh>:
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
}

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	8c 01       	movw	r16, r24
    2526:	c6 2f       	mov	r28, r22
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    2528:	60 31       	cpi	r22, 0x10	; 16
    252a:	58 f5       	brcc	.+86     	; 0x2582 <_ZN17Adafruit_MCP2301711digitalReadEh+0x66>
    return 0;

  if (p < 8)
    252c:	68 30       	cpi	r22, 0x08	; 8
    252e:	18 f0       	brcs	.+6      	; 0x2536 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1a>
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    2530:	c8 50       	subi	r28, 0x08	; 8
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
  else {
    gpioaddr = MCP23017_GPIOB;
    2532:	d3 e1       	ldi	r29, 0x13	; 19
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
  // only 16 bits!
  if (p > 15)
    return 0;

  if (p < 8)
    gpioaddr = MCP23017_GPIOA;
    2536:	d2 e1       	ldi	r29, 0x12	; 18
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    2538:	f8 01       	movw	r30, r16
    253a:	60 81       	ld	r22, Z
    253c:	60 62       	ori	r22, 0x20	; 32
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	8a ed       	ldi	r24, 0xDA	; 218
    2542:	93 e0       	ldi	r25, 0x03	; 3
    2544:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
    2548:	8d 2f       	mov	r24, r29
    254a:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    254e:	8a ed       	ldi	r24, 0xDA	; 218
    2550:	93 e0       	ldi	r25, 0x03	; 3
    2552:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    2556:	f8 01       	movw	r30, r16
    2558:	60 81       	ld	r22, Z
    255a:	60 62       	ori	r22, 0x20	; 32
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	8a ed       	ldi	r24, 0xDA	; 218
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    256a:	8a ed       	ldi	r24, 0xDA	; 218
    256c:	93 e0       	ldi	r25, 0x03	; 3
    256e:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
    2572:	99 27       	eor	r25, r25
    2574:	02 c0       	rjmp	.+4      	; 0x257a <_ZN17Adafruit_MCP2301711digitalReadEh+0x5e>
    2576:	95 95       	asr	r25
    2578:	87 95       	ror	r24
    257a:	ca 95       	dec	r28
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <_ZN17Adafruit_MCP2301711digitalReadEh+0x5a>
    257e:	81 70       	andi	r24, 0x01	; 1
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <_ZN17Adafruit_MCP2301711digitalReadEh+0x68>
uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
    return 0;
    2582:	80 e0       	ldi	r24, 0x00	; 0
  wiresend(gpioaddr);	
  WIRE.endTransmission();
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  return (wirerecv() >> p) & 0x1;
}
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <_ZN17Adafruit_MCP230176pullUpEhh>:
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
    258e:	ff 92       	push	r15
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	8c 01       	movw	r16, r24
    259a:	c6 2f       	mov	r28, r22
    259c:	d4 2f       	mov	r29, r20
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
    259e:	60 31       	cpi	r22, 0x10	; 16
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <_ZN17Adafruit_MCP230176pullUpEhh+0x16>
    25a2:	52 c0       	rjmp	.+164    	; 0x2648 <_ZN17Adafruit_MCP230176pullUpEhh+0xba>
    return;

  if (p < 8)
    25a4:	68 30       	cpi	r22, 0x08	; 8
    25a6:	20 f0       	brcs	.+8      	; 0x25b0 <_ZN17Adafruit_MCP230176pullUpEhh+0x22>
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    p -= 8;
    25a8:	c8 50       	subi	r28, 0x08	; 8
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
  else {
    gppuaddr = MCP23017_GPPUB;
    25aa:	9d e0       	ldi	r25, 0x0D	; 13
    25ac:	f9 2e       	mov	r15, r25
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <_ZN17Adafruit_MCP230176pullUpEhh+0x26>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8)
    gppuaddr = MCP23017_GPPUA;
    25b0:	8c e0       	ldi	r24, 0x0C	; 12
    25b2:	f8 2e       	mov	r15, r24
    p -= 8;
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    25b4:	f8 01       	movw	r30, r16
    25b6:	60 81       	ld	r22, Z
    25b8:	60 62       	ori	r22, 0x20	; 32
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	8a ed       	ldi	r24, 0xDA	; 218
    25be:	93 e0       	ldi	r25, 0x03	; 3
    25c0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
    25c4:	8f 2d       	mov	r24, r15
    25c6:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    25ca:	8a ed       	ldi	r24, 0xDA	; 218
    25cc:	93 e0       	ldi	r25, 0x03	; 3
    25ce:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    25d2:	f8 01       	movw	r30, r16
    25d4:	60 81       	ld	r22, Z
    25d6:	60 62       	ori	r22, 0x20	; 32
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	8a ed       	ldi	r24, 0xDA	; 218
    25e0:	93 e0       	ldi	r25, 0x03	; 3
    25e2:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    25e6:	8a ed       	ldi	r24, 0xDA	; 218
    25e8:	93 e0       	ldi	r25, 0x03	; 3
    25ea:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    gppu |= 1 << p; 
    25ee:	21 e0       	ldi	r18, 0x01	; 1
    25f0:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
  gppu = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    25f2:	d1 30       	cpi	r29, 0x01	; 1
    25f4:	49 f4       	brne	.+18     	; 0x2608 <_ZN17Adafruit_MCP230176pullUpEhh+0x7a>
    gppu |= 1 << p; 
    25f6:	a9 01       	movw	r20, r18
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <_ZN17Adafruit_MCP230176pullUpEhh+0x70>
    25fa:	44 0f       	add	r20, r20
    25fc:	55 1f       	adc	r21, r21
    25fe:	ca 95       	dec	r28
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <_ZN17Adafruit_MCP230176pullUpEhh+0x6c>
    2602:	ea 01       	movw	r28, r20
    2604:	c8 2b       	or	r28, r24
    2606:	09 c0       	rjmp	.+18     	; 0x261a <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
  } else {
    gppu &= ~(1 << p);
    2608:	f9 01       	movw	r30, r18
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <_ZN17Adafruit_MCP230176pullUpEhh+0x82>
    260c:	ee 0f       	add	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	ca 95       	dec	r28
    2612:	e2 f7       	brpl	.-8      	; 0x260c <_ZN17Adafruit_MCP230176pullUpEhh+0x7e>
    2614:	ef 01       	movw	r28, r30
    2616:	c0 95       	com	r28
    2618:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    261a:	f8 01       	movw	r30, r16
    261c:	60 81       	ld	r22, Z
    261e:	60 62       	ori	r22, 0x20	; 32
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	8a ed       	ldi	r24, 0xDA	; 218
    2624:	93 e0       	ldi	r25, 0x03	; 3
    2626:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
    262a:	8f 2d       	mov	r24, r15
    262c:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(gppu);	
    2630:	8c 2f       	mov	r24, r28
    2632:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    2636:	8a ed       	ldi	r24, 0xDA	; 218
    2638:	93 e0       	ldi	r25, 0x03	; 3
}
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gppuaddr);
  wiresend(gppu);	
  WIRE.endTransmission();
    2644:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
}
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	08 95       	ret

00002654 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
  wiresend(ba & 0xFF);
  wiresend(ba >> 8);
  WIRE.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	8c 01       	movw	r16, r24
    2662:	c6 2f       	mov	r28, r22
    2664:	e4 2e       	mov	r14, r20
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
    2666:	60 31       	cpi	r22, 0x10	; 16
    2668:	08 f0       	brcs	.+2      	; 0x266c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x18>
    266a:	56 c0       	rjmp	.+172    	; 0x2718 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xc4>
    return;

  if (p < 8) {
    266c:	68 30       	cpi	r22, 0x08	; 8
    266e:	28 f0       	brcs	.+10     	; 0x267a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
    2670:	c8 50       	subi	r28, 0x08	; 8

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    gpioaddr = MCP23017_GPIOA;
  } else {
    olataddr = MCP23017_OLATB;
    2672:	d5 e1       	ldi	r29, 0x15	; 21
    gpioaddr = MCP23017_GPIOB;
    2674:	93 e1       	ldi	r25, 0x13	; 19
    2676:	f9 2e       	mov	r15, r25
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x2c>
  // only 16 bits!
  if (p > 15)
    return;

  if (p < 8) {
    olataddr = MCP23017_OLATA;
    267a:	d4 e1       	ldi	r29, 0x14	; 20
    gpioaddr = MCP23017_GPIOA;
    267c:	82 e1       	ldi	r24, 0x12	; 18
    267e:	f8 2e       	mov	r15, r24
    gpioaddr = MCP23017_GPIOB;
    p -= 8;
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    2680:	f8 01       	movw	r30, r16
    2682:	60 81       	ld	r22, Z
    2684:	60 62       	ori	r22, 0x20	; 32
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	8a ed       	ldi	r24, 0xDA	; 218
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
    2690:	8d 2f       	mov	r24, r29
    2692:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    2696:	8a ed       	ldi	r24, 0xDA	; 218
    2698:	93 e0       	ldi	r25, 0x03	; 3
    269a:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
    269e:	f8 01       	movw	r30, r16
    26a0:	60 81       	ld	r22, Z
    26a2:	60 62       	ori	r22, 0x20	; 32
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	8a ed       	ldi	r24, 0xDA	; 218
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire11requestFromEii>
#endif
}

static inline uint8_t wirerecv(void) {
#if ARDUINO >= 100
  return WIRE.read();
    26b2:	8a ed       	ldi	r24, 0xDA	; 218
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN7TwoWire4readEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    26ba:	f1 e0       	ldi	r31, 0x01	; 1
    gpio |= 1 << p; 
    26bc:	21 e0       	ldi	r18, 0x01	; 1
    26be:	30 e0       	ldi	r19, 0x00	; 0
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   gpio = wirerecv();

  // set the pin and direction
  if (d == HIGH) {
    26c0:	ef 12       	cpse	r14, r31
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x82>
    gpio |= 1 << p; 
    26c4:	a9 01       	movw	r20, r18
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x78>
    26c8:	44 0f       	add	r20, r20
    26ca:	55 1f       	adc	r21, r21
    26cc:	ca 95       	dec	r28
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x74>
    26d0:	ea 01       	movw	r28, r20
    26d2:	c8 2b       	or	r28, r24
    26d4:	09 c0       	rjmp	.+18     	; 0x26e8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x94>
  } else {
    gpio &= ~(1 << p);
    26d6:	f9 01       	movw	r30, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x8a>
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	ca 95       	dec	r28
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x86>
    26e2:	ef 01       	movw	r28, r30
    26e4:	c0 95       	com	r28
    26e6:	c8 23       	and	r28, r24
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
    26e8:	f8 01       	movw	r30, r16
    26ea:	60 81       	ld	r22, Z
    26ec:	60 62       	ori	r22, 0x20	; 32
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	8a ed       	ldi	r24, 0xDA	; 218
    26f2:	93 e0       	ldi	r25, 0x03	; 3
    26f4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
    26f8:	8f 2d       	mov	r24, r15
    26fa:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  wiresend(gpio);	
    26fe:	8c 2f       	mov	r24, r28
    2700:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZL8wiresendh>
  WIRE.endTransmission();
    2704:	8a ed       	ldi	r24, 0xDA	; 218
    2706:	93 e0       	ldi	r25, 0x03	; 3
}
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
  wiresend(gpioaddr);
  wiresend(gpio);	
  WIRE.endTransmission();
    2714:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN7TwoWire15endTransmissionEv>
}
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	08 95       	ret

00002726 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2726:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    2730:	82 1b       	sub	r24, r18
    2732:	91 09       	sbc	r25, r1
    2734:	08 95       	ret

00002736 <_ZN7TwoWire4readEv>:
    2736:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    273a:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    273e:	98 17       	cp	r25, r24
    2740:	50 f4       	brcc	.+20     	; 0x2756 <_ZN7TwoWire4readEv+0x20>
    2742:	e9 2f       	mov	r30, r25
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	e0 5f       	subi	r30, 0xF0	; 240
    2748:	fb 4f       	sbci	r31, 0xFB	; 251
    274a:	20 81       	ld	r18, Z
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    2754:	02 c0       	rjmp	.+4      	; 0x275a <_ZN7TwoWire4readEv+0x24>
    2756:	2f ef       	ldi	r18, 0xFF	; 255
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	c9 01       	movw	r24, r18
    275c:	08 95       	ret

0000275e <_ZN7TwoWire4peekEv>:
    275e:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    2762:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    2766:	e8 17       	cp	r30, r24
    2768:	30 f4       	brcc	.+12     	; 0x2776 <_ZN7TwoWire4peekEv+0x18>
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	e0 5f       	subi	r30, 0xF0	; 240
    276e:	fb 4f       	sbci	r31, 0xFB	; 251
    2770:	80 81       	ld	r24, Z
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	08 95       	ret
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	9f ef       	ldi	r25, 0xFF	; 255
    277a:	08 95       	ret

0000277c <_ZN7TwoWire5flushEv>:
    277c:	08 95       	ret

0000277e <_ZN7TwoWire16onReceiveServiceEPhi>:
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	ec 01       	movw	r28, r24
    2784:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <_ZN7TwoWire14user_onReceiveE>
    2788:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <_ZN7TwoWire14user_onReceiveE+0x1>
    278c:	30 97       	sbiw	r30, 0x00	; 0
    278e:	f1 f0       	breq	.+60     	; 0x27cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2790:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    2794:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    2798:	98 17       	cp	r25, r24
    279a:	c0 f0       	brcs	.+48     	; 0x27cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	29 2f       	mov	r18, r25
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	26 17       	cp	r18, r22
    27a4:	37 07       	cpc	r19, r23
    27a6:	54 f4       	brge	.+20     	; 0x27bc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    27a8:	de 01       	movw	r26, r28
    27aa:	a2 0f       	add	r26, r18
    27ac:	b3 1f       	adc	r27, r19
    27ae:	4c 91       	ld	r20, X
    27b0:	d9 01       	movw	r26, r18
    27b2:	a0 5f       	subi	r26, 0xF0	; 240
    27b4:	bb 4f       	sbci	r27, 0xFB	; 251
    27b6:	4c 93       	st	X, r20
    27b8:	9f 5f       	subi	r25, 0xFF	; 255
    27ba:	f1 cf       	rjmp	.-30     	; 0x279e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    27bc:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    27c0:	60 93 0e 04 	sts	0x040E, r22	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    27c4:	cb 01       	movw	r24, r22
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	09 94       	ijmp
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <_ZN7TwoWire16onRequestServiceEv>:
    27d2:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <_ZN7TwoWire14user_onRequestE>
    27d6:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <_ZN7TwoWire14user_onRequestE+0x1>
    27da:	30 97       	sbiw	r30, 0x00	; 0
    27dc:	29 f0       	breq	.+10     	; 0x27e8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    27de:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    27e2:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    27e6:	09 94       	ijmp
    27e8:	08 95       	ret

000027ea <_ZN7TwoWire5writeEPKhj>:
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	7c 01       	movw	r14, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8a 01       	movw	r16, r20
    2800:	20 91 ea 03 	lds	r18, 0x03EA	; 0x8003ea <_ZN7TwoWire12transmittingE>
    2804:	22 23       	and	r18, r18
    2806:	89 f0       	breq	.+34     	; 0x282a <_ZN7TwoWire5writeEPKhj+0x40>
    2808:	eb 01       	movw	r28, r22
    280a:	6b 01       	movw	r12, r22
    280c:	c4 0e       	add	r12, r20
    280e:	d5 1e       	adc	r13, r21
    2810:	cc 15       	cp	r28, r12
    2812:	dd 05       	cpc	r29, r13
    2814:	69 f0       	breq	.+26     	; 0x2830 <_ZN7TwoWire5writeEPKhj+0x46>
    2816:	69 91       	ld	r22, Y+
    2818:	d7 01       	movw	r26, r14
    281a:	ed 91       	ld	r30, X+
    281c:	fc 91       	ld	r31, X
    281e:	01 90       	ld	r0, Z+
    2820:	f0 81       	ld	r31, Z
    2822:	e0 2d       	mov	r30, r0
    2824:	c7 01       	movw	r24, r14
    2826:	09 95       	icall
    2828:	f3 cf       	rjmp	.-26     	; 0x2810 <_ZN7TwoWire5writeEPKhj+0x26>
    282a:	64 2f       	mov	r22, r20
    282c:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_transmit>
    2830:	c8 01       	movw	r24, r16
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
    2842:	08 95       	ret

00002844 <_ZN7TwoWire5writeEh>:
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	1f 92       	push	r1
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	69 83       	std	Y+1, r22	; 0x01
    2850:	20 91 ea 03 	lds	r18, 0x03EA	; 0x8003ea <_ZN7TwoWire12transmittingE>
    2854:	22 23       	and	r18, r18
    2856:	d1 f0       	breq	.+52     	; 0x288c <_ZN7TwoWire5writeEh+0x48>
    2858:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    285c:	20 32       	cpi	r18, 0x20	; 32
    285e:	40 f0       	brcs	.+16     	; 0x2870 <_ZN7TwoWire5writeEh+0x2c>
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	fc 01       	movw	r30, r24
    2866:	33 83       	std	Z+3, r19	; 0x03
    2868:	22 83       	std	Z+2, r18	; 0x02
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	15 c0       	rjmp	.+42     	; 0x289a <_ZN7TwoWire5writeEh+0x56>
    2870:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    2874:	e8 2f       	mov	r30, r24
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	e3 51       	subi	r30, 0x13	; 19
    287a:	fc 4f       	sbci	r31, 0xFC	; 252
    287c:	99 81       	ldd	r25, Y+1	; 0x01
    287e:	90 83       	st	Z, r25
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    2886:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    288a:	05 c0       	rjmp	.+10     	; 0x2896 <_ZN7TwoWire5writeEh+0x52>
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_transmit>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0f 90       	pop	r0
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <_ZN7TwoWireC1Ev>:
    28a2:	fc 01       	movw	r30, r24
    28a4:	13 82       	std	Z+3, r1	; 0x03
    28a6:	12 82       	std	Z+2, r1	; 0x02
    28a8:	88 ee       	ldi	r24, 0xE8	; 232
    28aa:	93 e0       	ldi	r25, 0x03	; 3
    28ac:	a0 e0       	ldi	r26, 0x00	; 0
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	84 83       	std	Z+4, r24	; 0x04
    28b2:	95 83       	std	Z+5, r25	; 0x05
    28b4:	a6 83       	std	Z+6, r26	; 0x06
    28b6:	b7 83       	std	Z+7, r27	; 0x07
    28b8:	81 ea       	ldi	r24, 0xA1	; 161
    28ba:	92 e0       	ldi	r25, 0x02	; 2
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
    28c0:	08 95       	ret

000028c2 <_ZN7TwoWire5beginEv>:
    28c2:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    28c6:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    28ca:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    28ce:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    28d2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <twi_init>
    28d6:	89 ee       	ldi	r24, 0xE9	; 233
    28d8:	93 e1       	ldi	r25, 0x13	; 19
    28da:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <twi_attachSlaveTxEvent>
    28de:	8f eb       	ldi	r24, 0xBF	; 191
    28e0:	93 e1       	ldi	r25, 0x13	; 19
    28e2:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <twi_attachSlaveRxEvent>

000028e6 <_ZN7TwoWire17beginTransmissionEh>:
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <_ZN7TwoWire12transmittingE>
    28ec:	60 93 0d 04 	sts	0x040D, r22	; 0x80040d <_ZN7TwoWire9txAddressE>
    28f0:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    28f4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    28f8:	08 95       	ret

000028fa <_ZN7TwoWire17beginTransmissionEi>:
    28fa:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <_ZN7TwoWire17beginTransmissionEh>

000028fe <_ZN7TwoWire15endTransmissionEh>:
    28fe:	0f 93       	push	r16
    2900:	06 2f       	mov	r16, r22
    2902:	21 e0       	ldi	r18, 0x01	; 1
    2904:	40 91 eb 03 	lds	r20, 0x03EB	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    2908:	6d ee       	ldi	r22, 0xED	; 237
    290a:	73 e0       	ldi	r23, 0x03	; 3
    290c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_ZN7TwoWire9txAddressE>
    2910:	0e 94 67 15 	call	0x2ace	; 0x2ace <twi_writeTo>
    2914:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZN7TwoWire13txBufferIndexE>
    2918:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZN7TwoWire14txBufferLengthE>
    291c:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <_ZN7TwoWire12transmittingE>
    2920:	0f 91       	pop	r16
    2922:	08 95       	ret

00002924 <_ZN7TwoWire11requestFromEhhmhh>:
    2924:	4f 92       	push	r4
    2926:	5f 92       	push	r5
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	af 92       	push	r10
    292e:	bf 92       	push	r11
    2930:	cf 92       	push	r12
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	5c 01       	movw	r10, r24
    2940:	f6 2e       	mov	r15, r22
    2942:	d4 2f       	mov	r29, r20
    2944:	28 01       	movw	r4, r16
    2946:	39 01       	movw	r6, r18
    2948:	ee 20       	and	r14, r14
    294a:	21 f1       	breq	.+72     	; 0x2994 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    294c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <_ZN7TwoWire17beginTransmissionEh>
    2950:	ce 2d       	mov	r28, r14
    2952:	c4 30       	cpi	r28, 0x04	; 4
    2954:	08 f0       	brcs	.+2      	; 0x2958 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2956:	c3 e0       	ldi	r28, 0x03	; 3
    2958:	c1 50       	subi	r28, 0x01	; 1
    295a:	c0 f0       	brcs	.+48     	; 0x298c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    295c:	28 e0       	ldi	r18, 0x08	; 8
    295e:	c2 9f       	mul	r28, r18
    2960:	c0 01       	movw	r24, r0
    2962:	11 24       	eor	r1, r1
    2964:	a3 01       	movw	r20, r6
    2966:	92 01       	movw	r18, r4
    2968:	04 c0       	rjmp	.+8      	; 0x2972 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    296a:	56 95       	lsr	r21
    296c:	47 95       	ror	r20
    296e:	37 95       	ror	r19
    2970:	27 95       	ror	r18
    2972:	8a 95       	dec	r24
    2974:	d2 f7       	brpl	.-12     	; 0x296a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2976:	ca 01       	movw	r24, r20
    2978:	b9 01       	movw	r22, r18
    297a:	d5 01       	movw	r26, r10
    297c:	ed 91       	ld	r30, X+
    297e:	fc 91       	ld	r31, X
    2980:	01 90       	ld	r0, Z+
    2982:	f0 81       	ld	r31, Z
    2984:	e0 2d       	mov	r30, r0
    2986:	c5 01       	movw	r24, r10
    2988:	09 95       	icall
    298a:	e6 cf       	rjmp	.-52     	; 0x2958 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	c5 01       	movw	r24, r10
    2990:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN7TwoWire15endTransmissionEh>
    2994:	4d 2f       	mov	r20, r29
    2996:	d1 32       	cpi	r29, 0x21	; 33
    2998:	08 f0       	brcs	.+2      	; 0x299c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	2c 2d       	mov	r18, r12
    299e:	60 e1       	ldi	r22, 0x10	; 16
    29a0:	74 e0       	ldi	r23, 0x04	; 4
    29a2:	8f 2d       	mov	r24, r15
    29a4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <twi_readFrom>
    29a8:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZN7TwoWire13rxBufferIndexE>
    29ac:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZN7TwoWire14rxBufferLengthE>
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	ff 90       	pop	r15
    29ba:	ef 90       	pop	r14
    29bc:	cf 90       	pop	r12
    29be:	bf 90       	pop	r11
    29c0:	af 90       	pop	r10
    29c2:	7f 90       	pop	r7
    29c4:	6f 90       	pop	r6
    29c6:	5f 90       	pop	r5
    29c8:	4f 90       	pop	r4
    29ca:	08 95       	ret

000029cc <_ZN7TwoWire11requestFromEhhh>:
    29cc:	cf 92       	push	r12
    29ce:	ef 92       	push	r14
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	c2 2e       	mov	r12, r18
    29d6:	e1 2c       	mov	r14, r1
    29d8:	00 e0       	ldi	r16, 0x00	; 0
    29da:	10 e0       	ldi	r17, 0x00	; 0
    29dc:	98 01       	movw	r18, r16
    29de:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZN7TwoWire11requestFromEhhmhh>
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ef 90       	pop	r14
    29e8:	cf 90       	pop	r12
    29ea:	08 95       	ret

000029ec <_ZN7TwoWire11requestFromEii>:
    29ec:	21 e0       	ldi	r18, 0x01	; 1
    29ee:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <_ZN7TwoWire11requestFromEhhh>

000029f2 <_ZN7TwoWire15endTransmissionEv>:
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <_ZN7TwoWire15endTransmissionEh>

000029f8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29f8:	8a ed       	ldi	r24, 0xDA	; 218
    29fa:	93 e0       	ldi	r25, 0x03	; 3
    29fc:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <_ZN7TwoWireC1Ev>

00002a00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2a00:	08 95       	ret

00002a02 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2a02:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_state>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_sendStop>
    2a0c:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <twi_inRepStart>
    2a10:	61 e0       	ldi	r22, 0x01	; 1
    2a12:	82 e1       	ldi	r24, 0x12	; 18
    2a14:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	83 e1       	ldi	r24, 0x13	; 19
    2a1c:	0e 94 90 0c 	call	0x1920	; 0x1920 <digitalWrite>
    2a20:	e9 eb       	ldi	r30, 0xB9	; 185
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8e 7f       	andi	r24, 0xFE	; 254
    2a28:	80 83       	st	Z, r24
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8d 7f       	andi	r24, 0xFD	; 253
    2a2e:	80 83       	st	Z, r24
    2a30:	88 e4       	ldi	r24, 0x48	; 72
    2a32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2a36:	85 e4       	ldi	r24, 0x45	; 69
    2a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a3c:	08 95       	ret

00002a3e <twi_readFrom>:
    2a3e:	41 32       	cpi	r20, 0x21	; 33
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <twi_readFrom+0x6>
    2a42:	43 c0       	rjmp	.+134    	; 0x2aca <twi_readFrom+0x8c>
    2a44:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_state>
    2a48:	91 11       	cpse	r25, r1
    2a4a:	fc cf       	rjmp	.-8      	; 0x2a44 <twi_readFrom+0x6>
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <twi_state>
    2a52:	20 93 9b 04 	sts	0x049B, r18	; 0x80049b <twi_sendStop>
    2a56:	2f ef       	ldi	r18, 0xFF	; 255
    2a58:	20 93 30 04 	sts	0x0430, r18	; 0x800430 <twi_error>
    2a5c:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <twi_masterBufferIndex>
    2a60:	24 0f       	add	r18, r20
    2a62:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <twi_masterBufferLength>
    2a66:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <twi_slarw>
    2a6a:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <twi_slarw>
    2a6e:	88 0f       	add	r24, r24
    2a70:	89 2b       	or	r24, r25
    2a72:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <twi_slarw>
    2a76:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_inRepStart>
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	61 f4       	brne	.+24     	; 0x2a96 <twi_readFrom+0x58>
    2a7e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <twi_inRepStart>
    2a82:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_slarw>
    2a86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a8e:	83 fd       	sbrc	r24, 3
    2a90:	f8 cf       	rjmp	.-16     	; 0x2a82 <twi_readFrom+0x44>
    2a92:	85 ec       	ldi	r24, 0xC5	; 197
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <twi_readFrom+0x5a>
    2a96:	85 ee       	ldi	r24, 0xE5	; 229
    2a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a9c:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <twi_state>
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	e1 f3       	breq	.-8      	; 0x2a9c <twi_readFrom+0x5e>
    2aa4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2aa8:	84 17       	cp	r24, r20
    2aaa:	10 f4       	brcc	.+4      	; 0x2ab0 <twi_readFrom+0x72>
    2aac:	40 91 75 04 	lds	r20, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2ab0:	a6 e7       	ldi	r26, 0x76	; 118
    2ab2:	b4 e0       	ldi	r27, 0x04	; 4
    2ab4:	96 2f       	mov	r25, r22
    2ab6:	fb 01       	movw	r30, r22
    2ab8:	8e 2f       	mov	r24, r30
    2aba:	89 1b       	sub	r24, r25
    2abc:	84 17       	cp	r24, r20
    2abe:	18 f4       	brcc	.+6      	; 0x2ac6 <twi_readFrom+0x88>
    2ac0:	8d 91       	ld	r24, X+
    2ac2:	81 93       	st	Z+, r24
    2ac4:	f9 cf       	rjmp	.-14     	; 0x2ab8 <twi_readFrom+0x7a>
    2ac6:	84 2f       	mov	r24, r20
    2ac8:	08 95       	ret
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	08 95       	ret

00002ace <twi_writeTo>:
    2ace:	0f 93       	push	r16
    2ad0:	41 32       	cpi	r20, 0x21	; 33
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <twi_writeTo+0x8>
    2ad4:	4a c0       	rjmp	.+148    	; 0x2b6a <twi_writeTo+0x9c>
    2ad6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_state>
    2ada:	91 11       	cpse	r25, r1
    2adc:	fc cf       	rjmp	.-8      	; 0x2ad6 <twi_writeTo+0x8>
    2ade:	32 e0       	ldi	r19, 0x02	; 2
    2ae0:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <twi_state>
    2ae4:	00 93 9b 04 	sts	0x049B, r16	; 0x80049b <twi_sendStop>
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <twi_error>
    2aee:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <twi_masterBufferIndex>
    2af2:	40 93 74 04 	sts	0x0474, r20	; 0x800474 <twi_masterBufferLength>
    2af6:	56 2f       	mov	r21, r22
    2af8:	a6 e7       	ldi	r26, 0x76	; 118
    2afa:	b4 e0       	ldi	r27, 0x04	; 4
    2afc:	fb 01       	movw	r30, r22
    2afe:	3e 2f       	mov	r19, r30
    2b00:	35 1b       	sub	r19, r21
    2b02:	34 17       	cp	r19, r20
    2b04:	18 f4       	brcc	.+6      	; 0x2b0c <twi_writeTo+0x3e>
    2b06:	31 91       	ld	r19, Z+
    2b08:	3d 93       	st	X+, r19
    2b0a:	f9 cf       	rjmp	.-14     	; 0x2afe <twi_writeTo+0x30>
    2b0c:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <twi_slarw>
    2b10:	30 91 9c 04 	lds	r19, 0x049C	; 0x80049c <twi_slarw>
    2b14:	88 0f       	add	r24, r24
    2b16:	83 2b       	or	r24, r19
    2b18:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <twi_slarw>
    2b1c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_inRepStart>
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	61 f4       	brne	.+24     	; 0x2b3c <twi_writeTo+0x6e>
    2b24:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <twi_inRepStart>
    2b28:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_slarw>
    2b2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b34:	83 fd       	sbrc	r24, 3
    2b36:	f8 cf       	rjmp	.-16     	; 0x2b28 <twi_writeTo+0x5a>
    2b38:	85 ec       	ldi	r24, 0xC5	; 197
    2b3a:	01 c0       	rjmp	.+2      	; 0x2b3e <twi_writeTo+0x70>
    2b3c:	85 ee       	ldi	r24, 0xE5	; 229
    2b3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b42:	22 23       	and	r18, r18
    2b44:	21 f0       	breq	.+8      	; 0x2b4e <twi_writeTo+0x80>
    2b46:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <twi_state>
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	d1 f3       	breq	.-12     	; 0x2b42 <twi_writeTo+0x74>
    2b4e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	79 f0       	breq	.+30     	; 0x2b74 <twi_writeTo+0xa6>
    2b56:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    2b5a:	80 32       	cpi	r24, 0x20	; 32
    2b5c:	41 f0       	breq	.+16     	; 0x2b6e <twi_writeTo+0xa0>
    2b5e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    2b62:	80 33       	cpi	r24, 0x30	; 48
    2b64:	31 f0       	breq	.+12     	; 0x2b72 <twi_writeTo+0xa4>
    2b66:	94 e0       	ldi	r25, 0x04	; 4
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <twi_writeTo+0xa6>
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <twi_writeTo+0xa6>
    2b6e:	92 e0       	ldi	r25, 0x02	; 2
    2b70:	01 c0       	rjmp	.+2      	; 0x2b74 <twi_writeTo+0xa6>
    2b72:	93 e0       	ldi	r25, 0x03	; 3
    2b74:	89 2f       	mov	r24, r25
    2b76:	0f 91       	pop	r16
    2b78:	08 95       	ret

00002b7a <twi_transmit>:
    2b7a:	40 91 52 04 	lds	r20, 0x0452	; 0x800452 <twi_txBufferLength>
    2b7e:	26 2f       	mov	r18, r22
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	24 0f       	add	r18, r20
    2b84:	31 1d       	adc	r19, r1
    2b86:	21 32       	cpi	r18, 0x21	; 33
    2b88:	31 05       	cpc	r19, r1
    2b8a:	dc f4       	brge	.+54     	; 0x2bc2 <twi_transmit+0x48>
    2b8c:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <twi_state>
    2b90:	24 30       	cpi	r18, 0x04	; 4
    2b92:	c9 f4       	brne	.+50     	; 0x2bc6 <twi_transmit+0x4c>
    2b94:	fc 01       	movw	r30, r24
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	86 17       	cp	r24, r22
    2b9c:	58 f4       	brcc	.+22     	; 0x2bb4 <twi_transmit+0x3a>
    2b9e:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <twi_txBufferLength>
    2ba2:	21 91       	ld	r18, Z+
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	ac 5a       	subi	r26, 0xAC	; 172
    2ba8:	bb 4f       	sbci	r27, 0xFB	; 251
    2baa:	a3 0f       	add	r26, r19
    2bac:	b1 1d       	adc	r27, r1
    2bae:	2c 93       	st	X, r18
    2bb0:	01 96       	adiw	r24, 0x01	; 1
    2bb2:	f3 cf       	rjmp	.-26     	; 0x2b9a <twi_transmit+0x20>
    2bb4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    2bb8:	68 0f       	add	r22, r24
    2bba:	60 93 52 04 	sts	0x0452, r22	; 0x800452 <twi_txBufferLength>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	08 95       	ret
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	08 95       	ret
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	08 95       	ret

00002bca <twi_attachSlaveRxEvent>:
    2bca:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <twi_onSlaveReceive+0x1>
    2bce:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <twi_onSlaveReceive>
    2bd2:	08 95       	ret

00002bd4 <twi_attachSlaveTxEvent>:
    2bd4:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <twi_onSlaveTransmit+0x1>
    2bd8:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_onSlaveTransmit>
    2bdc:	08 95       	ret

00002bde <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2bde:	85 ed       	ldi	r24, 0xD5	; 213
    2be0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2be4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2be8:	84 fd       	sbrc	r24, 4
    2bea:	fc cf       	rjmp	.-8      	; 0x2be4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2bec:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_state>
    2bf0:	08 95       	ret

00002bf2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2bf2:	85 ec       	ldi	r24, 0xC5	; 197
    2bf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2bf8:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_state>
    2bfc:	08 95       	ret

00002bfe <__vector_24>:
}

ISR(TWI_vect)
{
    2bfe:	1f 92       	push	r1
    2c00:	0f 92       	push	r0
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	0f 92       	push	r0
    2c06:	11 24       	eor	r1, r1
    2c08:	2f 93       	push	r18
    2c0a:	3f 93       	push	r19
    2c0c:	4f 93       	push	r20
    2c0e:	5f 93       	push	r21
    2c10:	6f 93       	push	r22
    2c12:	7f 93       	push	r23
    2c14:	8f 93       	push	r24
    2c16:	9f 93       	push	r25
    2c18:	af 93       	push	r26
    2c1a:	bf 93       	push	r27
    2c1c:	ef 93       	push	r30
    2c1e:	ff 93       	push	r31
  switch(TW_STATUS){
    2c20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2c24:	88 7f       	andi	r24, 0xF8	; 248
    2c26:	80 36       	cpi	r24, 0x60	; 96
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <__vector_24+0x2e>
    2c2a:	9e c0       	rjmp	.+316    	; 0x2d68 <__vector_24+0x16a>
    2c2c:	78 f5       	brcc	.+94     	; 0x2c8c <__vector_24+0x8e>
    2c2e:	88 32       	cpi	r24, 0x28	; 40
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <__vector_24+0x36>
    2c32:	5d c0       	rjmp	.+186    	; 0x2cee <__vector_24+0xf0>
    2c34:	90 f4       	brcc	.+36     	; 0x2c5a <__vector_24+0x5c>
    2c36:	80 31       	cpi	r24, 0x10	; 16
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <__vector_24+0x3e>
    2c3a:	56 c0       	rjmp	.+172    	; 0x2ce8 <__vector_24+0xea>
    2c3c:	38 f4       	brcc	.+14     	; 0x2c4c <__vector_24+0x4e>
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <__vector_24+0x46>
    2c42:	f5 c0       	rjmp	.+490    	; 0x2e2e <__vector_24+0x230>
    2c44:	88 30       	cpi	r24, 0x08	; 8
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <__vector_24+0x4c>
    2c48:	4f c0       	rjmp	.+158    	; 0x2ce8 <__vector_24+0xea>
    2c4a:	f5 c0       	rjmp	.+490    	; 0x2e36 <__vector_24+0x238>
    2c4c:	88 31       	cpi	r24, 0x18	; 24
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <__vector_24+0x54>
    2c50:	4e c0       	rjmp	.+156    	; 0x2cee <__vector_24+0xf0>
    2c52:	80 32       	cpi	r24, 0x20	; 32
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <__vector_24+0x5a>
    2c56:	5f c0       	rjmp	.+190    	; 0x2d16 <__vector_24+0x118>
    2c58:	ee c0       	rjmp	.+476    	; 0x2e36 <__vector_24+0x238>
    2c5a:	80 34       	cpi	r24, 0x40	; 64
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <__vector_24+0x62>
    2c5e:	6a c0       	rjmp	.+212    	; 0x2d34 <__vector_24+0x136>
    2c60:	58 f4       	brcc	.+22     	; 0x2c78 <__vector_24+0x7a>
    2c62:	80 33       	cpi	r24, 0x30	; 48
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <__vector_24+0x6a>
    2c66:	57 c0       	rjmp	.+174    	; 0x2d16 <__vector_24+0x118>
    2c68:	88 33       	cpi	r24, 0x38	; 56
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <__vector_24+0x70>
    2c6c:	e4 c0       	rjmp	.+456    	; 0x2e36 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2c6e:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
      twi_releaseBus();
    2c72:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <twi_releaseBus>
      break;
    2c76:	df c0       	rjmp	.+446    	; 0x2e36 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c78:	80 35       	cpi	r24, 0x50	; 80
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <__vector_24+0x80>
    2c7c:	4f c0       	rjmp	.+158    	; 0x2d1c <__vector_24+0x11e>
    2c7e:	88 35       	cpi	r24, 0x58	; 88
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <__vector_24+0x86>
    2c82:	5d c0       	rjmp	.+186    	; 0x2d3e <__vector_24+0x140>
    2c84:	88 34       	cpi	r24, 0x48	; 72
    2c86:	09 f0       	breq	.+2      	; 0x2c8a <__vector_24+0x8c>
    2c88:	d6 c0       	rjmp	.+428    	; 0x2e36 <__vector_24+0x238>
    2c8a:	d3 c0       	rjmp	.+422    	; 0x2e32 <__vector_24+0x234>
    2c8c:	88 39       	cpi	r24, 0x98	; 152
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <__vector_24+0x94>
    2c90:	c4 c0       	rjmp	.+392    	; 0x2e1a <__vector_24+0x21c>
    2c92:	a8 f4       	brcc	.+42     	; 0x2cbe <__vector_24+0xc0>
    2c94:	88 37       	cpi	r24, 0x78	; 120
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <__vector_24+0x9c>
    2c98:	67 c0       	rjmp	.+206    	; 0x2d68 <__vector_24+0x16a>
    2c9a:	38 f4       	brcc	.+14     	; 0x2caa <__vector_24+0xac>
    2c9c:	88 36       	cpi	r24, 0x68	; 104
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <__vector_24+0xa4>
    2ca0:	63 c0       	rjmp	.+198    	; 0x2d68 <__vector_24+0x16a>
    2ca2:	80 37       	cpi	r24, 0x70	; 112
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <__vector_24+0xaa>
    2ca6:	60 c0       	rjmp	.+192    	; 0x2d68 <__vector_24+0x16a>
    2ca8:	c6 c0       	rjmp	.+396    	; 0x2e36 <__vector_24+0x238>
    2caa:	88 38       	cpi	r24, 0x88	; 136
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <__vector_24+0xb2>
    2cae:	b5 c0       	rjmp	.+362    	; 0x2e1a <__vector_24+0x21c>
    2cb0:	80 39       	cpi	r24, 0x90	; 144
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <__vector_24+0xb8>
    2cb4:	5f c0       	rjmp	.+190    	; 0x2d74 <__vector_24+0x176>
    2cb6:	80 38       	cpi	r24, 0x80	; 128
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <__vector_24+0xbe>
    2cba:	bd c0       	rjmp	.+378    	; 0x2e36 <__vector_24+0x238>
    2cbc:	5b c0       	rjmp	.+182    	; 0x2d74 <__vector_24+0x176>
    2cbe:	80 3b       	cpi	r24, 0xB0	; 176
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <__vector_24+0xc6>
    2cc2:	83 c0       	rjmp	.+262    	; 0x2dca <__vector_24+0x1cc>
    2cc4:	38 f4       	brcc	.+14     	; 0x2cd4 <__vector_24+0xd6>
    2cc6:	80 3a       	cpi	r24, 0xA0	; 160
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <__vector_24+0xce>
    2cca:	66 c0       	rjmp	.+204    	; 0x2d98 <__vector_24+0x19a>
    2ccc:	88 3a       	cpi	r24, 0xA8	; 168
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <__vector_24+0xd4>
    2cd0:	7c c0       	rjmp	.+248    	; 0x2dca <__vector_24+0x1cc>
    2cd2:	b1 c0       	rjmp	.+354    	; 0x2e36 <__vector_24+0x238>
    2cd4:	80 3c       	cpi	r24, 0xC0	; 192
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <__vector_24+0xdc>
    2cd8:	a4 c0       	rjmp	.+328    	; 0x2e22 <__vector_24+0x224>
    2cda:	88 3c       	cpi	r24, 0xC8	; 200
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__vector_24+0xe2>
    2cde:	a1 c0       	rjmp	.+322    	; 0x2e22 <__vector_24+0x224>
    2ce0:	88 3b       	cpi	r24, 0xB8	; 184
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <__vector_24+0xe8>
    2ce4:	87 c0       	rjmp	.+270    	; 0x2df4 <__vector_24+0x1f6>
    2ce6:	a7 c0       	rjmp	.+334    	; 0x2e36 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ce8:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_slarw>
    2cec:	10 c0       	rjmp	.+32     	; 0x2d0e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2cee:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2cf2:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_masterBufferLength>
    2cf6:	98 17       	cp	r25, r24
    2cf8:	70 f5       	brcc	.+92     	; 0x2d56 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2cfa:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	8e 0f       	add	r24, r30
    2d02:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	ea 58       	subi	r30, 0x8A	; 138
    2d0a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d12:	85 ec       	ldi	r24, 0xC5	; 197
    2d14:	83 c0       	rjmp	.+262    	; 0x2e1c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2d16:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
    2d1a:	8b c0       	rjmp	.+278    	; 0x2e32 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d1c:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	8e 0f       	add	r24, r30
    2d24:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    2d28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	ea 58       	subi	r30, 0x8A	; 138
    2d30:	fb 4f       	sbci	r31, 0xFB	; 251
    2d32:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d34:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2d38:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_masterBufferLength>
    2d3c:	6b c0       	rjmp	.+214    	; 0x2e14 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d3e:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	8e 0f       	add	r24, r30
    2d46:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    2d4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	ea 58       	subi	r30, 0x8A	; 138
    2d52:	fb 4f       	sbci	r31, 0xFB	; 251
    2d54:	80 83       	st	Z, r24
	if (twi_sendStop)
    2d56:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <twi_sendStop>
    2d5a:	81 11       	cpse	r24, r1
    2d5c:	6a c0       	rjmp	.+212    	; 0x2e32 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2d64:	84 ea       	ldi	r24, 0xA4	; 164
    2d66:	5e c0       	rjmp	.+188    	; 0x2e24 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2d6e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <twi_rxBufferIndex>
    2d72:	cf cf       	rjmp	.-98     	; 0x2d12 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d74:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_rxBufferIndex>
    2d78:	80 32       	cpi	r24, 0x20	; 32
    2d7a:	08 f0       	brcs	.+2      	; 0x2d7e <__vector_24+0x180>
    2d7c:	4e c0       	rjmp	.+156    	; 0x2e1a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2d7e:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <twi_rxBufferIndex>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	8e 0f       	add	r24, r30
    2d86:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_rxBufferIndex>
    2d8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	ee 5c       	subi	r30, 0xCE	; 206
    2d92:	fb 4f       	sbci	r31, 0xFB	; 251
    2d94:	80 83       	st	Z, r24
    2d96:	bd cf       	rjmp	.-134    	; 0x2d12 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2d98:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d9c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_rxBufferIndex>
    2da0:	80 32       	cpi	r24, 0x20	; 32
    2da2:	30 f4       	brcc	.+12     	; 0x2db0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2da4:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <twi_rxBufferIndex>
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	ee 5c       	subi	r30, 0xCE	; 206
    2dac:	fb 4f       	sbci	r31, 0xFB	; 251
    2dae:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2db0:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <twi_rxBufferIndex>
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <twi_onSlaveReceive>
    2dba:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <twi_onSlaveReceive+0x1>
    2dbe:	82 e3       	ldi	r24, 0x32	; 50
    2dc0:	94 e0       	ldi	r25, 0x04	; 4
    2dc2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2dc4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <twi_rxBufferIndex>
      break;
    2dc8:	36 c0       	rjmp	.+108    	; 0x2e36 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2dca:	84 e0       	ldi	r24, 0x04	; 4
    2dcc:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2dd0:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2dd4:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2dd8:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <twi_onSlaveTransmit>
    2ddc:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <twi_onSlaveTransmit+0x1>
    2de0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2de2:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    2de6:	81 11       	cpse	r24, r1
    2de8:	05 c0       	rjmp	.+10     	; 0x2df4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2df0:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2df4:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <twi_txBufferIndex>
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	8e 0f       	add	r24, r30
    2dfc:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <twi_txBufferIndex>
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	ec 5a       	subi	r30, 0xAC	; 172
    2e04:	fb 4f       	sbci	r31, 0xFB	; 251
    2e06:	80 81       	ld	r24, Z
    2e08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2e0c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_txBufferIndex>
    2e10:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    2e14:	98 17       	cp	r25, r24
    2e16:	08 f4       	brcc	.+2      	; 0x2e1a <__vector_24+0x21c>
    2e18:	7c cf       	rjmp	.-264    	; 0x2d12 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e1a:	85 e8       	ldi	r24, 0x85	; 133
    2e1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e20:	0a c0       	rjmp	.+20     	; 0x2e36 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e22:	85 ec       	ldi	r24, 0xC5	; 197
    2e24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2e28:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_state>
      break;
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2e2e:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_error>
      twi_stop();
    2e32:	0e 94 ef 15 	call	0x2bde	; 0x2bde <twi_stop>
      break;
  }
}
    2e36:	ff 91       	pop	r31
    2e38:	ef 91       	pop	r30
    2e3a:	bf 91       	pop	r27
    2e3c:	af 91       	pop	r26
    2e3e:	9f 91       	pop	r25
    2e40:	8f 91       	pop	r24
    2e42:	7f 91       	pop	r23
    2e44:	6f 91       	pop	r22
    2e46:	5f 91       	pop	r21
    2e48:	4f 91       	pop	r20
    2e4a:	3f 91       	pop	r19
    2e4c:	2f 91       	pop	r18
    2e4e:	0f 90       	pop	r0
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	0f 90       	pop	r0
    2e54:	1f 90       	pop	r1
    2e56:	18 95       	reti

00002e58 <__divmodhi4>:
    2e58:	97 fb       	bst	r25, 7
    2e5a:	07 2e       	mov	r0, r23
    2e5c:	16 f4       	brtc	.+4      	; 0x2e62 <__divmodhi4+0xa>
    2e5e:	00 94       	com	r0
    2e60:	07 d0       	rcall	.+14     	; 0x2e70 <__divmodhi4_neg1>
    2e62:	77 fd       	sbrc	r23, 7
    2e64:	09 d0       	rcall	.+18     	; 0x2e78 <__divmodhi4_neg2>
    2e66:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__udivmodhi4>
    2e6a:	07 fc       	sbrc	r0, 7
    2e6c:	05 d0       	rcall	.+10     	; 0x2e78 <__divmodhi4_neg2>
    2e6e:	3e f4       	brtc	.+14     	; 0x2e7e <__divmodhi4_exit>

00002e70 <__divmodhi4_neg1>:
    2e70:	90 95       	com	r25
    2e72:	81 95       	neg	r24
    2e74:	9f 4f       	sbci	r25, 0xFF	; 255
    2e76:	08 95       	ret

00002e78 <__divmodhi4_neg2>:
    2e78:	70 95       	com	r23
    2e7a:	61 95       	neg	r22
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255

00002e7e <__divmodhi4_exit>:
    2e7e:	08 95       	ret

00002e80 <__udivmodsi4>:
    2e80:	a1 e2       	ldi	r26, 0x21	; 33
    2e82:	1a 2e       	mov	r1, r26
    2e84:	aa 1b       	sub	r26, r26
    2e86:	bb 1b       	sub	r27, r27
    2e88:	fd 01       	movw	r30, r26
    2e8a:	0d c0       	rjmp	.+26     	; 0x2ea6 <__udivmodsi4_ep>

00002e8c <__udivmodsi4_loop>:
    2e8c:	aa 1f       	adc	r26, r26
    2e8e:	bb 1f       	adc	r27, r27
    2e90:	ee 1f       	adc	r30, r30
    2e92:	ff 1f       	adc	r31, r31
    2e94:	a2 17       	cp	r26, r18
    2e96:	b3 07       	cpc	r27, r19
    2e98:	e4 07       	cpc	r30, r20
    2e9a:	f5 07       	cpc	r31, r21
    2e9c:	20 f0       	brcs	.+8      	; 0x2ea6 <__udivmodsi4_ep>
    2e9e:	a2 1b       	sub	r26, r18
    2ea0:	b3 0b       	sbc	r27, r19
    2ea2:	e4 0b       	sbc	r30, r20
    2ea4:	f5 0b       	sbc	r31, r21

00002ea6 <__udivmodsi4_ep>:
    2ea6:	66 1f       	adc	r22, r22
    2ea8:	77 1f       	adc	r23, r23
    2eaa:	88 1f       	adc	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	1a 94       	dec	r1
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <__udivmodsi4_loop>
    2eb2:	60 95       	com	r22
    2eb4:	70 95       	com	r23
    2eb6:	80 95       	com	r24
    2eb8:	90 95       	com	r25
    2eba:	9b 01       	movw	r18, r22
    2ebc:	ac 01       	movw	r20, r24
    2ebe:	bd 01       	movw	r22, r26
    2ec0:	cf 01       	movw	r24, r30
    2ec2:	08 95       	ret

00002ec4 <__udivmodhi4>:
    2ec4:	aa 1b       	sub	r26, r26
    2ec6:	bb 1b       	sub	r27, r27
    2ec8:	51 e1       	ldi	r21, 0x11	; 17
    2eca:	07 c0       	rjmp	.+14     	; 0x2eda <__udivmodhi4_ep>

00002ecc <__udivmodhi4_loop>:
    2ecc:	aa 1f       	adc	r26, r26
    2ece:	bb 1f       	adc	r27, r27
    2ed0:	a6 17       	cp	r26, r22
    2ed2:	b7 07       	cpc	r27, r23
    2ed4:	10 f0       	brcs	.+4      	; 0x2eda <__udivmodhi4_ep>
    2ed6:	a6 1b       	sub	r26, r22
    2ed8:	b7 0b       	sbc	r27, r23

00002eda <__udivmodhi4_ep>:
    2eda:	88 1f       	adc	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	5a 95       	dec	r21
    2ee0:	a9 f7       	brne	.-22     	; 0x2ecc <__udivmodhi4_loop>
    2ee2:	80 95       	com	r24
    2ee4:	90 95       	com	r25
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	08 95       	ret

00002eec <__tablejump2__>:
    2eec:	ee 0f       	add	r30, r30
    2eee:	ff 1f       	adc	r31, r31
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	f4 91       	lpm	r31, Z
    2ef4:	e0 2d       	mov	r30, r0
    2ef6:	09 94       	ijmp

00002ef8 <dtostrf>:
    2ef8:	ef 92       	push	r14
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	e8 01       	movw	r28, r16
    2f04:	47 fd       	sbrc	r20, 7
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <dtostrf+0x14>
    2f08:	34 e0       	ldi	r19, 0x04	; 4
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <dtostrf+0x16>
    2f0c:	34 e1       	ldi	r19, 0x14	; 20
    2f0e:	04 2e       	mov	r0, r20
    2f10:	00 0c       	add	r0, r0
    2f12:	55 0b       	sbc	r21, r21
    2f14:	57 ff       	sbrs	r21, 7
    2f16:	03 c0       	rjmp	.+6      	; 0x2f1e <dtostrf+0x26>
    2f18:	51 95       	neg	r21
    2f1a:	41 95       	neg	r20
    2f1c:	51 09       	sbc	r21, r1
    2f1e:	e3 2e       	mov	r14, r19
    2f20:	02 2f       	mov	r16, r18
    2f22:	24 2f       	mov	r18, r20
    2f24:	ae 01       	movw	r20, r28
    2f26:	0e 94 c6 1b 	call	0x378c	; 0x378c <dtoa_prf>
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ef 90       	pop	r14
    2f36:	08 95       	ret

00002f38 <malloc>:
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	82 30       	cpi	r24, 0x02	; 2
    2f42:	91 05       	cpc	r25, r1
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <malloc+0x12>
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <__flp>
    2f4e:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <__flp+0x1>
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	30 97       	sbiw	r30, 0x00	; 0
    2f5c:	19 f1       	breq	.+70     	; 0x2fa4 <malloc+0x6c>
    2f5e:	40 81       	ld	r20, Z
    2f60:	51 81       	ldd	r21, Z+1	; 0x01
    2f62:	02 81       	ldd	r16, Z+2	; 0x02
    2f64:	13 81       	ldd	r17, Z+3	; 0x03
    2f66:	48 17       	cp	r20, r24
    2f68:	59 07       	cpc	r21, r25
    2f6a:	c8 f0       	brcs	.+50     	; 0x2f9e <malloc+0x66>
    2f6c:	84 17       	cp	r24, r20
    2f6e:	95 07       	cpc	r25, r21
    2f70:	69 f4       	brne	.+26     	; 0x2f8c <malloc+0x54>
    2f72:	10 97       	sbiw	r26, 0x00	; 0
    2f74:	31 f0       	breq	.+12     	; 0x2f82 <malloc+0x4a>
    2f76:	12 96       	adiw	r26, 0x02	; 2
    2f78:	0c 93       	st	X, r16
    2f7a:	12 97       	sbiw	r26, 0x02	; 2
    2f7c:	13 96       	adiw	r26, 0x03	; 3
    2f7e:	1c 93       	st	X, r17
    2f80:	27 c0       	rjmp	.+78     	; 0x2fd0 <malloc+0x98>
    2f82:	00 93 a0 04 	sts	0x04A0, r16	; 0x8004a0 <__flp>
    2f86:	10 93 a1 04 	sts	0x04A1, r17	; 0x8004a1 <__flp+0x1>
    2f8a:	22 c0       	rjmp	.+68     	; 0x2fd0 <malloc+0x98>
    2f8c:	21 15       	cp	r18, r1
    2f8e:	31 05       	cpc	r19, r1
    2f90:	19 f0       	breq	.+6      	; 0x2f98 <malloc+0x60>
    2f92:	42 17       	cp	r20, r18
    2f94:	53 07       	cpc	r21, r19
    2f96:	18 f4       	brcc	.+6      	; 0x2f9e <malloc+0x66>
    2f98:	9a 01       	movw	r18, r20
    2f9a:	bd 01       	movw	r22, r26
    2f9c:	ef 01       	movw	r28, r30
    2f9e:	df 01       	movw	r26, r30
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	db cf       	rjmp	.-74     	; 0x2f5a <malloc+0x22>
    2fa4:	21 15       	cp	r18, r1
    2fa6:	31 05       	cpc	r19, r1
    2fa8:	f9 f0       	breq	.+62     	; 0x2fe8 <malloc+0xb0>
    2faa:	28 1b       	sub	r18, r24
    2fac:	39 0b       	sbc	r19, r25
    2fae:	24 30       	cpi	r18, 0x04	; 4
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	80 f4       	brcc	.+32     	; 0x2fd4 <malloc+0x9c>
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb8:	61 15       	cp	r22, r1
    2fba:	71 05       	cpc	r23, r1
    2fbc:	21 f0       	breq	.+8      	; 0x2fc6 <malloc+0x8e>
    2fbe:	fb 01       	movw	r30, r22
    2fc0:	93 83       	std	Z+3, r25	; 0x03
    2fc2:	82 83       	std	Z+2, r24	; 0x02
    2fc4:	04 c0       	rjmp	.+8      	; 0x2fce <malloc+0x96>
    2fc6:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__flp+0x1>
    2fca:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__flp>
    2fce:	fe 01       	movw	r30, r28
    2fd0:	32 96       	adiw	r30, 0x02	; 2
    2fd2:	44 c0       	rjmp	.+136    	; 0x305c <malloc+0x124>
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	81 93       	st	Z+, r24
    2fdc:	91 93       	st	Z+, r25
    2fde:	22 50       	subi	r18, 0x02	; 2
    2fe0:	31 09       	sbc	r19, r1
    2fe2:	39 83       	std	Y+1, r19	; 0x01
    2fe4:	28 83       	st	Y, r18
    2fe6:	3a c0       	rjmp	.+116    	; 0x305c <malloc+0x124>
    2fe8:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    2fec:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    2ff0:	23 2b       	or	r18, r19
    2ff2:	41 f4       	brne	.+16     	; 0x3004 <malloc+0xcc>
    2ff4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2ff8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2ffc:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <__brkval+0x1>
    3000:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <__brkval>
    3004:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3008:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    300c:	21 15       	cp	r18, r1
    300e:	31 05       	cpc	r19, r1
    3010:	41 f4       	brne	.+16     	; 0x3022 <malloc+0xea>
    3012:	2d b7       	in	r18, 0x3d	; 61
    3014:	3e b7       	in	r19, 0x3e	; 62
    3016:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    301a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    301e:	24 1b       	sub	r18, r20
    3020:	35 0b       	sbc	r19, r21
    3022:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__brkval>
    3026:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__brkval+0x1>
    302a:	e2 17       	cp	r30, r18
    302c:	f3 07       	cpc	r31, r19
    302e:	a0 f4       	brcc	.+40     	; 0x3058 <malloc+0x120>
    3030:	2e 1b       	sub	r18, r30
    3032:	3f 0b       	sbc	r19, r31
    3034:	28 17       	cp	r18, r24
    3036:	39 07       	cpc	r19, r25
    3038:	78 f0       	brcs	.+30     	; 0x3058 <malloc+0x120>
    303a:	ac 01       	movw	r20, r24
    303c:	4e 5f       	subi	r20, 0xFE	; 254
    303e:	5f 4f       	sbci	r21, 0xFF	; 255
    3040:	24 17       	cp	r18, r20
    3042:	35 07       	cpc	r19, r21
    3044:	48 f0       	brcs	.+18     	; 0x3058 <malloc+0x120>
    3046:	4e 0f       	add	r20, r30
    3048:	5f 1f       	adc	r21, r31
    304a:	50 93 9f 04 	sts	0x049F, r21	; 0x80049f <__brkval+0x1>
    304e:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <__brkval>
    3052:	81 93       	st	Z+, r24
    3054:	91 93       	st	Z+, r25
    3056:	02 c0       	rjmp	.+4      	; 0x305c <malloc+0x124>
    3058:	e0 e0       	ldi	r30, 0x00	; 0
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	cf 01       	movw	r24, r30
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret

00003068 <free>:
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	09 f4       	brne	.+2      	; 0x3072 <free+0xa>
    3070:	81 c0       	rjmp	.+258    	; 0x3174 <free+0x10c>
    3072:	fc 01       	movw	r30, r24
    3074:	32 97       	sbiw	r30, 0x02	; 2
    3076:	13 82       	std	Z+3, r1	; 0x03
    3078:	12 82       	std	Z+2, r1	; 0x02
    307a:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    307e:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    3082:	10 97       	sbiw	r26, 0x00	; 0
    3084:	81 f4       	brne	.+32     	; 0x30a6 <free+0x3e>
    3086:	20 81       	ld	r18, Z
    3088:	31 81       	ldd	r19, Z+1	; 0x01
    308a:	82 0f       	add	r24, r18
    308c:	93 1f       	adc	r25, r19
    308e:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    3092:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    3096:	28 17       	cp	r18, r24
    3098:	39 07       	cpc	r19, r25
    309a:	51 f5       	brne	.+84     	; 0x30f0 <free+0x88>
    309c:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    30a0:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    30a4:	67 c0       	rjmp	.+206    	; 0x3174 <free+0x10c>
    30a6:	ed 01       	movw	r28, r26
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	ce 17       	cp	r28, r30
    30ae:	df 07       	cpc	r29, r31
    30b0:	40 f4       	brcc	.+16     	; 0x30c2 <free+0x5a>
    30b2:	4a 81       	ldd	r20, Y+2	; 0x02
    30b4:	5b 81       	ldd	r21, Y+3	; 0x03
    30b6:	9e 01       	movw	r18, r28
    30b8:	41 15       	cp	r20, r1
    30ba:	51 05       	cpc	r21, r1
    30bc:	f1 f0       	breq	.+60     	; 0x30fa <free+0x92>
    30be:	ea 01       	movw	r28, r20
    30c0:	f5 cf       	rjmp	.-22     	; 0x30ac <free+0x44>
    30c2:	d3 83       	std	Z+3, r29	; 0x03
    30c4:	c2 83       	std	Z+2, r28	; 0x02
    30c6:	40 81       	ld	r20, Z
    30c8:	51 81       	ldd	r21, Z+1	; 0x01
    30ca:	84 0f       	add	r24, r20
    30cc:	95 1f       	adc	r25, r21
    30ce:	c8 17       	cp	r28, r24
    30d0:	d9 07       	cpc	r29, r25
    30d2:	59 f4       	brne	.+22     	; 0x30ea <free+0x82>
    30d4:	88 81       	ld	r24, Y
    30d6:	99 81       	ldd	r25, Y+1	; 0x01
    30d8:	84 0f       	add	r24, r20
    30da:	95 1f       	adc	r25, r21
    30dc:	02 96       	adiw	r24, 0x02	; 2
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	93 83       	std	Z+3, r25	; 0x03
    30e8:	82 83       	std	Z+2, r24	; 0x02
    30ea:	21 15       	cp	r18, r1
    30ec:	31 05       	cpc	r19, r1
    30ee:	29 f4       	brne	.+10     	; 0x30fa <free+0x92>
    30f0:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    30f4:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    30f8:	3d c0       	rjmp	.+122    	; 0x3174 <free+0x10c>
    30fa:	e9 01       	movw	r28, r18
    30fc:	fb 83       	std	Y+3, r31	; 0x03
    30fe:	ea 83       	std	Y+2, r30	; 0x02
    3100:	49 91       	ld	r20, Y+
    3102:	59 91       	ld	r21, Y+
    3104:	c4 0f       	add	r28, r20
    3106:	d5 1f       	adc	r29, r21
    3108:	ec 17       	cp	r30, r28
    310a:	fd 07       	cpc	r31, r29
    310c:	61 f4       	brne	.+24     	; 0x3126 <free+0xbe>
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	84 0f       	add	r24, r20
    3114:	95 1f       	adc	r25, r21
    3116:	02 96       	adiw	r24, 0x02	; 2
    3118:	e9 01       	movw	r28, r18
    311a:	99 83       	std	Y+1, r25	; 0x01
    311c:	88 83       	st	Y, r24
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	9b 83       	std	Y+3, r25	; 0x03
    3124:	8a 83       	std	Y+2, r24	; 0x02
    3126:	e0 e0       	ldi	r30, 0x00	; 0
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	12 96       	adiw	r26, 0x02	; 2
    312c:	8d 91       	ld	r24, X+
    312e:	9c 91       	ld	r25, X
    3130:	13 97       	sbiw	r26, 0x03	; 3
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	19 f0       	breq	.+6      	; 0x313c <free+0xd4>
    3136:	fd 01       	movw	r30, r26
    3138:	dc 01       	movw	r26, r24
    313a:	f7 cf       	rjmp	.-18     	; 0x312a <free+0xc2>
    313c:	8d 91       	ld	r24, X+
    313e:	9c 91       	ld	r25, X
    3140:	11 97       	sbiw	r26, 0x01	; 1
    3142:	9d 01       	movw	r18, r26
    3144:	2e 5f       	subi	r18, 0xFE	; 254
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	82 0f       	add	r24, r18
    314a:	93 1f       	adc	r25, r19
    314c:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <__brkval>
    3150:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <__brkval+0x1>
    3154:	28 17       	cp	r18, r24
    3156:	39 07       	cpc	r19, r25
    3158:	69 f4       	brne	.+26     	; 0x3174 <free+0x10c>
    315a:	30 97       	sbiw	r30, 0x00	; 0
    315c:	29 f4       	brne	.+10     	; 0x3168 <free+0x100>
    315e:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__flp+0x1>
    3162:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__flp>
    3166:	02 c0       	rjmp	.+4      	; 0x316c <free+0x104>
    3168:	13 82       	std	Z+3, r1	; 0x03
    316a:	12 82       	std	Z+2, r1	; 0x02
    316c:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <__brkval+0x1>
    3170:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <__brkval>
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	08 95       	ret

0000317a <realloc>:
    317a:	a0 e0       	ldi	r26, 0x00	; 0
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e3 ec       	ldi	r30, 0xC3	; 195
    3180:	f8 e1       	ldi	r31, 0x18	; 24
    3182:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <__prologue_saves__+0x8>
    3186:	ec 01       	movw	r28, r24
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	21 f4       	brne	.+8      	; 0x3194 <realloc+0x1a>
    318c:	cb 01       	movw	r24, r22
    318e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <malloc>
    3192:	b4 c0       	rjmp	.+360    	; 0x32fc <realloc+0x182>
    3194:	fc 01       	movw	r30, r24
    3196:	e6 0f       	add	r30, r22
    3198:	f7 1f       	adc	r31, r23
    319a:	9c 01       	movw	r18, r24
    319c:	22 50       	subi	r18, 0x02	; 2
    319e:	31 09       	sbc	r19, r1
    31a0:	e2 17       	cp	r30, r18
    31a2:	f3 07       	cpc	r31, r19
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <realloc+0x2e>
    31a6:	a8 c0       	rjmp	.+336    	; 0x32f8 <realloc+0x17e>
    31a8:	d9 01       	movw	r26, r18
    31aa:	0d 91       	ld	r16, X+
    31ac:	1c 91       	ld	r17, X
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	06 17       	cp	r16, r22
    31b2:	17 07       	cpc	r17, r23
    31b4:	b0 f0       	brcs	.+44     	; 0x31e2 <realloc+0x68>
    31b6:	05 30       	cpi	r16, 0x05	; 5
    31b8:	11 05       	cpc	r17, r1
    31ba:	08 f4       	brcc	.+2      	; 0x31be <realloc+0x44>
    31bc:	9b c0       	rjmp	.+310    	; 0x32f4 <realloc+0x17a>
    31be:	c8 01       	movw	r24, r16
    31c0:	04 97       	sbiw	r24, 0x04	; 4
    31c2:	86 17       	cp	r24, r22
    31c4:	97 07       	cpc	r25, r23
    31c6:	08 f4       	brcc	.+2      	; 0x31ca <realloc+0x50>
    31c8:	95 c0       	rjmp	.+298    	; 0x32f4 <realloc+0x17a>
    31ca:	02 50       	subi	r16, 0x02	; 2
    31cc:	11 09       	sbc	r17, r1
    31ce:	06 1b       	sub	r16, r22
    31d0:	17 0b       	sbc	r17, r23
    31d2:	01 93       	st	Z+, r16
    31d4:	11 93       	st	Z+, r17
    31d6:	6d 93       	st	X+, r22
    31d8:	7c 93       	st	X, r23
    31da:	cf 01       	movw	r24, r30
    31dc:	0e 94 34 18 	call	0x3068	; 0x3068 <free>
    31e0:	89 c0       	rjmp	.+274    	; 0x32f4 <realloc+0x17a>
    31e2:	5b 01       	movw	r10, r22
    31e4:	a0 1a       	sub	r10, r16
    31e6:	b1 0a       	sbc	r11, r17
    31e8:	4c 01       	movw	r8, r24
    31ea:	80 0e       	add	r8, r16
    31ec:	91 1e       	adc	r9, r17
    31ee:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <__flp>
    31f2:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <__flp+0x1>
    31f6:	61 2c       	mov	r6, r1
    31f8:	71 2c       	mov	r7, r1
    31fa:	e1 2c       	mov	r14, r1
    31fc:	f1 2c       	mov	r15, r1
    31fe:	10 97       	sbiw	r26, 0x00	; 0
    3200:	09 f4       	brne	.+2      	; 0x3204 <realloc+0x8a>
    3202:	46 c0       	rjmp	.+140    	; 0x3290 <realloc+0x116>
    3204:	8d 91       	ld	r24, X+
    3206:	9c 91       	ld	r25, X
    3208:	11 97       	sbiw	r26, 0x01	; 1
    320a:	a8 15       	cp	r26, r8
    320c:	b9 05       	cpc	r27, r9
    320e:	b1 f5       	brne	.+108    	; 0x327c <realloc+0x102>
    3210:	6c 01       	movw	r12, r24
    3212:	42 e0       	ldi	r20, 0x02	; 2
    3214:	c4 0e       	add	r12, r20
    3216:	d1 1c       	adc	r13, r1
    3218:	ca 14       	cp	r12, r10
    321a:	db 04       	cpc	r13, r11
    321c:	78 f1       	brcs	.+94     	; 0x327c <realloc+0x102>
    321e:	4c 01       	movw	r8, r24
    3220:	8a 18       	sub	r8, r10
    3222:	9b 08       	sbc	r9, r11
    3224:	64 01       	movw	r12, r8
    3226:	42 e0       	ldi	r20, 0x02	; 2
    3228:	c4 0e       	add	r12, r20
    322a:	d1 1c       	adc	r13, r1
    322c:	12 96       	adiw	r26, 0x02	; 2
    322e:	bc 90       	ld	r11, X
    3230:	12 97       	sbiw	r26, 0x02	; 2
    3232:	13 96       	adiw	r26, 0x03	; 3
    3234:	ac 91       	ld	r26, X
    3236:	b5 e0       	ldi	r27, 0x05	; 5
    3238:	cb 16       	cp	r12, r27
    323a:	d1 04       	cpc	r13, r1
    323c:	40 f0       	brcs	.+16     	; 0x324e <realloc+0xd4>
    323e:	b2 82       	std	Z+2, r11	; 0x02
    3240:	a3 83       	std	Z+3, r26	; 0x03
    3242:	91 82       	std	Z+1, r9	; 0x01
    3244:	80 82       	st	Z, r8
    3246:	d9 01       	movw	r26, r18
    3248:	6d 93       	st	X+, r22
    324a:	7c 93       	st	X, r23
    324c:	09 c0       	rjmp	.+18     	; 0x3260 <realloc+0xe6>
    324e:	0e 5f       	subi	r16, 0xFE	; 254
    3250:	1f 4f       	sbci	r17, 0xFF	; 255
    3252:	80 0f       	add	r24, r16
    3254:	91 1f       	adc	r25, r17
    3256:	f9 01       	movw	r30, r18
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	eb 2d       	mov	r30, r11
    325e:	fa 2f       	mov	r31, r26
    3260:	e1 14       	cp	r14, r1
    3262:	f1 04       	cpc	r15, r1
    3264:	31 f0       	breq	.+12     	; 0x3272 <realloc+0xf8>
    3266:	d7 01       	movw	r26, r14
    3268:	13 96       	adiw	r26, 0x03	; 3
    326a:	fc 93       	st	X, r31
    326c:	ee 93       	st	-X, r30
    326e:	12 97       	sbiw	r26, 0x02	; 2
    3270:	41 c0       	rjmp	.+130    	; 0x32f4 <realloc+0x17a>
    3272:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <__flp+0x1>
    3276:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <__flp>
    327a:	3c c0       	rjmp	.+120    	; 0x32f4 <realloc+0x17a>
    327c:	68 16       	cp	r6, r24
    327e:	79 06       	cpc	r7, r25
    3280:	08 f4       	brcc	.+2      	; 0x3284 <realloc+0x10a>
    3282:	3c 01       	movw	r6, r24
    3284:	7d 01       	movw	r14, r26
    3286:	12 96       	adiw	r26, 0x02	; 2
    3288:	0d 90       	ld	r0, X+
    328a:	bc 91       	ld	r27, X
    328c:	a0 2d       	mov	r26, r0
    328e:	b7 cf       	rjmp	.-146    	; 0x31fe <realloc+0x84>
    3290:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <__brkval>
    3294:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <__brkval+0x1>
    3298:	88 16       	cp	r8, r24
    329a:	99 06       	cpc	r9, r25
    329c:	e1 f4       	brne	.+56     	; 0x32d6 <realloc+0x15c>
    329e:	66 16       	cp	r6, r22
    32a0:	77 06       	cpc	r7, r23
    32a2:	c8 f4       	brcc	.+50     	; 0x32d6 <realloc+0x15c>
    32a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    32a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <realloc+0x146>
    32b0:	8d b7       	in	r24, 0x3d	; 61
    32b2:	9e b7       	in	r25, 0x3e	; 62
    32b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    32b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    32bc:	84 1b       	sub	r24, r20
    32be:	95 0b       	sbc	r25, r21
    32c0:	e8 17       	cp	r30, r24
    32c2:	f9 07       	cpc	r31, r25
    32c4:	c8 f4       	brcc	.+50     	; 0x32f8 <realloc+0x17e>
    32c6:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__brkval+0x1>
    32ca:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__brkval>
    32ce:	f9 01       	movw	r30, r18
    32d0:	71 83       	std	Z+1, r23	; 0x01
    32d2:	60 83       	st	Z, r22
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <realloc+0x17a>
    32d6:	cb 01       	movw	r24, r22
    32d8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <malloc>
    32dc:	7c 01       	movw	r14, r24
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	59 f0       	breq	.+22     	; 0x32f8 <realloc+0x17e>
    32e2:	a8 01       	movw	r20, r16
    32e4:	be 01       	movw	r22, r28
    32e6:	0e 94 83 19 	call	0x3306	; 0x3306 <memcpy>
    32ea:	ce 01       	movw	r24, r28
    32ec:	0e 94 34 18 	call	0x3068	; 0x3068 <free>
    32f0:	c7 01       	movw	r24, r14
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <realloc+0x182>
    32f4:	ce 01       	movw	r24, r28
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <realloc+0x182>
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	ee e0       	ldi	r30, 0x0E	; 14
    3302:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__epilogue_restores__+0x8>

00003306 <memcpy>:
    3306:	fb 01       	movw	r30, r22
    3308:	dc 01       	movw	r26, r24
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <memcpy+0xa>
    330c:	01 90       	ld	r0, Z+
    330e:	0d 92       	st	X+, r0
    3310:	41 50       	subi	r20, 0x01	; 1
    3312:	50 40       	sbci	r21, 0x00	; 0
    3314:	d8 f7       	brcc	.-10     	; 0x330c <memcpy+0x6>
    3316:	08 95       	ret

00003318 <strcpy>:
    3318:	fb 01       	movw	r30, r22
    331a:	dc 01       	movw	r26, r24
    331c:	01 90       	ld	r0, Z+
    331e:	0d 92       	st	X+, r0
    3320:	00 20       	and	r0, r0
    3322:	e1 f7       	brne	.-8      	; 0x331c <strcpy+0x4>
    3324:	08 95       	ret

00003326 <itoa>:
    3326:	45 32       	cpi	r20, 0x25	; 37
    3328:	51 05       	cpc	r21, r1
    332a:	20 f4       	brcc	.+8      	; 0x3334 <itoa+0xe>
    332c:	42 30       	cpi	r20, 0x02	; 2
    332e:	10 f0       	brcs	.+4      	; 0x3334 <itoa+0xe>
    3330:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__itoa_ncheck>
    3334:	fb 01       	movw	r30, r22
    3336:	10 82       	st	Z, r1
    3338:	cb 01       	movw	r24, r22
    333a:	08 95       	ret

0000333c <__itoa_ncheck>:
    333c:	bb 27       	eor	r27, r27
    333e:	4a 30       	cpi	r20, 0x0A	; 10
    3340:	31 f4       	brne	.+12     	; 0x334e <__itoa_ncheck+0x12>
    3342:	99 23       	and	r25, r25
    3344:	22 f4       	brpl	.+8      	; 0x334e <__itoa_ncheck+0x12>
    3346:	bd e2       	ldi	r27, 0x2D	; 45
    3348:	90 95       	com	r25
    334a:	81 95       	neg	r24
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__utoa_common>

00003352 <__utoa_ncheck>:
    3352:	bb 27       	eor	r27, r27

00003354 <__utoa_common>:
    3354:	fb 01       	movw	r30, r22
    3356:	55 27       	eor	r21, r21
    3358:	aa 27       	eor	r26, r26
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	aa 1f       	adc	r26, r26
    3360:	a4 17       	cp	r26, r20
    3362:	10 f0       	brcs	.+4      	; 0x3368 <__utoa_common+0x14>
    3364:	a4 1b       	sub	r26, r20
    3366:	83 95       	inc	r24
    3368:	50 51       	subi	r21, 0x10	; 16
    336a:	b9 f7       	brne	.-18     	; 0x335a <__utoa_common+0x6>
    336c:	a0 5d       	subi	r26, 0xD0	; 208
    336e:	aa 33       	cpi	r26, 0x3A	; 58
    3370:	08 f0       	brcs	.+2      	; 0x3374 <__utoa_common+0x20>
    3372:	a9 5d       	subi	r26, 0xD9	; 217
    3374:	a1 93       	st	Z+, r26
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	79 f7       	brne	.-34     	; 0x3358 <__utoa_common+0x4>
    337a:	b1 11       	cpse	r27, r1
    337c:	b1 93       	st	Z+, r27
    337e:	11 92       	st	Z+, r1
    3380:	cb 01       	movw	r24, r22
    3382:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <strrev>

00003386 <sprintf>:
    3386:	ae e0       	ldi	r26, 0x0E	; 14
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e9 ec       	ldi	r30, 0xC9	; 201
    338c:	f9 e1       	ldi	r31, 0x19	; 25
    338e:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x1c>
    3392:	0d 89       	ldd	r16, Y+21	; 0x15
    3394:	1e 89       	ldd	r17, Y+22	; 0x16
    3396:	86 e0       	ldi	r24, 0x06	; 6
    3398:	8c 83       	std	Y+4, r24	; 0x04
    339a:	1a 83       	std	Y+2, r17	; 0x02
    339c:	09 83       	std	Y+1, r16	; 0x01
    339e:	8f ef       	ldi	r24, 0xFF	; 255
    33a0:	9f e7       	ldi	r25, 0x7F	; 127
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	ae 01       	movw	r20, r28
    33a8:	47 5e       	subi	r20, 0xE7	; 231
    33aa:	5f 4f       	sbci	r21, 0xFF	; 255
    33ac:	6f 89       	ldd	r22, Y+23	; 0x17
    33ae:	78 8d       	ldd	r23, Y+24	; 0x18
    33b0:	ce 01       	movw	r24, r28
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vfprintf>
    33b8:	ef 81       	ldd	r30, Y+7	; 0x07
    33ba:	f8 85       	ldd	r31, Y+8	; 0x08
    33bc:	e0 0f       	add	r30, r16
    33be:	f1 1f       	adc	r31, r17
    33c0:	10 82       	st	Z, r1
    33c2:	2e 96       	adiw	r28, 0x0e	; 14
    33c4:	e4 e0       	ldi	r30, 0x04	; 4
    33c6:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x1c>

000033ca <vfprintf>:
    33ca:	ab e0       	ldi	r26, 0x0B	; 11
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	eb ee       	ldi	r30, 0xEB	; 235
    33d0:	f9 e1       	ldi	r31, 0x19	; 25
    33d2:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__prologue_saves__>
    33d6:	6c 01       	movw	r12, r24
    33d8:	7b 01       	movw	r14, r22
    33da:	8a 01       	movw	r16, r20
    33dc:	fc 01       	movw	r30, r24
    33de:	17 82       	std	Z+7, r1	; 0x07
    33e0:	16 82       	std	Z+6, r1	; 0x06
    33e2:	83 81       	ldd	r24, Z+3	; 0x03
    33e4:	81 ff       	sbrs	r24, 1
    33e6:	cc c1       	rjmp	.+920    	; 0x3780 <vfprintf+0x3b6>
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	3c 01       	movw	r6, r24
    33ee:	f6 01       	movw	r30, r12
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	f7 01       	movw	r30, r14
    33f4:	93 fd       	sbrc	r25, 3
    33f6:	85 91       	lpm	r24, Z+
    33f8:	93 ff       	sbrs	r25, 3
    33fa:	81 91       	ld	r24, Z+
    33fc:	7f 01       	movw	r14, r30
    33fe:	88 23       	and	r24, r24
    3400:	09 f4       	brne	.+2      	; 0x3404 <vfprintf+0x3a>
    3402:	ba c1       	rjmp	.+884    	; 0x3778 <vfprintf+0x3ae>
    3404:	85 32       	cpi	r24, 0x25	; 37
    3406:	39 f4       	brne	.+14     	; 0x3416 <vfprintf+0x4c>
    3408:	93 fd       	sbrc	r25, 3
    340a:	85 91       	lpm	r24, Z+
    340c:	93 ff       	sbrs	r25, 3
    340e:	81 91       	ld	r24, Z+
    3410:	7f 01       	movw	r14, r30
    3412:	85 32       	cpi	r24, 0x25	; 37
    3414:	29 f4       	brne	.+10     	; 0x3420 <vfprintf+0x56>
    3416:	b6 01       	movw	r22, r12
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    341e:	e7 cf       	rjmp	.-50     	; 0x33ee <vfprintf+0x24>
    3420:	91 2c       	mov	r9, r1
    3422:	21 2c       	mov	r2, r1
    3424:	31 2c       	mov	r3, r1
    3426:	ff e1       	ldi	r31, 0x1F	; 31
    3428:	f3 15       	cp	r31, r3
    342a:	d8 f0       	brcs	.+54     	; 0x3462 <vfprintf+0x98>
    342c:	8b 32       	cpi	r24, 0x2B	; 43
    342e:	79 f0       	breq	.+30     	; 0x344e <vfprintf+0x84>
    3430:	38 f4       	brcc	.+14     	; 0x3440 <vfprintf+0x76>
    3432:	80 32       	cpi	r24, 0x20	; 32
    3434:	79 f0       	breq	.+30     	; 0x3454 <vfprintf+0x8a>
    3436:	83 32       	cpi	r24, 0x23	; 35
    3438:	a1 f4       	brne	.+40     	; 0x3462 <vfprintf+0x98>
    343a:	23 2d       	mov	r18, r3
    343c:	20 61       	ori	r18, 0x10	; 16
    343e:	1d c0       	rjmp	.+58     	; 0x347a <vfprintf+0xb0>
    3440:	8d 32       	cpi	r24, 0x2D	; 45
    3442:	61 f0       	breq	.+24     	; 0x345c <vfprintf+0x92>
    3444:	80 33       	cpi	r24, 0x30	; 48
    3446:	69 f4       	brne	.+26     	; 0x3462 <vfprintf+0x98>
    3448:	23 2d       	mov	r18, r3
    344a:	21 60       	ori	r18, 0x01	; 1
    344c:	16 c0       	rjmp	.+44     	; 0x347a <vfprintf+0xb0>
    344e:	83 2d       	mov	r24, r3
    3450:	82 60       	ori	r24, 0x02	; 2
    3452:	38 2e       	mov	r3, r24
    3454:	e3 2d       	mov	r30, r3
    3456:	e4 60       	ori	r30, 0x04	; 4
    3458:	3e 2e       	mov	r3, r30
    345a:	2a c0       	rjmp	.+84     	; 0x34b0 <vfprintf+0xe6>
    345c:	f3 2d       	mov	r31, r3
    345e:	f8 60       	ori	r31, 0x08	; 8
    3460:	1d c0       	rjmp	.+58     	; 0x349c <vfprintf+0xd2>
    3462:	37 fc       	sbrc	r3, 7
    3464:	2d c0       	rjmp	.+90     	; 0x34c0 <vfprintf+0xf6>
    3466:	20 ed       	ldi	r18, 0xD0	; 208
    3468:	28 0f       	add	r18, r24
    346a:	2a 30       	cpi	r18, 0x0A	; 10
    346c:	40 f0       	brcs	.+16     	; 0x347e <vfprintf+0xb4>
    346e:	8e 32       	cpi	r24, 0x2E	; 46
    3470:	b9 f4       	brne	.+46     	; 0x34a0 <vfprintf+0xd6>
    3472:	36 fc       	sbrc	r3, 6
    3474:	81 c1       	rjmp	.+770    	; 0x3778 <vfprintf+0x3ae>
    3476:	23 2d       	mov	r18, r3
    3478:	20 64       	ori	r18, 0x40	; 64
    347a:	32 2e       	mov	r3, r18
    347c:	19 c0       	rjmp	.+50     	; 0x34b0 <vfprintf+0xe6>
    347e:	36 fe       	sbrs	r3, 6
    3480:	06 c0       	rjmp	.+12     	; 0x348e <vfprintf+0xc4>
    3482:	8a e0       	ldi	r24, 0x0A	; 10
    3484:	98 9e       	mul	r9, r24
    3486:	20 0d       	add	r18, r0
    3488:	11 24       	eor	r1, r1
    348a:	92 2e       	mov	r9, r18
    348c:	11 c0       	rjmp	.+34     	; 0x34b0 <vfprintf+0xe6>
    348e:	ea e0       	ldi	r30, 0x0A	; 10
    3490:	2e 9e       	mul	r2, r30
    3492:	20 0d       	add	r18, r0
    3494:	11 24       	eor	r1, r1
    3496:	22 2e       	mov	r2, r18
    3498:	f3 2d       	mov	r31, r3
    349a:	f0 62       	ori	r31, 0x20	; 32
    349c:	3f 2e       	mov	r3, r31
    349e:	08 c0       	rjmp	.+16     	; 0x34b0 <vfprintf+0xe6>
    34a0:	8c 36       	cpi	r24, 0x6C	; 108
    34a2:	21 f4       	brne	.+8      	; 0x34ac <vfprintf+0xe2>
    34a4:	83 2d       	mov	r24, r3
    34a6:	80 68       	ori	r24, 0x80	; 128
    34a8:	38 2e       	mov	r3, r24
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <vfprintf+0xe6>
    34ac:	88 36       	cpi	r24, 0x68	; 104
    34ae:	41 f4       	brne	.+16     	; 0x34c0 <vfprintf+0xf6>
    34b0:	f7 01       	movw	r30, r14
    34b2:	93 fd       	sbrc	r25, 3
    34b4:	85 91       	lpm	r24, Z+
    34b6:	93 ff       	sbrs	r25, 3
    34b8:	81 91       	ld	r24, Z+
    34ba:	7f 01       	movw	r14, r30
    34bc:	81 11       	cpse	r24, r1
    34be:	b3 cf       	rjmp	.-154    	; 0x3426 <vfprintf+0x5c>
    34c0:	98 2f       	mov	r25, r24
    34c2:	9f 7d       	andi	r25, 0xDF	; 223
    34c4:	95 54       	subi	r25, 0x45	; 69
    34c6:	93 30       	cpi	r25, 0x03	; 3
    34c8:	28 f4       	brcc	.+10     	; 0x34d4 <vfprintf+0x10a>
    34ca:	0c 5f       	subi	r16, 0xFC	; 252
    34cc:	1f 4f       	sbci	r17, 0xFF	; 255
    34ce:	9f e3       	ldi	r25, 0x3F	; 63
    34d0:	99 83       	std	Y+1, r25	; 0x01
    34d2:	0d c0       	rjmp	.+26     	; 0x34ee <vfprintf+0x124>
    34d4:	83 36       	cpi	r24, 0x63	; 99
    34d6:	31 f0       	breq	.+12     	; 0x34e4 <vfprintf+0x11a>
    34d8:	83 37       	cpi	r24, 0x73	; 115
    34da:	71 f0       	breq	.+28     	; 0x34f8 <vfprintf+0x12e>
    34dc:	83 35       	cpi	r24, 0x53	; 83
    34de:	09 f0       	breq	.+2      	; 0x34e2 <vfprintf+0x118>
    34e0:	59 c0       	rjmp	.+178    	; 0x3594 <vfprintf+0x1ca>
    34e2:	21 c0       	rjmp	.+66     	; 0x3526 <vfprintf+0x15c>
    34e4:	f8 01       	movw	r30, r16
    34e6:	80 81       	ld	r24, Z
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	0e 5f       	subi	r16, 0xFE	; 254
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	88 24       	eor	r8, r8
    34f0:	83 94       	inc	r8
    34f2:	91 2c       	mov	r9, r1
    34f4:	53 01       	movw	r10, r6
    34f6:	13 c0       	rjmp	.+38     	; 0x351e <vfprintf+0x154>
    34f8:	28 01       	movw	r4, r16
    34fa:	f2 e0       	ldi	r31, 0x02	; 2
    34fc:	4f 0e       	add	r4, r31
    34fe:	51 1c       	adc	r5, r1
    3500:	f8 01       	movw	r30, r16
    3502:	a0 80       	ld	r10, Z
    3504:	b1 80       	ldd	r11, Z+1	; 0x01
    3506:	36 fe       	sbrs	r3, 6
    3508:	03 c0       	rjmp	.+6      	; 0x3510 <vfprintf+0x146>
    350a:	69 2d       	mov	r22, r9
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <vfprintf+0x14a>
    3510:	6f ef       	ldi	r22, 0xFF	; 255
    3512:	7f ef       	ldi	r23, 0xFF	; 255
    3514:	c5 01       	movw	r24, r10
    3516:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <strnlen>
    351a:	4c 01       	movw	r8, r24
    351c:	82 01       	movw	r16, r4
    351e:	f3 2d       	mov	r31, r3
    3520:	ff 77       	andi	r31, 0x7F	; 127
    3522:	3f 2e       	mov	r3, r31
    3524:	16 c0       	rjmp	.+44     	; 0x3552 <vfprintf+0x188>
    3526:	28 01       	movw	r4, r16
    3528:	22 e0       	ldi	r18, 0x02	; 2
    352a:	42 0e       	add	r4, r18
    352c:	51 1c       	adc	r5, r1
    352e:	f8 01       	movw	r30, r16
    3530:	a0 80       	ld	r10, Z
    3532:	b1 80       	ldd	r11, Z+1	; 0x01
    3534:	36 fe       	sbrs	r3, 6
    3536:	03 c0       	rjmp	.+6      	; 0x353e <vfprintf+0x174>
    3538:	69 2d       	mov	r22, r9
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <vfprintf+0x178>
    353e:	6f ef       	ldi	r22, 0xFF	; 255
    3540:	7f ef       	ldi	r23, 0xFF	; 255
    3542:	c5 01       	movw	r24, r10
    3544:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <strnlen_P>
    3548:	4c 01       	movw	r8, r24
    354a:	f3 2d       	mov	r31, r3
    354c:	f0 68       	ori	r31, 0x80	; 128
    354e:	3f 2e       	mov	r3, r31
    3550:	82 01       	movw	r16, r4
    3552:	33 fc       	sbrc	r3, 3
    3554:	1b c0       	rjmp	.+54     	; 0x358c <vfprintf+0x1c2>
    3556:	82 2d       	mov	r24, r2
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	88 16       	cp	r8, r24
    355c:	99 06       	cpc	r9, r25
    355e:	b0 f4       	brcc	.+44     	; 0x358c <vfprintf+0x1c2>
    3560:	b6 01       	movw	r22, r12
    3562:	80 e2       	ldi	r24, 0x20	; 32
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    356a:	2a 94       	dec	r2
    356c:	f4 cf       	rjmp	.-24     	; 0x3556 <vfprintf+0x18c>
    356e:	f5 01       	movw	r30, r10
    3570:	37 fc       	sbrc	r3, 7
    3572:	85 91       	lpm	r24, Z+
    3574:	37 fe       	sbrs	r3, 7
    3576:	81 91       	ld	r24, Z+
    3578:	5f 01       	movw	r10, r30
    357a:	b6 01       	movw	r22, r12
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    3582:	21 10       	cpse	r2, r1
    3584:	2a 94       	dec	r2
    3586:	21 e0       	ldi	r18, 0x01	; 1
    3588:	82 1a       	sub	r8, r18
    358a:	91 08       	sbc	r9, r1
    358c:	81 14       	cp	r8, r1
    358e:	91 04       	cpc	r9, r1
    3590:	71 f7       	brne	.-36     	; 0x356e <vfprintf+0x1a4>
    3592:	e8 c0       	rjmp	.+464    	; 0x3764 <vfprintf+0x39a>
    3594:	84 36       	cpi	r24, 0x64	; 100
    3596:	11 f0       	breq	.+4      	; 0x359c <vfprintf+0x1d2>
    3598:	89 36       	cpi	r24, 0x69	; 105
    359a:	41 f5       	brne	.+80     	; 0x35ec <vfprintf+0x222>
    359c:	f8 01       	movw	r30, r16
    359e:	37 fe       	sbrs	r3, 7
    35a0:	07 c0       	rjmp	.+14     	; 0x35b0 <vfprintf+0x1e6>
    35a2:	60 81       	ld	r22, Z
    35a4:	71 81       	ldd	r23, Z+1	; 0x01
    35a6:	82 81       	ldd	r24, Z+2	; 0x02
    35a8:	93 81       	ldd	r25, Z+3	; 0x03
    35aa:	0c 5f       	subi	r16, 0xFC	; 252
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	08 c0       	rjmp	.+16     	; 0x35c0 <vfprintf+0x1f6>
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	07 2e       	mov	r0, r23
    35b6:	00 0c       	add	r0, r0
    35b8:	88 0b       	sbc	r24, r24
    35ba:	99 0b       	sbc	r25, r25
    35bc:	0e 5f       	subi	r16, 0xFE	; 254
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	f3 2d       	mov	r31, r3
    35c2:	ff 76       	andi	r31, 0x6F	; 111
    35c4:	3f 2e       	mov	r3, r31
    35c6:	97 ff       	sbrs	r25, 7
    35c8:	09 c0       	rjmp	.+18     	; 0x35dc <vfprintf+0x212>
    35ca:	90 95       	com	r25
    35cc:	80 95       	com	r24
    35ce:	70 95       	com	r23
    35d0:	61 95       	neg	r22
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	8f 4f       	sbci	r24, 0xFF	; 255
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	f0 68       	ori	r31, 0x80	; 128
    35da:	3f 2e       	mov	r3, r31
    35dc:	2a e0       	ldi	r18, 0x0A	; 10
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	a3 01       	movw	r20, r6
    35e2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__ultoa_invert>
    35e6:	88 2e       	mov	r8, r24
    35e8:	86 18       	sub	r8, r6
    35ea:	45 c0       	rjmp	.+138    	; 0x3676 <vfprintf+0x2ac>
    35ec:	85 37       	cpi	r24, 0x75	; 117
    35ee:	31 f4       	brne	.+12     	; 0x35fc <vfprintf+0x232>
    35f0:	23 2d       	mov	r18, r3
    35f2:	2f 7e       	andi	r18, 0xEF	; 239
    35f4:	b2 2e       	mov	r11, r18
    35f6:	2a e0       	ldi	r18, 0x0A	; 10
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	25 c0       	rjmp	.+74     	; 0x3646 <vfprintf+0x27c>
    35fc:	93 2d       	mov	r25, r3
    35fe:	99 7f       	andi	r25, 0xF9	; 249
    3600:	b9 2e       	mov	r11, r25
    3602:	8f 36       	cpi	r24, 0x6F	; 111
    3604:	c1 f0       	breq	.+48     	; 0x3636 <vfprintf+0x26c>
    3606:	18 f4       	brcc	.+6      	; 0x360e <vfprintf+0x244>
    3608:	88 35       	cpi	r24, 0x58	; 88
    360a:	79 f0       	breq	.+30     	; 0x362a <vfprintf+0x260>
    360c:	b5 c0       	rjmp	.+362    	; 0x3778 <vfprintf+0x3ae>
    360e:	80 37       	cpi	r24, 0x70	; 112
    3610:	19 f0       	breq	.+6      	; 0x3618 <vfprintf+0x24e>
    3612:	88 37       	cpi	r24, 0x78	; 120
    3614:	21 f0       	breq	.+8      	; 0x361e <vfprintf+0x254>
    3616:	b0 c0       	rjmp	.+352    	; 0x3778 <vfprintf+0x3ae>
    3618:	e9 2f       	mov	r30, r25
    361a:	e0 61       	ori	r30, 0x10	; 16
    361c:	be 2e       	mov	r11, r30
    361e:	b4 fe       	sbrs	r11, 4
    3620:	0d c0       	rjmp	.+26     	; 0x363c <vfprintf+0x272>
    3622:	fb 2d       	mov	r31, r11
    3624:	f4 60       	ori	r31, 0x04	; 4
    3626:	bf 2e       	mov	r11, r31
    3628:	09 c0       	rjmp	.+18     	; 0x363c <vfprintf+0x272>
    362a:	34 fe       	sbrs	r3, 4
    362c:	0a c0       	rjmp	.+20     	; 0x3642 <vfprintf+0x278>
    362e:	29 2f       	mov	r18, r25
    3630:	26 60       	ori	r18, 0x06	; 6
    3632:	b2 2e       	mov	r11, r18
    3634:	06 c0       	rjmp	.+12     	; 0x3642 <vfprintf+0x278>
    3636:	28 e0       	ldi	r18, 0x08	; 8
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	05 c0       	rjmp	.+10     	; 0x3646 <vfprintf+0x27c>
    363c:	20 e1       	ldi	r18, 0x10	; 16
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <vfprintf+0x27c>
    3642:	20 e1       	ldi	r18, 0x10	; 16
    3644:	32 e0       	ldi	r19, 0x02	; 2
    3646:	f8 01       	movw	r30, r16
    3648:	b7 fe       	sbrs	r11, 7
    364a:	07 c0       	rjmp	.+14     	; 0x365a <vfprintf+0x290>
    364c:	60 81       	ld	r22, Z
    364e:	71 81       	ldd	r23, Z+1	; 0x01
    3650:	82 81       	ldd	r24, Z+2	; 0x02
    3652:	93 81       	ldd	r25, Z+3	; 0x03
    3654:	0c 5f       	subi	r16, 0xFC	; 252
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	06 c0       	rjmp	.+12     	; 0x3666 <vfprintf+0x29c>
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 5f       	subi	r16, 0xFE	; 254
    3664:	1f 4f       	sbci	r17, 0xFF	; 255
    3666:	a3 01       	movw	r20, r6
    3668:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__ultoa_invert>
    366c:	88 2e       	mov	r8, r24
    366e:	86 18       	sub	r8, r6
    3670:	fb 2d       	mov	r31, r11
    3672:	ff 77       	andi	r31, 0x7F	; 127
    3674:	3f 2e       	mov	r3, r31
    3676:	36 fe       	sbrs	r3, 6
    3678:	0d c0       	rjmp	.+26     	; 0x3694 <vfprintf+0x2ca>
    367a:	23 2d       	mov	r18, r3
    367c:	2e 7f       	andi	r18, 0xFE	; 254
    367e:	a2 2e       	mov	r10, r18
    3680:	89 14       	cp	r8, r9
    3682:	58 f4       	brcc	.+22     	; 0x369a <vfprintf+0x2d0>
    3684:	34 fe       	sbrs	r3, 4
    3686:	0b c0       	rjmp	.+22     	; 0x369e <vfprintf+0x2d4>
    3688:	32 fc       	sbrc	r3, 2
    368a:	09 c0       	rjmp	.+18     	; 0x369e <vfprintf+0x2d4>
    368c:	83 2d       	mov	r24, r3
    368e:	8e 7e       	andi	r24, 0xEE	; 238
    3690:	a8 2e       	mov	r10, r24
    3692:	05 c0       	rjmp	.+10     	; 0x369e <vfprintf+0x2d4>
    3694:	b8 2c       	mov	r11, r8
    3696:	a3 2c       	mov	r10, r3
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <vfprintf+0x2d6>
    369a:	b8 2c       	mov	r11, r8
    369c:	01 c0       	rjmp	.+2      	; 0x36a0 <vfprintf+0x2d6>
    369e:	b9 2c       	mov	r11, r9
    36a0:	a4 fe       	sbrs	r10, 4
    36a2:	0f c0       	rjmp	.+30     	; 0x36c2 <vfprintf+0x2f8>
    36a4:	fe 01       	movw	r30, r28
    36a6:	e8 0d       	add	r30, r8
    36a8:	f1 1d       	adc	r31, r1
    36aa:	80 81       	ld	r24, Z
    36ac:	80 33       	cpi	r24, 0x30	; 48
    36ae:	21 f4       	brne	.+8      	; 0x36b8 <vfprintf+0x2ee>
    36b0:	9a 2d       	mov	r25, r10
    36b2:	99 7e       	andi	r25, 0xE9	; 233
    36b4:	a9 2e       	mov	r10, r25
    36b6:	09 c0       	rjmp	.+18     	; 0x36ca <vfprintf+0x300>
    36b8:	a2 fe       	sbrs	r10, 2
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <vfprintf+0x2fe>
    36bc:	b3 94       	inc	r11
    36be:	b3 94       	inc	r11
    36c0:	04 c0       	rjmp	.+8      	; 0x36ca <vfprintf+0x300>
    36c2:	8a 2d       	mov	r24, r10
    36c4:	86 78       	andi	r24, 0x86	; 134
    36c6:	09 f0       	breq	.+2      	; 0x36ca <vfprintf+0x300>
    36c8:	b3 94       	inc	r11
    36ca:	a3 fc       	sbrc	r10, 3
    36cc:	11 c0       	rjmp	.+34     	; 0x36f0 <vfprintf+0x326>
    36ce:	a0 fe       	sbrs	r10, 0
    36d0:	06 c0       	rjmp	.+12     	; 0x36de <vfprintf+0x314>
    36d2:	b2 14       	cp	r11, r2
    36d4:	88 f4       	brcc	.+34     	; 0x36f8 <vfprintf+0x32e>
    36d6:	28 0c       	add	r2, r8
    36d8:	92 2c       	mov	r9, r2
    36da:	9b 18       	sub	r9, r11
    36dc:	0e c0       	rjmp	.+28     	; 0x36fa <vfprintf+0x330>
    36de:	b2 14       	cp	r11, r2
    36e0:	60 f4       	brcc	.+24     	; 0x36fa <vfprintf+0x330>
    36e2:	b6 01       	movw	r22, r12
    36e4:	80 e2       	ldi	r24, 0x20	; 32
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    36ec:	b3 94       	inc	r11
    36ee:	f7 cf       	rjmp	.-18     	; 0x36de <vfprintf+0x314>
    36f0:	b2 14       	cp	r11, r2
    36f2:	18 f4       	brcc	.+6      	; 0x36fa <vfprintf+0x330>
    36f4:	2b 18       	sub	r2, r11
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <vfprintf+0x332>
    36f8:	98 2c       	mov	r9, r8
    36fa:	21 2c       	mov	r2, r1
    36fc:	a4 fe       	sbrs	r10, 4
    36fe:	10 c0       	rjmp	.+32     	; 0x3720 <vfprintf+0x356>
    3700:	b6 01       	movw	r22, r12
    3702:	80 e3       	ldi	r24, 0x30	; 48
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    370a:	a2 fe       	sbrs	r10, 2
    370c:	17 c0       	rjmp	.+46     	; 0x373c <vfprintf+0x372>
    370e:	a1 fc       	sbrc	r10, 1
    3710:	03 c0       	rjmp	.+6      	; 0x3718 <vfprintf+0x34e>
    3712:	88 e7       	ldi	r24, 0x78	; 120
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	02 c0       	rjmp	.+4      	; 0x371c <vfprintf+0x352>
    3718:	88 e5       	ldi	r24, 0x58	; 88
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	b6 01       	movw	r22, r12
    371e:	0c c0       	rjmp	.+24     	; 0x3738 <vfprintf+0x36e>
    3720:	8a 2d       	mov	r24, r10
    3722:	86 78       	andi	r24, 0x86	; 134
    3724:	59 f0       	breq	.+22     	; 0x373c <vfprintf+0x372>
    3726:	a1 fe       	sbrs	r10, 1
    3728:	02 c0       	rjmp	.+4      	; 0x372e <vfprintf+0x364>
    372a:	8b e2       	ldi	r24, 0x2B	; 43
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <vfprintf+0x366>
    372e:	80 e2       	ldi	r24, 0x20	; 32
    3730:	a7 fc       	sbrc	r10, 7
    3732:	8d e2       	ldi	r24, 0x2D	; 45
    3734:	b6 01       	movw	r22, r12
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    373c:	89 14       	cp	r8, r9
    373e:	38 f4       	brcc	.+14     	; 0x374e <vfprintf+0x384>
    3740:	b6 01       	movw	r22, r12
    3742:	80 e3       	ldi	r24, 0x30	; 48
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    374a:	9a 94       	dec	r9
    374c:	f7 cf       	rjmp	.-18     	; 0x373c <vfprintf+0x372>
    374e:	8a 94       	dec	r8
    3750:	f3 01       	movw	r30, r6
    3752:	e8 0d       	add	r30, r8
    3754:	f1 1d       	adc	r31, r1
    3756:	80 81       	ld	r24, Z
    3758:	b6 01       	movw	r22, r12
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    3760:	81 10       	cpse	r8, r1
    3762:	f5 cf       	rjmp	.-22     	; 0x374e <vfprintf+0x384>
    3764:	22 20       	and	r2, r2
    3766:	09 f4       	brne	.+2      	; 0x376a <vfprintf+0x3a0>
    3768:	42 ce       	rjmp	.-892    	; 0x33ee <vfprintf+0x24>
    376a:	b6 01       	movw	r22, r12
    376c:	80 e2       	ldi	r24, 0x20	; 32
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <fputc>
    3774:	2a 94       	dec	r2
    3776:	f6 cf       	rjmp	.-20     	; 0x3764 <vfprintf+0x39a>
    3778:	f6 01       	movw	r30, r12
    377a:	86 81       	ldd	r24, Z+6	; 0x06
    377c:	97 81       	ldd	r25, Z+7	; 0x07
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <vfprintf+0x3ba>
    3780:	8f ef       	ldi	r24, 0xFF	; 255
    3782:	9f ef       	ldi	r25, 0xFF	; 255
    3784:	2b 96       	adiw	r28, 0x0b	; 11
    3786:	e2 e1       	ldi	r30, 0x12	; 18
    3788:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__epilogue_restores__>

0000378c <dtoa_prf>:
    378c:	a9 e0       	ldi	r26, 0x09	; 9
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	ec ec       	ldi	r30, 0xCC	; 204
    3792:	fb e1       	ldi	r31, 0x1B	; 27
    3794:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__prologue_saves__+0xc>
    3798:	6a 01       	movw	r12, r20
    379a:	12 2f       	mov	r17, r18
    379c:	b0 2e       	mov	r11, r16
    379e:	2b e3       	ldi	r18, 0x3B	; 59
    37a0:	20 17       	cp	r18, r16
    37a2:	20 f0       	brcs	.+8      	; 0x37ac <dtoa_prf+0x20>
    37a4:	ff 24       	eor	r15, r15
    37a6:	f3 94       	inc	r15
    37a8:	f0 0e       	add	r15, r16
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <dtoa_prf+0x24>
    37ac:	2c e3       	ldi	r18, 0x3C	; 60
    37ae:	f2 2e       	mov	r15, r18
    37b0:	0f 2d       	mov	r16, r15
    37b2:	27 e0       	ldi	r18, 0x07	; 7
    37b4:	ae 01       	movw	r20, r28
    37b6:	4f 5f       	subi	r20, 0xFF	; 255
    37b8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ba:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__ftoa_engine>
    37be:	bc 01       	movw	r22, r24
    37c0:	49 81       	ldd	r20, Y+1	; 0x01
    37c2:	84 2f       	mov	r24, r20
    37c4:	89 70       	andi	r24, 0x09	; 9
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	31 f0       	breq	.+12     	; 0x37d6 <dtoa_prf+0x4a>
    37ca:	e1 fc       	sbrc	r14, 1
    37cc:	06 c0       	rjmp	.+12     	; 0x37da <dtoa_prf+0x4e>
    37ce:	e0 fe       	sbrs	r14, 0
    37d0:	06 c0       	rjmp	.+12     	; 0x37de <dtoa_prf+0x52>
    37d2:	90 e2       	ldi	r25, 0x20	; 32
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <dtoa_prf+0x54>
    37d6:	9d e2       	ldi	r25, 0x2D	; 45
    37d8:	03 c0       	rjmp	.+6      	; 0x37e0 <dtoa_prf+0x54>
    37da:	9b e2       	ldi	r25, 0x2B	; 43
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <dtoa_prf+0x54>
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	5e 2d       	mov	r21, r14
    37e2:	50 71       	andi	r21, 0x10	; 16
    37e4:	43 ff       	sbrs	r20, 3
    37e6:	3c c0       	rjmp	.+120    	; 0x3860 <dtoa_prf+0xd4>
    37e8:	91 11       	cpse	r25, r1
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <dtoa_prf+0x64>
    37ec:	83 e0       	ldi	r24, 0x03	; 3
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <dtoa_prf+0x66>
    37f0:	84 e0       	ldi	r24, 0x04	; 4
    37f2:	81 17       	cp	r24, r17
    37f4:	18 f4       	brcc	.+6      	; 0x37fc <dtoa_prf+0x70>
    37f6:	21 2f       	mov	r18, r17
    37f8:	28 1b       	sub	r18, r24
    37fa:	01 c0       	rjmp	.+2      	; 0x37fe <dtoa_prf+0x72>
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	51 11       	cpse	r21, r1
    3800:	0b c0       	rjmp	.+22     	; 0x3818 <dtoa_prf+0x8c>
    3802:	f6 01       	movw	r30, r12
    3804:	82 2f       	mov	r24, r18
    3806:	30 e2       	ldi	r19, 0x20	; 32
    3808:	88 23       	and	r24, r24
    380a:	19 f0       	breq	.+6      	; 0x3812 <dtoa_prf+0x86>
    380c:	31 93       	st	Z+, r19
    380e:	81 50       	subi	r24, 0x01	; 1
    3810:	fb cf       	rjmp	.-10     	; 0x3808 <dtoa_prf+0x7c>
    3812:	c2 0e       	add	r12, r18
    3814:	d1 1c       	adc	r13, r1
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	99 23       	and	r25, r25
    381a:	29 f0       	breq	.+10     	; 0x3826 <dtoa_prf+0x9a>
    381c:	d6 01       	movw	r26, r12
    381e:	9c 93       	st	X, r25
    3820:	f6 01       	movw	r30, r12
    3822:	31 96       	adiw	r30, 0x01	; 1
    3824:	6f 01       	movw	r12, r30
    3826:	c6 01       	movw	r24, r12
    3828:	03 96       	adiw	r24, 0x03	; 3
    382a:	e2 fe       	sbrs	r14, 2
    382c:	0a c0       	rjmp	.+20     	; 0x3842 <dtoa_prf+0xb6>
    382e:	3e e4       	ldi	r19, 0x4E	; 78
    3830:	d6 01       	movw	r26, r12
    3832:	3c 93       	st	X, r19
    3834:	41 e4       	ldi	r20, 0x41	; 65
    3836:	11 96       	adiw	r26, 0x01	; 1
    3838:	4c 93       	st	X, r20
    383a:	11 97       	sbiw	r26, 0x01	; 1
    383c:	12 96       	adiw	r26, 0x02	; 2
    383e:	3c 93       	st	X, r19
    3840:	06 c0       	rjmp	.+12     	; 0x384e <dtoa_prf+0xc2>
    3842:	3e e6       	ldi	r19, 0x6E	; 110
    3844:	f6 01       	movw	r30, r12
    3846:	30 83       	st	Z, r19
    3848:	41 e6       	ldi	r20, 0x61	; 97
    384a:	41 83       	std	Z+1, r20	; 0x01
    384c:	32 83       	std	Z+2, r19	; 0x02
    384e:	fc 01       	movw	r30, r24
    3850:	32 2f       	mov	r19, r18
    3852:	40 e2       	ldi	r20, 0x20	; 32
    3854:	33 23       	and	r19, r19
    3856:	09 f4       	brne	.+2      	; 0x385a <dtoa_prf+0xce>
    3858:	42 c0       	rjmp	.+132    	; 0x38de <dtoa_prf+0x152>
    385a:	41 93       	st	Z+, r20
    385c:	31 50       	subi	r19, 0x01	; 1
    385e:	fa cf       	rjmp	.-12     	; 0x3854 <dtoa_prf+0xc8>
    3860:	42 ff       	sbrs	r20, 2
    3862:	44 c0       	rjmp	.+136    	; 0x38ec <dtoa_prf+0x160>
    3864:	91 11       	cpse	r25, r1
    3866:	02 c0       	rjmp	.+4      	; 0x386c <dtoa_prf+0xe0>
    3868:	83 e0       	ldi	r24, 0x03	; 3
    386a:	01 c0       	rjmp	.+2      	; 0x386e <dtoa_prf+0xe2>
    386c:	84 e0       	ldi	r24, 0x04	; 4
    386e:	81 17       	cp	r24, r17
    3870:	18 f4       	brcc	.+6      	; 0x3878 <dtoa_prf+0xec>
    3872:	21 2f       	mov	r18, r17
    3874:	28 1b       	sub	r18, r24
    3876:	01 c0       	rjmp	.+2      	; 0x387a <dtoa_prf+0xee>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	51 11       	cpse	r21, r1
    387c:	0b c0       	rjmp	.+22     	; 0x3894 <dtoa_prf+0x108>
    387e:	f6 01       	movw	r30, r12
    3880:	82 2f       	mov	r24, r18
    3882:	30 e2       	ldi	r19, 0x20	; 32
    3884:	88 23       	and	r24, r24
    3886:	19 f0       	breq	.+6      	; 0x388e <dtoa_prf+0x102>
    3888:	31 93       	st	Z+, r19
    388a:	81 50       	subi	r24, 0x01	; 1
    388c:	fb cf       	rjmp	.-10     	; 0x3884 <dtoa_prf+0xf8>
    388e:	c2 0e       	add	r12, r18
    3890:	d1 1c       	adc	r13, r1
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	99 23       	and	r25, r25
    3896:	29 f0       	breq	.+10     	; 0x38a2 <dtoa_prf+0x116>
    3898:	d6 01       	movw	r26, r12
    389a:	9c 93       	st	X, r25
    389c:	f6 01       	movw	r30, r12
    389e:	31 96       	adiw	r30, 0x01	; 1
    38a0:	6f 01       	movw	r12, r30
    38a2:	c6 01       	movw	r24, r12
    38a4:	03 96       	adiw	r24, 0x03	; 3
    38a6:	e2 fe       	sbrs	r14, 2
    38a8:	0b c0       	rjmp	.+22     	; 0x38c0 <dtoa_prf+0x134>
    38aa:	39 e4       	ldi	r19, 0x49	; 73
    38ac:	d6 01       	movw	r26, r12
    38ae:	3c 93       	st	X, r19
    38b0:	3e e4       	ldi	r19, 0x4E	; 78
    38b2:	11 96       	adiw	r26, 0x01	; 1
    38b4:	3c 93       	st	X, r19
    38b6:	11 97       	sbiw	r26, 0x01	; 1
    38b8:	36 e4       	ldi	r19, 0x46	; 70
    38ba:	12 96       	adiw	r26, 0x02	; 2
    38bc:	3c 93       	st	X, r19
    38be:	07 c0       	rjmp	.+14     	; 0x38ce <dtoa_prf+0x142>
    38c0:	39 e6       	ldi	r19, 0x69	; 105
    38c2:	f6 01       	movw	r30, r12
    38c4:	30 83       	st	Z, r19
    38c6:	3e e6       	ldi	r19, 0x6E	; 110
    38c8:	31 83       	std	Z+1, r19	; 0x01
    38ca:	36 e6       	ldi	r19, 0x66	; 102
    38cc:	32 83       	std	Z+2, r19	; 0x02
    38ce:	fc 01       	movw	r30, r24
    38d0:	32 2f       	mov	r19, r18
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	33 23       	and	r19, r19
    38d6:	19 f0       	breq	.+6      	; 0x38de <dtoa_prf+0x152>
    38d8:	41 93       	st	Z+, r20
    38da:	31 50       	subi	r19, 0x01	; 1
    38dc:	fb cf       	rjmp	.-10     	; 0x38d4 <dtoa_prf+0x148>
    38de:	fc 01       	movw	r30, r24
    38e0:	e2 0f       	add	r30, r18
    38e2:	f1 1d       	adc	r31, r1
    38e4:	10 82       	st	Z, r1
    38e6:	8e ef       	ldi	r24, 0xFE	; 254
    38e8:	9f ef       	ldi	r25, 0xFF	; 255
    38ea:	a6 c0       	rjmp	.+332    	; 0x3a38 <dtoa_prf+0x2ac>
    38ec:	21 e0       	ldi	r18, 0x01	; 1
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	91 11       	cpse	r25, r1
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <dtoa_prf+0x16c>
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	16 16       	cp	r1, r22
    38fa:	17 06       	cpc	r1, r23
    38fc:	1c f4       	brge	.+6      	; 0x3904 <dtoa_prf+0x178>
    38fe:	fb 01       	movw	r30, r22
    3900:	31 96       	adiw	r30, 0x01	; 1
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <dtoa_prf+0x17c>
    3904:	e1 e0       	ldi	r30, 0x01	; 1
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	2e 0f       	add	r18, r30
    390a:	3f 1f       	adc	r19, r31
    390c:	bb 20       	and	r11, r11
    390e:	21 f0       	breq	.+8      	; 0x3918 <dtoa_prf+0x18c>
    3910:	eb 2d       	mov	r30, r11
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	31 96       	adiw	r30, 0x01	; 1
    3916:	02 c0       	rjmp	.+4      	; 0x391c <dtoa_prf+0x190>
    3918:	e0 e0       	ldi	r30, 0x00	; 0
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	2e 0f       	add	r18, r30
    391e:	3f 1f       	adc	r19, r31
    3920:	e1 2f       	mov	r30, r17
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	2e 17       	cp	r18, r30
    3926:	3f 07       	cpc	r19, r31
    3928:	1c f4       	brge	.+6      	; 0x3930 <dtoa_prf+0x1a4>
    392a:	12 1b       	sub	r17, r18
    392c:	21 2f       	mov	r18, r17
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <dtoa_prf+0x1a6>
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	8e 2d       	mov	r24, r14
    3934:	88 71       	andi	r24, 0x18	; 24
    3936:	59 f4       	brne	.+22     	; 0x394e <dtoa_prf+0x1c2>
    3938:	f6 01       	movw	r30, r12
    393a:	82 2f       	mov	r24, r18
    393c:	30 e2       	ldi	r19, 0x20	; 32
    393e:	88 23       	and	r24, r24
    3940:	19 f0       	breq	.+6      	; 0x3948 <dtoa_prf+0x1bc>
    3942:	31 93       	st	Z+, r19
    3944:	81 50       	subi	r24, 0x01	; 1
    3946:	fb cf       	rjmp	.-10     	; 0x393e <dtoa_prf+0x1b2>
    3948:	c2 0e       	add	r12, r18
    394a:	d1 1c       	adc	r13, r1
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	99 23       	and	r25, r25
    3950:	29 f0       	breq	.+10     	; 0x395c <dtoa_prf+0x1d0>
    3952:	d6 01       	movw	r26, r12
    3954:	9c 93       	st	X, r25
    3956:	f6 01       	movw	r30, r12
    3958:	31 96       	adiw	r30, 0x01	; 1
    395a:	6f 01       	movw	r12, r30
    395c:	51 11       	cpse	r21, r1
    395e:	0b c0       	rjmp	.+22     	; 0x3976 <dtoa_prf+0x1ea>
    3960:	f6 01       	movw	r30, r12
    3962:	82 2f       	mov	r24, r18
    3964:	90 e3       	ldi	r25, 0x30	; 48
    3966:	88 23       	and	r24, r24
    3968:	19 f0       	breq	.+6      	; 0x3970 <dtoa_prf+0x1e4>
    396a:	91 93       	st	Z+, r25
    396c:	81 50       	subi	r24, 0x01	; 1
    396e:	fb cf       	rjmp	.-10     	; 0x3966 <dtoa_prf+0x1da>
    3970:	c2 0e       	add	r12, r18
    3972:	d1 1c       	adc	r13, r1
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	0f 2d       	mov	r16, r15
    3978:	06 0f       	add	r16, r22
    397a:	9a 81       	ldd	r25, Y+2	; 0x02
    397c:	34 2f       	mov	r19, r20
    397e:	30 71       	andi	r19, 0x10	; 16
    3980:	44 ff       	sbrs	r20, 4
    3982:	03 c0       	rjmp	.+6      	; 0x398a <dtoa_prf+0x1fe>
    3984:	91 33       	cpi	r25, 0x31	; 49
    3986:	09 f4       	brne	.+2      	; 0x398a <dtoa_prf+0x1fe>
    3988:	01 50       	subi	r16, 0x01	; 1
    398a:	10 16       	cp	r1, r16
    398c:	24 f4       	brge	.+8      	; 0x3996 <dtoa_prf+0x20a>
    398e:	09 30       	cpi	r16, 0x09	; 9
    3990:	18 f0       	brcs	.+6      	; 0x3998 <dtoa_prf+0x20c>
    3992:	08 e0       	ldi	r16, 0x08	; 8
    3994:	01 c0       	rjmp	.+2      	; 0x3998 <dtoa_prf+0x20c>
    3996:	01 e0       	ldi	r16, 0x01	; 1
    3998:	ab 01       	movw	r20, r22
    399a:	77 ff       	sbrs	r23, 7
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <dtoa_prf+0x216>
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	fb 01       	movw	r30, r22
    39a4:	e4 1b       	sub	r30, r20
    39a6:	f5 0b       	sbc	r31, r21
    39a8:	a1 e0       	ldi	r26, 0x01	; 1
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	ac 0f       	add	r26, r28
    39ae:	bd 1f       	adc	r27, r29
    39b0:	ea 0f       	add	r30, r26
    39b2:	fb 1f       	adc	r31, r27
    39b4:	8e e2       	ldi	r24, 0x2E	; 46
    39b6:	a8 2e       	mov	r10, r24
    39b8:	4b 01       	movw	r8, r22
    39ba:	80 1a       	sub	r8, r16
    39bc:	91 08       	sbc	r9, r1
    39be:	0b 2d       	mov	r16, r11
    39c0:	10 e0       	ldi	r17, 0x00	; 0
    39c2:	11 95       	neg	r17
    39c4:	01 95       	neg	r16
    39c6:	11 09       	sbc	r17, r1
    39c8:	4f 3f       	cpi	r20, 0xFF	; 255
    39ca:	bf ef       	ldi	r27, 0xFF	; 255
    39cc:	5b 07       	cpc	r21, r27
    39ce:	21 f4       	brne	.+8      	; 0x39d8 <dtoa_prf+0x24c>
    39d0:	d6 01       	movw	r26, r12
    39d2:	ac 92       	st	X, r10
    39d4:	11 96       	adiw	r26, 0x01	; 1
    39d6:	6d 01       	movw	r12, r26
    39d8:	64 17       	cp	r22, r20
    39da:	75 07       	cpc	r23, r21
    39dc:	2c f0       	brlt	.+10     	; 0x39e8 <dtoa_prf+0x25c>
    39de:	84 16       	cp	r8, r20
    39e0:	95 06       	cpc	r9, r21
    39e2:	14 f4       	brge	.+4      	; 0x39e8 <dtoa_prf+0x25c>
    39e4:	81 81       	ldd	r24, Z+1	; 0x01
    39e6:	01 c0       	rjmp	.+2      	; 0x39ea <dtoa_prf+0x25e>
    39e8:	80 e3       	ldi	r24, 0x30	; 48
    39ea:	41 50       	subi	r20, 0x01	; 1
    39ec:	51 09       	sbc	r21, r1
    39ee:	31 96       	adiw	r30, 0x01	; 1
    39f0:	d6 01       	movw	r26, r12
    39f2:	11 96       	adiw	r26, 0x01	; 1
    39f4:	7d 01       	movw	r14, r26
    39f6:	40 17       	cp	r20, r16
    39f8:	51 07       	cpc	r21, r17
    39fa:	24 f0       	brlt	.+8      	; 0x3a04 <dtoa_prf+0x278>
    39fc:	d6 01       	movw	r26, r12
    39fe:	8c 93       	st	X, r24
    3a00:	67 01       	movw	r12, r14
    3a02:	e2 cf       	rjmp	.-60     	; 0x39c8 <dtoa_prf+0x23c>
    3a04:	64 17       	cp	r22, r20
    3a06:	75 07       	cpc	r23, r21
    3a08:	39 f4       	brne	.+14     	; 0x3a18 <dtoa_prf+0x28c>
    3a0a:	96 33       	cpi	r25, 0x36	; 54
    3a0c:	20 f4       	brcc	.+8      	; 0x3a16 <dtoa_prf+0x28a>
    3a0e:	95 33       	cpi	r25, 0x35	; 53
    3a10:	19 f4       	brne	.+6      	; 0x3a18 <dtoa_prf+0x28c>
    3a12:	31 11       	cpse	r19, r1
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <dtoa_prf+0x28c>
    3a16:	81 e3       	ldi	r24, 0x31	; 49
    3a18:	f6 01       	movw	r30, r12
    3a1a:	80 83       	st	Z, r24
    3a1c:	f7 01       	movw	r30, r14
    3a1e:	82 2f       	mov	r24, r18
    3a20:	90 e2       	ldi	r25, 0x20	; 32
    3a22:	88 23       	and	r24, r24
    3a24:	19 f0       	breq	.+6      	; 0x3a2c <dtoa_prf+0x2a0>
    3a26:	91 93       	st	Z+, r25
    3a28:	81 50       	subi	r24, 0x01	; 1
    3a2a:	fb cf       	rjmp	.-10     	; 0x3a22 <dtoa_prf+0x296>
    3a2c:	f7 01       	movw	r30, r14
    3a2e:	e2 0f       	add	r30, r18
    3a30:	f1 1d       	adc	r31, r1
    3a32:	10 82       	st	Z, r1
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	29 96       	adiw	r28, 0x09	; 9
    3a3a:	ec e0       	ldi	r30, 0x0C	; 12
    3a3c:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__epilogue_restores__+0xc>

00003a40 <__ftoa_engine>:
    3a40:	28 30       	cpi	r18, 0x08	; 8
    3a42:	08 f0       	brcs	.+2      	; 0x3a46 <__ftoa_engine+0x6>
    3a44:	27 e0       	ldi	r18, 0x07	; 7
    3a46:	33 27       	eor	r19, r19
    3a48:	da 01       	movw	r26, r20
    3a4a:	99 0f       	add	r25, r25
    3a4c:	31 1d       	adc	r19, r1
    3a4e:	87 fd       	sbrc	r24, 7
    3a50:	91 60       	ori	r25, 0x01	; 1
    3a52:	00 96       	adiw	r24, 0x00	; 0
    3a54:	61 05       	cpc	r22, r1
    3a56:	71 05       	cpc	r23, r1
    3a58:	39 f4       	brne	.+14     	; 0x3a68 <__ftoa_engine+0x28>
    3a5a:	32 60       	ori	r19, 0x02	; 2
    3a5c:	2e 5f       	subi	r18, 0xFE	; 254
    3a5e:	3d 93       	st	X+, r19
    3a60:	30 e3       	ldi	r19, 0x30	; 48
    3a62:	2a 95       	dec	r18
    3a64:	e1 f7       	brne	.-8      	; 0x3a5e <__ftoa_engine+0x1e>
    3a66:	08 95       	ret
    3a68:	9f 3f       	cpi	r25, 0xFF	; 255
    3a6a:	30 f0       	brcs	.+12     	; 0x3a78 <__ftoa_engine+0x38>
    3a6c:	80 38       	cpi	r24, 0x80	; 128
    3a6e:	71 05       	cpc	r23, r1
    3a70:	61 05       	cpc	r22, r1
    3a72:	09 f0       	breq	.+2      	; 0x3a76 <__ftoa_engine+0x36>
    3a74:	3c 5f       	subi	r19, 0xFC	; 252
    3a76:	3c 5f       	subi	r19, 0xFC	; 252
    3a78:	3d 93       	st	X+, r19
    3a7a:	91 30       	cpi	r25, 0x01	; 1
    3a7c:	08 f0       	brcs	.+2      	; 0x3a80 <__ftoa_engine+0x40>
    3a7e:	80 68       	ori	r24, 0x80	; 128
    3a80:	91 1d       	adc	r25, r1
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	1f 93       	push	r17
    3a88:	0f 93       	push	r16
    3a8a:	ff 92       	push	r15
    3a8c:	ef 92       	push	r14
    3a8e:	19 2f       	mov	r17, r25
    3a90:	98 7f       	andi	r25, 0xF8	; 248
    3a92:	96 95       	lsr	r25
    3a94:	e9 2f       	mov	r30, r25
    3a96:	96 95       	lsr	r25
    3a98:	96 95       	lsr	r25
    3a9a:	e9 0f       	add	r30, r25
    3a9c:	ff 27       	eor	r31, r31
    3a9e:	ee 53       	subi	r30, 0x3E	; 62
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	99 27       	eor	r25, r25
    3aa4:	33 27       	eor	r19, r19
    3aa6:	ee 24       	eor	r14, r14
    3aa8:	ff 24       	eor	r15, r15
    3aaa:	a7 01       	movw	r20, r14
    3aac:	e7 01       	movw	r28, r14
    3aae:	05 90       	lpm	r0, Z+
    3ab0:	08 94       	sec
    3ab2:	07 94       	ror	r0
    3ab4:	28 f4       	brcc	.+10     	; 0x3ac0 <__ftoa_engine+0x80>
    3ab6:	36 0f       	add	r19, r22
    3ab8:	e7 1e       	adc	r14, r23
    3aba:	f8 1e       	adc	r15, r24
    3abc:	49 1f       	adc	r20, r25
    3abe:	51 1d       	adc	r21, r1
    3ac0:	66 0f       	add	r22, r22
    3ac2:	77 1f       	adc	r23, r23
    3ac4:	88 1f       	adc	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	06 94       	lsr	r0
    3aca:	a1 f7       	brne	.-24     	; 0x3ab4 <__ftoa_engine+0x74>
    3acc:	05 90       	lpm	r0, Z+
    3ace:	07 94       	ror	r0
    3ad0:	28 f4       	brcc	.+10     	; 0x3adc <__ftoa_engine+0x9c>
    3ad2:	e7 0e       	add	r14, r23
    3ad4:	f8 1e       	adc	r15, r24
    3ad6:	49 1f       	adc	r20, r25
    3ad8:	56 1f       	adc	r21, r22
    3ada:	c1 1d       	adc	r28, r1
    3adc:	77 0f       	add	r23, r23
    3ade:	88 1f       	adc	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	66 1f       	adc	r22, r22
    3ae4:	06 94       	lsr	r0
    3ae6:	a1 f7       	brne	.-24     	; 0x3ad0 <__ftoa_engine+0x90>
    3ae8:	05 90       	lpm	r0, Z+
    3aea:	07 94       	ror	r0
    3aec:	28 f4       	brcc	.+10     	; 0x3af8 <__ftoa_engine+0xb8>
    3aee:	f8 0e       	add	r15, r24
    3af0:	49 1f       	adc	r20, r25
    3af2:	56 1f       	adc	r21, r22
    3af4:	c7 1f       	adc	r28, r23
    3af6:	d1 1d       	adc	r29, r1
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	66 1f       	adc	r22, r22
    3afe:	77 1f       	adc	r23, r23
    3b00:	06 94       	lsr	r0
    3b02:	a1 f7       	brne	.-24     	; 0x3aec <__ftoa_engine+0xac>
    3b04:	05 90       	lpm	r0, Z+
    3b06:	07 94       	ror	r0
    3b08:	20 f4       	brcc	.+8      	; 0x3b12 <__ftoa_engine+0xd2>
    3b0a:	49 0f       	add	r20, r25
    3b0c:	56 1f       	adc	r21, r22
    3b0e:	c7 1f       	adc	r28, r23
    3b10:	d8 1f       	adc	r29, r24
    3b12:	99 0f       	add	r25, r25
    3b14:	66 1f       	adc	r22, r22
    3b16:	77 1f       	adc	r23, r23
    3b18:	88 1f       	adc	r24, r24
    3b1a:	06 94       	lsr	r0
    3b1c:	a9 f7       	brne	.-22     	; 0x3b08 <__ftoa_engine+0xc8>
    3b1e:	84 91       	lpm	r24, Z
    3b20:	10 95       	com	r17
    3b22:	17 70       	andi	r17, 0x07	; 7
    3b24:	41 f0       	breq	.+16     	; 0x3b36 <__ftoa_engine+0xf6>
    3b26:	d6 95       	lsr	r29
    3b28:	c7 95       	ror	r28
    3b2a:	57 95       	ror	r21
    3b2c:	47 95       	ror	r20
    3b2e:	f7 94       	ror	r15
    3b30:	e7 94       	ror	r14
    3b32:	1a 95       	dec	r17
    3b34:	c1 f7       	brne	.-16     	; 0x3b26 <__ftoa_engine+0xe6>
    3b36:	e8 e6       	ldi	r30, 0x68	; 104
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	68 94       	set
    3b3c:	15 90       	lpm	r1, Z+
    3b3e:	15 91       	lpm	r17, Z+
    3b40:	35 91       	lpm	r19, Z+
    3b42:	65 91       	lpm	r22, Z+
    3b44:	95 91       	lpm	r25, Z+
    3b46:	05 90       	lpm	r0, Z+
    3b48:	7f e2       	ldi	r23, 0x2F	; 47
    3b4a:	73 95       	inc	r23
    3b4c:	e1 18       	sub	r14, r1
    3b4e:	f1 0a       	sbc	r15, r17
    3b50:	43 0b       	sbc	r20, r19
    3b52:	56 0b       	sbc	r21, r22
    3b54:	c9 0b       	sbc	r28, r25
    3b56:	d0 09       	sbc	r29, r0
    3b58:	c0 f7       	brcc	.-16     	; 0x3b4a <__ftoa_engine+0x10a>
    3b5a:	e1 0c       	add	r14, r1
    3b5c:	f1 1e       	adc	r15, r17
    3b5e:	43 1f       	adc	r20, r19
    3b60:	56 1f       	adc	r21, r22
    3b62:	c9 1f       	adc	r28, r25
    3b64:	d0 1d       	adc	r29, r0
    3b66:	7e f4       	brtc	.+30     	; 0x3b86 <__ftoa_engine+0x146>
    3b68:	70 33       	cpi	r23, 0x30	; 48
    3b6a:	11 f4       	brne	.+4      	; 0x3b70 <__ftoa_engine+0x130>
    3b6c:	8a 95       	dec	r24
    3b6e:	e6 cf       	rjmp	.-52     	; 0x3b3c <__ftoa_engine+0xfc>
    3b70:	e8 94       	clt
    3b72:	01 50       	subi	r16, 0x01	; 1
    3b74:	30 f0       	brcs	.+12     	; 0x3b82 <__ftoa_engine+0x142>
    3b76:	08 0f       	add	r16, r24
    3b78:	0a f4       	brpl	.+2      	; 0x3b7c <__ftoa_engine+0x13c>
    3b7a:	00 27       	eor	r16, r16
    3b7c:	02 17       	cp	r16, r18
    3b7e:	08 f4       	brcc	.+2      	; 0x3b82 <__ftoa_engine+0x142>
    3b80:	20 2f       	mov	r18, r16
    3b82:	23 95       	inc	r18
    3b84:	02 2f       	mov	r16, r18
    3b86:	7a 33       	cpi	r23, 0x3A	; 58
    3b88:	28 f0       	brcs	.+10     	; 0x3b94 <__ftoa_engine+0x154>
    3b8a:	79 e3       	ldi	r23, 0x39	; 57
    3b8c:	7d 93       	st	X+, r23
    3b8e:	2a 95       	dec	r18
    3b90:	e9 f7       	brne	.-6      	; 0x3b8c <__ftoa_engine+0x14c>
    3b92:	10 c0       	rjmp	.+32     	; 0x3bb4 <__ftoa_engine+0x174>
    3b94:	7d 93       	st	X+, r23
    3b96:	2a 95       	dec	r18
    3b98:	89 f6       	brne	.-94     	; 0x3b3c <__ftoa_engine+0xfc>
    3b9a:	06 94       	lsr	r0
    3b9c:	97 95       	ror	r25
    3b9e:	67 95       	ror	r22
    3ba0:	37 95       	ror	r19
    3ba2:	17 95       	ror	r17
    3ba4:	17 94       	ror	r1
    3ba6:	e1 18       	sub	r14, r1
    3ba8:	f1 0a       	sbc	r15, r17
    3baa:	43 0b       	sbc	r20, r19
    3bac:	56 0b       	sbc	r21, r22
    3bae:	c9 0b       	sbc	r28, r25
    3bb0:	d0 09       	sbc	r29, r0
    3bb2:	98 f0       	brcs	.+38     	; 0x3bda <__ftoa_engine+0x19a>
    3bb4:	23 95       	inc	r18
    3bb6:	7e 91       	ld	r23, -X
    3bb8:	73 95       	inc	r23
    3bba:	7a 33       	cpi	r23, 0x3A	; 58
    3bbc:	08 f0       	brcs	.+2      	; 0x3bc0 <__ftoa_engine+0x180>
    3bbe:	70 e3       	ldi	r23, 0x30	; 48
    3bc0:	7c 93       	st	X, r23
    3bc2:	20 13       	cpse	r18, r16
    3bc4:	b8 f7       	brcc	.-18     	; 0x3bb4 <__ftoa_engine+0x174>
    3bc6:	7e 91       	ld	r23, -X
    3bc8:	70 61       	ori	r23, 0x10	; 16
    3bca:	7d 93       	st	X+, r23
    3bcc:	30 f0       	brcs	.+12     	; 0x3bda <__ftoa_engine+0x19a>
    3bce:	83 95       	inc	r24
    3bd0:	71 e3       	ldi	r23, 0x31	; 49
    3bd2:	7d 93       	st	X+, r23
    3bd4:	70 e3       	ldi	r23, 0x30	; 48
    3bd6:	2a 95       	dec	r18
    3bd8:	e1 f7       	brne	.-8      	; 0x3bd2 <__ftoa_engine+0x192>
    3bda:	11 24       	eor	r1, r1
    3bdc:	ef 90       	pop	r14
    3bde:	ff 90       	pop	r15
    3be0:	0f 91       	pop	r16
    3be2:	1f 91       	pop	r17
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	99 27       	eor	r25, r25
    3bea:	87 fd       	sbrc	r24, 7
    3bec:	90 95       	com	r25
    3bee:	08 95       	ret

00003bf0 <strnlen_P>:
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	05 90       	lpm	r0, Z+
    3bf4:	61 50       	subi	r22, 0x01	; 1
    3bf6:	70 40       	sbci	r23, 0x00	; 0
    3bf8:	01 10       	cpse	r0, r1
    3bfa:	d8 f7       	brcc	.-10     	; 0x3bf2 <strnlen_P+0x2>
    3bfc:	80 95       	com	r24
    3bfe:	90 95       	com	r25
    3c00:	8e 0f       	add	r24, r30
    3c02:	9f 1f       	adc	r25, r31
    3c04:	08 95       	ret

00003c06 <strnlen>:
    3c06:	fc 01       	movw	r30, r24
    3c08:	61 50       	subi	r22, 0x01	; 1
    3c0a:	70 40       	sbci	r23, 0x00	; 0
    3c0c:	01 90       	ld	r0, Z+
    3c0e:	01 10       	cpse	r0, r1
    3c10:	d8 f7       	brcc	.-10     	; 0x3c08 <strnlen+0x2>
    3c12:	80 95       	com	r24
    3c14:	90 95       	com	r25
    3c16:	8e 0f       	add	r24, r30
    3c18:	9f 1f       	adc	r25, r31
    3c1a:	08 95       	ret

00003c1c <strrev>:
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	fc 01       	movw	r30, r24
    3c20:	67 2f       	mov	r22, r23
    3c22:	71 91       	ld	r23, Z+
    3c24:	77 23       	and	r23, r23
    3c26:	e1 f7       	brne	.-8      	; 0x3c20 <strrev+0x4>
    3c28:	32 97       	sbiw	r30, 0x02	; 2
    3c2a:	04 c0       	rjmp	.+8      	; 0x3c34 <strrev+0x18>
    3c2c:	7c 91       	ld	r23, X
    3c2e:	6d 93       	st	X+, r22
    3c30:	70 83       	st	Z, r23
    3c32:	62 91       	ld	r22, -Z
    3c34:	ae 17       	cp	r26, r30
    3c36:	bf 07       	cpc	r27, r31
    3c38:	c8 f3       	brcs	.-14     	; 0x3c2c <strrev+0x10>
    3c3a:	08 95       	ret

00003c3c <fputc>:
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	fb 01       	movw	r30, r22
    3c46:	23 81       	ldd	r18, Z+3	; 0x03
    3c48:	21 fd       	sbrc	r18, 1
    3c4a:	03 c0       	rjmp	.+6      	; 0x3c52 <fputc+0x16>
    3c4c:	8f ef       	ldi	r24, 0xFF	; 255
    3c4e:	9f ef       	ldi	r25, 0xFF	; 255
    3c50:	2c c0       	rjmp	.+88     	; 0x3caa <fputc+0x6e>
    3c52:	22 ff       	sbrs	r18, 2
    3c54:	16 c0       	rjmp	.+44     	; 0x3c82 <fputc+0x46>
    3c56:	46 81       	ldd	r20, Z+6	; 0x06
    3c58:	57 81       	ldd	r21, Z+7	; 0x07
    3c5a:	24 81       	ldd	r18, Z+4	; 0x04
    3c5c:	35 81       	ldd	r19, Z+5	; 0x05
    3c5e:	42 17       	cp	r20, r18
    3c60:	53 07       	cpc	r21, r19
    3c62:	44 f4       	brge	.+16     	; 0x3c74 <fputc+0x38>
    3c64:	a0 81       	ld	r26, Z
    3c66:	b1 81       	ldd	r27, Z+1	; 0x01
    3c68:	9d 01       	movw	r18, r26
    3c6a:	2f 5f       	subi	r18, 0xFF	; 255
    3c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6e:	31 83       	std	Z+1, r19	; 0x01
    3c70:	20 83       	st	Z, r18
    3c72:	8c 93       	st	X, r24
    3c74:	26 81       	ldd	r18, Z+6	; 0x06
    3c76:	37 81       	ldd	r19, Z+7	; 0x07
    3c78:	2f 5f       	subi	r18, 0xFF	; 255
    3c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7c:	37 83       	std	Z+7, r19	; 0x07
    3c7e:	26 83       	std	Z+6, r18	; 0x06
    3c80:	14 c0       	rjmp	.+40     	; 0x3caa <fputc+0x6e>
    3c82:	8b 01       	movw	r16, r22
    3c84:	ec 01       	movw	r28, r24
    3c86:	fb 01       	movw	r30, r22
    3c88:	00 84       	ldd	r0, Z+8	; 0x08
    3c8a:	f1 85       	ldd	r31, Z+9	; 0x09
    3c8c:	e0 2d       	mov	r30, r0
    3c8e:	09 95       	icall
    3c90:	89 2b       	or	r24, r25
    3c92:	e1 f6       	brne	.-72     	; 0x3c4c <fputc+0x10>
    3c94:	d8 01       	movw	r26, r16
    3c96:	16 96       	adiw	r26, 0x06	; 6
    3c98:	8d 91       	ld	r24, X+
    3c9a:	9c 91       	ld	r25, X
    3c9c:	17 97       	sbiw	r26, 0x07	; 7
    3c9e:	01 96       	adiw	r24, 0x01	; 1
    3ca0:	17 96       	adiw	r26, 0x07	; 7
    3ca2:	9c 93       	st	X, r25
    3ca4:	8e 93       	st	-X, r24
    3ca6:	16 97       	sbiw	r26, 0x06	; 6
    3ca8:	ce 01       	movw	r24, r28
    3caa:	df 91       	pop	r29
    3cac:	cf 91       	pop	r28
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	08 95       	ret

00003cb4 <__ultoa_invert>:
    3cb4:	fa 01       	movw	r30, r20
    3cb6:	aa 27       	eor	r26, r26
    3cb8:	28 30       	cpi	r18, 0x08	; 8
    3cba:	51 f1       	breq	.+84     	; 0x3d10 <__ultoa_invert+0x5c>
    3cbc:	20 31       	cpi	r18, 0x10	; 16
    3cbe:	81 f1       	breq	.+96     	; 0x3d20 <__ultoa_invert+0x6c>
    3cc0:	e8 94       	clt
    3cc2:	6f 93       	push	r22
    3cc4:	6e 7f       	andi	r22, 0xFE	; 254
    3cc6:	6e 5f       	subi	r22, 0xFE	; 254
    3cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cca:	8f 4f       	sbci	r24, 0xFF	; 255
    3ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cce:	af 4f       	sbci	r26, 0xFF	; 255
    3cd0:	b1 e0       	ldi	r27, 0x01	; 1
    3cd2:	3e d0       	rcall	.+124    	; 0x3d50 <__ultoa_invert+0x9c>
    3cd4:	b4 e0       	ldi	r27, 0x04	; 4
    3cd6:	3c d0       	rcall	.+120    	; 0x3d50 <__ultoa_invert+0x9c>
    3cd8:	67 0f       	add	r22, r23
    3cda:	78 1f       	adc	r23, r24
    3cdc:	89 1f       	adc	r24, r25
    3cde:	9a 1f       	adc	r25, r26
    3ce0:	a1 1d       	adc	r26, r1
    3ce2:	68 0f       	add	r22, r24
    3ce4:	79 1f       	adc	r23, r25
    3ce6:	8a 1f       	adc	r24, r26
    3ce8:	91 1d       	adc	r25, r1
    3cea:	a1 1d       	adc	r26, r1
    3cec:	6a 0f       	add	r22, r26
    3cee:	71 1d       	adc	r23, r1
    3cf0:	81 1d       	adc	r24, r1
    3cf2:	91 1d       	adc	r25, r1
    3cf4:	a1 1d       	adc	r26, r1
    3cf6:	20 d0       	rcall	.+64     	; 0x3d38 <__ultoa_invert+0x84>
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <__ultoa_invert+0x48>
    3cfa:	68 94       	set
    3cfc:	3f 91       	pop	r19
    3cfe:	2a e0       	ldi	r18, 0x0A	; 10
    3d00:	26 9f       	mul	r18, r22
    3d02:	11 24       	eor	r1, r1
    3d04:	30 19       	sub	r19, r0
    3d06:	30 5d       	subi	r19, 0xD0	; 208
    3d08:	31 93       	st	Z+, r19
    3d0a:	de f6       	brtc	.-74     	; 0x3cc2 <__ultoa_invert+0xe>
    3d0c:	cf 01       	movw	r24, r30
    3d0e:	08 95       	ret
    3d10:	46 2f       	mov	r20, r22
    3d12:	47 70       	andi	r20, 0x07	; 7
    3d14:	40 5d       	subi	r20, 0xD0	; 208
    3d16:	41 93       	st	Z+, r20
    3d18:	b3 e0       	ldi	r27, 0x03	; 3
    3d1a:	0f d0       	rcall	.+30     	; 0x3d3a <__ultoa_invert+0x86>
    3d1c:	c9 f7       	brne	.-14     	; 0x3d10 <__ultoa_invert+0x5c>
    3d1e:	f6 cf       	rjmp	.-20     	; 0x3d0c <__ultoa_invert+0x58>
    3d20:	46 2f       	mov	r20, r22
    3d22:	4f 70       	andi	r20, 0x0F	; 15
    3d24:	40 5d       	subi	r20, 0xD0	; 208
    3d26:	4a 33       	cpi	r20, 0x3A	; 58
    3d28:	18 f0       	brcs	.+6      	; 0x3d30 <__ultoa_invert+0x7c>
    3d2a:	49 5d       	subi	r20, 0xD9	; 217
    3d2c:	31 fd       	sbrc	r19, 1
    3d2e:	40 52       	subi	r20, 0x20	; 32
    3d30:	41 93       	st	Z+, r20
    3d32:	02 d0       	rcall	.+4      	; 0x3d38 <__ultoa_invert+0x84>
    3d34:	a9 f7       	brne	.-22     	; 0x3d20 <__ultoa_invert+0x6c>
    3d36:	ea cf       	rjmp	.-44     	; 0x3d0c <__ultoa_invert+0x58>
    3d38:	b4 e0       	ldi	r27, 0x04	; 4
    3d3a:	a6 95       	lsr	r26
    3d3c:	97 95       	ror	r25
    3d3e:	87 95       	ror	r24
    3d40:	77 95       	ror	r23
    3d42:	67 95       	ror	r22
    3d44:	ba 95       	dec	r27
    3d46:	c9 f7       	brne	.-14     	; 0x3d3a <__ultoa_invert+0x86>
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	61 05       	cpc	r22, r1
    3d4c:	71 05       	cpc	r23, r1
    3d4e:	08 95       	ret
    3d50:	9b 01       	movw	r18, r22
    3d52:	ac 01       	movw	r20, r24
    3d54:	0a 2e       	mov	r0, r26
    3d56:	06 94       	lsr	r0
    3d58:	57 95       	ror	r21
    3d5a:	47 95       	ror	r20
    3d5c:	37 95       	ror	r19
    3d5e:	27 95       	ror	r18
    3d60:	ba 95       	dec	r27
    3d62:	c9 f7       	brne	.-14     	; 0x3d56 <__ultoa_invert+0xa2>
    3d64:	62 0f       	add	r22, r18
    3d66:	73 1f       	adc	r23, r19
    3d68:	84 1f       	adc	r24, r20
    3d6a:	95 1f       	adc	r25, r21
    3d6c:	a0 1d       	adc	r26, r0
    3d6e:	08 95       	ret

00003d70 <__prologue_saves__>:
    3d70:	2f 92       	push	r2
    3d72:	3f 92       	push	r3
    3d74:	4f 92       	push	r4
    3d76:	5f 92       	push	r5
    3d78:	6f 92       	push	r6
    3d7a:	7f 92       	push	r7
    3d7c:	8f 92       	push	r8
    3d7e:	9f 92       	push	r9
    3d80:	af 92       	push	r10
    3d82:	bf 92       	push	r11
    3d84:	cf 92       	push	r12
    3d86:	df 92       	push	r13
    3d88:	ef 92       	push	r14
    3d8a:	ff 92       	push	r15
    3d8c:	0f 93       	push	r16
    3d8e:	1f 93       	push	r17
    3d90:	cf 93       	push	r28
    3d92:	df 93       	push	r29
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	ca 1b       	sub	r28, r26
    3d9a:	db 0b       	sbc	r29, r27
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	09 94       	ijmp

00003da8 <__epilogue_restores__>:
    3da8:	2a 88       	ldd	r2, Y+18	; 0x12
    3daa:	39 88       	ldd	r3, Y+17	; 0x11
    3dac:	48 88       	ldd	r4, Y+16	; 0x10
    3dae:	5f 84       	ldd	r5, Y+15	; 0x0f
    3db0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3db2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3db4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3db6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3db8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dba:	b9 84       	ldd	r11, Y+9	; 0x09
    3dbc:	c8 84       	ldd	r12, Y+8	; 0x08
    3dbe:	df 80       	ldd	r13, Y+7	; 0x07
    3dc0:	ee 80       	ldd	r14, Y+6	; 0x06
    3dc2:	fd 80       	ldd	r15, Y+5	; 0x05
    3dc4:	0c 81       	ldd	r16, Y+4	; 0x04
    3dc6:	1b 81       	ldd	r17, Y+3	; 0x03
    3dc8:	aa 81       	ldd	r26, Y+2	; 0x02
    3dca:	b9 81       	ldd	r27, Y+1	; 0x01
    3dcc:	ce 0f       	add	r28, r30
    3dce:	d1 1d       	adc	r29, r1
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	cd bf       	out	0x3d, r28	; 61
    3dda:	ed 01       	movw	r28, r26
    3ddc:	08 95       	ret

00003dde <__do_global_dtors>:
    3dde:	10 e0       	ldi	r17, 0x00	; 0
    3de0:	cc ed       	ldi	r28, 0xDC	; 220
    3de2:	d0 e0       	ldi	r29, 0x00	; 0
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <__do_global_dtors+0x10>
    3de6:	fe 01       	movw	r30, r28
    3de8:	0e 94 76 17 	call	0x2eec	; 0x2eec <__tablejump2__>
    3dec:	21 96       	adiw	r28, 0x01	; 1
    3dee:	cd 3d       	cpi	r28, 0xDD	; 221
    3df0:	d1 07       	cpc	r29, r17
    3df2:	c9 f7       	brne	.-14     	; 0x3de6 <__do_global_dtors+0x8>
    3df4:	f8 94       	cli

00003df6 <__stop_program>:
    3df6:	ff cf       	rjmp	.-2      	; 0x3df6 <__stop_program>
